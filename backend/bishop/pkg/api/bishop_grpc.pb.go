// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package bishop

import (
	grpc "google.golang.org/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// BishopClient is the client API for Bishop service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BishopClient interface {
}

type bishopClient struct {
	cc grpc.ClientConnInterface
}

func NewBishopClient(cc grpc.ClientConnInterface) BishopClient {
	return &bishopClient{cc}
}

// BishopServer is the server API for Bishop service.
// All implementations must embed UnimplementedBishopServer
// for forward compatibility
type BishopServer interface {
	mustEmbedUnimplementedBishopServer()
}

// UnimplementedBishopServer must be embedded to have forward compatible implementations.
type UnimplementedBishopServer struct {
}

func (*UnimplementedBishopServer) mustEmbedUnimplementedBishopServer() {}

func RegisterBishopServer(s *grpc.Server, srv BishopServer) {
	s.RegisterService(&_Bishop_serviceDesc, srv)
}

var _Bishop_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bishop.Bishop",
	HandlerType: (*BishopServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "bishop/api/bishop.proto",
}
