// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.12.4
// source: stark/api/code_stark.proto

package stark

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Code int32

const (
	// Google GRPC codes
	// import "google.golang.org/grpc/codes"
	Code_OK                                 Code = 0
	Code_CANCELLED                          Code = 1
	Code_UNKNOWN                            Code = 2
	Code_INVALID_ARGUMENT                   Code = 3
	Code_DEADLINE_EXCEEDED                  Code = 4
	Code_NOT_FOUND                          Code = 5
	Code_ALREADY_EXISTS                     Code = 6
	Code_PERMISSION_DENIED                  Code = 7
	Code_RESOURCE_EXHAUSTED                 Code = 8
	Code_FAILED_PRECONDITION                Code = 9
	Code_ABORTED                            Code = 10
	Code_OUT_OF_RANGE                       Code = 11
	Code_UNIMPLEMENTED                      Code = 12
	Code_INTERNAL                           Code = 13
	Code_UNAVAILABLE                        Code = 14
	Code_DATA_LOSS                          Code = 15
	Code_UNAUTHENTICATED                    Code = 16
	Code_CLOSE_GOING_AWAY                   Code = 1001
	Code_BEGIN                              Code = 30000
	Code_BANK_BEGIN                         Code = 30100
	Code_BANK_NOT_FOUND_MERCHANT            Code = 30101
	Code_BANK_EXISTED                       Code = 30102
	Code_BANK_INVALID                       Code = 30103
	Code_BANK_EMPTY                         Code = 30104
	Code_BANK_ACCOUNT_EXISTED               Code = 30105
	Code_BANK_ACCOUNT_ID_EXISTED            Code = 30106
	Code_BANK_ACCOUNT_NUMBER_INVALID        Code = 30107
	Code_BANK_ACCOUNT_NAME_INVALID          Code = 30108
	Code_BANK_ACCOUNT_BALANCE_INVALID       Code = 30109
	Code_BANK_END                           Code = 30199
	Code_EWALLET_BEGIN                      Code = 30200
	Code_EWALLET_EXISTED                    Code = 30201
	Code_EWALLET_INVALID                    Code = 30202
	Code_EWALLET_EMPTY                      Code = 30203
	Code_EWALLET_NOT_FOUND_MERCHANT         Code = 30204
	Code_EWALLET_ACCOUNT_ID_EXISTED         Code = 30205
	Code_EWALLET_ACCOUNT_EXISTED            Code = 30206
	Code_EWALLET_ACCOUNT_NAME_INVALID       Code = 30207
	Code_EWALLET_PHONE_NUMBER_INVALID       Code = 30208
	Code_EWALLET_ACCOUNT_BALANCE_INVALID    Code = 30209
	Code_EWALLET_END                        Code = 30299
	Code_PAYMENT_BEGIN                      Code = 30300
	Code_PAYMENT_CODE_INVALID               Code = 30301
	Code_TELCO_CHARGE_CARD_PROVIDER_EMPTY   Code = 30302
	Code_MERCHANT_USER_BANK_ACCOUNT_INVALID Code = 30303
	Code_TELCO_GET_CARD_PROVIDER_EMPTY      Code = 30304
	Code_PAYMENT_END                        Code = 30399
	Code_STATISTIC_BEGIN                    Code = 30400
	Code_STATISTIC_END                      Code = 30499
	Code_END                                Code = 39999
)

// Enum value maps for Code.
var (
	Code_name = map[int32]string{
		0:     "OK",
		1:     "CANCELLED",
		2:     "UNKNOWN",
		3:     "INVALID_ARGUMENT",
		4:     "DEADLINE_EXCEEDED",
		5:     "NOT_FOUND",
		6:     "ALREADY_EXISTS",
		7:     "PERMISSION_DENIED",
		8:     "RESOURCE_EXHAUSTED",
		9:     "FAILED_PRECONDITION",
		10:    "ABORTED",
		11:    "OUT_OF_RANGE",
		12:    "UNIMPLEMENTED",
		13:    "INTERNAL",
		14:    "UNAVAILABLE",
		15:    "DATA_LOSS",
		16:    "UNAUTHENTICATED",
		1001:  "CLOSE_GOING_AWAY",
		30000: "BEGIN",
		30100: "BANK_BEGIN",
		30101: "BANK_NOT_FOUND_MERCHANT",
		30102: "BANK_EXISTED",
		30103: "BANK_INVALID",
		30104: "BANK_EMPTY",
		30105: "BANK_ACCOUNT_EXISTED",
		30106: "BANK_ACCOUNT_ID_EXISTED",
		30107: "BANK_ACCOUNT_NUMBER_INVALID",
		30108: "BANK_ACCOUNT_NAME_INVALID",
		30109: "BANK_ACCOUNT_BALANCE_INVALID",
		30199: "BANK_END",
		30200: "EWALLET_BEGIN",
		30201: "EWALLET_EXISTED",
		30202: "EWALLET_INVALID",
		30203: "EWALLET_EMPTY",
		30204: "EWALLET_NOT_FOUND_MERCHANT",
		30205: "EWALLET_ACCOUNT_ID_EXISTED",
		30206: "EWALLET_ACCOUNT_EXISTED",
		30207: "EWALLET_ACCOUNT_NAME_INVALID",
		30208: "EWALLET_PHONE_NUMBER_INVALID",
		30209: "EWALLET_ACCOUNT_BALANCE_INVALID",
		30299: "EWALLET_END",
		30300: "PAYMENT_BEGIN",
		30301: "PAYMENT_CODE_INVALID",
		30302: "TELCO_CHARGE_CARD_PROVIDER_EMPTY",
		30303: "MERCHANT_USER_BANK_ACCOUNT_INVALID",
		30304: "TELCO_GET_CARD_PROVIDER_EMPTY",
		30399: "PAYMENT_END",
		30400: "STATISTIC_BEGIN",
		30499: "STATISTIC_END",
		39999: "END",
	}
	Code_value = map[string]int32{
		"OK":                                 0,
		"CANCELLED":                          1,
		"UNKNOWN":                            2,
		"INVALID_ARGUMENT":                   3,
		"DEADLINE_EXCEEDED":                  4,
		"NOT_FOUND":                          5,
		"ALREADY_EXISTS":                     6,
		"PERMISSION_DENIED":                  7,
		"RESOURCE_EXHAUSTED":                 8,
		"FAILED_PRECONDITION":                9,
		"ABORTED":                            10,
		"OUT_OF_RANGE":                       11,
		"UNIMPLEMENTED":                      12,
		"INTERNAL":                           13,
		"UNAVAILABLE":                        14,
		"DATA_LOSS":                          15,
		"UNAUTHENTICATED":                    16,
		"CLOSE_GOING_AWAY":                   1001,
		"BEGIN":                              30000,
		"BANK_BEGIN":                         30100,
		"BANK_NOT_FOUND_MERCHANT":            30101,
		"BANK_EXISTED":                       30102,
		"BANK_INVALID":                       30103,
		"BANK_EMPTY":                         30104,
		"BANK_ACCOUNT_EXISTED":               30105,
		"BANK_ACCOUNT_ID_EXISTED":            30106,
		"BANK_ACCOUNT_NUMBER_INVALID":        30107,
		"BANK_ACCOUNT_NAME_INVALID":          30108,
		"BANK_ACCOUNT_BALANCE_INVALID":       30109,
		"BANK_END":                           30199,
		"EWALLET_BEGIN":                      30200,
		"EWALLET_EXISTED":                    30201,
		"EWALLET_INVALID":                    30202,
		"EWALLET_EMPTY":                      30203,
		"EWALLET_NOT_FOUND_MERCHANT":         30204,
		"EWALLET_ACCOUNT_ID_EXISTED":         30205,
		"EWALLET_ACCOUNT_EXISTED":            30206,
		"EWALLET_ACCOUNT_NAME_INVALID":       30207,
		"EWALLET_PHONE_NUMBER_INVALID":       30208,
		"EWALLET_ACCOUNT_BALANCE_INVALID":    30209,
		"EWALLET_END":                        30299,
		"PAYMENT_BEGIN":                      30300,
		"PAYMENT_CODE_INVALID":               30301,
		"TELCO_CHARGE_CARD_PROVIDER_EMPTY":   30302,
		"MERCHANT_USER_BANK_ACCOUNT_INVALID": 30303,
		"TELCO_GET_CARD_PROVIDER_EMPTY":      30304,
		"PAYMENT_END":                        30399,
		"STATISTIC_BEGIN":                    30400,
		"STATISTIC_END":                      30499,
		"END":                                39999,
	}
)

func (x Code) Enum() *Code {
	p := new(Code)
	*p = x
	return p
}

func (x Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Code) Descriptor() protoreflect.EnumDescriptor {
	return file_stark_api_code_stark_proto_enumTypes[0].Descriptor()
}

func (Code) Type() protoreflect.EnumType {
	return &file_stark_api_code_stark_proto_enumTypes[0]
}

func (x Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Code.Descriptor instead.
func (Code) EnumDescriptor() ([]byte, []int) {
	return file_stark_api_code_stark_proto_rawDescGZIP(), []int{0}
}

var File_stark_api_code_stark_proto protoreflect.FileDescriptor

var file_stark_api_code_stark_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x64, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x73, 0x74,
	0x61, 0x72, 0x6b, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x2a, 0xa8, 0x09, 0x0a, 0x04, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x41, 0x4e,
	0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x41, 0x52, 0x47, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x44,
	0x45, 0x41, 0x44, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44,
	0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10,
	0x05, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x45, 0x58, 0x49,
	0x53, 0x54, 0x53, 0x10, 0x06, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53,
	0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x10, 0x07, 0x12, 0x16, 0x0a, 0x12,
	0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x45, 0x58, 0x48, 0x41, 0x55, 0x53, 0x54,
	0x45, 0x44, 0x10, 0x08, 0x12, 0x17, 0x0a, 0x13, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x50,
	0x52, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x09, 0x12, 0x0b, 0x0a,
	0x07, 0x41, 0x42, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x0a, 0x12, 0x10, 0x0a, 0x0c, 0x4f, 0x55,
	0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x0b, 0x12, 0x11, 0x0a, 0x0d,
	0x55, 0x4e, 0x49, 0x4d, 0x50, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x45, 0x44, 0x10, 0x0c, 0x12,
	0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x10, 0x0d, 0x12, 0x0f, 0x0a,
	0x0b, 0x55, 0x4e, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x0e, 0x12, 0x0d,
	0x0a, 0x09, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x4c, 0x4f, 0x53, 0x53, 0x10, 0x0f, 0x12, 0x13, 0x0a,
	0x0f, 0x55, 0x4e, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x45, 0x44,
	0x10, 0x10, 0x12, 0x15, 0x0a, 0x10, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x5f, 0x47, 0x4f, 0x49, 0x4e,
	0x47, 0x5f, 0x41, 0x57, 0x41, 0x59, 0x10, 0xe9, 0x07, 0x12, 0x0b, 0x0a, 0x05, 0x42, 0x45, 0x47,
	0x49, 0x4e, 0x10, 0xb0, 0xea, 0x01, 0x12, 0x10, 0x0a, 0x0a, 0x42, 0x41, 0x4e, 0x4b, 0x5f, 0x42,
	0x45, 0x47, 0x49, 0x4e, 0x10, 0x94, 0xeb, 0x01, 0x12, 0x1d, 0x0a, 0x17, 0x42, 0x41, 0x4e, 0x4b,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x4d, 0x45, 0x52, 0x43, 0x48,
	0x41, 0x4e, 0x54, 0x10, 0x95, 0xeb, 0x01, 0x12, 0x12, 0x0a, 0x0c, 0x42, 0x41, 0x4e, 0x4b, 0x5f,
	0x45, 0x58, 0x49, 0x53, 0x54, 0x45, 0x44, 0x10, 0x96, 0xeb, 0x01, 0x12, 0x12, 0x0a, 0x0c, 0x42,
	0x41, 0x4e, 0x4b, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x97, 0xeb, 0x01, 0x12,
	0x10, 0x0a, 0x0a, 0x42, 0x41, 0x4e, 0x4b, 0x5f, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x10, 0x98, 0xeb,
	0x01, 0x12, 0x1a, 0x0a, 0x14, 0x42, 0x41, 0x4e, 0x4b, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e,
	0x54, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x45, 0x44, 0x10, 0x99, 0xeb, 0x01, 0x12, 0x1d, 0x0a,
	0x17, 0x42, 0x41, 0x4e, 0x4b, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x49, 0x44,
	0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x45, 0x44, 0x10, 0x9a, 0xeb, 0x01, 0x12, 0x21, 0x0a, 0x1b,
	0x42, 0x41, 0x4e, 0x4b, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x4e, 0x55, 0x4d,
	0x42, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x9b, 0xeb, 0x01, 0x12,
	0x1f, 0x0a, 0x19, 0x42, 0x41, 0x4e, 0x4b, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f,
	0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x9c, 0xeb, 0x01,
	0x12, 0x22, 0x0a, 0x1c, 0x42, 0x41, 0x4e, 0x4b, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54,
	0x5f, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x10, 0x9d, 0xeb, 0x01, 0x12, 0x0e, 0x0a, 0x08, 0x42, 0x41, 0x4e, 0x4b, 0x5f, 0x45, 0x4e, 0x44,
	0x10, 0xf7, 0xeb, 0x01, 0x12, 0x13, 0x0a, 0x0d, 0x45, 0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x5f,
	0x42, 0x45, 0x47, 0x49, 0x4e, 0x10, 0xf8, 0xeb, 0x01, 0x12, 0x15, 0x0a, 0x0f, 0x45, 0x57, 0x41,
	0x4c, 0x4c, 0x45, 0x54, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x45, 0x44, 0x10, 0xf9, 0xeb, 0x01,
	0x12, 0x15, 0x0a, 0x0f, 0x45, 0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x5f, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x10, 0xfa, 0xeb, 0x01, 0x12, 0x13, 0x0a, 0x0d, 0x45, 0x57, 0x41, 0x4c, 0x4c,
	0x45, 0x54, 0x5f, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x10, 0xfb, 0xeb, 0x01, 0x12, 0x20, 0x0a, 0x1a,
	0x45, 0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e,
	0x44, 0x5f, 0x4d, 0x45, 0x52, 0x43, 0x48, 0x41, 0x4e, 0x54, 0x10, 0xfc, 0xeb, 0x01, 0x12, 0x20,
	0x0a, 0x1a, 0x45, 0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e,
	0x54, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x45, 0x44, 0x10, 0xfd, 0xeb, 0x01,
	0x12, 0x1d, 0x0a, 0x17, 0x45, 0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x5f, 0x41, 0x43, 0x43, 0x4f,
	0x55, 0x4e, 0x54, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x45, 0x44, 0x10, 0xfe, 0xeb, 0x01, 0x12,
	0x22, 0x0a, 0x1c, 0x45, 0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10,
	0xff, 0xeb, 0x01, 0x12, 0x22, 0x0a, 0x1c, 0x45, 0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x5f, 0x50,
	0x48, 0x4f, 0x4e, 0x45, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x10, 0x80, 0xec, 0x01, 0x12, 0x25, 0x0a, 0x1f, 0x45, 0x57, 0x41, 0x4c, 0x4c,
	0x45, 0x54, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x42, 0x41, 0x4c, 0x41, 0x4e,
	0x43, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x81, 0xec, 0x01, 0x12, 0x11,
	0x0a, 0x0b, 0x45, 0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x5f, 0x45, 0x4e, 0x44, 0x10, 0xdb, 0xec,
	0x01, 0x12, 0x13, 0x0a, 0x0d, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x42, 0x45, 0x47,
	0x49, 0x4e, 0x10, 0xdc, 0xec, 0x01, 0x12, 0x1a, 0x0a, 0x14, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e,
	0x54, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0xdd,
	0xec, 0x01, 0x12, 0x26, 0x0a, 0x20, 0x54, 0x45, 0x4c, 0x43, 0x4f, 0x5f, 0x43, 0x48, 0x41, 0x52,
	0x47, 0x45, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52,
	0x5f, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x10, 0xde, 0xec, 0x01, 0x12, 0x28, 0x0a, 0x22, 0x4d, 0x45,
	0x52, 0x43, 0x48, 0x41, 0x4e, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x42, 0x41, 0x4e, 0x4b,
	0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x10, 0xdf, 0xec, 0x01, 0x12, 0x23, 0x0a, 0x1d, 0x54, 0x45, 0x4c, 0x43, 0x4f, 0x5f, 0x47, 0x45,
	0x54, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f,
	0x45, 0x4d, 0x50, 0x54, 0x59, 0x10, 0xe0, 0xec, 0x01, 0x12, 0x11, 0x0a, 0x0b, 0x50, 0x41, 0x59,
	0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x45, 0x4e, 0x44, 0x10, 0xbf, 0xed, 0x01, 0x12, 0x15, 0x0a, 0x0f,
	0x53, 0x54, 0x41, 0x54, 0x49, 0x53, 0x54, 0x49, 0x43, 0x5f, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x10,
	0xc0, 0xed, 0x01, 0x12, 0x13, 0x0a, 0x0d, 0x53, 0x54, 0x41, 0x54, 0x49, 0x53, 0x54, 0x49, 0x43,
	0x5f, 0x45, 0x4e, 0x44, 0x10, 0xa3, 0xee, 0x01, 0x12, 0x09, 0x0a, 0x03, 0x45, 0x4e, 0x44, 0x10,
	0xbf, 0xb8, 0x02, 0x42, 0x37, 0x5a, 0x35, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x6d, 0x63, 0x75, 0x63, 0x2f, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x65, 0x70, 0x6f, 0x2f,
	0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2f, 0x70, 0x6b,
	0x67, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x3b, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_stark_api_code_stark_proto_rawDescOnce sync.Once
	file_stark_api_code_stark_proto_rawDescData = file_stark_api_code_stark_proto_rawDesc
)

func file_stark_api_code_stark_proto_rawDescGZIP() []byte {
	file_stark_api_code_stark_proto_rawDescOnce.Do(func() {
		file_stark_api_code_stark_proto_rawDescData = protoimpl.X.CompressGZIP(file_stark_api_code_stark_proto_rawDescData)
	})
	return file_stark_api_code_stark_proto_rawDescData
}

var file_stark_api_code_stark_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_stark_api_code_stark_proto_goTypes = []interface{}{
	(Code)(0), // 0: stark.code.Code
}
var file_stark_api_code_stark_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_stark_api_code_stark_proto_init() }
func file_stark_api_code_stark_proto_init() {
	if File_stark_api_code_stark_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_stark_api_code_stark_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_stark_api_code_stark_proto_goTypes,
		DependencyIndexes: file_stark_api_code_stark_proto_depIdxs,
		EnumInfos:         file_stark_api_code_stark_proto_enumTypes,
	}.Build()
	File_stark_api_code_stark_proto = out.File
	file_stark_api_code_stark_proto_rawDesc = nil
	file_stark_api_code_stark_proto_goTypes = nil
	file_stark_api_code_stark_proto_depIdxs = nil
}
