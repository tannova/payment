// Code generated by entc, DO NOT EDIT.

package paymentcryptodetail

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"gitlab.com/mcuc/monorepo/backend/stark/pkg/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v string) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedBy), v))
	})
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v string) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedBy), v))
	})
}

// CryptoType applies equality check predicate on the "crypto_type" field. It's identical to CryptoTypeEQ.
func CryptoType(v int32) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCryptoType), v))
	})
}

// CryptoNetworkType applies equality check predicate on the "crypto_network_type" field. It's identical to CryptoNetworkTypeEQ.
func CryptoNetworkType(v int32) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCryptoNetworkType), v))
	})
}

// CryptoWalletName applies equality check predicate on the "crypto_wallet_name" field. It's identical to CryptoWalletNameEQ.
func CryptoWalletName(v int32) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCryptoWalletName), v))
	})
}

// ReceiverAddress applies equality check predicate on the "receiver_address" field. It's identical to ReceiverAddressEQ.
func ReceiverAddress(v string) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReceiverAddress), v))
	})
}

// SenderAddress applies equality check predicate on the "sender_address" field. It's identical to SenderAddressEQ.
func SenderAddress(v string) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSenderAddress), v))
	})
}

// Amount applies equality check predicate on the "amount" field. It's identical to AmountEQ.
func Amount(v float64) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAmount), v))
	})
}

// ReceivedAmount applies equality check predicate on the "received_amount" field. It's identical to ReceivedAmountEQ.
func ReceivedAmount(v float64) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReceivedAmount), v))
	})
}

// TxHash applies equality check predicate on the "tx_hash" field. It's identical to TxHashEQ.
func TxHash(v string) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTxHash), v))
	})
}

// TxID applies equality check predicate on the "tx_id" field. It's identical to TxIDEQ.
func TxID(v string) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTxID), v))
	})
}

// Fee applies equality check predicate on the "fee" field. It's identical to FeeEQ.
func Fee(v float64) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFee), v))
	})
}

// ImageURL applies equality check predicate on the "image_url" field. It's identical to ImageURLEQ.
func ImageURL(v string) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldImageURL), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.PaymentCryptoDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.PaymentCryptoDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.PaymentCryptoDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.PaymentCryptoDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v string) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedBy), v))
	})
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v string) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedBy), v))
	})
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...string) predicate.PaymentCryptoDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedBy), v...))
	})
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...string) predicate.PaymentCryptoDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedBy), v...))
	})
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v string) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedBy), v))
	})
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v string) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedBy), v))
	})
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v string) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedBy), v))
	})
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v string) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedBy), v))
	})
}

// CreatedByContains applies the Contains predicate on the "created_by" field.
func CreatedByContains(v string) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCreatedBy), v))
	})
}

// CreatedByHasPrefix applies the HasPrefix predicate on the "created_by" field.
func CreatedByHasPrefix(v string) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCreatedBy), v))
	})
}

// CreatedByHasSuffix applies the HasSuffix predicate on the "created_by" field.
func CreatedByHasSuffix(v string) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCreatedBy), v))
	})
}

// CreatedByEqualFold applies the EqualFold predicate on the "created_by" field.
func CreatedByEqualFold(v string) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCreatedBy), v))
	})
}

// CreatedByContainsFold applies the ContainsFold predicate on the "created_by" field.
func CreatedByContainsFold(v string) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCreatedBy), v))
	})
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v string) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedBy), v))
	})
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v string) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedBy), v))
	})
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...string) predicate.PaymentCryptoDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedBy), v...))
	})
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...string) predicate.PaymentCryptoDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedBy), v...))
	})
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v string) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedBy), v))
	})
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v string) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedBy), v))
	})
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v string) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedBy), v))
	})
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v string) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedBy), v))
	})
}

// UpdatedByContains applies the Contains predicate on the "updated_by" field.
func UpdatedByContains(v string) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUpdatedBy), v))
	})
}

// UpdatedByHasPrefix applies the HasPrefix predicate on the "updated_by" field.
func UpdatedByHasPrefix(v string) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUpdatedBy), v))
	})
}

// UpdatedByHasSuffix applies the HasSuffix predicate on the "updated_by" field.
func UpdatedByHasSuffix(v string) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUpdatedBy), v))
	})
}

// UpdatedByEqualFold applies the EqualFold predicate on the "updated_by" field.
func UpdatedByEqualFold(v string) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUpdatedBy), v))
	})
}

// UpdatedByContainsFold applies the ContainsFold predicate on the "updated_by" field.
func UpdatedByContainsFold(v string) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUpdatedBy), v))
	})
}

// CryptoTypeEQ applies the EQ predicate on the "crypto_type" field.
func CryptoTypeEQ(v int32) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCryptoType), v))
	})
}

// CryptoTypeNEQ applies the NEQ predicate on the "crypto_type" field.
func CryptoTypeNEQ(v int32) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCryptoType), v))
	})
}

// CryptoTypeIn applies the In predicate on the "crypto_type" field.
func CryptoTypeIn(vs ...int32) predicate.PaymentCryptoDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCryptoType), v...))
	})
}

// CryptoTypeNotIn applies the NotIn predicate on the "crypto_type" field.
func CryptoTypeNotIn(vs ...int32) predicate.PaymentCryptoDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCryptoType), v...))
	})
}

// CryptoTypeGT applies the GT predicate on the "crypto_type" field.
func CryptoTypeGT(v int32) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCryptoType), v))
	})
}

// CryptoTypeGTE applies the GTE predicate on the "crypto_type" field.
func CryptoTypeGTE(v int32) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCryptoType), v))
	})
}

// CryptoTypeLT applies the LT predicate on the "crypto_type" field.
func CryptoTypeLT(v int32) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCryptoType), v))
	})
}

// CryptoTypeLTE applies the LTE predicate on the "crypto_type" field.
func CryptoTypeLTE(v int32) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCryptoType), v))
	})
}

// CryptoNetworkTypeEQ applies the EQ predicate on the "crypto_network_type" field.
func CryptoNetworkTypeEQ(v int32) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCryptoNetworkType), v))
	})
}

// CryptoNetworkTypeNEQ applies the NEQ predicate on the "crypto_network_type" field.
func CryptoNetworkTypeNEQ(v int32) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCryptoNetworkType), v))
	})
}

// CryptoNetworkTypeIn applies the In predicate on the "crypto_network_type" field.
func CryptoNetworkTypeIn(vs ...int32) predicate.PaymentCryptoDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCryptoNetworkType), v...))
	})
}

// CryptoNetworkTypeNotIn applies the NotIn predicate on the "crypto_network_type" field.
func CryptoNetworkTypeNotIn(vs ...int32) predicate.PaymentCryptoDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCryptoNetworkType), v...))
	})
}

// CryptoNetworkTypeGT applies the GT predicate on the "crypto_network_type" field.
func CryptoNetworkTypeGT(v int32) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCryptoNetworkType), v))
	})
}

// CryptoNetworkTypeGTE applies the GTE predicate on the "crypto_network_type" field.
func CryptoNetworkTypeGTE(v int32) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCryptoNetworkType), v))
	})
}

// CryptoNetworkTypeLT applies the LT predicate on the "crypto_network_type" field.
func CryptoNetworkTypeLT(v int32) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCryptoNetworkType), v))
	})
}

// CryptoNetworkTypeLTE applies the LTE predicate on the "crypto_network_type" field.
func CryptoNetworkTypeLTE(v int32) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCryptoNetworkType), v))
	})
}

// CryptoWalletNameEQ applies the EQ predicate on the "crypto_wallet_name" field.
func CryptoWalletNameEQ(v int32) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCryptoWalletName), v))
	})
}

// CryptoWalletNameNEQ applies the NEQ predicate on the "crypto_wallet_name" field.
func CryptoWalletNameNEQ(v int32) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCryptoWalletName), v))
	})
}

// CryptoWalletNameIn applies the In predicate on the "crypto_wallet_name" field.
func CryptoWalletNameIn(vs ...int32) predicate.PaymentCryptoDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCryptoWalletName), v...))
	})
}

// CryptoWalletNameNotIn applies the NotIn predicate on the "crypto_wallet_name" field.
func CryptoWalletNameNotIn(vs ...int32) predicate.PaymentCryptoDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCryptoWalletName), v...))
	})
}

// CryptoWalletNameGT applies the GT predicate on the "crypto_wallet_name" field.
func CryptoWalletNameGT(v int32) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCryptoWalletName), v))
	})
}

// CryptoWalletNameGTE applies the GTE predicate on the "crypto_wallet_name" field.
func CryptoWalletNameGTE(v int32) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCryptoWalletName), v))
	})
}

// CryptoWalletNameLT applies the LT predicate on the "crypto_wallet_name" field.
func CryptoWalletNameLT(v int32) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCryptoWalletName), v))
	})
}

// CryptoWalletNameLTE applies the LTE predicate on the "crypto_wallet_name" field.
func CryptoWalletNameLTE(v int32) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCryptoWalletName), v))
	})
}

// ReceiverAddressEQ applies the EQ predicate on the "receiver_address" field.
func ReceiverAddressEQ(v string) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReceiverAddress), v))
	})
}

// ReceiverAddressNEQ applies the NEQ predicate on the "receiver_address" field.
func ReceiverAddressNEQ(v string) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldReceiverAddress), v))
	})
}

// ReceiverAddressIn applies the In predicate on the "receiver_address" field.
func ReceiverAddressIn(vs ...string) predicate.PaymentCryptoDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldReceiverAddress), v...))
	})
}

// ReceiverAddressNotIn applies the NotIn predicate on the "receiver_address" field.
func ReceiverAddressNotIn(vs ...string) predicate.PaymentCryptoDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldReceiverAddress), v...))
	})
}

// ReceiverAddressGT applies the GT predicate on the "receiver_address" field.
func ReceiverAddressGT(v string) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldReceiverAddress), v))
	})
}

// ReceiverAddressGTE applies the GTE predicate on the "receiver_address" field.
func ReceiverAddressGTE(v string) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldReceiverAddress), v))
	})
}

// ReceiverAddressLT applies the LT predicate on the "receiver_address" field.
func ReceiverAddressLT(v string) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldReceiverAddress), v))
	})
}

// ReceiverAddressLTE applies the LTE predicate on the "receiver_address" field.
func ReceiverAddressLTE(v string) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldReceiverAddress), v))
	})
}

// ReceiverAddressContains applies the Contains predicate on the "receiver_address" field.
func ReceiverAddressContains(v string) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldReceiverAddress), v))
	})
}

// ReceiverAddressHasPrefix applies the HasPrefix predicate on the "receiver_address" field.
func ReceiverAddressHasPrefix(v string) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldReceiverAddress), v))
	})
}

// ReceiverAddressHasSuffix applies the HasSuffix predicate on the "receiver_address" field.
func ReceiverAddressHasSuffix(v string) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldReceiverAddress), v))
	})
}

// ReceiverAddressEqualFold applies the EqualFold predicate on the "receiver_address" field.
func ReceiverAddressEqualFold(v string) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldReceiverAddress), v))
	})
}

// ReceiverAddressContainsFold applies the ContainsFold predicate on the "receiver_address" field.
func ReceiverAddressContainsFold(v string) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldReceiverAddress), v))
	})
}

// SenderAddressEQ applies the EQ predicate on the "sender_address" field.
func SenderAddressEQ(v string) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSenderAddress), v))
	})
}

// SenderAddressNEQ applies the NEQ predicate on the "sender_address" field.
func SenderAddressNEQ(v string) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSenderAddress), v))
	})
}

// SenderAddressIn applies the In predicate on the "sender_address" field.
func SenderAddressIn(vs ...string) predicate.PaymentCryptoDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSenderAddress), v...))
	})
}

// SenderAddressNotIn applies the NotIn predicate on the "sender_address" field.
func SenderAddressNotIn(vs ...string) predicate.PaymentCryptoDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSenderAddress), v...))
	})
}

// SenderAddressGT applies the GT predicate on the "sender_address" field.
func SenderAddressGT(v string) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSenderAddress), v))
	})
}

// SenderAddressGTE applies the GTE predicate on the "sender_address" field.
func SenderAddressGTE(v string) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSenderAddress), v))
	})
}

// SenderAddressLT applies the LT predicate on the "sender_address" field.
func SenderAddressLT(v string) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSenderAddress), v))
	})
}

// SenderAddressLTE applies the LTE predicate on the "sender_address" field.
func SenderAddressLTE(v string) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSenderAddress), v))
	})
}

// SenderAddressContains applies the Contains predicate on the "sender_address" field.
func SenderAddressContains(v string) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSenderAddress), v))
	})
}

// SenderAddressHasPrefix applies the HasPrefix predicate on the "sender_address" field.
func SenderAddressHasPrefix(v string) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSenderAddress), v))
	})
}

// SenderAddressHasSuffix applies the HasSuffix predicate on the "sender_address" field.
func SenderAddressHasSuffix(v string) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSenderAddress), v))
	})
}

// SenderAddressIsNil applies the IsNil predicate on the "sender_address" field.
func SenderAddressIsNil() predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSenderAddress)))
	})
}

// SenderAddressNotNil applies the NotNil predicate on the "sender_address" field.
func SenderAddressNotNil() predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSenderAddress)))
	})
}

// SenderAddressEqualFold applies the EqualFold predicate on the "sender_address" field.
func SenderAddressEqualFold(v string) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSenderAddress), v))
	})
}

// SenderAddressContainsFold applies the ContainsFold predicate on the "sender_address" field.
func SenderAddressContainsFold(v string) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSenderAddress), v))
	})
}

// AmountEQ applies the EQ predicate on the "amount" field.
func AmountEQ(v float64) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAmount), v))
	})
}

// AmountNEQ applies the NEQ predicate on the "amount" field.
func AmountNEQ(v float64) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAmount), v))
	})
}

// AmountIn applies the In predicate on the "amount" field.
func AmountIn(vs ...float64) predicate.PaymentCryptoDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAmount), v...))
	})
}

// AmountNotIn applies the NotIn predicate on the "amount" field.
func AmountNotIn(vs ...float64) predicate.PaymentCryptoDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAmount), v...))
	})
}

// AmountGT applies the GT predicate on the "amount" field.
func AmountGT(v float64) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAmount), v))
	})
}

// AmountGTE applies the GTE predicate on the "amount" field.
func AmountGTE(v float64) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAmount), v))
	})
}

// AmountLT applies the LT predicate on the "amount" field.
func AmountLT(v float64) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAmount), v))
	})
}

// AmountLTE applies the LTE predicate on the "amount" field.
func AmountLTE(v float64) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAmount), v))
	})
}

// AmountIsNil applies the IsNil predicate on the "amount" field.
func AmountIsNil() predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAmount)))
	})
}

// AmountNotNil applies the NotNil predicate on the "amount" field.
func AmountNotNil() predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAmount)))
	})
}

// ReceivedAmountEQ applies the EQ predicate on the "received_amount" field.
func ReceivedAmountEQ(v float64) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReceivedAmount), v))
	})
}

// ReceivedAmountNEQ applies the NEQ predicate on the "received_amount" field.
func ReceivedAmountNEQ(v float64) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldReceivedAmount), v))
	})
}

// ReceivedAmountIn applies the In predicate on the "received_amount" field.
func ReceivedAmountIn(vs ...float64) predicate.PaymentCryptoDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldReceivedAmount), v...))
	})
}

// ReceivedAmountNotIn applies the NotIn predicate on the "received_amount" field.
func ReceivedAmountNotIn(vs ...float64) predicate.PaymentCryptoDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldReceivedAmount), v...))
	})
}

// ReceivedAmountGT applies the GT predicate on the "received_amount" field.
func ReceivedAmountGT(v float64) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldReceivedAmount), v))
	})
}

// ReceivedAmountGTE applies the GTE predicate on the "received_amount" field.
func ReceivedAmountGTE(v float64) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldReceivedAmount), v))
	})
}

// ReceivedAmountLT applies the LT predicate on the "received_amount" field.
func ReceivedAmountLT(v float64) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldReceivedAmount), v))
	})
}

// ReceivedAmountLTE applies the LTE predicate on the "received_amount" field.
func ReceivedAmountLTE(v float64) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldReceivedAmount), v))
	})
}

// ReceivedAmountIsNil applies the IsNil predicate on the "received_amount" field.
func ReceivedAmountIsNil() predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldReceivedAmount)))
	})
}

// ReceivedAmountNotNil applies the NotNil predicate on the "received_amount" field.
func ReceivedAmountNotNil() predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldReceivedAmount)))
	})
}

// TxHashEQ applies the EQ predicate on the "tx_hash" field.
func TxHashEQ(v string) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTxHash), v))
	})
}

// TxHashNEQ applies the NEQ predicate on the "tx_hash" field.
func TxHashNEQ(v string) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTxHash), v))
	})
}

// TxHashIn applies the In predicate on the "tx_hash" field.
func TxHashIn(vs ...string) predicate.PaymentCryptoDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTxHash), v...))
	})
}

// TxHashNotIn applies the NotIn predicate on the "tx_hash" field.
func TxHashNotIn(vs ...string) predicate.PaymentCryptoDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTxHash), v...))
	})
}

// TxHashGT applies the GT predicate on the "tx_hash" field.
func TxHashGT(v string) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTxHash), v))
	})
}

// TxHashGTE applies the GTE predicate on the "tx_hash" field.
func TxHashGTE(v string) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTxHash), v))
	})
}

// TxHashLT applies the LT predicate on the "tx_hash" field.
func TxHashLT(v string) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTxHash), v))
	})
}

// TxHashLTE applies the LTE predicate on the "tx_hash" field.
func TxHashLTE(v string) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTxHash), v))
	})
}

// TxHashContains applies the Contains predicate on the "tx_hash" field.
func TxHashContains(v string) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTxHash), v))
	})
}

// TxHashHasPrefix applies the HasPrefix predicate on the "tx_hash" field.
func TxHashHasPrefix(v string) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTxHash), v))
	})
}

// TxHashHasSuffix applies the HasSuffix predicate on the "tx_hash" field.
func TxHashHasSuffix(v string) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTxHash), v))
	})
}

// TxHashIsNil applies the IsNil predicate on the "tx_hash" field.
func TxHashIsNil() predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTxHash)))
	})
}

// TxHashNotNil applies the NotNil predicate on the "tx_hash" field.
func TxHashNotNil() predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTxHash)))
	})
}

// TxHashEqualFold applies the EqualFold predicate on the "tx_hash" field.
func TxHashEqualFold(v string) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTxHash), v))
	})
}

// TxHashContainsFold applies the ContainsFold predicate on the "tx_hash" field.
func TxHashContainsFold(v string) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTxHash), v))
	})
}

// TxIDEQ applies the EQ predicate on the "tx_id" field.
func TxIDEQ(v string) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTxID), v))
	})
}

// TxIDNEQ applies the NEQ predicate on the "tx_id" field.
func TxIDNEQ(v string) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTxID), v))
	})
}

// TxIDIn applies the In predicate on the "tx_id" field.
func TxIDIn(vs ...string) predicate.PaymentCryptoDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTxID), v...))
	})
}

// TxIDNotIn applies the NotIn predicate on the "tx_id" field.
func TxIDNotIn(vs ...string) predicate.PaymentCryptoDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTxID), v...))
	})
}

// TxIDGT applies the GT predicate on the "tx_id" field.
func TxIDGT(v string) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTxID), v))
	})
}

// TxIDGTE applies the GTE predicate on the "tx_id" field.
func TxIDGTE(v string) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTxID), v))
	})
}

// TxIDLT applies the LT predicate on the "tx_id" field.
func TxIDLT(v string) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTxID), v))
	})
}

// TxIDLTE applies the LTE predicate on the "tx_id" field.
func TxIDLTE(v string) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTxID), v))
	})
}

// TxIDContains applies the Contains predicate on the "tx_id" field.
func TxIDContains(v string) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTxID), v))
	})
}

// TxIDHasPrefix applies the HasPrefix predicate on the "tx_id" field.
func TxIDHasPrefix(v string) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTxID), v))
	})
}

// TxIDHasSuffix applies the HasSuffix predicate on the "tx_id" field.
func TxIDHasSuffix(v string) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTxID), v))
	})
}

// TxIDIsNil applies the IsNil predicate on the "tx_id" field.
func TxIDIsNil() predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTxID)))
	})
}

// TxIDNotNil applies the NotNil predicate on the "tx_id" field.
func TxIDNotNil() predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTxID)))
	})
}

// TxIDEqualFold applies the EqualFold predicate on the "tx_id" field.
func TxIDEqualFold(v string) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTxID), v))
	})
}

// TxIDContainsFold applies the ContainsFold predicate on the "tx_id" field.
func TxIDContainsFold(v string) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTxID), v))
	})
}

// FeeEQ applies the EQ predicate on the "fee" field.
func FeeEQ(v float64) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFee), v))
	})
}

// FeeNEQ applies the NEQ predicate on the "fee" field.
func FeeNEQ(v float64) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFee), v))
	})
}

// FeeIn applies the In predicate on the "fee" field.
func FeeIn(vs ...float64) predicate.PaymentCryptoDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFee), v...))
	})
}

// FeeNotIn applies the NotIn predicate on the "fee" field.
func FeeNotIn(vs ...float64) predicate.PaymentCryptoDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFee), v...))
	})
}

// FeeGT applies the GT predicate on the "fee" field.
func FeeGT(v float64) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFee), v))
	})
}

// FeeGTE applies the GTE predicate on the "fee" field.
func FeeGTE(v float64) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFee), v))
	})
}

// FeeLT applies the LT predicate on the "fee" field.
func FeeLT(v float64) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFee), v))
	})
}

// FeeLTE applies the LTE predicate on the "fee" field.
func FeeLTE(v float64) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFee), v))
	})
}

// FeeIsNil applies the IsNil predicate on the "fee" field.
func FeeIsNil() predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldFee)))
	})
}

// FeeNotNil applies the NotNil predicate on the "fee" field.
func FeeNotNil() predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldFee)))
	})
}

// ImageURLEQ applies the EQ predicate on the "image_url" field.
func ImageURLEQ(v string) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldImageURL), v))
	})
}

// ImageURLNEQ applies the NEQ predicate on the "image_url" field.
func ImageURLNEQ(v string) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldImageURL), v))
	})
}

// ImageURLIn applies the In predicate on the "image_url" field.
func ImageURLIn(vs ...string) predicate.PaymentCryptoDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldImageURL), v...))
	})
}

// ImageURLNotIn applies the NotIn predicate on the "image_url" field.
func ImageURLNotIn(vs ...string) predicate.PaymentCryptoDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldImageURL), v...))
	})
}

// ImageURLGT applies the GT predicate on the "image_url" field.
func ImageURLGT(v string) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldImageURL), v))
	})
}

// ImageURLGTE applies the GTE predicate on the "image_url" field.
func ImageURLGTE(v string) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldImageURL), v))
	})
}

// ImageURLLT applies the LT predicate on the "image_url" field.
func ImageURLLT(v string) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldImageURL), v))
	})
}

// ImageURLLTE applies the LTE predicate on the "image_url" field.
func ImageURLLTE(v string) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldImageURL), v))
	})
}

// ImageURLContains applies the Contains predicate on the "image_url" field.
func ImageURLContains(v string) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldImageURL), v))
	})
}

// ImageURLHasPrefix applies the HasPrefix predicate on the "image_url" field.
func ImageURLHasPrefix(v string) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldImageURL), v))
	})
}

// ImageURLHasSuffix applies the HasSuffix predicate on the "image_url" field.
func ImageURLHasSuffix(v string) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldImageURL), v))
	})
}

// ImageURLIsNil applies the IsNil predicate on the "image_url" field.
func ImageURLIsNil() predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldImageURL)))
	})
}

// ImageURLNotNil applies the NotNil predicate on the "image_url" field.
func ImageURLNotNil() predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldImageURL)))
	})
}

// ImageURLEqualFold applies the EqualFold predicate on the "image_url" field.
func ImageURLEqualFold(v string) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldImageURL), v))
	})
}

// ImageURLContainsFold applies the ContainsFold predicate on the "image_url" field.
func ImageURLContainsFold(v string) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldImageURL), v))
	})
}

// HasPayment applies the HasEdge predicate on the "payment" edge.
func HasPayment() predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PaymentTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PaymentTable, PaymentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPaymentWith applies the HasEdge predicate on the "payment" edge with a given conditions (other predicates).
func HasPaymentWith(preds ...predicate.Payment) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PaymentInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PaymentTable, PaymentColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PaymentCryptoDetail) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PaymentCryptoDetail) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PaymentCryptoDetail) predicate.PaymentCryptoDetail {
	return predicate.PaymentCryptoDetail(func(s *sql.Selector) {
		p(s.Not())
	})
}
