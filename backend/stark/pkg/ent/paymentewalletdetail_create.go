// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"gitlab.com/mcuc/monorepo/backend/stark/pkg/ent/payment"
	"gitlab.com/mcuc/monorepo/backend/stark/pkg/ent/paymentewalletdetail"
)

// PaymentEWalletDetailCreate is the builder for creating a PaymentEWalletDetail entity.
type PaymentEWalletDetailCreate struct {
	config
	mutation *PaymentEWalletDetailMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (pedc *PaymentEWalletDetailCreate) SetCreatedAt(t time.Time) *PaymentEWalletDetailCreate {
	pedc.mutation.SetCreatedAt(t)
	return pedc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pedc *PaymentEWalletDetailCreate) SetNillableCreatedAt(t *time.Time) *PaymentEWalletDetailCreate {
	if t != nil {
		pedc.SetCreatedAt(*t)
	}
	return pedc
}

// SetUpdatedAt sets the "updated_at" field.
func (pedc *PaymentEWalletDetailCreate) SetUpdatedAt(t time.Time) *PaymentEWalletDetailCreate {
	pedc.mutation.SetUpdatedAt(t)
	return pedc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pedc *PaymentEWalletDetailCreate) SetNillableUpdatedAt(t *time.Time) *PaymentEWalletDetailCreate {
	if t != nil {
		pedc.SetUpdatedAt(*t)
	}
	return pedc
}

// SetCreatedBy sets the "created_by" field.
func (pedc *PaymentEWalletDetailCreate) SetCreatedBy(s string) *PaymentEWalletDetailCreate {
	pedc.mutation.SetCreatedBy(s)
	return pedc
}

// SetUpdatedBy sets the "updated_by" field.
func (pedc *PaymentEWalletDetailCreate) SetUpdatedBy(s string) *PaymentEWalletDetailCreate {
	pedc.mutation.SetUpdatedBy(s)
	return pedc
}

// SetPaymentCode sets the "payment_code" field.
func (pedc *PaymentEWalletDetailCreate) SetPaymentCode(s string) *PaymentEWalletDetailCreate {
	pedc.mutation.SetPaymentCode(s)
	return pedc
}

// SetNillablePaymentCode sets the "payment_code" field if the given value is not nil.
func (pedc *PaymentEWalletDetailCreate) SetNillablePaymentCode(s *string) *PaymentEWalletDetailCreate {
	if s != nil {
		pedc.SetPaymentCode(*s)
	}
	return pedc
}

// SetMerchantUserID sets the "merchant_user_id" field.
func (pedc *PaymentEWalletDetailCreate) SetMerchantUserID(i int64) *PaymentEWalletDetailCreate {
	pedc.mutation.SetMerchantUserID(i)
	return pedc
}

// SetNillableMerchantUserID sets the "merchant_user_id" field if the given value is not nil.
func (pedc *PaymentEWalletDetailCreate) SetNillableMerchantUserID(i *int64) *PaymentEWalletDetailCreate {
	if i != nil {
		pedc.SetMerchantUserID(*i)
	}
	return pedc
}

// SetEWalletName sets the "e_wallet_name" field.
func (pedc *PaymentEWalletDetailCreate) SetEWalletName(i int32) *PaymentEWalletDetailCreate {
	pedc.mutation.SetEWalletName(i)
	return pedc
}

// SetNillableEWalletName sets the "e_wallet_name" field if the given value is not nil.
func (pedc *PaymentEWalletDetailCreate) SetNillableEWalletName(i *int32) *PaymentEWalletDetailCreate {
	if i != nil {
		pedc.SetEWalletName(*i)
	}
	return pedc
}

// SetMerchantUserAccountPhoneNumber sets the "merchant_user_account_phone_number" field.
func (pedc *PaymentEWalletDetailCreate) SetMerchantUserAccountPhoneNumber(s string) *PaymentEWalletDetailCreate {
	pedc.mutation.SetMerchantUserAccountPhoneNumber(s)
	return pedc
}

// SetNillableMerchantUserAccountPhoneNumber sets the "merchant_user_account_phone_number" field if the given value is not nil.
func (pedc *PaymentEWalletDetailCreate) SetNillableMerchantUserAccountPhoneNumber(s *string) *PaymentEWalletDetailCreate {
	if s != nil {
		pedc.SetMerchantUserAccountPhoneNumber(*s)
	}
	return pedc
}

// SetMerchantUserAccountName sets the "merchant_user_account_name" field.
func (pedc *PaymentEWalletDetailCreate) SetMerchantUserAccountName(s string) *PaymentEWalletDetailCreate {
	pedc.mutation.SetMerchantUserAccountName(s)
	return pedc
}

// SetNillableMerchantUserAccountName sets the "merchant_user_account_name" field if the given value is not nil.
func (pedc *PaymentEWalletDetailCreate) SetNillableMerchantUserAccountName(s *string) *PaymentEWalletDetailCreate {
	if s != nil {
		pedc.SetMerchantUserAccountName(*s)
	}
	return pedc
}

// SetSystemAccountPhoneNumber sets the "system_account_phone_number" field.
func (pedc *PaymentEWalletDetailCreate) SetSystemAccountPhoneNumber(s string) *PaymentEWalletDetailCreate {
	pedc.mutation.SetSystemAccountPhoneNumber(s)
	return pedc
}

// SetNillableSystemAccountPhoneNumber sets the "system_account_phone_number" field if the given value is not nil.
func (pedc *PaymentEWalletDetailCreate) SetNillableSystemAccountPhoneNumber(s *string) *PaymentEWalletDetailCreate {
	if s != nil {
		pedc.SetSystemAccountPhoneNumber(*s)
	}
	return pedc
}

// SetSystemAccountName sets the "system_account_name" field.
func (pedc *PaymentEWalletDetailCreate) SetSystemAccountName(s string) *PaymentEWalletDetailCreate {
	pedc.mutation.SetSystemAccountName(s)
	return pedc
}

// SetNillableSystemAccountName sets the "system_account_name" field if the given value is not nil.
func (pedc *PaymentEWalletDetailCreate) SetNillableSystemAccountName(s *string) *PaymentEWalletDetailCreate {
	if s != nil {
		pedc.SetSystemAccountName(*s)
	}
	return pedc
}

// SetAmount sets the "amount" field.
func (pedc *PaymentEWalletDetailCreate) SetAmount(u uint64) *PaymentEWalletDetailCreate {
	pedc.mutation.SetAmount(u)
	return pedc
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (pedc *PaymentEWalletDetailCreate) SetNillableAmount(u *uint64) *PaymentEWalletDetailCreate {
	if u != nil {
		pedc.SetAmount(*u)
	}
	return pedc
}

// SetFee sets the "fee" field.
func (pedc *PaymentEWalletDetailCreate) SetFee(u uint64) *PaymentEWalletDetailCreate {
	pedc.mutation.SetFee(u)
	return pedc
}

// SetNillableFee sets the "fee" field if the given value is not nil.
func (pedc *PaymentEWalletDetailCreate) SetNillableFee(u *uint64) *PaymentEWalletDetailCreate {
	if u != nil {
		pedc.SetFee(*u)
	}
	return pedc
}

// SetNote sets the "note" field.
func (pedc *PaymentEWalletDetailCreate) SetNote(s string) *PaymentEWalletDetailCreate {
	pedc.mutation.SetNote(s)
	return pedc
}

// SetNillableNote sets the "note" field if the given value is not nil.
func (pedc *PaymentEWalletDetailCreate) SetNillableNote(s *string) *PaymentEWalletDetailCreate {
	if s != nil {
		pedc.SetNote(*s)
	}
	return pedc
}

// SetImageURL sets the "image_url" field.
func (pedc *PaymentEWalletDetailCreate) SetImageURL(s string) *PaymentEWalletDetailCreate {
	pedc.mutation.SetImageURL(s)
	return pedc
}

// SetNillableImageURL sets the "image_url" field if the given value is not nil.
func (pedc *PaymentEWalletDetailCreate) SetNillableImageURL(s *string) *PaymentEWalletDetailCreate {
	if s != nil {
		pedc.SetImageURL(*s)
	}
	return pedc
}

// SetTxID sets the "tx_id" field.
func (pedc *PaymentEWalletDetailCreate) SetTxID(s string) *PaymentEWalletDetailCreate {
	pedc.mutation.SetTxID(s)
	return pedc
}

// SetNillableTxID sets the "tx_id" field if the given value is not nil.
func (pedc *PaymentEWalletDetailCreate) SetNillableTxID(s *string) *PaymentEWalletDetailCreate {
	if s != nil {
		pedc.SetTxID(*s)
	}
	return pedc
}

// SetID sets the "id" field.
func (pedc *PaymentEWalletDetailCreate) SetID(i int64) *PaymentEWalletDetailCreate {
	pedc.mutation.SetID(i)
	return pedc
}

// SetPaymentID sets the "payment" edge to the Payment entity by ID.
func (pedc *PaymentEWalletDetailCreate) SetPaymentID(id int64) *PaymentEWalletDetailCreate {
	pedc.mutation.SetPaymentID(id)
	return pedc
}

// SetPayment sets the "payment" edge to the Payment entity.
func (pedc *PaymentEWalletDetailCreate) SetPayment(p *Payment) *PaymentEWalletDetailCreate {
	return pedc.SetPaymentID(p.ID)
}

// Mutation returns the PaymentEWalletDetailMutation object of the builder.
func (pedc *PaymentEWalletDetailCreate) Mutation() *PaymentEWalletDetailMutation {
	return pedc.mutation
}

// Save creates the PaymentEWalletDetail in the database.
func (pedc *PaymentEWalletDetailCreate) Save(ctx context.Context) (*PaymentEWalletDetail, error) {
	var (
		err  error
		node *PaymentEWalletDetail
	)
	pedc.defaults()
	if len(pedc.hooks) == 0 {
		if err = pedc.check(); err != nil {
			return nil, err
		}
		node, err = pedc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PaymentEWalletDetailMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pedc.check(); err != nil {
				return nil, err
			}
			pedc.mutation = mutation
			if node, err = pedc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(pedc.hooks) - 1; i >= 0; i-- {
			if pedc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pedc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pedc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pedc *PaymentEWalletDetailCreate) SaveX(ctx context.Context) *PaymentEWalletDetail {
	v, err := pedc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pedc *PaymentEWalletDetailCreate) Exec(ctx context.Context) error {
	_, err := pedc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pedc *PaymentEWalletDetailCreate) ExecX(ctx context.Context) {
	if err := pedc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pedc *PaymentEWalletDetailCreate) defaults() {
	if _, ok := pedc.mutation.CreatedAt(); !ok {
		v := paymentewalletdetail.DefaultCreatedAt()
		pedc.mutation.SetCreatedAt(v)
	}
	if _, ok := pedc.mutation.UpdatedAt(); !ok {
		v := paymentewalletdetail.DefaultUpdatedAt()
		pedc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pedc *PaymentEWalletDetailCreate) check() error {
	if _, ok := pedc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "PaymentEWalletDetail.created_at"`)}
	}
	if _, ok := pedc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "PaymentEWalletDetail.updated_at"`)}
	}
	if _, ok := pedc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent: missing required field "PaymentEWalletDetail.created_by"`)}
	}
	if v, ok := pedc.mutation.CreatedBy(); ok {
		if err := paymentewalletdetail.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "PaymentEWalletDetail.created_by": %w`, err)}
		}
	}
	if _, ok := pedc.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`ent: missing required field "PaymentEWalletDetail.updated_by"`)}
	}
	if v, ok := pedc.mutation.UpdatedBy(); ok {
		if err := paymentewalletdetail.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "PaymentEWalletDetail.updated_by": %w`, err)}
		}
	}
	if v, ok := pedc.mutation.EWalletName(); ok {
		if err := paymentewalletdetail.EWalletNameValidator(v); err != nil {
			return &ValidationError{Name: "e_wallet_name", err: fmt.Errorf(`ent: validator failed for field "PaymentEWalletDetail.e_wallet_name": %w`, err)}
		}
	}
	if _, ok := pedc.mutation.PaymentID(); !ok {
		return &ValidationError{Name: "payment", err: errors.New(`ent: missing required edge "PaymentEWalletDetail.payment"`)}
	}
	return nil
}

func (pedc *PaymentEWalletDetailCreate) sqlSave(ctx context.Context) (*PaymentEWalletDetail, error) {
	_node, _spec := pedc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pedc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	return _node, nil
}

func (pedc *PaymentEWalletDetailCreate) createSpec() (*PaymentEWalletDetail, *sqlgraph.CreateSpec) {
	var (
		_node = &PaymentEWalletDetail{config: pedc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: paymentewalletdetail.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: paymentewalletdetail.FieldID,
			},
		}
	)
	_spec.OnConflict = pedc.conflict
	if id, ok := pedc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pedc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: paymentewalletdetail.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := pedc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: paymentewalletdetail.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := pedc.mutation.CreatedBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: paymentewalletdetail.FieldCreatedBy,
		})
		_node.CreatedBy = value
	}
	if value, ok := pedc.mutation.UpdatedBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: paymentewalletdetail.FieldUpdatedBy,
		})
		_node.UpdatedBy = value
	}
	if value, ok := pedc.mutation.PaymentCode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: paymentewalletdetail.FieldPaymentCode,
		})
		_node.PaymentCode = value
	}
	if value, ok := pedc.mutation.MerchantUserID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: paymentewalletdetail.FieldMerchantUserID,
		})
		_node.MerchantUserID = value
	}
	if value, ok := pedc.mutation.EWalletName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: paymentewalletdetail.FieldEWalletName,
		})
		_node.EWalletName = value
	}
	if value, ok := pedc.mutation.MerchantUserAccountPhoneNumber(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: paymentewalletdetail.FieldMerchantUserAccountPhoneNumber,
		})
		_node.MerchantUserAccountPhoneNumber = value
	}
	if value, ok := pedc.mutation.MerchantUserAccountName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: paymentewalletdetail.FieldMerchantUserAccountName,
		})
		_node.MerchantUserAccountName = value
	}
	if value, ok := pedc.mutation.SystemAccountPhoneNumber(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: paymentewalletdetail.FieldSystemAccountPhoneNumber,
		})
		_node.SystemAccountPhoneNumber = value
	}
	if value, ok := pedc.mutation.SystemAccountName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: paymentewalletdetail.FieldSystemAccountName,
		})
		_node.SystemAccountName = value
	}
	if value, ok := pedc.mutation.Amount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: paymentewalletdetail.FieldAmount,
		})
		_node.Amount = value
	}
	if value, ok := pedc.mutation.Fee(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: paymentewalletdetail.FieldFee,
		})
		_node.Fee = value
	}
	if value, ok := pedc.mutation.Note(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: paymentewalletdetail.FieldNote,
		})
		_node.Note = value
	}
	if value, ok := pedc.mutation.ImageURL(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: paymentewalletdetail.FieldImageURL,
		})
		_node.ImageURL = value
	}
	if value, ok := pedc.mutation.TxID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: paymentewalletdetail.FieldTxID,
		})
		_node.TxID = value
	}
	if nodes := pedc.mutation.PaymentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   paymentewalletdetail.PaymentTable,
			Columns: []string{paymentewalletdetail.PaymentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: payment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.payment_payment_e_wallet_detail = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PaymentEWalletDetail.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PaymentEWalletDetailUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (pedc *PaymentEWalletDetailCreate) OnConflict(opts ...sql.ConflictOption) *PaymentEWalletDetailUpsertOne {
	pedc.conflict = opts
	return &PaymentEWalletDetailUpsertOne{
		create: pedc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PaymentEWalletDetail.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (pedc *PaymentEWalletDetailCreate) OnConflictColumns(columns ...string) *PaymentEWalletDetailUpsertOne {
	pedc.conflict = append(pedc.conflict, sql.ConflictColumns(columns...))
	return &PaymentEWalletDetailUpsertOne{
		create: pedc,
	}
}

type (
	// PaymentEWalletDetailUpsertOne is the builder for "upsert"-ing
	//  one PaymentEWalletDetail node.
	PaymentEWalletDetailUpsertOne struct {
		create *PaymentEWalletDetailCreate
	}

	// PaymentEWalletDetailUpsert is the "OnConflict" setter.
	PaymentEWalletDetailUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *PaymentEWalletDetailUpsert) SetCreatedAt(v time.Time) *PaymentEWalletDetailUpsert {
	u.Set(paymentewalletdetail.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *PaymentEWalletDetailUpsert) UpdateCreatedAt() *PaymentEWalletDetailUpsert {
	u.SetExcluded(paymentewalletdetail.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PaymentEWalletDetailUpsert) SetUpdatedAt(v time.Time) *PaymentEWalletDetailUpsert {
	u.Set(paymentewalletdetail.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PaymentEWalletDetailUpsert) UpdateUpdatedAt() *PaymentEWalletDetailUpsert {
	u.SetExcluded(paymentewalletdetail.FieldUpdatedAt)
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *PaymentEWalletDetailUpsert) SetCreatedBy(v string) *PaymentEWalletDetailUpsert {
	u.Set(paymentewalletdetail.FieldCreatedBy, v)
	return u
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *PaymentEWalletDetailUpsert) UpdateCreatedBy() *PaymentEWalletDetailUpsert {
	u.SetExcluded(paymentewalletdetail.FieldCreatedBy)
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *PaymentEWalletDetailUpsert) SetUpdatedBy(v string) *PaymentEWalletDetailUpsert {
	u.Set(paymentewalletdetail.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *PaymentEWalletDetailUpsert) UpdateUpdatedBy() *PaymentEWalletDetailUpsert {
	u.SetExcluded(paymentewalletdetail.FieldUpdatedBy)
	return u
}

// SetPaymentCode sets the "payment_code" field.
func (u *PaymentEWalletDetailUpsert) SetPaymentCode(v string) *PaymentEWalletDetailUpsert {
	u.Set(paymentewalletdetail.FieldPaymentCode, v)
	return u
}

// UpdatePaymentCode sets the "payment_code" field to the value that was provided on create.
func (u *PaymentEWalletDetailUpsert) UpdatePaymentCode() *PaymentEWalletDetailUpsert {
	u.SetExcluded(paymentewalletdetail.FieldPaymentCode)
	return u
}

// ClearPaymentCode clears the value of the "payment_code" field.
func (u *PaymentEWalletDetailUpsert) ClearPaymentCode() *PaymentEWalletDetailUpsert {
	u.SetNull(paymentewalletdetail.FieldPaymentCode)
	return u
}

// SetMerchantUserID sets the "merchant_user_id" field.
func (u *PaymentEWalletDetailUpsert) SetMerchantUserID(v int64) *PaymentEWalletDetailUpsert {
	u.Set(paymentewalletdetail.FieldMerchantUserID, v)
	return u
}

// UpdateMerchantUserID sets the "merchant_user_id" field to the value that was provided on create.
func (u *PaymentEWalletDetailUpsert) UpdateMerchantUserID() *PaymentEWalletDetailUpsert {
	u.SetExcluded(paymentewalletdetail.FieldMerchantUserID)
	return u
}

// AddMerchantUserID adds v to the "merchant_user_id" field.
func (u *PaymentEWalletDetailUpsert) AddMerchantUserID(v int64) *PaymentEWalletDetailUpsert {
	u.Add(paymentewalletdetail.FieldMerchantUserID, v)
	return u
}

// ClearMerchantUserID clears the value of the "merchant_user_id" field.
func (u *PaymentEWalletDetailUpsert) ClearMerchantUserID() *PaymentEWalletDetailUpsert {
	u.SetNull(paymentewalletdetail.FieldMerchantUserID)
	return u
}

// SetEWalletName sets the "e_wallet_name" field.
func (u *PaymentEWalletDetailUpsert) SetEWalletName(v int32) *PaymentEWalletDetailUpsert {
	u.Set(paymentewalletdetail.FieldEWalletName, v)
	return u
}

// UpdateEWalletName sets the "e_wallet_name" field to the value that was provided on create.
func (u *PaymentEWalletDetailUpsert) UpdateEWalletName() *PaymentEWalletDetailUpsert {
	u.SetExcluded(paymentewalletdetail.FieldEWalletName)
	return u
}

// AddEWalletName adds v to the "e_wallet_name" field.
func (u *PaymentEWalletDetailUpsert) AddEWalletName(v int32) *PaymentEWalletDetailUpsert {
	u.Add(paymentewalletdetail.FieldEWalletName, v)
	return u
}

// ClearEWalletName clears the value of the "e_wallet_name" field.
func (u *PaymentEWalletDetailUpsert) ClearEWalletName() *PaymentEWalletDetailUpsert {
	u.SetNull(paymentewalletdetail.FieldEWalletName)
	return u
}

// SetMerchantUserAccountPhoneNumber sets the "merchant_user_account_phone_number" field.
func (u *PaymentEWalletDetailUpsert) SetMerchantUserAccountPhoneNumber(v string) *PaymentEWalletDetailUpsert {
	u.Set(paymentewalletdetail.FieldMerchantUserAccountPhoneNumber, v)
	return u
}

// UpdateMerchantUserAccountPhoneNumber sets the "merchant_user_account_phone_number" field to the value that was provided on create.
func (u *PaymentEWalletDetailUpsert) UpdateMerchantUserAccountPhoneNumber() *PaymentEWalletDetailUpsert {
	u.SetExcluded(paymentewalletdetail.FieldMerchantUserAccountPhoneNumber)
	return u
}

// ClearMerchantUserAccountPhoneNumber clears the value of the "merchant_user_account_phone_number" field.
func (u *PaymentEWalletDetailUpsert) ClearMerchantUserAccountPhoneNumber() *PaymentEWalletDetailUpsert {
	u.SetNull(paymentewalletdetail.FieldMerchantUserAccountPhoneNumber)
	return u
}

// SetMerchantUserAccountName sets the "merchant_user_account_name" field.
func (u *PaymentEWalletDetailUpsert) SetMerchantUserAccountName(v string) *PaymentEWalletDetailUpsert {
	u.Set(paymentewalletdetail.FieldMerchantUserAccountName, v)
	return u
}

// UpdateMerchantUserAccountName sets the "merchant_user_account_name" field to the value that was provided on create.
func (u *PaymentEWalletDetailUpsert) UpdateMerchantUserAccountName() *PaymentEWalletDetailUpsert {
	u.SetExcluded(paymentewalletdetail.FieldMerchantUserAccountName)
	return u
}

// ClearMerchantUserAccountName clears the value of the "merchant_user_account_name" field.
func (u *PaymentEWalletDetailUpsert) ClearMerchantUserAccountName() *PaymentEWalletDetailUpsert {
	u.SetNull(paymentewalletdetail.FieldMerchantUserAccountName)
	return u
}

// SetSystemAccountPhoneNumber sets the "system_account_phone_number" field.
func (u *PaymentEWalletDetailUpsert) SetSystemAccountPhoneNumber(v string) *PaymentEWalletDetailUpsert {
	u.Set(paymentewalletdetail.FieldSystemAccountPhoneNumber, v)
	return u
}

// UpdateSystemAccountPhoneNumber sets the "system_account_phone_number" field to the value that was provided on create.
func (u *PaymentEWalletDetailUpsert) UpdateSystemAccountPhoneNumber() *PaymentEWalletDetailUpsert {
	u.SetExcluded(paymentewalletdetail.FieldSystemAccountPhoneNumber)
	return u
}

// ClearSystemAccountPhoneNumber clears the value of the "system_account_phone_number" field.
func (u *PaymentEWalletDetailUpsert) ClearSystemAccountPhoneNumber() *PaymentEWalletDetailUpsert {
	u.SetNull(paymentewalletdetail.FieldSystemAccountPhoneNumber)
	return u
}

// SetSystemAccountName sets the "system_account_name" field.
func (u *PaymentEWalletDetailUpsert) SetSystemAccountName(v string) *PaymentEWalletDetailUpsert {
	u.Set(paymentewalletdetail.FieldSystemAccountName, v)
	return u
}

// UpdateSystemAccountName sets the "system_account_name" field to the value that was provided on create.
func (u *PaymentEWalletDetailUpsert) UpdateSystemAccountName() *PaymentEWalletDetailUpsert {
	u.SetExcluded(paymentewalletdetail.FieldSystemAccountName)
	return u
}

// ClearSystemAccountName clears the value of the "system_account_name" field.
func (u *PaymentEWalletDetailUpsert) ClearSystemAccountName() *PaymentEWalletDetailUpsert {
	u.SetNull(paymentewalletdetail.FieldSystemAccountName)
	return u
}

// SetAmount sets the "amount" field.
func (u *PaymentEWalletDetailUpsert) SetAmount(v uint64) *PaymentEWalletDetailUpsert {
	u.Set(paymentewalletdetail.FieldAmount, v)
	return u
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *PaymentEWalletDetailUpsert) UpdateAmount() *PaymentEWalletDetailUpsert {
	u.SetExcluded(paymentewalletdetail.FieldAmount)
	return u
}

// AddAmount adds v to the "amount" field.
func (u *PaymentEWalletDetailUpsert) AddAmount(v uint64) *PaymentEWalletDetailUpsert {
	u.Add(paymentewalletdetail.FieldAmount, v)
	return u
}

// ClearAmount clears the value of the "amount" field.
func (u *PaymentEWalletDetailUpsert) ClearAmount() *PaymentEWalletDetailUpsert {
	u.SetNull(paymentewalletdetail.FieldAmount)
	return u
}

// SetFee sets the "fee" field.
func (u *PaymentEWalletDetailUpsert) SetFee(v uint64) *PaymentEWalletDetailUpsert {
	u.Set(paymentewalletdetail.FieldFee, v)
	return u
}

// UpdateFee sets the "fee" field to the value that was provided on create.
func (u *PaymentEWalletDetailUpsert) UpdateFee() *PaymentEWalletDetailUpsert {
	u.SetExcluded(paymentewalletdetail.FieldFee)
	return u
}

// AddFee adds v to the "fee" field.
func (u *PaymentEWalletDetailUpsert) AddFee(v uint64) *PaymentEWalletDetailUpsert {
	u.Add(paymentewalletdetail.FieldFee, v)
	return u
}

// ClearFee clears the value of the "fee" field.
func (u *PaymentEWalletDetailUpsert) ClearFee() *PaymentEWalletDetailUpsert {
	u.SetNull(paymentewalletdetail.FieldFee)
	return u
}

// SetNote sets the "note" field.
func (u *PaymentEWalletDetailUpsert) SetNote(v string) *PaymentEWalletDetailUpsert {
	u.Set(paymentewalletdetail.FieldNote, v)
	return u
}

// UpdateNote sets the "note" field to the value that was provided on create.
func (u *PaymentEWalletDetailUpsert) UpdateNote() *PaymentEWalletDetailUpsert {
	u.SetExcluded(paymentewalletdetail.FieldNote)
	return u
}

// ClearNote clears the value of the "note" field.
func (u *PaymentEWalletDetailUpsert) ClearNote() *PaymentEWalletDetailUpsert {
	u.SetNull(paymentewalletdetail.FieldNote)
	return u
}

// SetImageURL sets the "image_url" field.
func (u *PaymentEWalletDetailUpsert) SetImageURL(v string) *PaymentEWalletDetailUpsert {
	u.Set(paymentewalletdetail.FieldImageURL, v)
	return u
}

// UpdateImageURL sets the "image_url" field to the value that was provided on create.
func (u *PaymentEWalletDetailUpsert) UpdateImageURL() *PaymentEWalletDetailUpsert {
	u.SetExcluded(paymentewalletdetail.FieldImageURL)
	return u
}

// ClearImageURL clears the value of the "image_url" field.
func (u *PaymentEWalletDetailUpsert) ClearImageURL() *PaymentEWalletDetailUpsert {
	u.SetNull(paymentewalletdetail.FieldImageURL)
	return u
}

// SetTxID sets the "tx_id" field.
func (u *PaymentEWalletDetailUpsert) SetTxID(v string) *PaymentEWalletDetailUpsert {
	u.Set(paymentewalletdetail.FieldTxID, v)
	return u
}

// UpdateTxID sets the "tx_id" field to the value that was provided on create.
func (u *PaymentEWalletDetailUpsert) UpdateTxID() *PaymentEWalletDetailUpsert {
	u.SetExcluded(paymentewalletdetail.FieldTxID)
	return u
}

// ClearTxID clears the value of the "tx_id" field.
func (u *PaymentEWalletDetailUpsert) ClearTxID() *PaymentEWalletDetailUpsert {
	u.SetNull(paymentewalletdetail.FieldTxID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.PaymentEWalletDetail.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(paymentewalletdetail.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *PaymentEWalletDetailUpsertOne) UpdateNewValues() *PaymentEWalletDetailUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(paymentewalletdetail.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.PaymentEWalletDetail.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *PaymentEWalletDetailUpsertOne) Ignore() *PaymentEWalletDetailUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PaymentEWalletDetailUpsertOne) DoNothing() *PaymentEWalletDetailUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PaymentEWalletDetailCreate.OnConflict
// documentation for more info.
func (u *PaymentEWalletDetailUpsertOne) Update(set func(*PaymentEWalletDetailUpsert)) *PaymentEWalletDetailUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PaymentEWalletDetailUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *PaymentEWalletDetailUpsertOne) SetCreatedAt(v time.Time) *PaymentEWalletDetailUpsertOne {
	return u.Update(func(s *PaymentEWalletDetailUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *PaymentEWalletDetailUpsertOne) UpdateCreatedAt() *PaymentEWalletDetailUpsertOne {
	return u.Update(func(s *PaymentEWalletDetailUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PaymentEWalletDetailUpsertOne) SetUpdatedAt(v time.Time) *PaymentEWalletDetailUpsertOne {
	return u.Update(func(s *PaymentEWalletDetailUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PaymentEWalletDetailUpsertOne) UpdateUpdatedAt() *PaymentEWalletDetailUpsertOne {
	return u.Update(func(s *PaymentEWalletDetailUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetCreatedBy sets the "created_by" field.
func (u *PaymentEWalletDetailUpsertOne) SetCreatedBy(v string) *PaymentEWalletDetailUpsertOne {
	return u.Update(func(s *PaymentEWalletDetailUpsert) {
		s.SetCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *PaymentEWalletDetailUpsertOne) UpdateCreatedBy() *PaymentEWalletDetailUpsertOne {
	return u.Update(func(s *PaymentEWalletDetailUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *PaymentEWalletDetailUpsertOne) SetUpdatedBy(v string) *PaymentEWalletDetailUpsertOne {
	return u.Update(func(s *PaymentEWalletDetailUpsert) {
		s.SetUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *PaymentEWalletDetailUpsertOne) UpdateUpdatedBy() *PaymentEWalletDetailUpsertOne {
	return u.Update(func(s *PaymentEWalletDetailUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetPaymentCode sets the "payment_code" field.
func (u *PaymentEWalletDetailUpsertOne) SetPaymentCode(v string) *PaymentEWalletDetailUpsertOne {
	return u.Update(func(s *PaymentEWalletDetailUpsert) {
		s.SetPaymentCode(v)
	})
}

// UpdatePaymentCode sets the "payment_code" field to the value that was provided on create.
func (u *PaymentEWalletDetailUpsertOne) UpdatePaymentCode() *PaymentEWalletDetailUpsertOne {
	return u.Update(func(s *PaymentEWalletDetailUpsert) {
		s.UpdatePaymentCode()
	})
}

// ClearPaymentCode clears the value of the "payment_code" field.
func (u *PaymentEWalletDetailUpsertOne) ClearPaymentCode() *PaymentEWalletDetailUpsertOne {
	return u.Update(func(s *PaymentEWalletDetailUpsert) {
		s.ClearPaymentCode()
	})
}

// SetMerchantUserID sets the "merchant_user_id" field.
func (u *PaymentEWalletDetailUpsertOne) SetMerchantUserID(v int64) *PaymentEWalletDetailUpsertOne {
	return u.Update(func(s *PaymentEWalletDetailUpsert) {
		s.SetMerchantUserID(v)
	})
}

// AddMerchantUserID adds v to the "merchant_user_id" field.
func (u *PaymentEWalletDetailUpsertOne) AddMerchantUserID(v int64) *PaymentEWalletDetailUpsertOne {
	return u.Update(func(s *PaymentEWalletDetailUpsert) {
		s.AddMerchantUserID(v)
	})
}

// UpdateMerchantUserID sets the "merchant_user_id" field to the value that was provided on create.
func (u *PaymentEWalletDetailUpsertOne) UpdateMerchantUserID() *PaymentEWalletDetailUpsertOne {
	return u.Update(func(s *PaymentEWalletDetailUpsert) {
		s.UpdateMerchantUserID()
	})
}

// ClearMerchantUserID clears the value of the "merchant_user_id" field.
func (u *PaymentEWalletDetailUpsertOne) ClearMerchantUserID() *PaymentEWalletDetailUpsertOne {
	return u.Update(func(s *PaymentEWalletDetailUpsert) {
		s.ClearMerchantUserID()
	})
}

// SetEWalletName sets the "e_wallet_name" field.
func (u *PaymentEWalletDetailUpsertOne) SetEWalletName(v int32) *PaymentEWalletDetailUpsertOne {
	return u.Update(func(s *PaymentEWalletDetailUpsert) {
		s.SetEWalletName(v)
	})
}

// AddEWalletName adds v to the "e_wallet_name" field.
func (u *PaymentEWalletDetailUpsertOne) AddEWalletName(v int32) *PaymentEWalletDetailUpsertOne {
	return u.Update(func(s *PaymentEWalletDetailUpsert) {
		s.AddEWalletName(v)
	})
}

// UpdateEWalletName sets the "e_wallet_name" field to the value that was provided on create.
func (u *PaymentEWalletDetailUpsertOne) UpdateEWalletName() *PaymentEWalletDetailUpsertOne {
	return u.Update(func(s *PaymentEWalletDetailUpsert) {
		s.UpdateEWalletName()
	})
}

// ClearEWalletName clears the value of the "e_wallet_name" field.
func (u *PaymentEWalletDetailUpsertOne) ClearEWalletName() *PaymentEWalletDetailUpsertOne {
	return u.Update(func(s *PaymentEWalletDetailUpsert) {
		s.ClearEWalletName()
	})
}

// SetMerchantUserAccountPhoneNumber sets the "merchant_user_account_phone_number" field.
func (u *PaymentEWalletDetailUpsertOne) SetMerchantUserAccountPhoneNumber(v string) *PaymentEWalletDetailUpsertOne {
	return u.Update(func(s *PaymentEWalletDetailUpsert) {
		s.SetMerchantUserAccountPhoneNumber(v)
	})
}

// UpdateMerchantUserAccountPhoneNumber sets the "merchant_user_account_phone_number" field to the value that was provided on create.
func (u *PaymentEWalletDetailUpsertOne) UpdateMerchantUserAccountPhoneNumber() *PaymentEWalletDetailUpsertOne {
	return u.Update(func(s *PaymentEWalletDetailUpsert) {
		s.UpdateMerchantUserAccountPhoneNumber()
	})
}

// ClearMerchantUserAccountPhoneNumber clears the value of the "merchant_user_account_phone_number" field.
func (u *PaymentEWalletDetailUpsertOne) ClearMerchantUserAccountPhoneNumber() *PaymentEWalletDetailUpsertOne {
	return u.Update(func(s *PaymentEWalletDetailUpsert) {
		s.ClearMerchantUserAccountPhoneNumber()
	})
}

// SetMerchantUserAccountName sets the "merchant_user_account_name" field.
func (u *PaymentEWalletDetailUpsertOne) SetMerchantUserAccountName(v string) *PaymentEWalletDetailUpsertOne {
	return u.Update(func(s *PaymentEWalletDetailUpsert) {
		s.SetMerchantUserAccountName(v)
	})
}

// UpdateMerchantUserAccountName sets the "merchant_user_account_name" field to the value that was provided on create.
func (u *PaymentEWalletDetailUpsertOne) UpdateMerchantUserAccountName() *PaymentEWalletDetailUpsertOne {
	return u.Update(func(s *PaymentEWalletDetailUpsert) {
		s.UpdateMerchantUserAccountName()
	})
}

// ClearMerchantUserAccountName clears the value of the "merchant_user_account_name" field.
func (u *PaymentEWalletDetailUpsertOne) ClearMerchantUserAccountName() *PaymentEWalletDetailUpsertOne {
	return u.Update(func(s *PaymentEWalletDetailUpsert) {
		s.ClearMerchantUserAccountName()
	})
}

// SetSystemAccountPhoneNumber sets the "system_account_phone_number" field.
func (u *PaymentEWalletDetailUpsertOne) SetSystemAccountPhoneNumber(v string) *PaymentEWalletDetailUpsertOne {
	return u.Update(func(s *PaymentEWalletDetailUpsert) {
		s.SetSystemAccountPhoneNumber(v)
	})
}

// UpdateSystemAccountPhoneNumber sets the "system_account_phone_number" field to the value that was provided on create.
func (u *PaymentEWalletDetailUpsertOne) UpdateSystemAccountPhoneNumber() *PaymentEWalletDetailUpsertOne {
	return u.Update(func(s *PaymentEWalletDetailUpsert) {
		s.UpdateSystemAccountPhoneNumber()
	})
}

// ClearSystemAccountPhoneNumber clears the value of the "system_account_phone_number" field.
func (u *PaymentEWalletDetailUpsertOne) ClearSystemAccountPhoneNumber() *PaymentEWalletDetailUpsertOne {
	return u.Update(func(s *PaymentEWalletDetailUpsert) {
		s.ClearSystemAccountPhoneNumber()
	})
}

// SetSystemAccountName sets the "system_account_name" field.
func (u *PaymentEWalletDetailUpsertOne) SetSystemAccountName(v string) *PaymentEWalletDetailUpsertOne {
	return u.Update(func(s *PaymentEWalletDetailUpsert) {
		s.SetSystemAccountName(v)
	})
}

// UpdateSystemAccountName sets the "system_account_name" field to the value that was provided on create.
func (u *PaymentEWalletDetailUpsertOne) UpdateSystemAccountName() *PaymentEWalletDetailUpsertOne {
	return u.Update(func(s *PaymentEWalletDetailUpsert) {
		s.UpdateSystemAccountName()
	})
}

// ClearSystemAccountName clears the value of the "system_account_name" field.
func (u *PaymentEWalletDetailUpsertOne) ClearSystemAccountName() *PaymentEWalletDetailUpsertOne {
	return u.Update(func(s *PaymentEWalletDetailUpsert) {
		s.ClearSystemAccountName()
	})
}

// SetAmount sets the "amount" field.
func (u *PaymentEWalletDetailUpsertOne) SetAmount(v uint64) *PaymentEWalletDetailUpsertOne {
	return u.Update(func(s *PaymentEWalletDetailUpsert) {
		s.SetAmount(v)
	})
}

// AddAmount adds v to the "amount" field.
func (u *PaymentEWalletDetailUpsertOne) AddAmount(v uint64) *PaymentEWalletDetailUpsertOne {
	return u.Update(func(s *PaymentEWalletDetailUpsert) {
		s.AddAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *PaymentEWalletDetailUpsertOne) UpdateAmount() *PaymentEWalletDetailUpsertOne {
	return u.Update(func(s *PaymentEWalletDetailUpsert) {
		s.UpdateAmount()
	})
}

// ClearAmount clears the value of the "amount" field.
func (u *PaymentEWalletDetailUpsertOne) ClearAmount() *PaymentEWalletDetailUpsertOne {
	return u.Update(func(s *PaymentEWalletDetailUpsert) {
		s.ClearAmount()
	})
}

// SetFee sets the "fee" field.
func (u *PaymentEWalletDetailUpsertOne) SetFee(v uint64) *PaymentEWalletDetailUpsertOne {
	return u.Update(func(s *PaymentEWalletDetailUpsert) {
		s.SetFee(v)
	})
}

// AddFee adds v to the "fee" field.
func (u *PaymentEWalletDetailUpsertOne) AddFee(v uint64) *PaymentEWalletDetailUpsertOne {
	return u.Update(func(s *PaymentEWalletDetailUpsert) {
		s.AddFee(v)
	})
}

// UpdateFee sets the "fee" field to the value that was provided on create.
func (u *PaymentEWalletDetailUpsertOne) UpdateFee() *PaymentEWalletDetailUpsertOne {
	return u.Update(func(s *PaymentEWalletDetailUpsert) {
		s.UpdateFee()
	})
}

// ClearFee clears the value of the "fee" field.
func (u *PaymentEWalletDetailUpsertOne) ClearFee() *PaymentEWalletDetailUpsertOne {
	return u.Update(func(s *PaymentEWalletDetailUpsert) {
		s.ClearFee()
	})
}

// SetNote sets the "note" field.
func (u *PaymentEWalletDetailUpsertOne) SetNote(v string) *PaymentEWalletDetailUpsertOne {
	return u.Update(func(s *PaymentEWalletDetailUpsert) {
		s.SetNote(v)
	})
}

// UpdateNote sets the "note" field to the value that was provided on create.
func (u *PaymentEWalletDetailUpsertOne) UpdateNote() *PaymentEWalletDetailUpsertOne {
	return u.Update(func(s *PaymentEWalletDetailUpsert) {
		s.UpdateNote()
	})
}

// ClearNote clears the value of the "note" field.
func (u *PaymentEWalletDetailUpsertOne) ClearNote() *PaymentEWalletDetailUpsertOne {
	return u.Update(func(s *PaymentEWalletDetailUpsert) {
		s.ClearNote()
	})
}

// SetImageURL sets the "image_url" field.
func (u *PaymentEWalletDetailUpsertOne) SetImageURL(v string) *PaymentEWalletDetailUpsertOne {
	return u.Update(func(s *PaymentEWalletDetailUpsert) {
		s.SetImageURL(v)
	})
}

// UpdateImageURL sets the "image_url" field to the value that was provided on create.
func (u *PaymentEWalletDetailUpsertOne) UpdateImageURL() *PaymentEWalletDetailUpsertOne {
	return u.Update(func(s *PaymentEWalletDetailUpsert) {
		s.UpdateImageURL()
	})
}

// ClearImageURL clears the value of the "image_url" field.
func (u *PaymentEWalletDetailUpsertOne) ClearImageURL() *PaymentEWalletDetailUpsertOne {
	return u.Update(func(s *PaymentEWalletDetailUpsert) {
		s.ClearImageURL()
	})
}

// SetTxID sets the "tx_id" field.
func (u *PaymentEWalletDetailUpsertOne) SetTxID(v string) *PaymentEWalletDetailUpsertOne {
	return u.Update(func(s *PaymentEWalletDetailUpsert) {
		s.SetTxID(v)
	})
}

// UpdateTxID sets the "tx_id" field to the value that was provided on create.
func (u *PaymentEWalletDetailUpsertOne) UpdateTxID() *PaymentEWalletDetailUpsertOne {
	return u.Update(func(s *PaymentEWalletDetailUpsert) {
		s.UpdateTxID()
	})
}

// ClearTxID clears the value of the "tx_id" field.
func (u *PaymentEWalletDetailUpsertOne) ClearTxID() *PaymentEWalletDetailUpsertOne {
	return u.Update(func(s *PaymentEWalletDetailUpsert) {
		s.ClearTxID()
	})
}

// Exec executes the query.
func (u *PaymentEWalletDetailUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PaymentEWalletDetailCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PaymentEWalletDetailUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PaymentEWalletDetailUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PaymentEWalletDetailUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PaymentEWalletDetailCreateBulk is the builder for creating many PaymentEWalletDetail entities in bulk.
type PaymentEWalletDetailCreateBulk struct {
	config
	builders []*PaymentEWalletDetailCreate
	conflict []sql.ConflictOption
}

// Save creates the PaymentEWalletDetail entities in the database.
func (pedcb *PaymentEWalletDetailCreateBulk) Save(ctx context.Context) ([]*PaymentEWalletDetail, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pedcb.builders))
	nodes := make([]*PaymentEWalletDetail, len(pedcb.builders))
	mutators := make([]Mutator, len(pedcb.builders))
	for i := range pedcb.builders {
		func(i int, root context.Context) {
			builder := pedcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PaymentEWalletDetailMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pedcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pedcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pedcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pedcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pedcb *PaymentEWalletDetailCreateBulk) SaveX(ctx context.Context) []*PaymentEWalletDetail {
	v, err := pedcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pedcb *PaymentEWalletDetailCreateBulk) Exec(ctx context.Context) error {
	_, err := pedcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pedcb *PaymentEWalletDetailCreateBulk) ExecX(ctx context.Context) {
	if err := pedcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PaymentEWalletDetail.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PaymentEWalletDetailUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (pedcb *PaymentEWalletDetailCreateBulk) OnConflict(opts ...sql.ConflictOption) *PaymentEWalletDetailUpsertBulk {
	pedcb.conflict = opts
	return &PaymentEWalletDetailUpsertBulk{
		create: pedcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PaymentEWalletDetail.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (pedcb *PaymentEWalletDetailCreateBulk) OnConflictColumns(columns ...string) *PaymentEWalletDetailUpsertBulk {
	pedcb.conflict = append(pedcb.conflict, sql.ConflictColumns(columns...))
	return &PaymentEWalletDetailUpsertBulk{
		create: pedcb,
	}
}

// PaymentEWalletDetailUpsertBulk is the builder for "upsert"-ing
// a bulk of PaymentEWalletDetail nodes.
type PaymentEWalletDetailUpsertBulk struct {
	create *PaymentEWalletDetailCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.PaymentEWalletDetail.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(paymentewalletdetail.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *PaymentEWalletDetailUpsertBulk) UpdateNewValues() *PaymentEWalletDetailUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(paymentewalletdetail.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PaymentEWalletDetail.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *PaymentEWalletDetailUpsertBulk) Ignore() *PaymentEWalletDetailUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PaymentEWalletDetailUpsertBulk) DoNothing() *PaymentEWalletDetailUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PaymentEWalletDetailCreateBulk.OnConflict
// documentation for more info.
func (u *PaymentEWalletDetailUpsertBulk) Update(set func(*PaymentEWalletDetailUpsert)) *PaymentEWalletDetailUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PaymentEWalletDetailUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *PaymentEWalletDetailUpsertBulk) SetCreatedAt(v time.Time) *PaymentEWalletDetailUpsertBulk {
	return u.Update(func(s *PaymentEWalletDetailUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *PaymentEWalletDetailUpsertBulk) UpdateCreatedAt() *PaymentEWalletDetailUpsertBulk {
	return u.Update(func(s *PaymentEWalletDetailUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PaymentEWalletDetailUpsertBulk) SetUpdatedAt(v time.Time) *PaymentEWalletDetailUpsertBulk {
	return u.Update(func(s *PaymentEWalletDetailUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PaymentEWalletDetailUpsertBulk) UpdateUpdatedAt() *PaymentEWalletDetailUpsertBulk {
	return u.Update(func(s *PaymentEWalletDetailUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetCreatedBy sets the "created_by" field.
func (u *PaymentEWalletDetailUpsertBulk) SetCreatedBy(v string) *PaymentEWalletDetailUpsertBulk {
	return u.Update(func(s *PaymentEWalletDetailUpsert) {
		s.SetCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *PaymentEWalletDetailUpsertBulk) UpdateCreatedBy() *PaymentEWalletDetailUpsertBulk {
	return u.Update(func(s *PaymentEWalletDetailUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *PaymentEWalletDetailUpsertBulk) SetUpdatedBy(v string) *PaymentEWalletDetailUpsertBulk {
	return u.Update(func(s *PaymentEWalletDetailUpsert) {
		s.SetUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *PaymentEWalletDetailUpsertBulk) UpdateUpdatedBy() *PaymentEWalletDetailUpsertBulk {
	return u.Update(func(s *PaymentEWalletDetailUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetPaymentCode sets the "payment_code" field.
func (u *PaymentEWalletDetailUpsertBulk) SetPaymentCode(v string) *PaymentEWalletDetailUpsertBulk {
	return u.Update(func(s *PaymentEWalletDetailUpsert) {
		s.SetPaymentCode(v)
	})
}

// UpdatePaymentCode sets the "payment_code" field to the value that was provided on create.
func (u *PaymentEWalletDetailUpsertBulk) UpdatePaymentCode() *PaymentEWalletDetailUpsertBulk {
	return u.Update(func(s *PaymentEWalletDetailUpsert) {
		s.UpdatePaymentCode()
	})
}

// ClearPaymentCode clears the value of the "payment_code" field.
func (u *PaymentEWalletDetailUpsertBulk) ClearPaymentCode() *PaymentEWalletDetailUpsertBulk {
	return u.Update(func(s *PaymentEWalletDetailUpsert) {
		s.ClearPaymentCode()
	})
}

// SetMerchantUserID sets the "merchant_user_id" field.
func (u *PaymentEWalletDetailUpsertBulk) SetMerchantUserID(v int64) *PaymentEWalletDetailUpsertBulk {
	return u.Update(func(s *PaymentEWalletDetailUpsert) {
		s.SetMerchantUserID(v)
	})
}

// AddMerchantUserID adds v to the "merchant_user_id" field.
func (u *PaymentEWalletDetailUpsertBulk) AddMerchantUserID(v int64) *PaymentEWalletDetailUpsertBulk {
	return u.Update(func(s *PaymentEWalletDetailUpsert) {
		s.AddMerchantUserID(v)
	})
}

// UpdateMerchantUserID sets the "merchant_user_id" field to the value that was provided on create.
func (u *PaymentEWalletDetailUpsertBulk) UpdateMerchantUserID() *PaymentEWalletDetailUpsertBulk {
	return u.Update(func(s *PaymentEWalletDetailUpsert) {
		s.UpdateMerchantUserID()
	})
}

// ClearMerchantUserID clears the value of the "merchant_user_id" field.
func (u *PaymentEWalletDetailUpsertBulk) ClearMerchantUserID() *PaymentEWalletDetailUpsertBulk {
	return u.Update(func(s *PaymentEWalletDetailUpsert) {
		s.ClearMerchantUserID()
	})
}

// SetEWalletName sets the "e_wallet_name" field.
func (u *PaymentEWalletDetailUpsertBulk) SetEWalletName(v int32) *PaymentEWalletDetailUpsertBulk {
	return u.Update(func(s *PaymentEWalletDetailUpsert) {
		s.SetEWalletName(v)
	})
}

// AddEWalletName adds v to the "e_wallet_name" field.
func (u *PaymentEWalletDetailUpsertBulk) AddEWalletName(v int32) *PaymentEWalletDetailUpsertBulk {
	return u.Update(func(s *PaymentEWalletDetailUpsert) {
		s.AddEWalletName(v)
	})
}

// UpdateEWalletName sets the "e_wallet_name" field to the value that was provided on create.
func (u *PaymentEWalletDetailUpsertBulk) UpdateEWalletName() *PaymentEWalletDetailUpsertBulk {
	return u.Update(func(s *PaymentEWalletDetailUpsert) {
		s.UpdateEWalletName()
	})
}

// ClearEWalletName clears the value of the "e_wallet_name" field.
func (u *PaymentEWalletDetailUpsertBulk) ClearEWalletName() *PaymentEWalletDetailUpsertBulk {
	return u.Update(func(s *PaymentEWalletDetailUpsert) {
		s.ClearEWalletName()
	})
}

// SetMerchantUserAccountPhoneNumber sets the "merchant_user_account_phone_number" field.
func (u *PaymentEWalletDetailUpsertBulk) SetMerchantUserAccountPhoneNumber(v string) *PaymentEWalletDetailUpsertBulk {
	return u.Update(func(s *PaymentEWalletDetailUpsert) {
		s.SetMerchantUserAccountPhoneNumber(v)
	})
}

// UpdateMerchantUserAccountPhoneNumber sets the "merchant_user_account_phone_number" field to the value that was provided on create.
func (u *PaymentEWalletDetailUpsertBulk) UpdateMerchantUserAccountPhoneNumber() *PaymentEWalletDetailUpsertBulk {
	return u.Update(func(s *PaymentEWalletDetailUpsert) {
		s.UpdateMerchantUserAccountPhoneNumber()
	})
}

// ClearMerchantUserAccountPhoneNumber clears the value of the "merchant_user_account_phone_number" field.
func (u *PaymentEWalletDetailUpsertBulk) ClearMerchantUserAccountPhoneNumber() *PaymentEWalletDetailUpsertBulk {
	return u.Update(func(s *PaymentEWalletDetailUpsert) {
		s.ClearMerchantUserAccountPhoneNumber()
	})
}

// SetMerchantUserAccountName sets the "merchant_user_account_name" field.
func (u *PaymentEWalletDetailUpsertBulk) SetMerchantUserAccountName(v string) *PaymentEWalletDetailUpsertBulk {
	return u.Update(func(s *PaymentEWalletDetailUpsert) {
		s.SetMerchantUserAccountName(v)
	})
}

// UpdateMerchantUserAccountName sets the "merchant_user_account_name" field to the value that was provided on create.
func (u *PaymentEWalletDetailUpsertBulk) UpdateMerchantUserAccountName() *PaymentEWalletDetailUpsertBulk {
	return u.Update(func(s *PaymentEWalletDetailUpsert) {
		s.UpdateMerchantUserAccountName()
	})
}

// ClearMerchantUserAccountName clears the value of the "merchant_user_account_name" field.
func (u *PaymentEWalletDetailUpsertBulk) ClearMerchantUserAccountName() *PaymentEWalletDetailUpsertBulk {
	return u.Update(func(s *PaymentEWalletDetailUpsert) {
		s.ClearMerchantUserAccountName()
	})
}

// SetSystemAccountPhoneNumber sets the "system_account_phone_number" field.
func (u *PaymentEWalletDetailUpsertBulk) SetSystemAccountPhoneNumber(v string) *PaymentEWalletDetailUpsertBulk {
	return u.Update(func(s *PaymentEWalletDetailUpsert) {
		s.SetSystemAccountPhoneNumber(v)
	})
}

// UpdateSystemAccountPhoneNumber sets the "system_account_phone_number" field to the value that was provided on create.
func (u *PaymentEWalletDetailUpsertBulk) UpdateSystemAccountPhoneNumber() *PaymentEWalletDetailUpsertBulk {
	return u.Update(func(s *PaymentEWalletDetailUpsert) {
		s.UpdateSystemAccountPhoneNumber()
	})
}

// ClearSystemAccountPhoneNumber clears the value of the "system_account_phone_number" field.
func (u *PaymentEWalletDetailUpsertBulk) ClearSystemAccountPhoneNumber() *PaymentEWalletDetailUpsertBulk {
	return u.Update(func(s *PaymentEWalletDetailUpsert) {
		s.ClearSystemAccountPhoneNumber()
	})
}

// SetSystemAccountName sets the "system_account_name" field.
func (u *PaymentEWalletDetailUpsertBulk) SetSystemAccountName(v string) *PaymentEWalletDetailUpsertBulk {
	return u.Update(func(s *PaymentEWalletDetailUpsert) {
		s.SetSystemAccountName(v)
	})
}

// UpdateSystemAccountName sets the "system_account_name" field to the value that was provided on create.
func (u *PaymentEWalletDetailUpsertBulk) UpdateSystemAccountName() *PaymentEWalletDetailUpsertBulk {
	return u.Update(func(s *PaymentEWalletDetailUpsert) {
		s.UpdateSystemAccountName()
	})
}

// ClearSystemAccountName clears the value of the "system_account_name" field.
func (u *PaymentEWalletDetailUpsertBulk) ClearSystemAccountName() *PaymentEWalletDetailUpsertBulk {
	return u.Update(func(s *PaymentEWalletDetailUpsert) {
		s.ClearSystemAccountName()
	})
}

// SetAmount sets the "amount" field.
func (u *PaymentEWalletDetailUpsertBulk) SetAmount(v uint64) *PaymentEWalletDetailUpsertBulk {
	return u.Update(func(s *PaymentEWalletDetailUpsert) {
		s.SetAmount(v)
	})
}

// AddAmount adds v to the "amount" field.
func (u *PaymentEWalletDetailUpsertBulk) AddAmount(v uint64) *PaymentEWalletDetailUpsertBulk {
	return u.Update(func(s *PaymentEWalletDetailUpsert) {
		s.AddAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *PaymentEWalletDetailUpsertBulk) UpdateAmount() *PaymentEWalletDetailUpsertBulk {
	return u.Update(func(s *PaymentEWalletDetailUpsert) {
		s.UpdateAmount()
	})
}

// ClearAmount clears the value of the "amount" field.
func (u *PaymentEWalletDetailUpsertBulk) ClearAmount() *PaymentEWalletDetailUpsertBulk {
	return u.Update(func(s *PaymentEWalletDetailUpsert) {
		s.ClearAmount()
	})
}

// SetFee sets the "fee" field.
func (u *PaymentEWalletDetailUpsertBulk) SetFee(v uint64) *PaymentEWalletDetailUpsertBulk {
	return u.Update(func(s *PaymentEWalletDetailUpsert) {
		s.SetFee(v)
	})
}

// AddFee adds v to the "fee" field.
func (u *PaymentEWalletDetailUpsertBulk) AddFee(v uint64) *PaymentEWalletDetailUpsertBulk {
	return u.Update(func(s *PaymentEWalletDetailUpsert) {
		s.AddFee(v)
	})
}

// UpdateFee sets the "fee" field to the value that was provided on create.
func (u *PaymentEWalletDetailUpsertBulk) UpdateFee() *PaymentEWalletDetailUpsertBulk {
	return u.Update(func(s *PaymentEWalletDetailUpsert) {
		s.UpdateFee()
	})
}

// ClearFee clears the value of the "fee" field.
func (u *PaymentEWalletDetailUpsertBulk) ClearFee() *PaymentEWalletDetailUpsertBulk {
	return u.Update(func(s *PaymentEWalletDetailUpsert) {
		s.ClearFee()
	})
}

// SetNote sets the "note" field.
func (u *PaymentEWalletDetailUpsertBulk) SetNote(v string) *PaymentEWalletDetailUpsertBulk {
	return u.Update(func(s *PaymentEWalletDetailUpsert) {
		s.SetNote(v)
	})
}

// UpdateNote sets the "note" field to the value that was provided on create.
func (u *PaymentEWalletDetailUpsertBulk) UpdateNote() *PaymentEWalletDetailUpsertBulk {
	return u.Update(func(s *PaymentEWalletDetailUpsert) {
		s.UpdateNote()
	})
}

// ClearNote clears the value of the "note" field.
func (u *PaymentEWalletDetailUpsertBulk) ClearNote() *PaymentEWalletDetailUpsertBulk {
	return u.Update(func(s *PaymentEWalletDetailUpsert) {
		s.ClearNote()
	})
}

// SetImageURL sets the "image_url" field.
func (u *PaymentEWalletDetailUpsertBulk) SetImageURL(v string) *PaymentEWalletDetailUpsertBulk {
	return u.Update(func(s *PaymentEWalletDetailUpsert) {
		s.SetImageURL(v)
	})
}

// UpdateImageURL sets the "image_url" field to the value that was provided on create.
func (u *PaymentEWalletDetailUpsertBulk) UpdateImageURL() *PaymentEWalletDetailUpsertBulk {
	return u.Update(func(s *PaymentEWalletDetailUpsert) {
		s.UpdateImageURL()
	})
}

// ClearImageURL clears the value of the "image_url" field.
func (u *PaymentEWalletDetailUpsertBulk) ClearImageURL() *PaymentEWalletDetailUpsertBulk {
	return u.Update(func(s *PaymentEWalletDetailUpsert) {
		s.ClearImageURL()
	})
}

// SetTxID sets the "tx_id" field.
func (u *PaymentEWalletDetailUpsertBulk) SetTxID(v string) *PaymentEWalletDetailUpsertBulk {
	return u.Update(func(s *PaymentEWalletDetailUpsert) {
		s.SetTxID(v)
	})
}

// UpdateTxID sets the "tx_id" field to the value that was provided on create.
func (u *PaymentEWalletDetailUpsertBulk) UpdateTxID() *PaymentEWalletDetailUpsertBulk {
	return u.Update(func(s *PaymentEWalletDetailUpsert) {
		s.UpdateTxID()
	})
}

// ClearTxID clears the value of the "tx_id" field.
func (u *PaymentEWalletDetailUpsertBulk) ClearTxID() *PaymentEWalletDetailUpsertBulk {
	return u.Update(func(s *PaymentEWalletDetailUpsert) {
		s.ClearTxID()
	})
}

// Exec executes the query.
func (u *PaymentEWalletDetailUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PaymentEWalletDetailCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PaymentEWalletDetailCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PaymentEWalletDetailUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
