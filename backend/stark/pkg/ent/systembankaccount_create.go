// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"gitlab.com/mcuc/monorepo/backend/stark/pkg/ent/systembankaccount"
)

// SystemBankAccountCreate is the builder for creating a SystemBankAccount entity.
type SystemBankAccountCreate struct {
	config
	mutation *SystemBankAccountMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (sbac *SystemBankAccountCreate) SetCreatedAt(t time.Time) *SystemBankAccountCreate {
	sbac.mutation.SetCreatedAt(t)
	return sbac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sbac *SystemBankAccountCreate) SetNillableCreatedAt(t *time.Time) *SystemBankAccountCreate {
	if t != nil {
		sbac.SetCreatedAt(*t)
	}
	return sbac
}

// SetUpdatedAt sets the "updated_at" field.
func (sbac *SystemBankAccountCreate) SetUpdatedAt(t time.Time) *SystemBankAccountCreate {
	sbac.mutation.SetUpdatedAt(t)
	return sbac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sbac *SystemBankAccountCreate) SetNillableUpdatedAt(t *time.Time) *SystemBankAccountCreate {
	if t != nil {
		sbac.SetUpdatedAt(*t)
	}
	return sbac
}

// SetCreatedBy sets the "created_by" field.
func (sbac *SystemBankAccountCreate) SetCreatedBy(s string) *SystemBankAccountCreate {
	sbac.mutation.SetCreatedBy(s)
	return sbac
}

// SetUpdatedBy sets the "updated_by" field.
func (sbac *SystemBankAccountCreate) SetUpdatedBy(s string) *SystemBankAccountCreate {
	sbac.mutation.SetUpdatedBy(s)
	return sbac
}

// SetMerchantID sets the "merchant_id" field.
func (sbac *SystemBankAccountCreate) SetMerchantID(i int64) *SystemBankAccountCreate {
	sbac.mutation.SetMerchantID(i)
	return sbac
}

// SetNillableMerchantID sets the "merchant_id" field if the given value is not nil.
func (sbac *SystemBankAccountCreate) SetNillableMerchantID(i *int64) *SystemBankAccountCreate {
	if i != nil {
		sbac.SetMerchantID(*i)
	}
	return sbac
}

// SetStatus sets the "status" field.
func (sbac *SystemBankAccountCreate) SetStatus(i int32) *SystemBankAccountCreate {
	sbac.mutation.SetStatus(i)
	return sbac
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (sbac *SystemBankAccountCreate) SetNillableStatus(i *int32) *SystemBankAccountCreate {
	if i != nil {
		sbac.SetStatus(*i)
	}
	return sbac
}

// SetBankName sets the "bank_name" field.
func (sbac *SystemBankAccountCreate) SetBankName(i int32) *SystemBankAccountCreate {
	sbac.mutation.SetBankName(i)
	return sbac
}

// SetNillableBankName sets the "bank_name" field if the given value is not nil.
func (sbac *SystemBankAccountCreate) SetNillableBankName(i *int32) *SystemBankAccountCreate {
	if i != nil {
		sbac.SetBankName(*i)
	}
	return sbac
}

// SetAccountNumber sets the "account_number" field.
func (sbac *SystemBankAccountCreate) SetAccountNumber(s string) *SystemBankAccountCreate {
	sbac.mutation.SetAccountNumber(s)
	return sbac
}

// SetAccountName sets the "account_name" field.
func (sbac *SystemBankAccountCreate) SetAccountName(s string) *SystemBankAccountCreate {
	sbac.mutation.SetAccountName(s)
	return sbac
}

// SetBranch sets the "branch" field.
func (sbac *SystemBankAccountCreate) SetBranch(s string) *SystemBankAccountCreate {
	sbac.mutation.SetBranch(s)
	return sbac
}

// SetBalance sets the "balance" field.
func (sbac *SystemBankAccountCreate) SetBalance(u uint64) *SystemBankAccountCreate {
	sbac.mutation.SetBalance(u)
	return sbac
}

// SetNillableBalance sets the "balance" field if the given value is not nil.
func (sbac *SystemBankAccountCreate) SetNillableBalance(u *uint64) *SystemBankAccountCreate {
	if u != nil {
		sbac.SetBalance(*u)
	}
	return sbac
}

// SetLastUpdatedBalance sets the "last_updated_balance" field.
func (sbac *SystemBankAccountCreate) SetLastUpdatedBalance(t time.Time) *SystemBankAccountCreate {
	sbac.mutation.SetLastUpdatedBalance(t)
	return sbac
}

// SetNillableLastUpdatedBalance sets the "last_updated_balance" field if the given value is not nil.
func (sbac *SystemBankAccountCreate) SetNillableLastUpdatedBalance(t *time.Time) *SystemBankAccountCreate {
	if t != nil {
		sbac.SetLastUpdatedBalance(*t)
	}
	return sbac
}

// SetDailyBalanceLimit sets the "daily_balance_limit" field.
func (sbac *SystemBankAccountCreate) SetDailyBalanceLimit(u uint64) *SystemBankAccountCreate {
	sbac.mutation.SetDailyBalanceLimit(u)
	return sbac
}

// SetNillableDailyBalanceLimit sets the "daily_balance_limit" field if the given value is not nil.
func (sbac *SystemBankAccountCreate) SetNillableDailyBalanceLimit(u *uint64) *SystemBankAccountCreate {
	if u != nil {
		sbac.SetDailyBalanceLimit(*u)
	}
	return sbac
}

// SetDailyUsedAmount sets the "daily_used_amount" field.
func (sbac *SystemBankAccountCreate) SetDailyUsedAmount(i int64) *SystemBankAccountCreate {
	sbac.mutation.SetDailyUsedAmount(i)
	return sbac
}

// SetNillableDailyUsedAmount sets the "daily_used_amount" field if the given value is not nil.
func (sbac *SystemBankAccountCreate) SetNillableDailyUsedAmount(i *int64) *SystemBankAccountCreate {
	if i != nil {
		sbac.SetDailyUsedAmount(*i)
	}
	return sbac
}

// SetDailyBalance sets the "daily_balance" field.
func (sbac *SystemBankAccountCreate) SetDailyBalance(u uint64) *SystemBankAccountCreate {
	sbac.mutation.SetDailyBalance(u)
	return sbac
}

// SetNillableDailyBalance sets the "daily_balance" field if the given value is not nil.
func (sbac *SystemBankAccountCreate) SetNillableDailyBalance(u *uint64) *SystemBankAccountCreate {
	if u != nil {
		sbac.SetDailyBalance(*u)
	}
	return sbac
}

// SetID sets the "id" field.
func (sbac *SystemBankAccountCreate) SetID(i int64) *SystemBankAccountCreate {
	sbac.mutation.SetID(i)
	return sbac
}

// Mutation returns the SystemBankAccountMutation object of the builder.
func (sbac *SystemBankAccountCreate) Mutation() *SystemBankAccountMutation {
	return sbac.mutation
}

// Save creates the SystemBankAccount in the database.
func (sbac *SystemBankAccountCreate) Save(ctx context.Context) (*SystemBankAccount, error) {
	var (
		err  error
		node *SystemBankAccount
	)
	sbac.defaults()
	if len(sbac.hooks) == 0 {
		if err = sbac.check(); err != nil {
			return nil, err
		}
		node, err = sbac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SystemBankAccountMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = sbac.check(); err != nil {
				return nil, err
			}
			sbac.mutation = mutation
			if node, err = sbac.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(sbac.hooks) - 1; i >= 0; i-- {
			if sbac.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = sbac.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sbac.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (sbac *SystemBankAccountCreate) SaveX(ctx context.Context) *SystemBankAccount {
	v, err := sbac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sbac *SystemBankAccountCreate) Exec(ctx context.Context) error {
	_, err := sbac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sbac *SystemBankAccountCreate) ExecX(ctx context.Context) {
	if err := sbac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sbac *SystemBankAccountCreate) defaults() {
	if _, ok := sbac.mutation.CreatedAt(); !ok {
		v := systembankaccount.DefaultCreatedAt()
		sbac.mutation.SetCreatedAt(v)
	}
	if _, ok := sbac.mutation.UpdatedAt(); !ok {
		v := systembankaccount.DefaultUpdatedAt()
		sbac.mutation.SetUpdatedAt(v)
	}
	if _, ok := sbac.mutation.MerchantID(); !ok {
		v := systembankaccount.DefaultMerchantID
		sbac.mutation.SetMerchantID(v)
	}
	if _, ok := sbac.mutation.Status(); !ok {
		v := systembankaccount.DefaultStatus
		sbac.mutation.SetStatus(v)
	}
	if _, ok := sbac.mutation.BankName(); !ok {
		v := systembankaccount.DefaultBankName
		sbac.mutation.SetBankName(v)
	}
	if _, ok := sbac.mutation.Balance(); !ok {
		v := systembankaccount.DefaultBalance
		sbac.mutation.SetBalance(v)
	}
	if _, ok := sbac.mutation.DailyBalanceLimit(); !ok {
		v := systembankaccount.DefaultDailyBalanceLimit
		sbac.mutation.SetDailyBalanceLimit(v)
	}
	if _, ok := sbac.mutation.DailyUsedAmount(); !ok {
		v := systembankaccount.DefaultDailyUsedAmount
		sbac.mutation.SetDailyUsedAmount(v)
	}
	if _, ok := sbac.mutation.DailyBalance(); !ok {
		v := systembankaccount.DefaultDailyBalance
		sbac.mutation.SetDailyBalance(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sbac *SystemBankAccountCreate) check() error {
	if _, ok := sbac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "SystemBankAccount.created_at"`)}
	}
	if _, ok := sbac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "SystemBankAccount.updated_at"`)}
	}
	if _, ok := sbac.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent: missing required field "SystemBankAccount.created_by"`)}
	}
	if v, ok := sbac.mutation.CreatedBy(); ok {
		if err := systembankaccount.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "SystemBankAccount.created_by": %w`, err)}
		}
	}
	if _, ok := sbac.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`ent: missing required field "SystemBankAccount.updated_by"`)}
	}
	if v, ok := sbac.mutation.UpdatedBy(); ok {
		if err := systembankaccount.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "SystemBankAccount.updated_by": %w`, err)}
		}
	}
	if _, ok := sbac.mutation.MerchantID(); !ok {
		return &ValidationError{Name: "merchant_id", err: errors.New(`ent: missing required field "SystemBankAccount.merchant_id"`)}
	}
	if v, ok := sbac.mutation.MerchantID(); ok {
		if err := systembankaccount.MerchantIDValidator(v); err != nil {
			return &ValidationError{Name: "merchant_id", err: fmt.Errorf(`ent: validator failed for field "SystemBankAccount.merchant_id": %w`, err)}
		}
	}
	if _, ok := sbac.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "SystemBankAccount.status"`)}
	}
	if v, ok := sbac.mutation.Status(); ok {
		if err := systembankaccount.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "SystemBankAccount.status": %w`, err)}
		}
	}
	if _, ok := sbac.mutation.BankName(); !ok {
		return &ValidationError{Name: "bank_name", err: errors.New(`ent: missing required field "SystemBankAccount.bank_name"`)}
	}
	if v, ok := sbac.mutation.BankName(); ok {
		if err := systembankaccount.BankNameValidator(v); err != nil {
			return &ValidationError{Name: "bank_name", err: fmt.Errorf(`ent: validator failed for field "SystemBankAccount.bank_name": %w`, err)}
		}
	}
	if _, ok := sbac.mutation.AccountNumber(); !ok {
		return &ValidationError{Name: "account_number", err: errors.New(`ent: missing required field "SystemBankAccount.account_number"`)}
	}
	if v, ok := sbac.mutation.AccountNumber(); ok {
		if err := systembankaccount.AccountNumberValidator(v); err != nil {
			return &ValidationError{Name: "account_number", err: fmt.Errorf(`ent: validator failed for field "SystemBankAccount.account_number": %w`, err)}
		}
	}
	if _, ok := sbac.mutation.AccountName(); !ok {
		return &ValidationError{Name: "account_name", err: errors.New(`ent: missing required field "SystemBankAccount.account_name"`)}
	}
	if v, ok := sbac.mutation.AccountName(); ok {
		if err := systembankaccount.AccountNameValidator(v); err != nil {
			return &ValidationError{Name: "account_name", err: fmt.Errorf(`ent: validator failed for field "SystemBankAccount.account_name": %w`, err)}
		}
	}
	if _, ok := sbac.mutation.Branch(); !ok {
		return &ValidationError{Name: "branch", err: errors.New(`ent: missing required field "SystemBankAccount.branch"`)}
	}
	if _, ok := sbac.mutation.Balance(); !ok {
		return &ValidationError{Name: "balance", err: errors.New(`ent: missing required field "SystemBankAccount.balance"`)}
	}
	if _, ok := sbac.mutation.DailyBalanceLimit(); !ok {
		return &ValidationError{Name: "daily_balance_limit", err: errors.New(`ent: missing required field "SystemBankAccount.daily_balance_limit"`)}
	}
	if _, ok := sbac.mutation.DailyUsedAmount(); !ok {
		return &ValidationError{Name: "daily_used_amount", err: errors.New(`ent: missing required field "SystemBankAccount.daily_used_amount"`)}
	}
	if _, ok := sbac.mutation.DailyBalance(); !ok {
		return &ValidationError{Name: "daily_balance", err: errors.New(`ent: missing required field "SystemBankAccount.daily_balance"`)}
	}
	return nil
}

func (sbac *SystemBankAccountCreate) sqlSave(ctx context.Context) (*SystemBankAccount, error) {
	_node, _spec := sbac.createSpec()
	if err := sqlgraph.CreateNode(ctx, sbac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	return _node, nil
}

func (sbac *SystemBankAccountCreate) createSpec() (*SystemBankAccount, *sqlgraph.CreateSpec) {
	var (
		_node = &SystemBankAccount{config: sbac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: systembankaccount.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: systembankaccount.FieldID,
			},
		}
	)
	_spec.OnConflict = sbac.conflict
	if id, ok := sbac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sbac.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: systembankaccount.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := sbac.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: systembankaccount.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := sbac.mutation.CreatedBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: systembankaccount.FieldCreatedBy,
		})
		_node.CreatedBy = value
	}
	if value, ok := sbac.mutation.UpdatedBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: systembankaccount.FieldUpdatedBy,
		})
		_node.UpdatedBy = value
	}
	if value, ok := sbac.mutation.MerchantID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: systembankaccount.FieldMerchantID,
		})
		_node.MerchantID = value
	}
	if value, ok := sbac.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: systembankaccount.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := sbac.mutation.BankName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: systembankaccount.FieldBankName,
		})
		_node.BankName = value
	}
	if value, ok := sbac.mutation.AccountNumber(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: systembankaccount.FieldAccountNumber,
		})
		_node.AccountNumber = value
	}
	if value, ok := sbac.mutation.AccountName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: systembankaccount.FieldAccountName,
		})
		_node.AccountName = value
	}
	if value, ok := sbac.mutation.Branch(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: systembankaccount.FieldBranch,
		})
		_node.Branch = value
	}
	if value, ok := sbac.mutation.Balance(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: systembankaccount.FieldBalance,
		})
		_node.Balance = value
	}
	if value, ok := sbac.mutation.LastUpdatedBalance(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: systembankaccount.FieldLastUpdatedBalance,
		})
		_node.LastUpdatedBalance = &value
	}
	if value, ok := sbac.mutation.DailyBalanceLimit(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: systembankaccount.FieldDailyBalanceLimit,
		})
		_node.DailyBalanceLimit = value
	}
	if value, ok := sbac.mutation.DailyUsedAmount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: systembankaccount.FieldDailyUsedAmount,
		})
		_node.DailyUsedAmount = value
	}
	if value, ok := sbac.mutation.DailyBalance(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: systembankaccount.FieldDailyBalance,
		})
		_node.DailyBalance = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SystemBankAccount.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SystemBankAccountUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (sbac *SystemBankAccountCreate) OnConflict(opts ...sql.ConflictOption) *SystemBankAccountUpsertOne {
	sbac.conflict = opts
	return &SystemBankAccountUpsertOne{
		create: sbac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SystemBankAccount.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (sbac *SystemBankAccountCreate) OnConflictColumns(columns ...string) *SystemBankAccountUpsertOne {
	sbac.conflict = append(sbac.conflict, sql.ConflictColumns(columns...))
	return &SystemBankAccountUpsertOne{
		create: sbac,
	}
}

type (
	// SystemBankAccountUpsertOne is the builder for "upsert"-ing
	//  one SystemBankAccount node.
	SystemBankAccountUpsertOne struct {
		create *SystemBankAccountCreate
	}

	// SystemBankAccountUpsert is the "OnConflict" setter.
	SystemBankAccountUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *SystemBankAccountUpsert) SetCreatedAt(v time.Time) *SystemBankAccountUpsert {
	u.Set(systembankaccount.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SystemBankAccountUpsert) UpdateCreatedAt() *SystemBankAccountUpsert {
	u.SetExcluded(systembankaccount.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SystemBankAccountUpsert) SetUpdatedAt(v time.Time) *SystemBankAccountUpsert {
	u.Set(systembankaccount.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SystemBankAccountUpsert) UpdateUpdatedAt() *SystemBankAccountUpsert {
	u.SetExcluded(systembankaccount.FieldUpdatedAt)
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *SystemBankAccountUpsert) SetCreatedBy(v string) *SystemBankAccountUpsert {
	u.Set(systembankaccount.FieldCreatedBy, v)
	return u
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *SystemBankAccountUpsert) UpdateCreatedBy() *SystemBankAccountUpsert {
	u.SetExcluded(systembankaccount.FieldCreatedBy)
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *SystemBankAccountUpsert) SetUpdatedBy(v string) *SystemBankAccountUpsert {
	u.Set(systembankaccount.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *SystemBankAccountUpsert) UpdateUpdatedBy() *SystemBankAccountUpsert {
	u.SetExcluded(systembankaccount.FieldUpdatedBy)
	return u
}

// SetMerchantID sets the "merchant_id" field.
func (u *SystemBankAccountUpsert) SetMerchantID(v int64) *SystemBankAccountUpsert {
	u.Set(systembankaccount.FieldMerchantID, v)
	return u
}

// UpdateMerchantID sets the "merchant_id" field to the value that was provided on create.
func (u *SystemBankAccountUpsert) UpdateMerchantID() *SystemBankAccountUpsert {
	u.SetExcluded(systembankaccount.FieldMerchantID)
	return u
}

// AddMerchantID adds v to the "merchant_id" field.
func (u *SystemBankAccountUpsert) AddMerchantID(v int64) *SystemBankAccountUpsert {
	u.Add(systembankaccount.FieldMerchantID, v)
	return u
}

// SetStatus sets the "status" field.
func (u *SystemBankAccountUpsert) SetStatus(v int32) *SystemBankAccountUpsert {
	u.Set(systembankaccount.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *SystemBankAccountUpsert) UpdateStatus() *SystemBankAccountUpsert {
	u.SetExcluded(systembankaccount.FieldStatus)
	return u
}

// AddStatus adds v to the "status" field.
func (u *SystemBankAccountUpsert) AddStatus(v int32) *SystemBankAccountUpsert {
	u.Add(systembankaccount.FieldStatus, v)
	return u
}

// SetBankName sets the "bank_name" field.
func (u *SystemBankAccountUpsert) SetBankName(v int32) *SystemBankAccountUpsert {
	u.Set(systembankaccount.FieldBankName, v)
	return u
}

// UpdateBankName sets the "bank_name" field to the value that was provided on create.
func (u *SystemBankAccountUpsert) UpdateBankName() *SystemBankAccountUpsert {
	u.SetExcluded(systembankaccount.FieldBankName)
	return u
}

// AddBankName adds v to the "bank_name" field.
func (u *SystemBankAccountUpsert) AddBankName(v int32) *SystemBankAccountUpsert {
	u.Add(systembankaccount.FieldBankName, v)
	return u
}

// SetAccountNumber sets the "account_number" field.
func (u *SystemBankAccountUpsert) SetAccountNumber(v string) *SystemBankAccountUpsert {
	u.Set(systembankaccount.FieldAccountNumber, v)
	return u
}

// UpdateAccountNumber sets the "account_number" field to the value that was provided on create.
func (u *SystemBankAccountUpsert) UpdateAccountNumber() *SystemBankAccountUpsert {
	u.SetExcluded(systembankaccount.FieldAccountNumber)
	return u
}

// SetAccountName sets the "account_name" field.
func (u *SystemBankAccountUpsert) SetAccountName(v string) *SystemBankAccountUpsert {
	u.Set(systembankaccount.FieldAccountName, v)
	return u
}

// UpdateAccountName sets the "account_name" field to the value that was provided on create.
func (u *SystemBankAccountUpsert) UpdateAccountName() *SystemBankAccountUpsert {
	u.SetExcluded(systembankaccount.FieldAccountName)
	return u
}

// SetBranch sets the "branch" field.
func (u *SystemBankAccountUpsert) SetBranch(v string) *SystemBankAccountUpsert {
	u.Set(systembankaccount.FieldBranch, v)
	return u
}

// UpdateBranch sets the "branch" field to the value that was provided on create.
func (u *SystemBankAccountUpsert) UpdateBranch() *SystemBankAccountUpsert {
	u.SetExcluded(systembankaccount.FieldBranch)
	return u
}

// SetBalance sets the "balance" field.
func (u *SystemBankAccountUpsert) SetBalance(v uint64) *SystemBankAccountUpsert {
	u.Set(systembankaccount.FieldBalance, v)
	return u
}

// UpdateBalance sets the "balance" field to the value that was provided on create.
func (u *SystemBankAccountUpsert) UpdateBalance() *SystemBankAccountUpsert {
	u.SetExcluded(systembankaccount.FieldBalance)
	return u
}

// AddBalance adds v to the "balance" field.
func (u *SystemBankAccountUpsert) AddBalance(v uint64) *SystemBankAccountUpsert {
	u.Add(systembankaccount.FieldBalance, v)
	return u
}

// SetLastUpdatedBalance sets the "last_updated_balance" field.
func (u *SystemBankAccountUpsert) SetLastUpdatedBalance(v time.Time) *SystemBankAccountUpsert {
	u.Set(systembankaccount.FieldLastUpdatedBalance, v)
	return u
}

// UpdateLastUpdatedBalance sets the "last_updated_balance" field to the value that was provided on create.
func (u *SystemBankAccountUpsert) UpdateLastUpdatedBalance() *SystemBankAccountUpsert {
	u.SetExcluded(systembankaccount.FieldLastUpdatedBalance)
	return u
}

// ClearLastUpdatedBalance clears the value of the "last_updated_balance" field.
func (u *SystemBankAccountUpsert) ClearLastUpdatedBalance() *SystemBankAccountUpsert {
	u.SetNull(systembankaccount.FieldLastUpdatedBalance)
	return u
}

// SetDailyBalanceLimit sets the "daily_balance_limit" field.
func (u *SystemBankAccountUpsert) SetDailyBalanceLimit(v uint64) *SystemBankAccountUpsert {
	u.Set(systembankaccount.FieldDailyBalanceLimit, v)
	return u
}

// UpdateDailyBalanceLimit sets the "daily_balance_limit" field to the value that was provided on create.
func (u *SystemBankAccountUpsert) UpdateDailyBalanceLimit() *SystemBankAccountUpsert {
	u.SetExcluded(systembankaccount.FieldDailyBalanceLimit)
	return u
}

// AddDailyBalanceLimit adds v to the "daily_balance_limit" field.
func (u *SystemBankAccountUpsert) AddDailyBalanceLimit(v uint64) *SystemBankAccountUpsert {
	u.Add(systembankaccount.FieldDailyBalanceLimit, v)
	return u
}

// SetDailyUsedAmount sets the "daily_used_amount" field.
func (u *SystemBankAccountUpsert) SetDailyUsedAmount(v int64) *SystemBankAccountUpsert {
	u.Set(systembankaccount.FieldDailyUsedAmount, v)
	return u
}

// UpdateDailyUsedAmount sets the "daily_used_amount" field to the value that was provided on create.
func (u *SystemBankAccountUpsert) UpdateDailyUsedAmount() *SystemBankAccountUpsert {
	u.SetExcluded(systembankaccount.FieldDailyUsedAmount)
	return u
}

// AddDailyUsedAmount adds v to the "daily_used_amount" field.
func (u *SystemBankAccountUpsert) AddDailyUsedAmount(v int64) *SystemBankAccountUpsert {
	u.Add(systembankaccount.FieldDailyUsedAmount, v)
	return u
}

// SetDailyBalance sets the "daily_balance" field.
func (u *SystemBankAccountUpsert) SetDailyBalance(v uint64) *SystemBankAccountUpsert {
	u.Set(systembankaccount.FieldDailyBalance, v)
	return u
}

// UpdateDailyBalance sets the "daily_balance" field to the value that was provided on create.
func (u *SystemBankAccountUpsert) UpdateDailyBalance() *SystemBankAccountUpsert {
	u.SetExcluded(systembankaccount.FieldDailyBalance)
	return u
}

// AddDailyBalance adds v to the "daily_balance" field.
func (u *SystemBankAccountUpsert) AddDailyBalance(v uint64) *SystemBankAccountUpsert {
	u.Add(systembankaccount.FieldDailyBalance, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.SystemBankAccount.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(systembankaccount.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *SystemBankAccountUpsertOne) UpdateNewValues() *SystemBankAccountUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(systembankaccount.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.SystemBankAccount.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *SystemBankAccountUpsertOne) Ignore() *SystemBankAccountUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SystemBankAccountUpsertOne) DoNothing() *SystemBankAccountUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SystemBankAccountCreate.OnConflict
// documentation for more info.
func (u *SystemBankAccountUpsertOne) Update(set func(*SystemBankAccountUpsert)) *SystemBankAccountUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SystemBankAccountUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *SystemBankAccountUpsertOne) SetCreatedAt(v time.Time) *SystemBankAccountUpsertOne {
	return u.Update(func(s *SystemBankAccountUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SystemBankAccountUpsertOne) UpdateCreatedAt() *SystemBankAccountUpsertOne {
	return u.Update(func(s *SystemBankAccountUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SystemBankAccountUpsertOne) SetUpdatedAt(v time.Time) *SystemBankAccountUpsertOne {
	return u.Update(func(s *SystemBankAccountUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SystemBankAccountUpsertOne) UpdateUpdatedAt() *SystemBankAccountUpsertOne {
	return u.Update(func(s *SystemBankAccountUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetCreatedBy sets the "created_by" field.
func (u *SystemBankAccountUpsertOne) SetCreatedBy(v string) *SystemBankAccountUpsertOne {
	return u.Update(func(s *SystemBankAccountUpsert) {
		s.SetCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *SystemBankAccountUpsertOne) UpdateCreatedBy() *SystemBankAccountUpsertOne {
	return u.Update(func(s *SystemBankAccountUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *SystemBankAccountUpsertOne) SetUpdatedBy(v string) *SystemBankAccountUpsertOne {
	return u.Update(func(s *SystemBankAccountUpsert) {
		s.SetUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *SystemBankAccountUpsertOne) UpdateUpdatedBy() *SystemBankAccountUpsertOne {
	return u.Update(func(s *SystemBankAccountUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetMerchantID sets the "merchant_id" field.
func (u *SystemBankAccountUpsertOne) SetMerchantID(v int64) *SystemBankAccountUpsertOne {
	return u.Update(func(s *SystemBankAccountUpsert) {
		s.SetMerchantID(v)
	})
}

// AddMerchantID adds v to the "merchant_id" field.
func (u *SystemBankAccountUpsertOne) AddMerchantID(v int64) *SystemBankAccountUpsertOne {
	return u.Update(func(s *SystemBankAccountUpsert) {
		s.AddMerchantID(v)
	})
}

// UpdateMerchantID sets the "merchant_id" field to the value that was provided on create.
func (u *SystemBankAccountUpsertOne) UpdateMerchantID() *SystemBankAccountUpsertOne {
	return u.Update(func(s *SystemBankAccountUpsert) {
		s.UpdateMerchantID()
	})
}

// SetStatus sets the "status" field.
func (u *SystemBankAccountUpsertOne) SetStatus(v int32) *SystemBankAccountUpsertOne {
	return u.Update(func(s *SystemBankAccountUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *SystemBankAccountUpsertOne) AddStatus(v int32) *SystemBankAccountUpsertOne {
	return u.Update(func(s *SystemBankAccountUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *SystemBankAccountUpsertOne) UpdateStatus() *SystemBankAccountUpsertOne {
	return u.Update(func(s *SystemBankAccountUpsert) {
		s.UpdateStatus()
	})
}

// SetBankName sets the "bank_name" field.
func (u *SystemBankAccountUpsertOne) SetBankName(v int32) *SystemBankAccountUpsertOne {
	return u.Update(func(s *SystemBankAccountUpsert) {
		s.SetBankName(v)
	})
}

// AddBankName adds v to the "bank_name" field.
func (u *SystemBankAccountUpsertOne) AddBankName(v int32) *SystemBankAccountUpsertOne {
	return u.Update(func(s *SystemBankAccountUpsert) {
		s.AddBankName(v)
	})
}

// UpdateBankName sets the "bank_name" field to the value that was provided on create.
func (u *SystemBankAccountUpsertOne) UpdateBankName() *SystemBankAccountUpsertOne {
	return u.Update(func(s *SystemBankAccountUpsert) {
		s.UpdateBankName()
	})
}

// SetAccountNumber sets the "account_number" field.
func (u *SystemBankAccountUpsertOne) SetAccountNumber(v string) *SystemBankAccountUpsertOne {
	return u.Update(func(s *SystemBankAccountUpsert) {
		s.SetAccountNumber(v)
	})
}

// UpdateAccountNumber sets the "account_number" field to the value that was provided on create.
func (u *SystemBankAccountUpsertOne) UpdateAccountNumber() *SystemBankAccountUpsertOne {
	return u.Update(func(s *SystemBankAccountUpsert) {
		s.UpdateAccountNumber()
	})
}

// SetAccountName sets the "account_name" field.
func (u *SystemBankAccountUpsertOne) SetAccountName(v string) *SystemBankAccountUpsertOne {
	return u.Update(func(s *SystemBankAccountUpsert) {
		s.SetAccountName(v)
	})
}

// UpdateAccountName sets the "account_name" field to the value that was provided on create.
func (u *SystemBankAccountUpsertOne) UpdateAccountName() *SystemBankAccountUpsertOne {
	return u.Update(func(s *SystemBankAccountUpsert) {
		s.UpdateAccountName()
	})
}

// SetBranch sets the "branch" field.
func (u *SystemBankAccountUpsertOne) SetBranch(v string) *SystemBankAccountUpsertOne {
	return u.Update(func(s *SystemBankAccountUpsert) {
		s.SetBranch(v)
	})
}

// UpdateBranch sets the "branch" field to the value that was provided on create.
func (u *SystemBankAccountUpsertOne) UpdateBranch() *SystemBankAccountUpsertOne {
	return u.Update(func(s *SystemBankAccountUpsert) {
		s.UpdateBranch()
	})
}

// SetBalance sets the "balance" field.
func (u *SystemBankAccountUpsertOne) SetBalance(v uint64) *SystemBankAccountUpsertOne {
	return u.Update(func(s *SystemBankAccountUpsert) {
		s.SetBalance(v)
	})
}

// AddBalance adds v to the "balance" field.
func (u *SystemBankAccountUpsertOne) AddBalance(v uint64) *SystemBankAccountUpsertOne {
	return u.Update(func(s *SystemBankAccountUpsert) {
		s.AddBalance(v)
	})
}

// UpdateBalance sets the "balance" field to the value that was provided on create.
func (u *SystemBankAccountUpsertOne) UpdateBalance() *SystemBankAccountUpsertOne {
	return u.Update(func(s *SystemBankAccountUpsert) {
		s.UpdateBalance()
	})
}

// SetLastUpdatedBalance sets the "last_updated_balance" field.
func (u *SystemBankAccountUpsertOne) SetLastUpdatedBalance(v time.Time) *SystemBankAccountUpsertOne {
	return u.Update(func(s *SystemBankAccountUpsert) {
		s.SetLastUpdatedBalance(v)
	})
}

// UpdateLastUpdatedBalance sets the "last_updated_balance" field to the value that was provided on create.
func (u *SystemBankAccountUpsertOne) UpdateLastUpdatedBalance() *SystemBankAccountUpsertOne {
	return u.Update(func(s *SystemBankAccountUpsert) {
		s.UpdateLastUpdatedBalance()
	})
}

// ClearLastUpdatedBalance clears the value of the "last_updated_balance" field.
func (u *SystemBankAccountUpsertOne) ClearLastUpdatedBalance() *SystemBankAccountUpsertOne {
	return u.Update(func(s *SystemBankAccountUpsert) {
		s.ClearLastUpdatedBalance()
	})
}

// SetDailyBalanceLimit sets the "daily_balance_limit" field.
func (u *SystemBankAccountUpsertOne) SetDailyBalanceLimit(v uint64) *SystemBankAccountUpsertOne {
	return u.Update(func(s *SystemBankAccountUpsert) {
		s.SetDailyBalanceLimit(v)
	})
}

// AddDailyBalanceLimit adds v to the "daily_balance_limit" field.
func (u *SystemBankAccountUpsertOne) AddDailyBalanceLimit(v uint64) *SystemBankAccountUpsertOne {
	return u.Update(func(s *SystemBankAccountUpsert) {
		s.AddDailyBalanceLimit(v)
	})
}

// UpdateDailyBalanceLimit sets the "daily_balance_limit" field to the value that was provided on create.
func (u *SystemBankAccountUpsertOne) UpdateDailyBalanceLimit() *SystemBankAccountUpsertOne {
	return u.Update(func(s *SystemBankAccountUpsert) {
		s.UpdateDailyBalanceLimit()
	})
}

// SetDailyUsedAmount sets the "daily_used_amount" field.
func (u *SystemBankAccountUpsertOne) SetDailyUsedAmount(v int64) *SystemBankAccountUpsertOne {
	return u.Update(func(s *SystemBankAccountUpsert) {
		s.SetDailyUsedAmount(v)
	})
}

// AddDailyUsedAmount adds v to the "daily_used_amount" field.
func (u *SystemBankAccountUpsertOne) AddDailyUsedAmount(v int64) *SystemBankAccountUpsertOne {
	return u.Update(func(s *SystemBankAccountUpsert) {
		s.AddDailyUsedAmount(v)
	})
}

// UpdateDailyUsedAmount sets the "daily_used_amount" field to the value that was provided on create.
func (u *SystemBankAccountUpsertOne) UpdateDailyUsedAmount() *SystemBankAccountUpsertOne {
	return u.Update(func(s *SystemBankAccountUpsert) {
		s.UpdateDailyUsedAmount()
	})
}

// SetDailyBalance sets the "daily_balance" field.
func (u *SystemBankAccountUpsertOne) SetDailyBalance(v uint64) *SystemBankAccountUpsertOne {
	return u.Update(func(s *SystemBankAccountUpsert) {
		s.SetDailyBalance(v)
	})
}

// AddDailyBalance adds v to the "daily_balance" field.
func (u *SystemBankAccountUpsertOne) AddDailyBalance(v uint64) *SystemBankAccountUpsertOne {
	return u.Update(func(s *SystemBankAccountUpsert) {
		s.AddDailyBalance(v)
	})
}

// UpdateDailyBalance sets the "daily_balance" field to the value that was provided on create.
func (u *SystemBankAccountUpsertOne) UpdateDailyBalance() *SystemBankAccountUpsertOne {
	return u.Update(func(s *SystemBankAccountUpsert) {
		s.UpdateDailyBalance()
	})
}

// Exec executes the query.
func (u *SystemBankAccountUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SystemBankAccountCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SystemBankAccountUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SystemBankAccountUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SystemBankAccountUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SystemBankAccountCreateBulk is the builder for creating many SystemBankAccount entities in bulk.
type SystemBankAccountCreateBulk struct {
	config
	builders []*SystemBankAccountCreate
	conflict []sql.ConflictOption
}

// Save creates the SystemBankAccount entities in the database.
func (sbacb *SystemBankAccountCreateBulk) Save(ctx context.Context) ([]*SystemBankAccount, error) {
	specs := make([]*sqlgraph.CreateSpec, len(sbacb.builders))
	nodes := make([]*SystemBankAccount, len(sbacb.builders))
	mutators := make([]Mutator, len(sbacb.builders))
	for i := range sbacb.builders {
		func(i int, root context.Context) {
			builder := sbacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SystemBankAccountMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sbacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = sbacb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sbacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sbacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sbacb *SystemBankAccountCreateBulk) SaveX(ctx context.Context) []*SystemBankAccount {
	v, err := sbacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sbacb *SystemBankAccountCreateBulk) Exec(ctx context.Context) error {
	_, err := sbacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sbacb *SystemBankAccountCreateBulk) ExecX(ctx context.Context) {
	if err := sbacb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SystemBankAccount.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SystemBankAccountUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (sbacb *SystemBankAccountCreateBulk) OnConflict(opts ...sql.ConflictOption) *SystemBankAccountUpsertBulk {
	sbacb.conflict = opts
	return &SystemBankAccountUpsertBulk{
		create: sbacb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SystemBankAccount.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (sbacb *SystemBankAccountCreateBulk) OnConflictColumns(columns ...string) *SystemBankAccountUpsertBulk {
	sbacb.conflict = append(sbacb.conflict, sql.ConflictColumns(columns...))
	return &SystemBankAccountUpsertBulk{
		create: sbacb,
	}
}

// SystemBankAccountUpsertBulk is the builder for "upsert"-ing
// a bulk of SystemBankAccount nodes.
type SystemBankAccountUpsertBulk struct {
	create *SystemBankAccountCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.SystemBankAccount.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(systembankaccount.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *SystemBankAccountUpsertBulk) UpdateNewValues() *SystemBankAccountUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(systembankaccount.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SystemBankAccount.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *SystemBankAccountUpsertBulk) Ignore() *SystemBankAccountUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SystemBankAccountUpsertBulk) DoNothing() *SystemBankAccountUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SystemBankAccountCreateBulk.OnConflict
// documentation for more info.
func (u *SystemBankAccountUpsertBulk) Update(set func(*SystemBankAccountUpsert)) *SystemBankAccountUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SystemBankAccountUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *SystemBankAccountUpsertBulk) SetCreatedAt(v time.Time) *SystemBankAccountUpsertBulk {
	return u.Update(func(s *SystemBankAccountUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SystemBankAccountUpsertBulk) UpdateCreatedAt() *SystemBankAccountUpsertBulk {
	return u.Update(func(s *SystemBankAccountUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SystemBankAccountUpsertBulk) SetUpdatedAt(v time.Time) *SystemBankAccountUpsertBulk {
	return u.Update(func(s *SystemBankAccountUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SystemBankAccountUpsertBulk) UpdateUpdatedAt() *SystemBankAccountUpsertBulk {
	return u.Update(func(s *SystemBankAccountUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetCreatedBy sets the "created_by" field.
func (u *SystemBankAccountUpsertBulk) SetCreatedBy(v string) *SystemBankAccountUpsertBulk {
	return u.Update(func(s *SystemBankAccountUpsert) {
		s.SetCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *SystemBankAccountUpsertBulk) UpdateCreatedBy() *SystemBankAccountUpsertBulk {
	return u.Update(func(s *SystemBankAccountUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *SystemBankAccountUpsertBulk) SetUpdatedBy(v string) *SystemBankAccountUpsertBulk {
	return u.Update(func(s *SystemBankAccountUpsert) {
		s.SetUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *SystemBankAccountUpsertBulk) UpdateUpdatedBy() *SystemBankAccountUpsertBulk {
	return u.Update(func(s *SystemBankAccountUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetMerchantID sets the "merchant_id" field.
func (u *SystemBankAccountUpsertBulk) SetMerchantID(v int64) *SystemBankAccountUpsertBulk {
	return u.Update(func(s *SystemBankAccountUpsert) {
		s.SetMerchantID(v)
	})
}

// AddMerchantID adds v to the "merchant_id" field.
func (u *SystemBankAccountUpsertBulk) AddMerchantID(v int64) *SystemBankAccountUpsertBulk {
	return u.Update(func(s *SystemBankAccountUpsert) {
		s.AddMerchantID(v)
	})
}

// UpdateMerchantID sets the "merchant_id" field to the value that was provided on create.
func (u *SystemBankAccountUpsertBulk) UpdateMerchantID() *SystemBankAccountUpsertBulk {
	return u.Update(func(s *SystemBankAccountUpsert) {
		s.UpdateMerchantID()
	})
}

// SetStatus sets the "status" field.
func (u *SystemBankAccountUpsertBulk) SetStatus(v int32) *SystemBankAccountUpsertBulk {
	return u.Update(func(s *SystemBankAccountUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *SystemBankAccountUpsertBulk) AddStatus(v int32) *SystemBankAccountUpsertBulk {
	return u.Update(func(s *SystemBankAccountUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *SystemBankAccountUpsertBulk) UpdateStatus() *SystemBankAccountUpsertBulk {
	return u.Update(func(s *SystemBankAccountUpsert) {
		s.UpdateStatus()
	})
}

// SetBankName sets the "bank_name" field.
func (u *SystemBankAccountUpsertBulk) SetBankName(v int32) *SystemBankAccountUpsertBulk {
	return u.Update(func(s *SystemBankAccountUpsert) {
		s.SetBankName(v)
	})
}

// AddBankName adds v to the "bank_name" field.
func (u *SystemBankAccountUpsertBulk) AddBankName(v int32) *SystemBankAccountUpsertBulk {
	return u.Update(func(s *SystemBankAccountUpsert) {
		s.AddBankName(v)
	})
}

// UpdateBankName sets the "bank_name" field to the value that was provided on create.
func (u *SystemBankAccountUpsertBulk) UpdateBankName() *SystemBankAccountUpsertBulk {
	return u.Update(func(s *SystemBankAccountUpsert) {
		s.UpdateBankName()
	})
}

// SetAccountNumber sets the "account_number" field.
func (u *SystemBankAccountUpsertBulk) SetAccountNumber(v string) *SystemBankAccountUpsertBulk {
	return u.Update(func(s *SystemBankAccountUpsert) {
		s.SetAccountNumber(v)
	})
}

// UpdateAccountNumber sets the "account_number" field to the value that was provided on create.
func (u *SystemBankAccountUpsertBulk) UpdateAccountNumber() *SystemBankAccountUpsertBulk {
	return u.Update(func(s *SystemBankAccountUpsert) {
		s.UpdateAccountNumber()
	})
}

// SetAccountName sets the "account_name" field.
func (u *SystemBankAccountUpsertBulk) SetAccountName(v string) *SystemBankAccountUpsertBulk {
	return u.Update(func(s *SystemBankAccountUpsert) {
		s.SetAccountName(v)
	})
}

// UpdateAccountName sets the "account_name" field to the value that was provided on create.
func (u *SystemBankAccountUpsertBulk) UpdateAccountName() *SystemBankAccountUpsertBulk {
	return u.Update(func(s *SystemBankAccountUpsert) {
		s.UpdateAccountName()
	})
}

// SetBranch sets the "branch" field.
func (u *SystemBankAccountUpsertBulk) SetBranch(v string) *SystemBankAccountUpsertBulk {
	return u.Update(func(s *SystemBankAccountUpsert) {
		s.SetBranch(v)
	})
}

// UpdateBranch sets the "branch" field to the value that was provided on create.
func (u *SystemBankAccountUpsertBulk) UpdateBranch() *SystemBankAccountUpsertBulk {
	return u.Update(func(s *SystemBankAccountUpsert) {
		s.UpdateBranch()
	})
}

// SetBalance sets the "balance" field.
func (u *SystemBankAccountUpsertBulk) SetBalance(v uint64) *SystemBankAccountUpsertBulk {
	return u.Update(func(s *SystemBankAccountUpsert) {
		s.SetBalance(v)
	})
}

// AddBalance adds v to the "balance" field.
func (u *SystemBankAccountUpsertBulk) AddBalance(v uint64) *SystemBankAccountUpsertBulk {
	return u.Update(func(s *SystemBankAccountUpsert) {
		s.AddBalance(v)
	})
}

// UpdateBalance sets the "balance" field to the value that was provided on create.
func (u *SystemBankAccountUpsertBulk) UpdateBalance() *SystemBankAccountUpsertBulk {
	return u.Update(func(s *SystemBankAccountUpsert) {
		s.UpdateBalance()
	})
}

// SetLastUpdatedBalance sets the "last_updated_balance" field.
func (u *SystemBankAccountUpsertBulk) SetLastUpdatedBalance(v time.Time) *SystemBankAccountUpsertBulk {
	return u.Update(func(s *SystemBankAccountUpsert) {
		s.SetLastUpdatedBalance(v)
	})
}

// UpdateLastUpdatedBalance sets the "last_updated_balance" field to the value that was provided on create.
func (u *SystemBankAccountUpsertBulk) UpdateLastUpdatedBalance() *SystemBankAccountUpsertBulk {
	return u.Update(func(s *SystemBankAccountUpsert) {
		s.UpdateLastUpdatedBalance()
	})
}

// ClearLastUpdatedBalance clears the value of the "last_updated_balance" field.
func (u *SystemBankAccountUpsertBulk) ClearLastUpdatedBalance() *SystemBankAccountUpsertBulk {
	return u.Update(func(s *SystemBankAccountUpsert) {
		s.ClearLastUpdatedBalance()
	})
}

// SetDailyBalanceLimit sets the "daily_balance_limit" field.
func (u *SystemBankAccountUpsertBulk) SetDailyBalanceLimit(v uint64) *SystemBankAccountUpsertBulk {
	return u.Update(func(s *SystemBankAccountUpsert) {
		s.SetDailyBalanceLimit(v)
	})
}

// AddDailyBalanceLimit adds v to the "daily_balance_limit" field.
func (u *SystemBankAccountUpsertBulk) AddDailyBalanceLimit(v uint64) *SystemBankAccountUpsertBulk {
	return u.Update(func(s *SystemBankAccountUpsert) {
		s.AddDailyBalanceLimit(v)
	})
}

// UpdateDailyBalanceLimit sets the "daily_balance_limit" field to the value that was provided on create.
func (u *SystemBankAccountUpsertBulk) UpdateDailyBalanceLimit() *SystemBankAccountUpsertBulk {
	return u.Update(func(s *SystemBankAccountUpsert) {
		s.UpdateDailyBalanceLimit()
	})
}

// SetDailyUsedAmount sets the "daily_used_amount" field.
func (u *SystemBankAccountUpsertBulk) SetDailyUsedAmount(v int64) *SystemBankAccountUpsertBulk {
	return u.Update(func(s *SystemBankAccountUpsert) {
		s.SetDailyUsedAmount(v)
	})
}

// AddDailyUsedAmount adds v to the "daily_used_amount" field.
func (u *SystemBankAccountUpsertBulk) AddDailyUsedAmount(v int64) *SystemBankAccountUpsertBulk {
	return u.Update(func(s *SystemBankAccountUpsert) {
		s.AddDailyUsedAmount(v)
	})
}

// UpdateDailyUsedAmount sets the "daily_used_amount" field to the value that was provided on create.
func (u *SystemBankAccountUpsertBulk) UpdateDailyUsedAmount() *SystemBankAccountUpsertBulk {
	return u.Update(func(s *SystemBankAccountUpsert) {
		s.UpdateDailyUsedAmount()
	})
}

// SetDailyBalance sets the "daily_balance" field.
func (u *SystemBankAccountUpsertBulk) SetDailyBalance(v uint64) *SystemBankAccountUpsertBulk {
	return u.Update(func(s *SystemBankAccountUpsert) {
		s.SetDailyBalance(v)
	})
}

// AddDailyBalance adds v to the "daily_balance" field.
func (u *SystemBankAccountUpsertBulk) AddDailyBalance(v uint64) *SystemBankAccountUpsertBulk {
	return u.Update(func(s *SystemBankAccountUpsert) {
		s.AddDailyBalance(v)
	})
}

// UpdateDailyBalance sets the "daily_balance" field to the value that was provided on create.
func (u *SystemBankAccountUpsertBulk) UpdateDailyBalance() *SystemBankAccountUpsertBulk {
	return u.Update(func(s *SystemBankAccountUpsert) {
		s.UpdateDailyBalance()
	})
}

// Exec executes the query.
func (u *SystemBankAccountUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the SystemBankAccountCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SystemBankAccountCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SystemBankAccountUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
