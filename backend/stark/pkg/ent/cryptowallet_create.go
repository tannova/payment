// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"gitlab.com/mcuc/monorepo/backend/stark/pkg/ent/cryptowallet"
)

// CryptoWalletCreate is the builder for creating a CryptoWallet entity.
type CryptoWalletCreate struct {
	config
	mutation *CryptoWalletMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (cwc *CryptoWalletCreate) SetCreatedAt(t time.Time) *CryptoWalletCreate {
	cwc.mutation.SetCreatedAt(t)
	return cwc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cwc *CryptoWalletCreate) SetNillableCreatedAt(t *time.Time) *CryptoWalletCreate {
	if t != nil {
		cwc.SetCreatedAt(*t)
	}
	return cwc
}

// SetUpdatedAt sets the "updated_at" field.
func (cwc *CryptoWalletCreate) SetUpdatedAt(t time.Time) *CryptoWalletCreate {
	cwc.mutation.SetUpdatedAt(t)
	return cwc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cwc *CryptoWalletCreate) SetNillableUpdatedAt(t *time.Time) *CryptoWalletCreate {
	if t != nil {
		cwc.SetUpdatedAt(*t)
	}
	return cwc
}

// SetCreatedBy sets the "created_by" field.
func (cwc *CryptoWalletCreate) SetCreatedBy(s string) *CryptoWalletCreate {
	cwc.mutation.SetCreatedBy(s)
	return cwc
}

// SetUpdatedBy sets the "updated_by" field.
func (cwc *CryptoWalletCreate) SetUpdatedBy(s string) *CryptoWalletCreate {
	cwc.mutation.SetUpdatedBy(s)
	return cwc
}

// SetMerchantID sets the "merchant_id" field.
func (cwc *CryptoWalletCreate) SetMerchantID(i int64) *CryptoWalletCreate {
	cwc.mutation.SetMerchantID(i)
	return cwc
}

// SetNillableMerchantID sets the "merchant_id" field if the given value is not nil.
func (cwc *CryptoWalletCreate) SetNillableMerchantID(i *int64) *CryptoWalletCreate {
	if i != nil {
		cwc.SetMerchantID(*i)
	}
	return cwc
}

// SetMerchantUserID sets the "merchant_user_id" field.
func (cwc *CryptoWalletCreate) SetMerchantUserID(i int64) *CryptoWalletCreate {
	cwc.mutation.SetMerchantUserID(i)
	return cwc
}

// SetNillableMerchantUserID sets the "merchant_user_id" field if the given value is not nil.
func (cwc *CryptoWalletCreate) SetNillableMerchantUserID(i *int64) *CryptoWalletCreate {
	if i != nil {
		cwc.SetMerchantUserID(*i)
	}
	return cwc
}

// SetCryptoType sets the "crypto_type" field.
func (cwc *CryptoWalletCreate) SetCryptoType(i int32) *CryptoWalletCreate {
	cwc.mutation.SetCryptoType(i)
	return cwc
}

// SetNillableCryptoType sets the "crypto_type" field if the given value is not nil.
func (cwc *CryptoWalletCreate) SetNillableCryptoType(i *int32) *CryptoWalletCreate {
	if i != nil {
		cwc.SetCryptoType(*i)
	}
	return cwc
}

// SetCryptoNetworkType sets the "crypto_network_type" field.
func (cwc *CryptoWalletCreate) SetCryptoNetworkType(i int32) *CryptoWalletCreate {
	cwc.mutation.SetCryptoNetworkType(i)
	return cwc
}

// SetNillableCryptoNetworkType sets the "crypto_network_type" field if the given value is not nil.
func (cwc *CryptoWalletCreate) SetNillableCryptoNetworkType(i *int32) *CryptoWalletCreate {
	if i != nil {
		cwc.SetCryptoNetworkType(*i)
	}
	return cwc
}

// SetAddress sets the "address" field.
func (cwc *CryptoWalletCreate) SetAddress(s string) *CryptoWalletCreate {
	cwc.mutation.SetAddress(s)
	return cwc
}

// SetStatus sets the "status" field.
func (cwc *CryptoWalletCreate) SetStatus(i int32) *CryptoWalletCreate {
	cwc.mutation.SetStatus(i)
	return cwc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cwc *CryptoWalletCreate) SetNillableStatus(i *int32) *CryptoWalletCreate {
	if i != nil {
		cwc.SetStatus(*i)
	}
	return cwc
}

// SetID sets the "id" field.
func (cwc *CryptoWalletCreate) SetID(i int64) *CryptoWalletCreate {
	cwc.mutation.SetID(i)
	return cwc
}

// Mutation returns the CryptoWalletMutation object of the builder.
func (cwc *CryptoWalletCreate) Mutation() *CryptoWalletMutation {
	return cwc.mutation
}

// Save creates the CryptoWallet in the database.
func (cwc *CryptoWalletCreate) Save(ctx context.Context) (*CryptoWallet, error) {
	var (
		err  error
		node *CryptoWallet
	)
	cwc.defaults()
	if len(cwc.hooks) == 0 {
		if err = cwc.check(); err != nil {
			return nil, err
		}
		node, err = cwc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CryptoWalletMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cwc.check(); err != nil {
				return nil, err
			}
			cwc.mutation = mutation
			if node, err = cwc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(cwc.hooks) - 1; i >= 0; i-- {
			if cwc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cwc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cwc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cwc *CryptoWalletCreate) SaveX(ctx context.Context) *CryptoWallet {
	v, err := cwc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cwc *CryptoWalletCreate) Exec(ctx context.Context) error {
	_, err := cwc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cwc *CryptoWalletCreate) ExecX(ctx context.Context) {
	if err := cwc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cwc *CryptoWalletCreate) defaults() {
	if _, ok := cwc.mutation.CreatedAt(); !ok {
		v := cryptowallet.DefaultCreatedAt()
		cwc.mutation.SetCreatedAt(v)
	}
	if _, ok := cwc.mutation.UpdatedAt(); !ok {
		v := cryptowallet.DefaultUpdatedAt()
		cwc.mutation.SetUpdatedAt(v)
	}
	if _, ok := cwc.mutation.MerchantID(); !ok {
		v := cryptowallet.DefaultMerchantID
		cwc.mutation.SetMerchantID(v)
	}
	if _, ok := cwc.mutation.MerchantUserID(); !ok {
		v := cryptowallet.DefaultMerchantUserID
		cwc.mutation.SetMerchantUserID(v)
	}
	if _, ok := cwc.mutation.CryptoType(); !ok {
		v := cryptowallet.DefaultCryptoType
		cwc.mutation.SetCryptoType(v)
	}
	if _, ok := cwc.mutation.CryptoNetworkType(); !ok {
		v := cryptowallet.DefaultCryptoNetworkType
		cwc.mutation.SetCryptoNetworkType(v)
	}
	if _, ok := cwc.mutation.Status(); !ok {
		v := cryptowallet.DefaultStatus
		cwc.mutation.SetStatus(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cwc *CryptoWalletCreate) check() error {
	if _, ok := cwc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "CryptoWallet.created_at"`)}
	}
	if _, ok := cwc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "CryptoWallet.updated_at"`)}
	}
	if _, ok := cwc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent: missing required field "CryptoWallet.created_by"`)}
	}
	if v, ok := cwc.mutation.CreatedBy(); ok {
		if err := cryptowallet.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "CryptoWallet.created_by": %w`, err)}
		}
	}
	if _, ok := cwc.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`ent: missing required field "CryptoWallet.updated_by"`)}
	}
	if v, ok := cwc.mutation.UpdatedBy(); ok {
		if err := cryptowallet.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "CryptoWallet.updated_by": %w`, err)}
		}
	}
	if _, ok := cwc.mutation.MerchantID(); !ok {
		return &ValidationError{Name: "merchant_id", err: errors.New(`ent: missing required field "CryptoWallet.merchant_id"`)}
	}
	if v, ok := cwc.mutation.MerchantID(); ok {
		if err := cryptowallet.MerchantIDValidator(v); err != nil {
			return &ValidationError{Name: "merchant_id", err: fmt.Errorf(`ent: validator failed for field "CryptoWallet.merchant_id": %w`, err)}
		}
	}
	if _, ok := cwc.mutation.MerchantUserID(); !ok {
		return &ValidationError{Name: "merchant_user_id", err: errors.New(`ent: missing required field "CryptoWallet.merchant_user_id"`)}
	}
	if v, ok := cwc.mutation.MerchantUserID(); ok {
		if err := cryptowallet.MerchantUserIDValidator(v); err != nil {
			return &ValidationError{Name: "merchant_user_id", err: fmt.Errorf(`ent: validator failed for field "CryptoWallet.merchant_user_id": %w`, err)}
		}
	}
	if _, ok := cwc.mutation.CryptoType(); !ok {
		return &ValidationError{Name: "crypto_type", err: errors.New(`ent: missing required field "CryptoWallet.crypto_type"`)}
	}
	if v, ok := cwc.mutation.CryptoType(); ok {
		if err := cryptowallet.CryptoTypeValidator(v); err != nil {
			return &ValidationError{Name: "crypto_type", err: fmt.Errorf(`ent: validator failed for field "CryptoWallet.crypto_type": %w`, err)}
		}
	}
	if _, ok := cwc.mutation.CryptoNetworkType(); !ok {
		return &ValidationError{Name: "crypto_network_type", err: errors.New(`ent: missing required field "CryptoWallet.crypto_network_type"`)}
	}
	if v, ok := cwc.mutation.CryptoNetworkType(); ok {
		if err := cryptowallet.CryptoNetworkTypeValidator(v); err != nil {
			return &ValidationError{Name: "crypto_network_type", err: fmt.Errorf(`ent: validator failed for field "CryptoWallet.crypto_network_type": %w`, err)}
		}
	}
	if _, ok := cwc.mutation.Address(); !ok {
		return &ValidationError{Name: "address", err: errors.New(`ent: missing required field "CryptoWallet.address"`)}
	}
	if v, ok := cwc.mutation.Address(); ok {
		if err := cryptowallet.AddressValidator(v); err != nil {
			return &ValidationError{Name: "address", err: fmt.Errorf(`ent: validator failed for field "CryptoWallet.address": %w`, err)}
		}
	}
	if _, ok := cwc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "CryptoWallet.status"`)}
	}
	if v, ok := cwc.mutation.Status(); ok {
		if err := cryptowallet.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "CryptoWallet.status": %w`, err)}
		}
	}
	return nil
}

func (cwc *CryptoWalletCreate) sqlSave(ctx context.Context) (*CryptoWallet, error) {
	_node, _spec := cwc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cwc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	return _node, nil
}

func (cwc *CryptoWalletCreate) createSpec() (*CryptoWallet, *sqlgraph.CreateSpec) {
	var (
		_node = &CryptoWallet{config: cwc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: cryptowallet.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: cryptowallet.FieldID,
			},
		}
	)
	_spec.OnConflict = cwc.conflict
	if id, ok := cwc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cwc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: cryptowallet.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := cwc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: cryptowallet.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := cwc.mutation.CreatedBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cryptowallet.FieldCreatedBy,
		})
		_node.CreatedBy = value
	}
	if value, ok := cwc.mutation.UpdatedBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cryptowallet.FieldUpdatedBy,
		})
		_node.UpdatedBy = value
	}
	if value, ok := cwc.mutation.MerchantID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cryptowallet.FieldMerchantID,
		})
		_node.MerchantID = value
	}
	if value, ok := cwc.mutation.MerchantUserID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cryptowallet.FieldMerchantUserID,
		})
		_node.MerchantUserID = value
	}
	if value, ok := cwc.mutation.CryptoType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: cryptowallet.FieldCryptoType,
		})
		_node.CryptoType = value
	}
	if value, ok := cwc.mutation.CryptoNetworkType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: cryptowallet.FieldCryptoNetworkType,
		})
		_node.CryptoNetworkType = value
	}
	if value, ok := cwc.mutation.Address(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cryptowallet.FieldAddress,
		})
		_node.Address = value
	}
	if value, ok := cwc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: cryptowallet.FieldStatus,
		})
		_node.Status = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CryptoWallet.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CryptoWalletUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (cwc *CryptoWalletCreate) OnConflict(opts ...sql.ConflictOption) *CryptoWalletUpsertOne {
	cwc.conflict = opts
	return &CryptoWalletUpsertOne{
		create: cwc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CryptoWallet.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (cwc *CryptoWalletCreate) OnConflictColumns(columns ...string) *CryptoWalletUpsertOne {
	cwc.conflict = append(cwc.conflict, sql.ConflictColumns(columns...))
	return &CryptoWalletUpsertOne{
		create: cwc,
	}
}

type (
	// CryptoWalletUpsertOne is the builder for "upsert"-ing
	//  one CryptoWallet node.
	CryptoWalletUpsertOne struct {
		create *CryptoWalletCreate
	}

	// CryptoWalletUpsert is the "OnConflict" setter.
	CryptoWalletUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *CryptoWalletUpsert) SetCreatedAt(v time.Time) *CryptoWalletUpsert {
	u.Set(cryptowallet.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *CryptoWalletUpsert) UpdateCreatedAt() *CryptoWalletUpsert {
	u.SetExcluded(cryptowallet.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CryptoWalletUpsert) SetUpdatedAt(v time.Time) *CryptoWalletUpsert {
	u.Set(cryptowallet.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CryptoWalletUpsert) UpdateUpdatedAt() *CryptoWalletUpsert {
	u.SetExcluded(cryptowallet.FieldUpdatedAt)
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *CryptoWalletUpsert) SetCreatedBy(v string) *CryptoWalletUpsert {
	u.Set(cryptowallet.FieldCreatedBy, v)
	return u
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *CryptoWalletUpsert) UpdateCreatedBy() *CryptoWalletUpsert {
	u.SetExcluded(cryptowallet.FieldCreatedBy)
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *CryptoWalletUpsert) SetUpdatedBy(v string) *CryptoWalletUpsert {
	u.Set(cryptowallet.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *CryptoWalletUpsert) UpdateUpdatedBy() *CryptoWalletUpsert {
	u.SetExcluded(cryptowallet.FieldUpdatedBy)
	return u
}

// SetMerchantID sets the "merchant_id" field.
func (u *CryptoWalletUpsert) SetMerchantID(v int64) *CryptoWalletUpsert {
	u.Set(cryptowallet.FieldMerchantID, v)
	return u
}

// UpdateMerchantID sets the "merchant_id" field to the value that was provided on create.
func (u *CryptoWalletUpsert) UpdateMerchantID() *CryptoWalletUpsert {
	u.SetExcluded(cryptowallet.FieldMerchantID)
	return u
}

// AddMerchantID adds v to the "merchant_id" field.
func (u *CryptoWalletUpsert) AddMerchantID(v int64) *CryptoWalletUpsert {
	u.Add(cryptowallet.FieldMerchantID, v)
	return u
}

// SetMerchantUserID sets the "merchant_user_id" field.
func (u *CryptoWalletUpsert) SetMerchantUserID(v int64) *CryptoWalletUpsert {
	u.Set(cryptowallet.FieldMerchantUserID, v)
	return u
}

// UpdateMerchantUserID sets the "merchant_user_id" field to the value that was provided on create.
func (u *CryptoWalletUpsert) UpdateMerchantUserID() *CryptoWalletUpsert {
	u.SetExcluded(cryptowallet.FieldMerchantUserID)
	return u
}

// AddMerchantUserID adds v to the "merchant_user_id" field.
func (u *CryptoWalletUpsert) AddMerchantUserID(v int64) *CryptoWalletUpsert {
	u.Add(cryptowallet.FieldMerchantUserID, v)
	return u
}

// SetCryptoType sets the "crypto_type" field.
func (u *CryptoWalletUpsert) SetCryptoType(v int32) *CryptoWalletUpsert {
	u.Set(cryptowallet.FieldCryptoType, v)
	return u
}

// UpdateCryptoType sets the "crypto_type" field to the value that was provided on create.
func (u *CryptoWalletUpsert) UpdateCryptoType() *CryptoWalletUpsert {
	u.SetExcluded(cryptowallet.FieldCryptoType)
	return u
}

// AddCryptoType adds v to the "crypto_type" field.
func (u *CryptoWalletUpsert) AddCryptoType(v int32) *CryptoWalletUpsert {
	u.Add(cryptowallet.FieldCryptoType, v)
	return u
}

// SetCryptoNetworkType sets the "crypto_network_type" field.
func (u *CryptoWalletUpsert) SetCryptoNetworkType(v int32) *CryptoWalletUpsert {
	u.Set(cryptowallet.FieldCryptoNetworkType, v)
	return u
}

// UpdateCryptoNetworkType sets the "crypto_network_type" field to the value that was provided on create.
func (u *CryptoWalletUpsert) UpdateCryptoNetworkType() *CryptoWalletUpsert {
	u.SetExcluded(cryptowallet.FieldCryptoNetworkType)
	return u
}

// AddCryptoNetworkType adds v to the "crypto_network_type" field.
func (u *CryptoWalletUpsert) AddCryptoNetworkType(v int32) *CryptoWalletUpsert {
	u.Add(cryptowallet.FieldCryptoNetworkType, v)
	return u
}

// SetAddress sets the "address" field.
func (u *CryptoWalletUpsert) SetAddress(v string) *CryptoWalletUpsert {
	u.Set(cryptowallet.FieldAddress, v)
	return u
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *CryptoWalletUpsert) UpdateAddress() *CryptoWalletUpsert {
	u.SetExcluded(cryptowallet.FieldAddress)
	return u
}

// SetStatus sets the "status" field.
func (u *CryptoWalletUpsert) SetStatus(v int32) *CryptoWalletUpsert {
	u.Set(cryptowallet.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *CryptoWalletUpsert) UpdateStatus() *CryptoWalletUpsert {
	u.SetExcluded(cryptowallet.FieldStatus)
	return u
}

// AddStatus adds v to the "status" field.
func (u *CryptoWalletUpsert) AddStatus(v int32) *CryptoWalletUpsert {
	u.Add(cryptowallet.FieldStatus, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.CryptoWallet.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(cryptowallet.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *CryptoWalletUpsertOne) UpdateNewValues() *CryptoWalletUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(cryptowallet.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.CryptoWallet.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *CryptoWalletUpsertOne) Ignore() *CryptoWalletUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CryptoWalletUpsertOne) DoNothing() *CryptoWalletUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CryptoWalletCreate.OnConflict
// documentation for more info.
func (u *CryptoWalletUpsertOne) Update(set func(*CryptoWalletUpsert)) *CryptoWalletUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CryptoWalletUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *CryptoWalletUpsertOne) SetCreatedAt(v time.Time) *CryptoWalletUpsertOne {
	return u.Update(func(s *CryptoWalletUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *CryptoWalletUpsertOne) UpdateCreatedAt() *CryptoWalletUpsertOne {
	return u.Update(func(s *CryptoWalletUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CryptoWalletUpsertOne) SetUpdatedAt(v time.Time) *CryptoWalletUpsertOne {
	return u.Update(func(s *CryptoWalletUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CryptoWalletUpsertOne) UpdateUpdatedAt() *CryptoWalletUpsertOne {
	return u.Update(func(s *CryptoWalletUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetCreatedBy sets the "created_by" field.
func (u *CryptoWalletUpsertOne) SetCreatedBy(v string) *CryptoWalletUpsertOne {
	return u.Update(func(s *CryptoWalletUpsert) {
		s.SetCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *CryptoWalletUpsertOne) UpdateCreatedBy() *CryptoWalletUpsertOne {
	return u.Update(func(s *CryptoWalletUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *CryptoWalletUpsertOne) SetUpdatedBy(v string) *CryptoWalletUpsertOne {
	return u.Update(func(s *CryptoWalletUpsert) {
		s.SetUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *CryptoWalletUpsertOne) UpdateUpdatedBy() *CryptoWalletUpsertOne {
	return u.Update(func(s *CryptoWalletUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetMerchantID sets the "merchant_id" field.
func (u *CryptoWalletUpsertOne) SetMerchantID(v int64) *CryptoWalletUpsertOne {
	return u.Update(func(s *CryptoWalletUpsert) {
		s.SetMerchantID(v)
	})
}

// AddMerchantID adds v to the "merchant_id" field.
func (u *CryptoWalletUpsertOne) AddMerchantID(v int64) *CryptoWalletUpsertOne {
	return u.Update(func(s *CryptoWalletUpsert) {
		s.AddMerchantID(v)
	})
}

// UpdateMerchantID sets the "merchant_id" field to the value that was provided on create.
func (u *CryptoWalletUpsertOne) UpdateMerchantID() *CryptoWalletUpsertOne {
	return u.Update(func(s *CryptoWalletUpsert) {
		s.UpdateMerchantID()
	})
}

// SetMerchantUserID sets the "merchant_user_id" field.
func (u *CryptoWalletUpsertOne) SetMerchantUserID(v int64) *CryptoWalletUpsertOne {
	return u.Update(func(s *CryptoWalletUpsert) {
		s.SetMerchantUserID(v)
	})
}

// AddMerchantUserID adds v to the "merchant_user_id" field.
func (u *CryptoWalletUpsertOne) AddMerchantUserID(v int64) *CryptoWalletUpsertOne {
	return u.Update(func(s *CryptoWalletUpsert) {
		s.AddMerchantUserID(v)
	})
}

// UpdateMerchantUserID sets the "merchant_user_id" field to the value that was provided on create.
func (u *CryptoWalletUpsertOne) UpdateMerchantUserID() *CryptoWalletUpsertOne {
	return u.Update(func(s *CryptoWalletUpsert) {
		s.UpdateMerchantUserID()
	})
}

// SetCryptoType sets the "crypto_type" field.
func (u *CryptoWalletUpsertOne) SetCryptoType(v int32) *CryptoWalletUpsertOne {
	return u.Update(func(s *CryptoWalletUpsert) {
		s.SetCryptoType(v)
	})
}

// AddCryptoType adds v to the "crypto_type" field.
func (u *CryptoWalletUpsertOne) AddCryptoType(v int32) *CryptoWalletUpsertOne {
	return u.Update(func(s *CryptoWalletUpsert) {
		s.AddCryptoType(v)
	})
}

// UpdateCryptoType sets the "crypto_type" field to the value that was provided on create.
func (u *CryptoWalletUpsertOne) UpdateCryptoType() *CryptoWalletUpsertOne {
	return u.Update(func(s *CryptoWalletUpsert) {
		s.UpdateCryptoType()
	})
}

// SetCryptoNetworkType sets the "crypto_network_type" field.
func (u *CryptoWalletUpsertOne) SetCryptoNetworkType(v int32) *CryptoWalletUpsertOne {
	return u.Update(func(s *CryptoWalletUpsert) {
		s.SetCryptoNetworkType(v)
	})
}

// AddCryptoNetworkType adds v to the "crypto_network_type" field.
func (u *CryptoWalletUpsertOne) AddCryptoNetworkType(v int32) *CryptoWalletUpsertOne {
	return u.Update(func(s *CryptoWalletUpsert) {
		s.AddCryptoNetworkType(v)
	})
}

// UpdateCryptoNetworkType sets the "crypto_network_type" field to the value that was provided on create.
func (u *CryptoWalletUpsertOne) UpdateCryptoNetworkType() *CryptoWalletUpsertOne {
	return u.Update(func(s *CryptoWalletUpsert) {
		s.UpdateCryptoNetworkType()
	})
}

// SetAddress sets the "address" field.
func (u *CryptoWalletUpsertOne) SetAddress(v string) *CryptoWalletUpsertOne {
	return u.Update(func(s *CryptoWalletUpsert) {
		s.SetAddress(v)
	})
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *CryptoWalletUpsertOne) UpdateAddress() *CryptoWalletUpsertOne {
	return u.Update(func(s *CryptoWalletUpsert) {
		s.UpdateAddress()
	})
}

// SetStatus sets the "status" field.
func (u *CryptoWalletUpsertOne) SetStatus(v int32) *CryptoWalletUpsertOne {
	return u.Update(func(s *CryptoWalletUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *CryptoWalletUpsertOne) AddStatus(v int32) *CryptoWalletUpsertOne {
	return u.Update(func(s *CryptoWalletUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *CryptoWalletUpsertOne) UpdateStatus() *CryptoWalletUpsertOne {
	return u.Update(func(s *CryptoWalletUpsert) {
		s.UpdateStatus()
	})
}

// Exec executes the query.
func (u *CryptoWalletUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CryptoWalletCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CryptoWalletUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CryptoWalletUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CryptoWalletUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CryptoWalletCreateBulk is the builder for creating many CryptoWallet entities in bulk.
type CryptoWalletCreateBulk struct {
	config
	builders []*CryptoWalletCreate
	conflict []sql.ConflictOption
}

// Save creates the CryptoWallet entities in the database.
func (cwcb *CryptoWalletCreateBulk) Save(ctx context.Context) ([]*CryptoWallet, error) {
	specs := make([]*sqlgraph.CreateSpec, len(cwcb.builders))
	nodes := make([]*CryptoWallet, len(cwcb.builders))
	mutators := make([]Mutator, len(cwcb.builders))
	for i := range cwcb.builders {
		func(i int, root context.Context) {
			builder := cwcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CryptoWalletMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cwcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = cwcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cwcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cwcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cwcb *CryptoWalletCreateBulk) SaveX(ctx context.Context) []*CryptoWallet {
	v, err := cwcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cwcb *CryptoWalletCreateBulk) Exec(ctx context.Context) error {
	_, err := cwcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cwcb *CryptoWalletCreateBulk) ExecX(ctx context.Context) {
	if err := cwcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CryptoWallet.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CryptoWalletUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (cwcb *CryptoWalletCreateBulk) OnConflict(opts ...sql.ConflictOption) *CryptoWalletUpsertBulk {
	cwcb.conflict = opts
	return &CryptoWalletUpsertBulk{
		create: cwcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CryptoWallet.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (cwcb *CryptoWalletCreateBulk) OnConflictColumns(columns ...string) *CryptoWalletUpsertBulk {
	cwcb.conflict = append(cwcb.conflict, sql.ConflictColumns(columns...))
	return &CryptoWalletUpsertBulk{
		create: cwcb,
	}
}

// CryptoWalletUpsertBulk is the builder for "upsert"-ing
// a bulk of CryptoWallet nodes.
type CryptoWalletUpsertBulk struct {
	create *CryptoWalletCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.CryptoWallet.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(cryptowallet.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *CryptoWalletUpsertBulk) UpdateNewValues() *CryptoWalletUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(cryptowallet.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CryptoWallet.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *CryptoWalletUpsertBulk) Ignore() *CryptoWalletUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CryptoWalletUpsertBulk) DoNothing() *CryptoWalletUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CryptoWalletCreateBulk.OnConflict
// documentation for more info.
func (u *CryptoWalletUpsertBulk) Update(set func(*CryptoWalletUpsert)) *CryptoWalletUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CryptoWalletUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *CryptoWalletUpsertBulk) SetCreatedAt(v time.Time) *CryptoWalletUpsertBulk {
	return u.Update(func(s *CryptoWalletUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *CryptoWalletUpsertBulk) UpdateCreatedAt() *CryptoWalletUpsertBulk {
	return u.Update(func(s *CryptoWalletUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CryptoWalletUpsertBulk) SetUpdatedAt(v time.Time) *CryptoWalletUpsertBulk {
	return u.Update(func(s *CryptoWalletUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CryptoWalletUpsertBulk) UpdateUpdatedAt() *CryptoWalletUpsertBulk {
	return u.Update(func(s *CryptoWalletUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetCreatedBy sets the "created_by" field.
func (u *CryptoWalletUpsertBulk) SetCreatedBy(v string) *CryptoWalletUpsertBulk {
	return u.Update(func(s *CryptoWalletUpsert) {
		s.SetCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *CryptoWalletUpsertBulk) UpdateCreatedBy() *CryptoWalletUpsertBulk {
	return u.Update(func(s *CryptoWalletUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *CryptoWalletUpsertBulk) SetUpdatedBy(v string) *CryptoWalletUpsertBulk {
	return u.Update(func(s *CryptoWalletUpsert) {
		s.SetUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *CryptoWalletUpsertBulk) UpdateUpdatedBy() *CryptoWalletUpsertBulk {
	return u.Update(func(s *CryptoWalletUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetMerchantID sets the "merchant_id" field.
func (u *CryptoWalletUpsertBulk) SetMerchantID(v int64) *CryptoWalletUpsertBulk {
	return u.Update(func(s *CryptoWalletUpsert) {
		s.SetMerchantID(v)
	})
}

// AddMerchantID adds v to the "merchant_id" field.
func (u *CryptoWalletUpsertBulk) AddMerchantID(v int64) *CryptoWalletUpsertBulk {
	return u.Update(func(s *CryptoWalletUpsert) {
		s.AddMerchantID(v)
	})
}

// UpdateMerchantID sets the "merchant_id" field to the value that was provided on create.
func (u *CryptoWalletUpsertBulk) UpdateMerchantID() *CryptoWalletUpsertBulk {
	return u.Update(func(s *CryptoWalletUpsert) {
		s.UpdateMerchantID()
	})
}

// SetMerchantUserID sets the "merchant_user_id" field.
func (u *CryptoWalletUpsertBulk) SetMerchantUserID(v int64) *CryptoWalletUpsertBulk {
	return u.Update(func(s *CryptoWalletUpsert) {
		s.SetMerchantUserID(v)
	})
}

// AddMerchantUserID adds v to the "merchant_user_id" field.
func (u *CryptoWalletUpsertBulk) AddMerchantUserID(v int64) *CryptoWalletUpsertBulk {
	return u.Update(func(s *CryptoWalletUpsert) {
		s.AddMerchantUserID(v)
	})
}

// UpdateMerchantUserID sets the "merchant_user_id" field to the value that was provided on create.
func (u *CryptoWalletUpsertBulk) UpdateMerchantUserID() *CryptoWalletUpsertBulk {
	return u.Update(func(s *CryptoWalletUpsert) {
		s.UpdateMerchantUserID()
	})
}

// SetCryptoType sets the "crypto_type" field.
func (u *CryptoWalletUpsertBulk) SetCryptoType(v int32) *CryptoWalletUpsertBulk {
	return u.Update(func(s *CryptoWalletUpsert) {
		s.SetCryptoType(v)
	})
}

// AddCryptoType adds v to the "crypto_type" field.
func (u *CryptoWalletUpsertBulk) AddCryptoType(v int32) *CryptoWalletUpsertBulk {
	return u.Update(func(s *CryptoWalletUpsert) {
		s.AddCryptoType(v)
	})
}

// UpdateCryptoType sets the "crypto_type" field to the value that was provided on create.
func (u *CryptoWalletUpsertBulk) UpdateCryptoType() *CryptoWalletUpsertBulk {
	return u.Update(func(s *CryptoWalletUpsert) {
		s.UpdateCryptoType()
	})
}

// SetCryptoNetworkType sets the "crypto_network_type" field.
func (u *CryptoWalletUpsertBulk) SetCryptoNetworkType(v int32) *CryptoWalletUpsertBulk {
	return u.Update(func(s *CryptoWalletUpsert) {
		s.SetCryptoNetworkType(v)
	})
}

// AddCryptoNetworkType adds v to the "crypto_network_type" field.
func (u *CryptoWalletUpsertBulk) AddCryptoNetworkType(v int32) *CryptoWalletUpsertBulk {
	return u.Update(func(s *CryptoWalletUpsert) {
		s.AddCryptoNetworkType(v)
	})
}

// UpdateCryptoNetworkType sets the "crypto_network_type" field to the value that was provided on create.
func (u *CryptoWalletUpsertBulk) UpdateCryptoNetworkType() *CryptoWalletUpsertBulk {
	return u.Update(func(s *CryptoWalletUpsert) {
		s.UpdateCryptoNetworkType()
	})
}

// SetAddress sets the "address" field.
func (u *CryptoWalletUpsertBulk) SetAddress(v string) *CryptoWalletUpsertBulk {
	return u.Update(func(s *CryptoWalletUpsert) {
		s.SetAddress(v)
	})
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *CryptoWalletUpsertBulk) UpdateAddress() *CryptoWalletUpsertBulk {
	return u.Update(func(s *CryptoWalletUpsert) {
		s.UpdateAddress()
	})
}

// SetStatus sets the "status" field.
func (u *CryptoWalletUpsertBulk) SetStatus(v int32) *CryptoWalletUpsertBulk {
	return u.Update(func(s *CryptoWalletUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *CryptoWalletUpsertBulk) AddStatus(v int32) *CryptoWalletUpsertBulk {
	return u.Update(func(s *CryptoWalletUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *CryptoWalletUpsertBulk) UpdateStatus() *CryptoWalletUpsertBulk {
	return u.Update(func(s *CryptoWalletUpsert) {
		s.UpdateStatus()
	})
}

// Exec executes the query.
func (u *CryptoWalletUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the CryptoWalletCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CryptoWalletCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CryptoWalletUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
