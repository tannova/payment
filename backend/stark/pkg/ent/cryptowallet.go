// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"gitlab.com/mcuc/monorepo/backend/stark/pkg/ent/cryptowallet"
)

// CryptoWallet is the model entity for the CryptoWallet schema.
type CryptoWallet struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// MerchantID holds the value of the "merchant_id" field.
	MerchantID int64 `json:"merchant_id,omitempty"`
	// MerchantUserID holds the value of the "merchant_user_id" field.
	MerchantUserID int64 `json:"merchant_user_id,omitempty"`
	// CryptoType holds the value of the "crypto_type" field.
	CryptoType int32 `json:"crypto_type,omitempty"`
	// CryptoNetworkType holds the value of the "crypto_network_type" field.
	CryptoNetworkType int32 `json:"crypto_network_type,omitempty"`
	// Address holds the value of the "address" field.
	Address string `json:"address,omitempty"`
	// Status holds the value of the "status" field.
	Status int32 `json:"status,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CryptoWallet) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case cryptowallet.FieldID, cryptowallet.FieldMerchantID, cryptowallet.FieldMerchantUserID, cryptowallet.FieldCryptoType, cryptowallet.FieldCryptoNetworkType, cryptowallet.FieldStatus:
			values[i] = new(sql.NullInt64)
		case cryptowallet.FieldCreatedBy, cryptowallet.FieldUpdatedBy, cryptowallet.FieldAddress:
			values[i] = new(sql.NullString)
		case cryptowallet.FieldCreatedAt, cryptowallet.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type CryptoWallet", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CryptoWallet fields.
func (cw *CryptoWallet) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case cryptowallet.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cw.ID = int64(value.Int64)
		case cryptowallet.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				cw.CreatedAt = value.Time
			}
		case cryptowallet.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				cw.UpdatedAt = value.Time
			}
		case cryptowallet.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				cw.CreatedBy = value.String
			}
		case cryptowallet.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				cw.UpdatedBy = value.String
			}
		case cryptowallet.FieldMerchantID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field merchant_id", values[i])
			} else if value.Valid {
				cw.MerchantID = value.Int64
			}
		case cryptowallet.FieldMerchantUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field merchant_user_id", values[i])
			} else if value.Valid {
				cw.MerchantUserID = value.Int64
			}
		case cryptowallet.FieldCryptoType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field crypto_type", values[i])
			} else if value.Valid {
				cw.CryptoType = int32(value.Int64)
			}
		case cryptowallet.FieldCryptoNetworkType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field crypto_network_type", values[i])
			} else if value.Valid {
				cw.CryptoNetworkType = int32(value.Int64)
			}
		case cryptowallet.FieldAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field address", values[i])
			} else if value.Valid {
				cw.Address = value.String
			}
		case cryptowallet.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				cw.Status = int32(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this CryptoWallet.
// Note that you need to call CryptoWallet.Unwrap() before calling this method if this CryptoWallet
// was returned from a transaction, and the transaction was committed or rolled back.
func (cw *CryptoWallet) Update() *CryptoWalletUpdateOne {
	return (&CryptoWalletClient{config: cw.config}).UpdateOne(cw)
}

// Unwrap unwraps the CryptoWallet entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cw *CryptoWallet) Unwrap() *CryptoWallet {
	tx, ok := cw.config.driver.(*txDriver)
	if !ok {
		panic("ent: CryptoWallet is not a transactional entity")
	}
	cw.config.driver = tx.drv
	return cw
}

// String implements the fmt.Stringer.
func (cw *CryptoWallet) String() string {
	var builder strings.Builder
	builder.WriteString("CryptoWallet(")
	builder.WriteString(fmt.Sprintf("id=%v", cw.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(cw.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(cw.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", created_by=")
	builder.WriteString(cw.CreatedBy)
	builder.WriteString(", updated_by=")
	builder.WriteString(cw.UpdatedBy)
	builder.WriteString(", merchant_id=")
	builder.WriteString(fmt.Sprintf("%v", cw.MerchantID))
	builder.WriteString(", merchant_user_id=")
	builder.WriteString(fmt.Sprintf("%v", cw.MerchantUserID))
	builder.WriteString(", crypto_type=")
	builder.WriteString(fmt.Sprintf("%v", cw.CryptoType))
	builder.WriteString(", crypto_network_type=")
	builder.WriteString(fmt.Sprintf("%v", cw.CryptoNetworkType))
	builder.WriteString(", address=")
	builder.WriteString(cw.Address)
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", cw.Status))
	builder.WriteByte(')')
	return builder.String()
}

// CryptoWallets is a parsable slice of CryptoWallet.
type CryptoWallets []*CryptoWallet

func (cw CryptoWallets) config(cfg config) {
	for _i := range cw {
		cw[_i].config = cfg
	}
}
