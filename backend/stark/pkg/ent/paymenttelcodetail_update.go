// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"gitlab.com/mcuc/monorepo/backend/stark/pkg/ent/payment"
	"gitlab.com/mcuc/monorepo/backend/stark/pkg/ent/paymenttelcodetail"
	"gitlab.com/mcuc/monorepo/backend/stark/pkg/ent/predicate"
)

// PaymentTelcoDetailUpdate is the builder for updating PaymentTelcoDetail entities.
type PaymentTelcoDetailUpdate struct {
	config
	hooks    []Hook
	mutation *PaymentTelcoDetailMutation
}

// Where appends a list predicates to the PaymentTelcoDetailUpdate builder.
func (ptdu *PaymentTelcoDetailUpdate) Where(ps ...predicate.PaymentTelcoDetail) *PaymentTelcoDetailUpdate {
	ptdu.mutation.Where(ps...)
	return ptdu
}

// SetCreatedAt sets the "created_at" field.
func (ptdu *PaymentTelcoDetailUpdate) SetCreatedAt(t time.Time) *PaymentTelcoDetailUpdate {
	ptdu.mutation.SetCreatedAt(t)
	return ptdu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ptdu *PaymentTelcoDetailUpdate) SetNillableCreatedAt(t *time.Time) *PaymentTelcoDetailUpdate {
	if t != nil {
		ptdu.SetCreatedAt(*t)
	}
	return ptdu
}

// SetUpdatedAt sets the "updated_at" field.
func (ptdu *PaymentTelcoDetailUpdate) SetUpdatedAt(t time.Time) *PaymentTelcoDetailUpdate {
	ptdu.mutation.SetUpdatedAt(t)
	return ptdu
}

// SetCreatedBy sets the "created_by" field.
func (ptdu *PaymentTelcoDetailUpdate) SetCreatedBy(s string) *PaymentTelcoDetailUpdate {
	ptdu.mutation.SetCreatedBy(s)
	return ptdu
}

// SetUpdatedBy sets the "updated_by" field.
func (ptdu *PaymentTelcoDetailUpdate) SetUpdatedBy(s string) *PaymentTelcoDetailUpdate {
	ptdu.mutation.SetUpdatedBy(s)
	return ptdu
}

// SetTelcoName sets the "telco_name" field.
func (ptdu *PaymentTelcoDetailUpdate) SetTelcoName(i int32) *PaymentTelcoDetailUpdate {
	ptdu.mutation.ResetTelcoName()
	ptdu.mutation.SetTelcoName(i)
	return ptdu
}

// SetNillableTelcoName sets the "telco_name" field if the given value is not nil.
func (ptdu *PaymentTelcoDetailUpdate) SetNillableTelcoName(i *int32) *PaymentTelcoDetailUpdate {
	if i != nil {
		ptdu.SetTelcoName(*i)
	}
	return ptdu
}

// AddTelcoName adds i to the "telco_name" field.
func (ptdu *PaymentTelcoDetailUpdate) AddTelcoName(i int32) *PaymentTelcoDetailUpdate {
	ptdu.mutation.AddTelcoName(i)
	return ptdu
}

// SetSerialNumber sets the "serial_number" field.
func (ptdu *PaymentTelcoDetailUpdate) SetSerialNumber(s string) *PaymentTelcoDetailUpdate {
	ptdu.mutation.SetSerialNumber(s)
	return ptdu
}

// SetNillableSerialNumber sets the "serial_number" field if the given value is not nil.
func (ptdu *PaymentTelcoDetailUpdate) SetNillableSerialNumber(s *string) *PaymentTelcoDetailUpdate {
	if s != nil {
		ptdu.SetSerialNumber(*s)
	}
	return ptdu
}

// SetCardID sets the "card_id" field.
func (ptdu *PaymentTelcoDetailUpdate) SetCardID(s string) *PaymentTelcoDetailUpdate {
	ptdu.mutation.SetCardID(s)
	return ptdu
}

// SetNillableCardID sets the "card_id" field if the given value is not nil.
func (ptdu *PaymentTelcoDetailUpdate) SetNillableCardID(s *string) *PaymentTelcoDetailUpdate {
	if s != nil {
		ptdu.SetCardID(*s)
	}
	return ptdu
}

// SetChargedAmount sets the "charged_amount" field.
func (ptdu *PaymentTelcoDetailUpdate) SetChargedAmount(u uint64) *PaymentTelcoDetailUpdate {
	ptdu.mutation.ResetChargedAmount()
	ptdu.mutation.SetChargedAmount(u)
	return ptdu
}

// SetNillableChargedAmount sets the "charged_amount" field if the given value is not nil.
func (ptdu *PaymentTelcoDetailUpdate) SetNillableChargedAmount(u *uint64) *PaymentTelcoDetailUpdate {
	if u != nil {
		ptdu.SetChargedAmount(*u)
	}
	return ptdu
}

// AddChargedAmount adds u to the "charged_amount" field.
func (ptdu *PaymentTelcoDetailUpdate) AddChargedAmount(u uint64) *PaymentTelcoDetailUpdate {
	ptdu.mutation.AddChargedAmount(u)
	return ptdu
}

// SetAmount sets the "amount" field.
func (ptdu *PaymentTelcoDetailUpdate) SetAmount(u uint64) *PaymentTelcoDetailUpdate {
	ptdu.mutation.ResetAmount()
	ptdu.mutation.SetAmount(u)
	return ptdu
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (ptdu *PaymentTelcoDetailUpdate) SetNillableAmount(u *uint64) *PaymentTelcoDetailUpdate {
	if u != nil {
		ptdu.SetAmount(*u)
	}
	return ptdu
}

// AddAmount adds u to the "amount" field.
func (ptdu *PaymentTelcoDetailUpdate) AddAmount(u uint64) *PaymentTelcoDetailUpdate {
	ptdu.mutation.AddAmount(u)
	return ptdu
}

// SetPaymentID sets the "payment" edge to the Payment entity by ID.
func (ptdu *PaymentTelcoDetailUpdate) SetPaymentID(id int64) *PaymentTelcoDetailUpdate {
	ptdu.mutation.SetPaymentID(id)
	return ptdu
}

// SetNillablePaymentID sets the "payment" edge to the Payment entity by ID if the given value is not nil.
func (ptdu *PaymentTelcoDetailUpdate) SetNillablePaymentID(id *int64) *PaymentTelcoDetailUpdate {
	if id != nil {
		ptdu = ptdu.SetPaymentID(*id)
	}
	return ptdu
}

// SetPayment sets the "payment" edge to the Payment entity.
func (ptdu *PaymentTelcoDetailUpdate) SetPayment(p *Payment) *PaymentTelcoDetailUpdate {
	return ptdu.SetPaymentID(p.ID)
}

// Mutation returns the PaymentTelcoDetailMutation object of the builder.
func (ptdu *PaymentTelcoDetailUpdate) Mutation() *PaymentTelcoDetailMutation {
	return ptdu.mutation
}

// ClearPayment clears the "payment" edge to the Payment entity.
func (ptdu *PaymentTelcoDetailUpdate) ClearPayment() *PaymentTelcoDetailUpdate {
	ptdu.mutation.ClearPayment()
	return ptdu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ptdu *PaymentTelcoDetailUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	ptdu.defaults()
	if len(ptdu.hooks) == 0 {
		if err = ptdu.check(); err != nil {
			return 0, err
		}
		affected, err = ptdu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PaymentTelcoDetailMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ptdu.check(); err != nil {
				return 0, err
			}
			ptdu.mutation = mutation
			affected, err = ptdu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ptdu.hooks) - 1; i >= 0; i-- {
			if ptdu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ptdu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ptdu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ptdu *PaymentTelcoDetailUpdate) SaveX(ctx context.Context) int {
	affected, err := ptdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ptdu *PaymentTelcoDetailUpdate) Exec(ctx context.Context) error {
	_, err := ptdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptdu *PaymentTelcoDetailUpdate) ExecX(ctx context.Context) {
	if err := ptdu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ptdu *PaymentTelcoDetailUpdate) defaults() {
	if _, ok := ptdu.mutation.UpdatedAt(); !ok {
		v := paymenttelcodetail.UpdateDefaultUpdatedAt()
		ptdu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ptdu *PaymentTelcoDetailUpdate) check() error {
	if v, ok := ptdu.mutation.CreatedBy(); ok {
		if err := paymenttelcodetail.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "PaymentTelcoDetail.created_by": %w`, err)}
		}
	}
	if v, ok := ptdu.mutation.UpdatedBy(); ok {
		if err := paymenttelcodetail.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "PaymentTelcoDetail.updated_by": %w`, err)}
		}
	}
	if v, ok := ptdu.mutation.TelcoName(); ok {
		if err := paymenttelcodetail.TelcoNameValidator(v); err != nil {
			return &ValidationError{Name: "telco_name", err: fmt.Errorf(`ent: validator failed for field "PaymentTelcoDetail.telco_name": %w`, err)}
		}
	}
	return nil
}

func (ptdu *PaymentTelcoDetailUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   paymenttelcodetail.Table,
			Columns: paymenttelcodetail.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: paymenttelcodetail.FieldID,
			},
		},
	}
	if ps := ptdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ptdu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: paymenttelcodetail.FieldCreatedAt,
		})
	}
	if value, ok := ptdu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: paymenttelcodetail.FieldUpdatedAt,
		})
	}
	if value, ok := ptdu.mutation.CreatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: paymenttelcodetail.FieldCreatedBy,
		})
	}
	if value, ok := ptdu.mutation.UpdatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: paymenttelcodetail.FieldUpdatedBy,
		})
	}
	if value, ok := ptdu.mutation.TelcoName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: paymenttelcodetail.FieldTelcoName,
		})
	}
	if value, ok := ptdu.mutation.AddedTelcoName(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: paymenttelcodetail.FieldTelcoName,
		})
	}
	if value, ok := ptdu.mutation.SerialNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: paymenttelcodetail.FieldSerialNumber,
		})
	}
	if value, ok := ptdu.mutation.CardID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: paymenttelcodetail.FieldCardID,
		})
	}
	if value, ok := ptdu.mutation.ChargedAmount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: paymenttelcodetail.FieldChargedAmount,
		})
	}
	if value, ok := ptdu.mutation.AddedChargedAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: paymenttelcodetail.FieldChargedAmount,
		})
	}
	if value, ok := ptdu.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: paymenttelcodetail.FieldAmount,
		})
	}
	if value, ok := ptdu.mutation.AddedAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: paymenttelcodetail.FieldAmount,
		})
	}
	if ptdu.mutation.PaymentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   paymenttelcodetail.PaymentTable,
			Columns: []string{paymenttelcodetail.PaymentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: payment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptdu.mutation.PaymentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   paymenttelcodetail.PaymentTable,
			Columns: []string{paymenttelcodetail.PaymentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: payment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ptdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{paymenttelcodetail.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// PaymentTelcoDetailUpdateOne is the builder for updating a single PaymentTelcoDetail entity.
type PaymentTelcoDetailUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PaymentTelcoDetailMutation
}

// SetCreatedAt sets the "created_at" field.
func (ptduo *PaymentTelcoDetailUpdateOne) SetCreatedAt(t time.Time) *PaymentTelcoDetailUpdateOne {
	ptduo.mutation.SetCreatedAt(t)
	return ptduo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ptduo *PaymentTelcoDetailUpdateOne) SetNillableCreatedAt(t *time.Time) *PaymentTelcoDetailUpdateOne {
	if t != nil {
		ptduo.SetCreatedAt(*t)
	}
	return ptduo
}

// SetUpdatedAt sets the "updated_at" field.
func (ptduo *PaymentTelcoDetailUpdateOne) SetUpdatedAt(t time.Time) *PaymentTelcoDetailUpdateOne {
	ptduo.mutation.SetUpdatedAt(t)
	return ptduo
}

// SetCreatedBy sets the "created_by" field.
func (ptduo *PaymentTelcoDetailUpdateOne) SetCreatedBy(s string) *PaymentTelcoDetailUpdateOne {
	ptduo.mutation.SetCreatedBy(s)
	return ptduo
}

// SetUpdatedBy sets the "updated_by" field.
func (ptduo *PaymentTelcoDetailUpdateOne) SetUpdatedBy(s string) *PaymentTelcoDetailUpdateOne {
	ptduo.mutation.SetUpdatedBy(s)
	return ptduo
}

// SetTelcoName sets the "telco_name" field.
func (ptduo *PaymentTelcoDetailUpdateOne) SetTelcoName(i int32) *PaymentTelcoDetailUpdateOne {
	ptduo.mutation.ResetTelcoName()
	ptduo.mutation.SetTelcoName(i)
	return ptduo
}

// SetNillableTelcoName sets the "telco_name" field if the given value is not nil.
func (ptduo *PaymentTelcoDetailUpdateOne) SetNillableTelcoName(i *int32) *PaymentTelcoDetailUpdateOne {
	if i != nil {
		ptduo.SetTelcoName(*i)
	}
	return ptduo
}

// AddTelcoName adds i to the "telco_name" field.
func (ptduo *PaymentTelcoDetailUpdateOne) AddTelcoName(i int32) *PaymentTelcoDetailUpdateOne {
	ptduo.mutation.AddTelcoName(i)
	return ptduo
}

// SetSerialNumber sets the "serial_number" field.
func (ptduo *PaymentTelcoDetailUpdateOne) SetSerialNumber(s string) *PaymentTelcoDetailUpdateOne {
	ptduo.mutation.SetSerialNumber(s)
	return ptduo
}

// SetNillableSerialNumber sets the "serial_number" field if the given value is not nil.
func (ptduo *PaymentTelcoDetailUpdateOne) SetNillableSerialNumber(s *string) *PaymentTelcoDetailUpdateOne {
	if s != nil {
		ptduo.SetSerialNumber(*s)
	}
	return ptduo
}

// SetCardID sets the "card_id" field.
func (ptduo *PaymentTelcoDetailUpdateOne) SetCardID(s string) *PaymentTelcoDetailUpdateOne {
	ptduo.mutation.SetCardID(s)
	return ptduo
}

// SetNillableCardID sets the "card_id" field if the given value is not nil.
func (ptduo *PaymentTelcoDetailUpdateOne) SetNillableCardID(s *string) *PaymentTelcoDetailUpdateOne {
	if s != nil {
		ptduo.SetCardID(*s)
	}
	return ptduo
}

// SetChargedAmount sets the "charged_amount" field.
func (ptduo *PaymentTelcoDetailUpdateOne) SetChargedAmount(u uint64) *PaymentTelcoDetailUpdateOne {
	ptduo.mutation.ResetChargedAmount()
	ptduo.mutation.SetChargedAmount(u)
	return ptduo
}

// SetNillableChargedAmount sets the "charged_amount" field if the given value is not nil.
func (ptduo *PaymentTelcoDetailUpdateOne) SetNillableChargedAmount(u *uint64) *PaymentTelcoDetailUpdateOne {
	if u != nil {
		ptduo.SetChargedAmount(*u)
	}
	return ptduo
}

// AddChargedAmount adds u to the "charged_amount" field.
func (ptduo *PaymentTelcoDetailUpdateOne) AddChargedAmount(u uint64) *PaymentTelcoDetailUpdateOne {
	ptduo.mutation.AddChargedAmount(u)
	return ptduo
}

// SetAmount sets the "amount" field.
func (ptduo *PaymentTelcoDetailUpdateOne) SetAmount(u uint64) *PaymentTelcoDetailUpdateOne {
	ptduo.mutation.ResetAmount()
	ptduo.mutation.SetAmount(u)
	return ptduo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (ptduo *PaymentTelcoDetailUpdateOne) SetNillableAmount(u *uint64) *PaymentTelcoDetailUpdateOne {
	if u != nil {
		ptduo.SetAmount(*u)
	}
	return ptduo
}

// AddAmount adds u to the "amount" field.
func (ptduo *PaymentTelcoDetailUpdateOne) AddAmount(u uint64) *PaymentTelcoDetailUpdateOne {
	ptduo.mutation.AddAmount(u)
	return ptduo
}

// SetPaymentID sets the "payment" edge to the Payment entity by ID.
func (ptduo *PaymentTelcoDetailUpdateOne) SetPaymentID(id int64) *PaymentTelcoDetailUpdateOne {
	ptduo.mutation.SetPaymentID(id)
	return ptduo
}

// SetNillablePaymentID sets the "payment" edge to the Payment entity by ID if the given value is not nil.
func (ptduo *PaymentTelcoDetailUpdateOne) SetNillablePaymentID(id *int64) *PaymentTelcoDetailUpdateOne {
	if id != nil {
		ptduo = ptduo.SetPaymentID(*id)
	}
	return ptduo
}

// SetPayment sets the "payment" edge to the Payment entity.
func (ptduo *PaymentTelcoDetailUpdateOne) SetPayment(p *Payment) *PaymentTelcoDetailUpdateOne {
	return ptduo.SetPaymentID(p.ID)
}

// Mutation returns the PaymentTelcoDetailMutation object of the builder.
func (ptduo *PaymentTelcoDetailUpdateOne) Mutation() *PaymentTelcoDetailMutation {
	return ptduo.mutation
}

// ClearPayment clears the "payment" edge to the Payment entity.
func (ptduo *PaymentTelcoDetailUpdateOne) ClearPayment() *PaymentTelcoDetailUpdateOne {
	ptduo.mutation.ClearPayment()
	return ptduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ptduo *PaymentTelcoDetailUpdateOne) Select(field string, fields ...string) *PaymentTelcoDetailUpdateOne {
	ptduo.fields = append([]string{field}, fields...)
	return ptduo
}

// Save executes the query and returns the updated PaymentTelcoDetail entity.
func (ptduo *PaymentTelcoDetailUpdateOne) Save(ctx context.Context) (*PaymentTelcoDetail, error) {
	var (
		err  error
		node *PaymentTelcoDetail
	)
	ptduo.defaults()
	if len(ptduo.hooks) == 0 {
		if err = ptduo.check(); err != nil {
			return nil, err
		}
		node, err = ptduo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PaymentTelcoDetailMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ptduo.check(); err != nil {
				return nil, err
			}
			ptduo.mutation = mutation
			node, err = ptduo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ptduo.hooks) - 1; i >= 0; i-- {
			if ptduo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ptduo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ptduo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ptduo *PaymentTelcoDetailUpdateOne) SaveX(ctx context.Context) *PaymentTelcoDetail {
	node, err := ptduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ptduo *PaymentTelcoDetailUpdateOne) Exec(ctx context.Context) error {
	_, err := ptduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptduo *PaymentTelcoDetailUpdateOne) ExecX(ctx context.Context) {
	if err := ptduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ptduo *PaymentTelcoDetailUpdateOne) defaults() {
	if _, ok := ptduo.mutation.UpdatedAt(); !ok {
		v := paymenttelcodetail.UpdateDefaultUpdatedAt()
		ptduo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ptduo *PaymentTelcoDetailUpdateOne) check() error {
	if v, ok := ptduo.mutation.CreatedBy(); ok {
		if err := paymenttelcodetail.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "PaymentTelcoDetail.created_by": %w`, err)}
		}
	}
	if v, ok := ptduo.mutation.UpdatedBy(); ok {
		if err := paymenttelcodetail.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "PaymentTelcoDetail.updated_by": %w`, err)}
		}
	}
	if v, ok := ptduo.mutation.TelcoName(); ok {
		if err := paymenttelcodetail.TelcoNameValidator(v); err != nil {
			return &ValidationError{Name: "telco_name", err: fmt.Errorf(`ent: validator failed for field "PaymentTelcoDetail.telco_name": %w`, err)}
		}
	}
	return nil
}

func (ptduo *PaymentTelcoDetailUpdateOne) sqlSave(ctx context.Context) (_node *PaymentTelcoDetail, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   paymenttelcodetail.Table,
			Columns: paymenttelcodetail.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: paymenttelcodetail.FieldID,
			},
		},
	}
	id, ok := ptduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PaymentTelcoDetail.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ptduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, paymenttelcodetail.FieldID)
		for _, f := range fields {
			if !paymenttelcodetail.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != paymenttelcodetail.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ptduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ptduo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: paymenttelcodetail.FieldCreatedAt,
		})
	}
	if value, ok := ptduo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: paymenttelcodetail.FieldUpdatedAt,
		})
	}
	if value, ok := ptduo.mutation.CreatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: paymenttelcodetail.FieldCreatedBy,
		})
	}
	if value, ok := ptduo.mutation.UpdatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: paymenttelcodetail.FieldUpdatedBy,
		})
	}
	if value, ok := ptduo.mutation.TelcoName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: paymenttelcodetail.FieldTelcoName,
		})
	}
	if value, ok := ptduo.mutation.AddedTelcoName(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: paymenttelcodetail.FieldTelcoName,
		})
	}
	if value, ok := ptduo.mutation.SerialNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: paymenttelcodetail.FieldSerialNumber,
		})
	}
	if value, ok := ptduo.mutation.CardID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: paymenttelcodetail.FieldCardID,
		})
	}
	if value, ok := ptduo.mutation.ChargedAmount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: paymenttelcodetail.FieldChargedAmount,
		})
	}
	if value, ok := ptduo.mutation.AddedChargedAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: paymenttelcodetail.FieldChargedAmount,
		})
	}
	if value, ok := ptduo.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: paymenttelcodetail.FieldAmount,
		})
	}
	if value, ok := ptduo.mutation.AddedAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: paymenttelcodetail.FieldAmount,
		})
	}
	if ptduo.mutation.PaymentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   paymenttelcodetail.PaymentTable,
			Columns: []string{paymenttelcodetail.PaymentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: payment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptduo.mutation.PaymentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   paymenttelcodetail.PaymentTable,
			Columns: []string{paymenttelcodetail.PaymentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: payment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PaymentTelcoDetail{config: ptduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ptduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{paymenttelcodetail.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
