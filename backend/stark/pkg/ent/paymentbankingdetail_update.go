// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"gitlab.com/mcuc/monorepo/backend/stark/pkg/ent/payment"
	"gitlab.com/mcuc/monorepo/backend/stark/pkg/ent/paymentbankingdetail"
	"gitlab.com/mcuc/monorepo/backend/stark/pkg/ent/predicate"
)

// PaymentBankingDetailUpdate is the builder for updating PaymentBankingDetail entities.
type PaymentBankingDetailUpdate struct {
	config
	hooks    []Hook
	mutation *PaymentBankingDetailMutation
}

// Where appends a list predicates to the PaymentBankingDetailUpdate builder.
func (pbdu *PaymentBankingDetailUpdate) Where(ps ...predicate.PaymentBankingDetail) *PaymentBankingDetailUpdate {
	pbdu.mutation.Where(ps...)
	return pbdu
}

// SetCreatedAt sets the "created_at" field.
func (pbdu *PaymentBankingDetailUpdate) SetCreatedAt(t time.Time) *PaymentBankingDetailUpdate {
	pbdu.mutation.SetCreatedAt(t)
	return pbdu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pbdu *PaymentBankingDetailUpdate) SetNillableCreatedAt(t *time.Time) *PaymentBankingDetailUpdate {
	if t != nil {
		pbdu.SetCreatedAt(*t)
	}
	return pbdu
}

// SetUpdatedAt sets the "updated_at" field.
func (pbdu *PaymentBankingDetailUpdate) SetUpdatedAt(t time.Time) *PaymentBankingDetailUpdate {
	pbdu.mutation.SetUpdatedAt(t)
	return pbdu
}

// SetCreatedBy sets the "created_by" field.
func (pbdu *PaymentBankingDetailUpdate) SetCreatedBy(s string) *PaymentBankingDetailUpdate {
	pbdu.mutation.SetCreatedBy(s)
	return pbdu
}

// SetUpdatedBy sets the "updated_by" field.
func (pbdu *PaymentBankingDetailUpdate) SetUpdatedBy(s string) *PaymentBankingDetailUpdate {
	pbdu.mutation.SetUpdatedBy(s)
	return pbdu
}

// SetPaymentCode sets the "payment_code" field.
func (pbdu *PaymentBankingDetailUpdate) SetPaymentCode(s string) *PaymentBankingDetailUpdate {
	pbdu.mutation.SetPaymentCode(s)
	return pbdu
}

// SetNillablePaymentCode sets the "payment_code" field if the given value is not nil.
func (pbdu *PaymentBankingDetailUpdate) SetNillablePaymentCode(s *string) *PaymentBankingDetailUpdate {
	if s != nil {
		pbdu.SetPaymentCode(*s)
	}
	return pbdu
}

// ClearPaymentCode clears the value of the "payment_code" field.
func (pbdu *PaymentBankingDetailUpdate) ClearPaymentCode() *PaymentBankingDetailUpdate {
	pbdu.mutation.ClearPaymentCode()
	return pbdu
}

// SetMerchantUserID sets the "merchant_user_id" field.
func (pbdu *PaymentBankingDetailUpdate) SetMerchantUserID(i int64) *PaymentBankingDetailUpdate {
	pbdu.mutation.ResetMerchantUserID()
	pbdu.mutation.SetMerchantUserID(i)
	return pbdu
}

// SetNillableMerchantUserID sets the "merchant_user_id" field if the given value is not nil.
func (pbdu *PaymentBankingDetailUpdate) SetNillableMerchantUserID(i *int64) *PaymentBankingDetailUpdate {
	if i != nil {
		pbdu.SetMerchantUserID(*i)
	}
	return pbdu
}

// AddMerchantUserID adds i to the "merchant_user_id" field.
func (pbdu *PaymentBankingDetailUpdate) AddMerchantUserID(i int64) *PaymentBankingDetailUpdate {
	pbdu.mutation.AddMerchantUserID(i)
	return pbdu
}

// ClearMerchantUserID clears the value of the "merchant_user_id" field.
func (pbdu *PaymentBankingDetailUpdate) ClearMerchantUserID() *PaymentBankingDetailUpdate {
	pbdu.mutation.ClearMerchantUserID()
	return pbdu
}

// SetMerchantUserBankName sets the "merchant_user_bank_name" field.
func (pbdu *PaymentBankingDetailUpdate) SetMerchantUserBankName(i int32) *PaymentBankingDetailUpdate {
	pbdu.mutation.ResetMerchantUserBankName()
	pbdu.mutation.SetMerchantUserBankName(i)
	return pbdu
}

// SetNillableMerchantUserBankName sets the "merchant_user_bank_name" field if the given value is not nil.
func (pbdu *PaymentBankingDetailUpdate) SetNillableMerchantUserBankName(i *int32) *PaymentBankingDetailUpdate {
	if i != nil {
		pbdu.SetMerchantUserBankName(*i)
	}
	return pbdu
}

// AddMerchantUserBankName adds i to the "merchant_user_bank_name" field.
func (pbdu *PaymentBankingDetailUpdate) AddMerchantUserBankName(i int32) *PaymentBankingDetailUpdate {
	pbdu.mutation.AddMerchantUserBankName(i)
	return pbdu
}

// ClearMerchantUserBankName clears the value of the "merchant_user_bank_name" field.
func (pbdu *PaymentBankingDetailUpdate) ClearMerchantUserBankName() *PaymentBankingDetailUpdate {
	pbdu.mutation.ClearMerchantUserBankName()
	return pbdu
}

// SetMerchantUserAccountNumber sets the "merchant_user_account_number" field.
func (pbdu *PaymentBankingDetailUpdate) SetMerchantUserAccountNumber(s string) *PaymentBankingDetailUpdate {
	pbdu.mutation.SetMerchantUserAccountNumber(s)
	return pbdu
}

// SetNillableMerchantUserAccountNumber sets the "merchant_user_account_number" field if the given value is not nil.
func (pbdu *PaymentBankingDetailUpdate) SetNillableMerchantUserAccountNumber(s *string) *PaymentBankingDetailUpdate {
	if s != nil {
		pbdu.SetMerchantUserAccountNumber(*s)
	}
	return pbdu
}

// ClearMerchantUserAccountNumber clears the value of the "merchant_user_account_number" field.
func (pbdu *PaymentBankingDetailUpdate) ClearMerchantUserAccountNumber() *PaymentBankingDetailUpdate {
	pbdu.mutation.ClearMerchantUserAccountNumber()
	return pbdu
}

// SetMerchantUserAccountName sets the "merchant_user_account_name" field.
func (pbdu *PaymentBankingDetailUpdate) SetMerchantUserAccountName(s string) *PaymentBankingDetailUpdate {
	pbdu.mutation.SetMerchantUserAccountName(s)
	return pbdu
}

// SetNillableMerchantUserAccountName sets the "merchant_user_account_name" field if the given value is not nil.
func (pbdu *PaymentBankingDetailUpdate) SetNillableMerchantUserAccountName(s *string) *PaymentBankingDetailUpdate {
	if s != nil {
		pbdu.SetMerchantUserAccountName(*s)
	}
	return pbdu
}

// ClearMerchantUserAccountName clears the value of the "merchant_user_account_name" field.
func (pbdu *PaymentBankingDetailUpdate) ClearMerchantUserAccountName() *PaymentBankingDetailUpdate {
	pbdu.mutation.ClearMerchantUserAccountName()
	return pbdu
}

// SetSystemAccountBankName sets the "system_account_bank_name" field.
func (pbdu *PaymentBankingDetailUpdate) SetSystemAccountBankName(i int32) *PaymentBankingDetailUpdate {
	pbdu.mutation.ResetSystemAccountBankName()
	pbdu.mutation.SetSystemAccountBankName(i)
	return pbdu
}

// SetNillableSystemAccountBankName sets the "system_account_bank_name" field if the given value is not nil.
func (pbdu *PaymentBankingDetailUpdate) SetNillableSystemAccountBankName(i *int32) *PaymentBankingDetailUpdate {
	if i != nil {
		pbdu.SetSystemAccountBankName(*i)
	}
	return pbdu
}

// AddSystemAccountBankName adds i to the "system_account_bank_name" field.
func (pbdu *PaymentBankingDetailUpdate) AddSystemAccountBankName(i int32) *PaymentBankingDetailUpdate {
	pbdu.mutation.AddSystemAccountBankName(i)
	return pbdu
}

// ClearSystemAccountBankName clears the value of the "system_account_bank_name" field.
func (pbdu *PaymentBankingDetailUpdate) ClearSystemAccountBankName() *PaymentBankingDetailUpdate {
	pbdu.mutation.ClearSystemAccountBankName()
	return pbdu
}

// SetSystemAccountNumber sets the "system_account_number" field.
func (pbdu *PaymentBankingDetailUpdate) SetSystemAccountNumber(s string) *PaymentBankingDetailUpdate {
	pbdu.mutation.SetSystemAccountNumber(s)
	return pbdu
}

// SetNillableSystemAccountNumber sets the "system_account_number" field if the given value is not nil.
func (pbdu *PaymentBankingDetailUpdate) SetNillableSystemAccountNumber(s *string) *PaymentBankingDetailUpdate {
	if s != nil {
		pbdu.SetSystemAccountNumber(*s)
	}
	return pbdu
}

// ClearSystemAccountNumber clears the value of the "system_account_number" field.
func (pbdu *PaymentBankingDetailUpdate) ClearSystemAccountNumber() *PaymentBankingDetailUpdate {
	pbdu.mutation.ClearSystemAccountNumber()
	return pbdu
}

// SetSystemAccountName sets the "system_account_name" field.
func (pbdu *PaymentBankingDetailUpdate) SetSystemAccountName(s string) *PaymentBankingDetailUpdate {
	pbdu.mutation.SetSystemAccountName(s)
	return pbdu
}

// SetNillableSystemAccountName sets the "system_account_name" field if the given value is not nil.
func (pbdu *PaymentBankingDetailUpdate) SetNillableSystemAccountName(s *string) *PaymentBankingDetailUpdate {
	if s != nil {
		pbdu.SetSystemAccountName(*s)
	}
	return pbdu
}

// ClearSystemAccountName clears the value of the "system_account_name" field.
func (pbdu *PaymentBankingDetailUpdate) ClearSystemAccountName() *PaymentBankingDetailUpdate {
	pbdu.mutation.ClearSystemAccountName()
	return pbdu
}

// SetImageURL sets the "image_url" field.
func (pbdu *PaymentBankingDetailUpdate) SetImageURL(s string) *PaymentBankingDetailUpdate {
	pbdu.mutation.SetImageURL(s)
	return pbdu
}

// SetNillableImageURL sets the "image_url" field if the given value is not nil.
func (pbdu *PaymentBankingDetailUpdate) SetNillableImageURL(s *string) *PaymentBankingDetailUpdate {
	if s != nil {
		pbdu.SetImageURL(*s)
	}
	return pbdu
}

// ClearImageURL clears the value of the "image_url" field.
func (pbdu *PaymentBankingDetailUpdate) ClearImageURL() *PaymentBankingDetailUpdate {
	pbdu.mutation.ClearImageURL()
	return pbdu
}

// SetTxID sets the "tx_id" field.
func (pbdu *PaymentBankingDetailUpdate) SetTxID(s string) *PaymentBankingDetailUpdate {
	pbdu.mutation.SetTxID(s)
	return pbdu
}

// SetNillableTxID sets the "tx_id" field if the given value is not nil.
func (pbdu *PaymentBankingDetailUpdate) SetNillableTxID(s *string) *PaymentBankingDetailUpdate {
	if s != nil {
		pbdu.SetTxID(*s)
	}
	return pbdu
}

// ClearTxID clears the value of the "tx_id" field.
func (pbdu *PaymentBankingDetailUpdate) ClearTxID() *PaymentBankingDetailUpdate {
	pbdu.mutation.ClearTxID()
	return pbdu
}

// SetAmount sets the "amount" field.
func (pbdu *PaymentBankingDetailUpdate) SetAmount(u uint64) *PaymentBankingDetailUpdate {
	pbdu.mutation.ResetAmount()
	pbdu.mutation.SetAmount(u)
	return pbdu
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (pbdu *PaymentBankingDetailUpdate) SetNillableAmount(u *uint64) *PaymentBankingDetailUpdate {
	if u != nil {
		pbdu.SetAmount(*u)
	}
	return pbdu
}

// AddAmount adds u to the "amount" field.
func (pbdu *PaymentBankingDetailUpdate) AddAmount(u uint64) *PaymentBankingDetailUpdate {
	pbdu.mutation.AddAmount(u)
	return pbdu
}

// ClearAmount clears the value of the "amount" field.
func (pbdu *PaymentBankingDetailUpdate) ClearAmount() *PaymentBankingDetailUpdate {
	pbdu.mutation.ClearAmount()
	return pbdu
}

// SetFee sets the "fee" field.
func (pbdu *PaymentBankingDetailUpdate) SetFee(u uint64) *PaymentBankingDetailUpdate {
	pbdu.mutation.ResetFee()
	pbdu.mutation.SetFee(u)
	return pbdu
}

// SetNillableFee sets the "fee" field if the given value is not nil.
func (pbdu *PaymentBankingDetailUpdate) SetNillableFee(u *uint64) *PaymentBankingDetailUpdate {
	if u != nil {
		pbdu.SetFee(*u)
	}
	return pbdu
}

// AddFee adds u to the "fee" field.
func (pbdu *PaymentBankingDetailUpdate) AddFee(u uint64) *PaymentBankingDetailUpdate {
	pbdu.mutation.AddFee(u)
	return pbdu
}

// ClearFee clears the value of the "fee" field.
func (pbdu *PaymentBankingDetailUpdate) ClearFee() *PaymentBankingDetailUpdate {
	pbdu.mutation.ClearFee()
	return pbdu
}

// SetPaymentID sets the "payment" edge to the Payment entity by ID.
func (pbdu *PaymentBankingDetailUpdate) SetPaymentID(id int64) *PaymentBankingDetailUpdate {
	pbdu.mutation.SetPaymentID(id)
	return pbdu
}

// SetPayment sets the "payment" edge to the Payment entity.
func (pbdu *PaymentBankingDetailUpdate) SetPayment(p *Payment) *PaymentBankingDetailUpdate {
	return pbdu.SetPaymentID(p.ID)
}

// Mutation returns the PaymentBankingDetailMutation object of the builder.
func (pbdu *PaymentBankingDetailUpdate) Mutation() *PaymentBankingDetailMutation {
	return pbdu.mutation
}

// ClearPayment clears the "payment" edge to the Payment entity.
func (pbdu *PaymentBankingDetailUpdate) ClearPayment() *PaymentBankingDetailUpdate {
	pbdu.mutation.ClearPayment()
	return pbdu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pbdu *PaymentBankingDetailUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	pbdu.defaults()
	if len(pbdu.hooks) == 0 {
		if err = pbdu.check(); err != nil {
			return 0, err
		}
		affected, err = pbdu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PaymentBankingDetailMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pbdu.check(); err != nil {
				return 0, err
			}
			pbdu.mutation = mutation
			affected, err = pbdu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pbdu.hooks) - 1; i >= 0; i-- {
			if pbdu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pbdu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pbdu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pbdu *PaymentBankingDetailUpdate) SaveX(ctx context.Context) int {
	affected, err := pbdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pbdu *PaymentBankingDetailUpdate) Exec(ctx context.Context) error {
	_, err := pbdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pbdu *PaymentBankingDetailUpdate) ExecX(ctx context.Context) {
	if err := pbdu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pbdu *PaymentBankingDetailUpdate) defaults() {
	if _, ok := pbdu.mutation.UpdatedAt(); !ok {
		v := paymentbankingdetail.UpdateDefaultUpdatedAt()
		pbdu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pbdu *PaymentBankingDetailUpdate) check() error {
	if v, ok := pbdu.mutation.CreatedBy(); ok {
		if err := paymentbankingdetail.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "PaymentBankingDetail.created_by": %w`, err)}
		}
	}
	if v, ok := pbdu.mutation.UpdatedBy(); ok {
		if err := paymentbankingdetail.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "PaymentBankingDetail.updated_by": %w`, err)}
		}
	}
	if v, ok := pbdu.mutation.MerchantUserBankName(); ok {
		if err := paymentbankingdetail.MerchantUserBankNameValidator(v); err != nil {
			return &ValidationError{Name: "merchant_user_bank_name", err: fmt.Errorf(`ent: validator failed for field "PaymentBankingDetail.merchant_user_bank_name": %w`, err)}
		}
	}
	if v, ok := pbdu.mutation.SystemAccountBankName(); ok {
		if err := paymentbankingdetail.SystemAccountBankNameValidator(v); err != nil {
			return &ValidationError{Name: "system_account_bank_name", err: fmt.Errorf(`ent: validator failed for field "PaymentBankingDetail.system_account_bank_name": %w`, err)}
		}
	}
	if _, ok := pbdu.mutation.PaymentID(); pbdu.mutation.PaymentCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "PaymentBankingDetail.payment"`)
	}
	return nil
}

func (pbdu *PaymentBankingDetailUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   paymentbankingdetail.Table,
			Columns: paymentbankingdetail.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: paymentbankingdetail.FieldID,
			},
		},
	}
	if ps := pbdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pbdu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: paymentbankingdetail.FieldCreatedAt,
		})
	}
	if value, ok := pbdu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: paymentbankingdetail.FieldUpdatedAt,
		})
	}
	if value, ok := pbdu.mutation.CreatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: paymentbankingdetail.FieldCreatedBy,
		})
	}
	if value, ok := pbdu.mutation.UpdatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: paymentbankingdetail.FieldUpdatedBy,
		})
	}
	if value, ok := pbdu.mutation.PaymentCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: paymentbankingdetail.FieldPaymentCode,
		})
	}
	if pbdu.mutation.PaymentCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: paymentbankingdetail.FieldPaymentCode,
		})
	}
	if value, ok := pbdu.mutation.MerchantUserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: paymentbankingdetail.FieldMerchantUserID,
		})
	}
	if value, ok := pbdu.mutation.AddedMerchantUserID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: paymentbankingdetail.FieldMerchantUserID,
		})
	}
	if pbdu.mutation.MerchantUserIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: paymentbankingdetail.FieldMerchantUserID,
		})
	}
	if value, ok := pbdu.mutation.MerchantUserBankName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: paymentbankingdetail.FieldMerchantUserBankName,
		})
	}
	if value, ok := pbdu.mutation.AddedMerchantUserBankName(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: paymentbankingdetail.FieldMerchantUserBankName,
		})
	}
	if pbdu.mutation.MerchantUserBankNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: paymentbankingdetail.FieldMerchantUserBankName,
		})
	}
	if value, ok := pbdu.mutation.MerchantUserAccountNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: paymentbankingdetail.FieldMerchantUserAccountNumber,
		})
	}
	if pbdu.mutation.MerchantUserAccountNumberCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: paymentbankingdetail.FieldMerchantUserAccountNumber,
		})
	}
	if value, ok := pbdu.mutation.MerchantUserAccountName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: paymentbankingdetail.FieldMerchantUserAccountName,
		})
	}
	if pbdu.mutation.MerchantUserAccountNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: paymentbankingdetail.FieldMerchantUserAccountName,
		})
	}
	if value, ok := pbdu.mutation.SystemAccountBankName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: paymentbankingdetail.FieldSystemAccountBankName,
		})
	}
	if value, ok := pbdu.mutation.AddedSystemAccountBankName(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: paymentbankingdetail.FieldSystemAccountBankName,
		})
	}
	if pbdu.mutation.SystemAccountBankNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: paymentbankingdetail.FieldSystemAccountBankName,
		})
	}
	if value, ok := pbdu.mutation.SystemAccountNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: paymentbankingdetail.FieldSystemAccountNumber,
		})
	}
	if pbdu.mutation.SystemAccountNumberCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: paymentbankingdetail.FieldSystemAccountNumber,
		})
	}
	if value, ok := pbdu.mutation.SystemAccountName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: paymentbankingdetail.FieldSystemAccountName,
		})
	}
	if pbdu.mutation.SystemAccountNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: paymentbankingdetail.FieldSystemAccountName,
		})
	}
	if value, ok := pbdu.mutation.ImageURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: paymentbankingdetail.FieldImageURL,
		})
	}
	if pbdu.mutation.ImageURLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: paymentbankingdetail.FieldImageURL,
		})
	}
	if value, ok := pbdu.mutation.TxID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: paymentbankingdetail.FieldTxID,
		})
	}
	if pbdu.mutation.TxIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: paymentbankingdetail.FieldTxID,
		})
	}
	if value, ok := pbdu.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: paymentbankingdetail.FieldAmount,
		})
	}
	if value, ok := pbdu.mutation.AddedAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: paymentbankingdetail.FieldAmount,
		})
	}
	if pbdu.mutation.AmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: paymentbankingdetail.FieldAmount,
		})
	}
	if value, ok := pbdu.mutation.Fee(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: paymentbankingdetail.FieldFee,
		})
	}
	if value, ok := pbdu.mutation.AddedFee(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: paymentbankingdetail.FieldFee,
		})
	}
	if pbdu.mutation.FeeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: paymentbankingdetail.FieldFee,
		})
	}
	if pbdu.mutation.PaymentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   paymentbankingdetail.PaymentTable,
			Columns: []string{paymentbankingdetail.PaymentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: payment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pbdu.mutation.PaymentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   paymentbankingdetail.PaymentTable,
			Columns: []string{paymentbankingdetail.PaymentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: payment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pbdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{paymentbankingdetail.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// PaymentBankingDetailUpdateOne is the builder for updating a single PaymentBankingDetail entity.
type PaymentBankingDetailUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PaymentBankingDetailMutation
}

// SetCreatedAt sets the "created_at" field.
func (pbduo *PaymentBankingDetailUpdateOne) SetCreatedAt(t time.Time) *PaymentBankingDetailUpdateOne {
	pbduo.mutation.SetCreatedAt(t)
	return pbduo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pbduo *PaymentBankingDetailUpdateOne) SetNillableCreatedAt(t *time.Time) *PaymentBankingDetailUpdateOne {
	if t != nil {
		pbduo.SetCreatedAt(*t)
	}
	return pbduo
}

// SetUpdatedAt sets the "updated_at" field.
func (pbduo *PaymentBankingDetailUpdateOne) SetUpdatedAt(t time.Time) *PaymentBankingDetailUpdateOne {
	pbduo.mutation.SetUpdatedAt(t)
	return pbduo
}

// SetCreatedBy sets the "created_by" field.
func (pbduo *PaymentBankingDetailUpdateOne) SetCreatedBy(s string) *PaymentBankingDetailUpdateOne {
	pbduo.mutation.SetCreatedBy(s)
	return pbduo
}

// SetUpdatedBy sets the "updated_by" field.
func (pbduo *PaymentBankingDetailUpdateOne) SetUpdatedBy(s string) *PaymentBankingDetailUpdateOne {
	pbduo.mutation.SetUpdatedBy(s)
	return pbduo
}

// SetPaymentCode sets the "payment_code" field.
func (pbduo *PaymentBankingDetailUpdateOne) SetPaymentCode(s string) *PaymentBankingDetailUpdateOne {
	pbduo.mutation.SetPaymentCode(s)
	return pbduo
}

// SetNillablePaymentCode sets the "payment_code" field if the given value is not nil.
func (pbduo *PaymentBankingDetailUpdateOne) SetNillablePaymentCode(s *string) *PaymentBankingDetailUpdateOne {
	if s != nil {
		pbduo.SetPaymentCode(*s)
	}
	return pbduo
}

// ClearPaymentCode clears the value of the "payment_code" field.
func (pbduo *PaymentBankingDetailUpdateOne) ClearPaymentCode() *PaymentBankingDetailUpdateOne {
	pbduo.mutation.ClearPaymentCode()
	return pbduo
}

// SetMerchantUserID sets the "merchant_user_id" field.
func (pbduo *PaymentBankingDetailUpdateOne) SetMerchantUserID(i int64) *PaymentBankingDetailUpdateOne {
	pbduo.mutation.ResetMerchantUserID()
	pbduo.mutation.SetMerchantUserID(i)
	return pbduo
}

// SetNillableMerchantUserID sets the "merchant_user_id" field if the given value is not nil.
func (pbduo *PaymentBankingDetailUpdateOne) SetNillableMerchantUserID(i *int64) *PaymentBankingDetailUpdateOne {
	if i != nil {
		pbduo.SetMerchantUserID(*i)
	}
	return pbduo
}

// AddMerchantUserID adds i to the "merchant_user_id" field.
func (pbduo *PaymentBankingDetailUpdateOne) AddMerchantUserID(i int64) *PaymentBankingDetailUpdateOne {
	pbduo.mutation.AddMerchantUserID(i)
	return pbduo
}

// ClearMerchantUserID clears the value of the "merchant_user_id" field.
func (pbduo *PaymentBankingDetailUpdateOne) ClearMerchantUserID() *PaymentBankingDetailUpdateOne {
	pbduo.mutation.ClearMerchantUserID()
	return pbduo
}

// SetMerchantUserBankName sets the "merchant_user_bank_name" field.
func (pbduo *PaymentBankingDetailUpdateOne) SetMerchantUserBankName(i int32) *PaymentBankingDetailUpdateOne {
	pbduo.mutation.ResetMerchantUserBankName()
	pbduo.mutation.SetMerchantUserBankName(i)
	return pbduo
}

// SetNillableMerchantUserBankName sets the "merchant_user_bank_name" field if the given value is not nil.
func (pbduo *PaymentBankingDetailUpdateOne) SetNillableMerchantUserBankName(i *int32) *PaymentBankingDetailUpdateOne {
	if i != nil {
		pbduo.SetMerchantUserBankName(*i)
	}
	return pbduo
}

// AddMerchantUserBankName adds i to the "merchant_user_bank_name" field.
func (pbduo *PaymentBankingDetailUpdateOne) AddMerchantUserBankName(i int32) *PaymentBankingDetailUpdateOne {
	pbduo.mutation.AddMerchantUserBankName(i)
	return pbduo
}

// ClearMerchantUserBankName clears the value of the "merchant_user_bank_name" field.
func (pbduo *PaymentBankingDetailUpdateOne) ClearMerchantUserBankName() *PaymentBankingDetailUpdateOne {
	pbduo.mutation.ClearMerchantUserBankName()
	return pbduo
}

// SetMerchantUserAccountNumber sets the "merchant_user_account_number" field.
func (pbduo *PaymentBankingDetailUpdateOne) SetMerchantUserAccountNumber(s string) *PaymentBankingDetailUpdateOne {
	pbduo.mutation.SetMerchantUserAccountNumber(s)
	return pbduo
}

// SetNillableMerchantUserAccountNumber sets the "merchant_user_account_number" field if the given value is not nil.
func (pbduo *PaymentBankingDetailUpdateOne) SetNillableMerchantUserAccountNumber(s *string) *PaymentBankingDetailUpdateOne {
	if s != nil {
		pbduo.SetMerchantUserAccountNumber(*s)
	}
	return pbduo
}

// ClearMerchantUserAccountNumber clears the value of the "merchant_user_account_number" field.
func (pbduo *PaymentBankingDetailUpdateOne) ClearMerchantUserAccountNumber() *PaymentBankingDetailUpdateOne {
	pbduo.mutation.ClearMerchantUserAccountNumber()
	return pbduo
}

// SetMerchantUserAccountName sets the "merchant_user_account_name" field.
func (pbduo *PaymentBankingDetailUpdateOne) SetMerchantUserAccountName(s string) *PaymentBankingDetailUpdateOne {
	pbduo.mutation.SetMerchantUserAccountName(s)
	return pbduo
}

// SetNillableMerchantUserAccountName sets the "merchant_user_account_name" field if the given value is not nil.
func (pbduo *PaymentBankingDetailUpdateOne) SetNillableMerchantUserAccountName(s *string) *PaymentBankingDetailUpdateOne {
	if s != nil {
		pbduo.SetMerchantUserAccountName(*s)
	}
	return pbduo
}

// ClearMerchantUserAccountName clears the value of the "merchant_user_account_name" field.
func (pbduo *PaymentBankingDetailUpdateOne) ClearMerchantUserAccountName() *PaymentBankingDetailUpdateOne {
	pbduo.mutation.ClearMerchantUserAccountName()
	return pbduo
}

// SetSystemAccountBankName sets the "system_account_bank_name" field.
func (pbduo *PaymentBankingDetailUpdateOne) SetSystemAccountBankName(i int32) *PaymentBankingDetailUpdateOne {
	pbduo.mutation.ResetSystemAccountBankName()
	pbduo.mutation.SetSystemAccountBankName(i)
	return pbduo
}

// SetNillableSystemAccountBankName sets the "system_account_bank_name" field if the given value is not nil.
func (pbduo *PaymentBankingDetailUpdateOne) SetNillableSystemAccountBankName(i *int32) *PaymentBankingDetailUpdateOne {
	if i != nil {
		pbduo.SetSystemAccountBankName(*i)
	}
	return pbduo
}

// AddSystemAccountBankName adds i to the "system_account_bank_name" field.
func (pbduo *PaymentBankingDetailUpdateOne) AddSystemAccountBankName(i int32) *PaymentBankingDetailUpdateOne {
	pbduo.mutation.AddSystemAccountBankName(i)
	return pbduo
}

// ClearSystemAccountBankName clears the value of the "system_account_bank_name" field.
func (pbduo *PaymentBankingDetailUpdateOne) ClearSystemAccountBankName() *PaymentBankingDetailUpdateOne {
	pbduo.mutation.ClearSystemAccountBankName()
	return pbduo
}

// SetSystemAccountNumber sets the "system_account_number" field.
func (pbduo *PaymentBankingDetailUpdateOne) SetSystemAccountNumber(s string) *PaymentBankingDetailUpdateOne {
	pbduo.mutation.SetSystemAccountNumber(s)
	return pbduo
}

// SetNillableSystemAccountNumber sets the "system_account_number" field if the given value is not nil.
func (pbduo *PaymentBankingDetailUpdateOne) SetNillableSystemAccountNumber(s *string) *PaymentBankingDetailUpdateOne {
	if s != nil {
		pbduo.SetSystemAccountNumber(*s)
	}
	return pbduo
}

// ClearSystemAccountNumber clears the value of the "system_account_number" field.
func (pbduo *PaymentBankingDetailUpdateOne) ClearSystemAccountNumber() *PaymentBankingDetailUpdateOne {
	pbduo.mutation.ClearSystemAccountNumber()
	return pbduo
}

// SetSystemAccountName sets the "system_account_name" field.
func (pbduo *PaymentBankingDetailUpdateOne) SetSystemAccountName(s string) *PaymentBankingDetailUpdateOne {
	pbduo.mutation.SetSystemAccountName(s)
	return pbduo
}

// SetNillableSystemAccountName sets the "system_account_name" field if the given value is not nil.
func (pbduo *PaymentBankingDetailUpdateOne) SetNillableSystemAccountName(s *string) *PaymentBankingDetailUpdateOne {
	if s != nil {
		pbduo.SetSystemAccountName(*s)
	}
	return pbduo
}

// ClearSystemAccountName clears the value of the "system_account_name" field.
func (pbduo *PaymentBankingDetailUpdateOne) ClearSystemAccountName() *PaymentBankingDetailUpdateOne {
	pbduo.mutation.ClearSystemAccountName()
	return pbduo
}

// SetImageURL sets the "image_url" field.
func (pbduo *PaymentBankingDetailUpdateOne) SetImageURL(s string) *PaymentBankingDetailUpdateOne {
	pbduo.mutation.SetImageURL(s)
	return pbduo
}

// SetNillableImageURL sets the "image_url" field if the given value is not nil.
func (pbduo *PaymentBankingDetailUpdateOne) SetNillableImageURL(s *string) *PaymentBankingDetailUpdateOne {
	if s != nil {
		pbduo.SetImageURL(*s)
	}
	return pbduo
}

// ClearImageURL clears the value of the "image_url" field.
func (pbduo *PaymentBankingDetailUpdateOne) ClearImageURL() *PaymentBankingDetailUpdateOne {
	pbduo.mutation.ClearImageURL()
	return pbduo
}

// SetTxID sets the "tx_id" field.
func (pbduo *PaymentBankingDetailUpdateOne) SetTxID(s string) *PaymentBankingDetailUpdateOne {
	pbduo.mutation.SetTxID(s)
	return pbduo
}

// SetNillableTxID sets the "tx_id" field if the given value is not nil.
func (pbduo *PaymentBankingDetailUpdateOne) SetNillableTxID(s *string) *PaymentBankingDetailUpdateOne {
	if s != nil {
		pbduo.SetTxID(*s)
	}
	return pbduo
}

// ClearTxID clears the value of the "tx_id" field.
func (pbduo *PaymentBankingDetailUpdateOne) ClearTxID() *PaymentBankingDetailUpdateOne {
	pbduo.mutation.ClearTxID()
	return pbduo
}

// SetAmount sets the "amount" field.
func (pbduo *PaymentBankingDetailUpdateOne) SetAmount(u uint64) *PaymentBankingDetailUpdateOne {
	pbduo.mutation.ResetAmount()
	pbduo.mutation.SetAmount(u)
	return pbduo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (pbduo *PaymentBankingDetailUpdateOne) SetNillableAmount(u *uint64) *PaymentBankingDetailUpdateOne {
	if u != nil {
		pbduo.SetAmount(*u)
	}
	return pbduo
}

// AddAmount adds u to the "amount" field.
func (pbduo *PaymentBankingDetailUpdateOne) AddAmount(u uint64) *PaymentBankingDetailUpdateOne {
	pbduo.mutation.AddAmount(u)
	return pbduo
}

// ClearAmount clears the value of the "amount" field.
func (pbduo *PaymentBankingDetailUpdateOne) ClearAmount() *PaymentBankingDetailUpdateOne {
	pbduo.mutation.ClearAmount()
	return pbduo
}

// SetFee sets the "fee" field.
func (pbduo *PaymentBankingDetailUpdateOne) SetFee(u uint64) *PaymentBankingDetailUpdateOne {
	pbduo.mutation.ResetFee()
	pbduo.mutation.SetFee(u)
	return pbduo
}

// SetNillableFee sets the "fee" field if the given value is not nil.
func (pbduo *PaymentBankingDetailUpdateOne) SetNillableFee(u *uint64) *PaymentBankingDetailUpdateOne {
	if u != nil {
		pbduo.SetFee(*u)
	}
	return pbduo
}

// AddFee adds u to the "fee" field.
func (pbduo *PaymentBankingDetailUpdateOne) AddFee(u uint64) *PaymentBankingDetailUpdateOne {
	pbduo.mutation.AddFee(u)
	return pbduo
}

// ClearFee clears the value of the "fee" field.
func (pbduo *PaymentBankingDetailUpdateOne) ClearFee() *PaymentBankingDetailUpdateOne {
	pbduo.mutation.ClearFee()
	return pbduo
}

// SetPaymentID sets the "payment" edge to the Payment entity by ID.
func (pbduo *PaymentBankingDetailUpdateOne) SetPaymentID(id int64) *PaymentBankingDetailUpdateOne {
	pbduo.mutation.SetPaymentID(id)
	return pbduo
}

// SetPayment sets the "payment" edge to the Payment entity.
func (pbduo *PaymentBankingDetailUpdateOne) SetPayment(p *Payment) *PaymentBankingDetailUpdateOne {
	return pbduo.SetPaymentID(p.ID)
}

// Mutation returns the PaymentBankingDetailMutation object of the builder.
func (pbduo *PaymentBankingDetailUpdateOne) Mutation() *PaymentBankingDetailMutation {
	return pbduo.mutation
}

// ClearPayment clears the "payment" edge to the Payment entity.
func (pbduo *PaymentBankingDetailUpdateOne) ClearPayment() *PaymentBankingDetailUpdateOne {
	pbduo.mutation.ClearPayment()
	return pbduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pbduo *PaymentBankingDetailUpdateOne) Select(field string, fields ...string) *PaymentBankingDetailUpdateOne {
	pbduo.fields = append([]string{field}, fields...)
	return pbduo
}

// Save executes the query and returns the updated PaymentBankingDetail entity.
func (pbduo *PaymentBankingDetailUpdateOne) Save(ctx context.Context) (*PaymentBankingDetail, error) {
	var (
		err  error
		node *PaymentBankingDetail
	)
	pbduo.defaults()
	if len(pbduo.hooks) == 0 {
		if err = pbduo.check(); err != nil {
			return nil, err
		}
		node, err = pbduo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PaymentBankingDetailMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pbduo.check(); err != nil {
				return nil, err
			}
			pbduo.mutation = mutation
			node, err = pbduo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(pbduo.hooks) - 1; i >= 0; i-- {
			if pbduo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pbduo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pbduo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (pbduo *PaymentBankingDetailUpdateOne) SaveX(ctx context.Context) *PaymentBankingDetail {
	node, err := pbduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pbduo *PaymentBankingDetailUpdateOne) Exec(ctx context.Context) error {
	_, err := pbduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pbduo *PaymentBankingDetailUpdateOne) ExecX(ctx context.Context) {
	if err := pbduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pbduo *PaymentBankingDetailUpdateOne) defaults() {
	if _, ok := pbduo.mutation.UpdatedAt(); !ok {
		v := paymentbankingdetail.UpdateDefaultUpdatedAt()
		pbduo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pbduo *PaymentBankingDetailUpdateOne) check() error {
	if v, ok := pbduo.mutation.CreatedBy(); ok {
		if err := paymentbankingdetail.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "PaymentBankingDetail.created_by": %w`, err)}
		}
	}
	if v, ok := pbduo.mutation.UpdatedBy(); ok {
		if err := paymentbankingdetail.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "PaymentBankingDetail.updated_by": %w`, err)}
		}
	}
	if v, ok := pbduo.mutation.MerchantUserBankName(); ok {
		if err := paymentbankingdetail.MerchantUserBankNameValidator(v); err != nil {
			return &ValidationError{Name: "merchant_user_bank_name", err: fmt.Errorf(`ent: validator failed for field "PaymentBankingDetail.merchant_user_bank_name": %w`, err)}
		}
	}
	if v, ok := pbduo.mutation.SystemAccountBankName(); ok {
		if err := paymentbankingdetail.SystemAccountBankNameValidator(v); err != nil {
			return &ValidationError{Name: "system_account_bank_name", err: fmt.Errorf(`ent: validator failed for field "PaymentBankingDetail.system_account_bank_name": %w`, err)}
		}
	}
	if _, ok := pbduo.mutation.PaymentID(); pbduo.mutation.PaymentCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "PaymentBankingDetail.payment"`)
	}
	return nil
}

func (pbduo *PaymentBankingDetailUpdateOne) sqlSave(ctx context.Context) (_node *PaymentBankingDetail, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   paymentbankingdetail.Table,
			Columns: paymentbankingdetail.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: paymentbankingdetail.FieldID,
			},
		},
	}
	id, ok := pbduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PaymentBankingDetail.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pbduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, paymentbankingdetail.FieldID)
		for _, f := range fields {
			if !paymentbankingdetail.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != paymentbankingdetail.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pbduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pbduo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: paymentbankingdetail.FieldCreatedAt,
		})
	}
	if value, ok := pbduo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: paymentbankingdetail.FieldUpdatedAt,
		})
	}
	if value, ok := pbduo.mutation.CreatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: paymentbankingdetail.FieldCreatedBy,
		})
	}
	if value, ok := pbduo.mutation.UpdatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: paymentbankingdetail.FieldUpdatedBy,
		})
	}
	if value, ok := pbduo.mutation.PaymentCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: paymentbankingdetail.FieldPaymentCode,
		})
	}
	if pbduo.mutation.PaymentCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: paymentbankingdetail.FieldPaymentCode,
		})
	}
	if value, ok := pbduo.mutation.MerchantUserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: paymentbankingdetail.FieldMerchantUserID,
		})
	}
	if value, ok := pbduo.mutation.AddedMerchantUserID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: paymentbankingdetail.FieldMerchantUserID,
		})
	}
	if pbduo.mutation.MerchantUserIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: paymentbankingdetail.FieldMerchantUserID,
		})
	}
	if value, ok := pbduo.mutation.MerchantUserBankName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: paymentbankingdetail.FieldMerchantUserBankName,
		})
	}
	if value, ok := pbduo.mutation.AddedMerchantUserBankName(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: paymentbankingdetail.FieldMerchantUserBankName,
		})
	}
	if pbduo.mutation.MerchantUserBankNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: paymentbankingdetail.FieldMerchantUserBankName,
		})
	}
	if value, ok := pbduo.mutation.MerchantUserAccountNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: paymentbankingdetail.FieldMerchantUserAccountNumber,
		})
	}
	if pbduo.mutation.MerchantUserAccountNumberCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: paymentbankingdetail.FieldMerchantUserAccountNumber,
		})
	}
	if value, ok := pbduo.mutation.MerchantUserAccountName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: paymentbankingdetail.FieldMerchantUserAccountName,
		})
	}
	if pbduo.mutation.MerchantUserAccountNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: paymentbankingdetail.FieldMerchantUserAccountName,
		})
	}
	if value, ok := pbduo.mutation.SystemAccountBankName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: paymentbankingdetail.FieldSystemAccountBankName,
		})
	}
	if value, ok := pbduo.mutation.AddedSystemAccountBankName(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: paymentbankingdetail.FieldSystemAccountBankName,
		})
	}
	if pbduo.mutation.SystemAccountBankNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: paymentbankingdetail.FieldSystemAccountBankName,
		})
	}
	if value, ok := pbduo.mutation.SystemAccountNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: paymentbankingdetail.FieldSystemAccountNumber,
		})
	}
	if pbduo.mutation.SystemAccountNumberCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: paymentbankingdetail.FieldSystemAccountNumber,
		})
	}
	if value, ok := pbduo.mutation.SystemAccountName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: paymentbankingdetail.FieldSystemAccountName,
		})
	}
	if pbduo.mutation.SystemAccountNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: paymentbankingdetail.FieldSystemAccountName,
		})
	}
	if value, ok := pbduo.mutation.ImageURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: paymentbankingdetail.FieldImageURL,
		})
	}
	if pbduo.mutation.ImageURLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: paymentbankingdetail.FieldImageURL,
		})
	}
	if value, ok := pbduo.mutation.TxID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: paymentbankingdetail.FieldTxID,
		})
	}
	if pbduo.mutation.TxIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: paymentbankingdetail.FieldTxID,
		})
	}
	if value, ok := pbduo.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: paymentbankingdetail.FieldAmount,
		})
	}
	if value, ok := pbduo.mutation.AddedAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: paymentbankingdetail.FieldAmount,
		})
	}
	if pbduo.mutation.AmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: paymentbankingdetail.FieldAmount,
		})
	}
	if value, ok := pbduo.mutation.Fee(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: paymentbankingdetail.FieldFee,
		})
	}
	if value, ok := pbduo.mutation.AddedFee(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: paymentbankingdetail.FieldFee,
		})
	}
	if pbduo.mutation.FeeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: paymentbankingdetail.FieldFee,
		})
	}
	if pbduo.mutation.PaymentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   paymentbankingdetail.PaymentTable,
			Columns: []string{paymentbankingdetail.PaymentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: payment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pbduo.mutation.PaymentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   paymentbankingdetail.PaymentTable,
			Columns: []string{paymentbankingdetail.PaymentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: payment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PaymentBankingDetail{config: pbduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pbduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{paymentbankingdetail.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
