// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"gitlab.com/mcuc/monorepo/backend/stark/pkg/ent/payment"
	"gitlab.com/mcuc/monorepo/backend/stark/pkg/ent/paymentbankingdetail"
	"gitlab.com/mcuc/monorepo/backend/stark/pkg/ent/paymentcryptodetail"
	"gitlab.com/mcuc/monorepo/backend/stark/pkg/ent/paymentewalletdetail"
	"gitlab.com/mcuc/monorepo/backend/stark/pkg/ent/paymenttelcodetail"
	"gitlab.com/mcuc/monorepo/backend/stark/pkg/ent/revision"
)

// PaymentCreate is the builder for creating a Payment entity.
type PaymentCreate struct {
	config
	mutation *PaymentMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedBy sets the "created_by" field.
func (pc *PaymentCreate) SetCreatedBy(s string) *PaymentCreate {
	pc.mutation.SetCreatedBy(s)
	return pc
}

// SetCreatedAt sets the "created_at" field.
func (pc *PaymentCreate) SetCreatedAt(t time.Time) *PaymentCreate {
	pc.mutation.SetCreatedAt(t)
	return pc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pc *PaymentCreate) SetNillableCreatedAt(t *time.Time) *PaymentCreate {
	if t != nil {
		pc.SetCreatedAt(*t)
	}
	return pc
}

// SetUpdatedBy sets the "updated_by" field.
func (pc *PaymentCreate) SetUpdatedBy(s string) *PaymentCreate {
	pc.mutation.SetUpdatedBy(s)
	return pc
}

// SetUpdatedAt sets the "updated_at" field.
func (pc *PaymentCreate) SetUpdatedAt(t time.Time) *PaymentCreate {
	pc.mutation.SetUpdatedAt(t)
	return pc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pc *PaymentCreate) SetNillableUpdatedAt(t *time.Time) *PaymentCreate {
	if t != nil {
		pc.SetUpdatedAt(*t)
	}
	return pc
}

// SetApprovedBy sets the "approved_by" field.
func (pc *PaymentCreate) SetApprovedBy(s string) *PaymentCreate {
	pc.mutation.SetApprovedBy(s)
	return pc
}

// SetNillableApprovedBy sets the "approved_by" field if the given value is not nil.
func (pc *PaymentCreate) SetNillableApprovedBy(s *string) *PaymentCreate {
	if s != nil {
		pc.SetApprovedBy(*s)
	}
	return pc
}

// SetApprovedAt sets the "approved_at" field.
func (pc *PaymentCreate) SetApprovedAt(t time.Time) *PaymentCreate {
	pc.mutation.SetApprovedAt(t)
	return pc
}

// SetNillableApprovedAt sets the "approved_at" field if the given value is not nil.
func (pc *PaymentCreate) SetNillableApprovedAt(t *time.Time) *PaymentCreate {
	if t != nil {
		pc.SetApprovedAt(*t)
	}
	return pc
}

// SetMerchantID sets the "merchant_id" field.
func (pc *PaymentCreate) SetMerchantID(i int64) *PaymentCreate {
	pc.mutation.SetMerchantID(i)
	return pc
}

// SetNillableMerchantID sets the "merchant_id" field if the given value is not nil.
func (pc *PaymentCreate) SetNillableMerchantID(i *int64) *PaymentCreate {
	if i != nil {
		pc.SetMerchantID(*i)
	}
	return pc
}

// SetMerchantUserID sets the "merchant_user_id" field.
func (pc *PaymentCreate) SetMerchantUserID(i int64) *PaymentCreate {
	pc.mutation.SetMerchantUserID(i)
	return pc
}

// SetNillableMerchantUserID sets the "merchant_user_id" field if the given value is not nil.
func (pc *PaymentCreate) SetNillableMerchantUserID(i *int64) *PaymentCreate {
	if i != nil {
		pc.SetMerchantUserID(*i)
	}
	return pc
}

// SetMethod sets the "method" field.
func (pc *PaymentCreate) SetMethod(i int32) *PaymentCreate {
	pc.mutation.SetMethod(i)
	return pc
}

// SetNillableMethod sets the "method" field if the given value is not nil.
func (pc *PaymentCreate) SetNillableMethod(i *int32) *PaymentCreate {
	if i != nil {
		pc.SetMethod(*i)
	}
	return pc
}

// SetType sets the "type" field.
func (pc *PaymentCreate) SetType(i int32) *PaymentCreate {
	pc.mutation.SetType(i)
	return pc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (pc *PaymentCreate) SetNillableType(i *int32) *PaymentCreate {
	if i != nil {
		pc.SetType(*i)
	}
	return pc
}

// SetStatus sets the "status" field.
func (pc *PaymentCreate) SetStatus(i int32) *PaymentCreate {
	pc.mutation.SetStatus(i)
	return pc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (pc *PaymentCreate) SetNillableStatus(i *int32) *PaymentCreate {
	if i != nil {
		pc.SetStatus(*i)
	}
	return pc
}

// SetID sets the "id" field.
func (pc *PaymentCreate) SetID(i int64) *PaymentCreate {
	pc.mutation.SetID(i)
	return pc
}

// AddPaymentBankingDetailIDs adds the "payment_banking_detail" edge to the PaymentBankingDetail entity by IDs.
func (pc *PaymentCreate) AddPaymentBankingDetailIDs(ids ...int64) *PaymentCreate {
	pc.mutation.AddPaymentBankingDetailIDs(ids...)
	return pc
}

// AddPaymentBankingDetail adds the "payment_banking_detail" edges to the PaymentBankingDetail entity.
func (pc *PaymentCreate) AddPaymentBankingDetail(p ...*PaymentBankingDetail) *PaymentCreate {
	ids := make([]int64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pc.AddPaymentBankingDetailIDs(ids...)
}

// AddPaymentTelcoDetailIDs adds the "payment_telco_detail" edge to the PaymentTelcoDetail entity by IDs.
func (pc *PaymentCreate) AddPaymentTelcoDetailIDs(ids ...int64) *PaymentCreate {
	pc.mutation.AddPaymentTelcoDetailIDs(ids...)
	return pc
}

// AddPaymentTelcoDetail adds the "payment_telco_detail" edges to the PaymentTelcoDetail entity.
func (pc *PaymentCreate) AddPaymentTelcoDetail(p ...*PaymentTelcoDetail) *PaymentCreate {
	ids := make([]int64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pc.AddPaymentTelcoDetailIDs(ids...)
}

// AddPaymentEWalletDetailIDs adds the "payment_e_wallet_detail" edge to the PaymentEWalletDetail entity by IDs.
func (pc *PaymentCreate) AddPaymentEWalletDetailIDs(ids ...int64) *PaymentCreate {
	pc.mutation.AddPaymentEWalletDetailIDs(ids...)
	return pc
}

// AddPaymentEWalletDetail adds the "payment_e_wallet_detail" edges to the PaymentEWalletDetail entity.
func (pc *PaymentCreate) AddPaymentEWalletDetail(p ...*PaymentEWalletDetail) *PaymentCreate {
	ids := make([]int64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pc.AddPaymentEWalletDetailIDs(ids...)
}

// AddPaymentCryptoDetailIDs adds the "payment_crypto_detail" edge to the PaymentCryptoDetail entity by IDs.
func (pc *PaymentCreate) AddPaymentCryptoDetailIDs(ids ...int64) *PaymentCreate {
	pc.mutation.AddPaymentCryptoDetailIDs(ids...)
	return pc
}

// AddPaymentCryptoDetail adds the "payment_crypto_detail" edges to the PaymentCryptoDetail entity.
func (pc *PaymentCreate) AddPaymentCryptoDetail(p ...*PaymentCryptoDetail) *PaymentCreate {
	ids := make([]int64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pc.AddPaymentCryptoDetailIDs(ids...)
}

// AddRevisionIDs adds the "revisions" edge to the Revision entity by IDs.
func (pc *PaymentCreate) AddRevisionIDs(ids ...int64) *PaymentCreate {
	pc.mutation.AddRevisionIDs(ids...)
	return pc
}

// AddRevisions adds the "revisions" edges to the Revision entity.
func (pc *PaymentCreate) AddRevisions(r ...*Revision) *PaymentCreate {
	ids := make([]int64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return pc.AddRevisionIDs(ids...)
}

// Mutation returns the PaymentMutation object of the builder.
func (pc *PaymentCreate) Mutation() *PaymentMutation {
	return pc.mutation
}

// Save creates the Payment in the database.
func (pc *PaymentCreate) Save(ctx context.Context) (*Payment, error) {
	var (
		err  error
		node *Payment
	)
	pc.defaults()
	if len(pc.hooks) == 0 {
		if err = pc.check(); err != nil {
			return nil, err
		}
		node, err = pc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PaymentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pc.check(); err != nil {
				return nil, err
			}
			pc.mutation = mutation
			if node, err = pc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(pc.hooks) - 1; i >= 0; i-- {
			if pc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PaymentCreate) SaveX(ctx context.Context) *Payment {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PaymentCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PaymentCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *PaymentCreate) defaults() {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		v := payment.DefaultCreatedAt()
		pc.mutation.SetCreatedAt(v)
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		v := payment.DefaultUpdatedAt()
		pc.mutation.SetUpdatedAt(v)
	}
	if _, ok := pc.mutation.MerchantID(); !ok {
		v := payment.DefaultMerchantID
		pc.mutation.SetMerchantID(v)
	}
	if _, ok := pc.mutation.MerchantUserID(); !ok {
		v := payment.DefaultMerchantUserID
		pc.mutation.SetMerchantUserID(v)
	}
	if _, ok := pc.mutation.Method(); !ok {
		v := payment.DefaultMethod
		pc.mutation.SetMethod(v)
	}
	if _, ok := pc.mutation.GetType(); !ok {
		v := payment.DefaultType
		pc.mutation.SetType(v)
	}
	if _, ok := pc.mutation.Status(); !ok {
		v := payment.DefaultStatus
		pc.mutation.SetStatus(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *PaymentCreate) check() error {
	if _, ok := pc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent: missing required field "Payment.created_by"`)}
	}
	if v, ok := pc.mutation.CreatedBy(); ok {
		if err := payment.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "Payment.created_by": %w`, err)}
		}
	}
	if _, ok := pc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Payment.created_at"`)}
	}
	if _, ok := pc.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`ent: missing required field "Payment.updated_by"`)}
	}
	if v, ok := pc.mutation.UpdatedBy(); ok {
		if err := payment.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "Payment.updated_by": %w`, err)}
		}
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Payment.updated_at"`)}
	}
	if _, ok := pc.mutation.MerchantID(); !ok {
		return &ValidationError{Name: "merchant_id", err: errors.New(`ent: missing required field "Payment.merchant_id"`)}
	}
	if v, ok := pc.mutation.MerchantID(); ok {
		if err := payment.MerchantIDValidator(v); err != nil {
			return &ValidationError{Name: "merchant_id", err: fmt.Errorf(`ent: validator failed for field "Payment.merchant_id": %w`, err)}
		}
	}
	if _, ok := pc.mutation.MerchantUserID(); !ok {
		return &ValidationError{Name: "merchant_user_id", err: errors.New(`ent: missing required field "Payment.merchant_user_id"`)}
	}
	if v, ok := pc.mutation.MerchantUserID(); ok {
		if err := payment.MerchantUserIDValidator(v); err != nil {
			return &ValidationError{Name: "merchant_user_id", err: fmt.Errorf(`ent: validator failed for field "Payment.merchant_user_id": %w`, err)}
		}
	}
	if _, ok := pc.mutation.Method(); !ok {
		return &ValidationError{Name: "method", err: errors.New(`ent: missing required field "Payment.method"`)}
	}
	if v, ok := pc.mutation.Method(); ok {
		if err := payment.MethodValidator(v); err != nil {
			return &ValidationError{Name: "method", err: fmt.Errorf(`ent: validator failed for field "Payment.method": %w`, err)}
		}
	}
	if _, ok := pc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Payment.type"`)}
	}
	if v, ok := pc.mutation.GetType(); ok {
		if err := payment.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Payment.type": %w`, err)}
		}
	}
	if _, ok := pc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Payment.status"`)}
	}
	if v, ok := pc.mutation.Status(); ok {
		if err := payment.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Payment.status": %w`, err)}
		}
	}
	return nil
}

func (pc *PaymentCreate) sqlSave(ctx context.Context) (*Payment, error) {
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	return _node, nil
}

func (pc *PaymentCreate) createSpec() (*Payment, *sqlgraph.CreateSpec) {
	var (
		_node = &Payment{config: pc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: payment.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: payment.FieldID,
			},
		}
	)
	_spec.OnConflict = pc.conflict
	if id, ok := pc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pc.mutation.CreatedBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: payment.FieldCreatedBy,
		})
		_node.CreatedBy = value
	}
	if value, ok := pc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: payment.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := pc.mutation.UpdatedBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: payment.FieldUpdatedBy,
		})
		_node.UpdatedBy = value
	}
	if value, ok := pc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: payment.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := pc.mutation.ApprovedBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: payment.FieldApprovedBy,
		})
		_node.ApprovedBy = &value
	}
	if value, ok := pc.mutation.ApprovedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: payment.FieldApprovedAt,
		})
		_node.ApprovedAt = &value
	}
	if value, ok := pc.mutation.MerchantID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: payment.FieldMerchantID,
		})
		_node.MerchantID = value
	}
	if value, ok := pc.mutation.MerchantUserID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: payment.FieldMerchantUserID,
		})
		_node.MerchantUserID = value
	}
	if value, ok := pc.mutation.Method(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: payment.FieldMethod,
		})
		_node.Method = value
	}
	if value, ok := pc.mutation.GetType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: payment.FieldType,
		})
		_node.Type = value
	}
	if value, ok := pc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: payment.FieldStatus,
		})
		_node.Status = value
	}
	if nodes := pc.mutation.PaymentBankingDetailIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   payment.PaymentBankingDetailTable,
			Columns: []string{payment.PaymentBankingDetailColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: paymentbankingdetail.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.PaymentTelcoDetailIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   payment.PaymentTelcoDetailTable,
			Columns: []string{payment.PaymentTelcoDetailColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: paymenttelcodetail.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.PaymentEWalletDetailIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   payment.PaymentEWalletDetailTable,
			Columns: []string{payment.PaymentEWalletDetailColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: paymentewalletdetail.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.PaymentCryptoDetailIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   payment.PaymentCryptoDetailTable,
			Columns: []string{payment.PaymentCryptoDetailColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: paymentcryptodetail.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.RevisionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   payment.RevisionsTable,
			Columns: []string{payment.RevisionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: revision.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Payment.Create().
//		SetCreatedBy(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PaymentUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
//
func (pc *PaymentCreate) OnConflict(opts ...sql.ConflictOption) *PaymentUpsertOne {
	pc.conflict = opts
	return &PaymentUpsertOne{
		create: pc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Payment.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (pc *PaymentCreate) OnConflictColumns(columns ...string) *PaymentUpsertOne {
	pc.conflict = append(pc.conflict, sql.ConflictColumns(columns...))
	return &PaymentUpsertOne{
		create: pc,
	}
}

type (
	// PaymentUpsertOne is the builder for "upsert"-ing
	//  one Payment node.
	PaymentUpsertOne struct {
		create *PaymentCreate
	}

	// PaymentUpsert is the "OnConflict" setter.
	PaymentUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedBy sets the "created_by" field.
func (u *PaymentUpsert) SetCreatedBy(v string) *PaymentUpsert {
	u.Set(payment.FieldCreatedBy, v)
	return u
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *PaymentUpsert) UpdateCreatedBy() *PaymentUpsert {
	u.SetExcluded(payment.FieldCreatedBy)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *PaymentUpsert) SetCreatedAt(v time.Time) *PaymentUpsert {
	u.Set(payment.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *PaymentUpsert) UpdateCreatedAt() *PaymentUpsert {
	u.SetExcluded(payment.FieldCreatedAt)
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *PaymentUpsert) SetUpdatedBy(v string) *PaymentUpsert {
	u.Set(payment.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *PaymentUpsert) UpdateUpdatedBy() *PaymentUpsert {
	u.SetExcluded(payment.FieldUpdatedBy)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PaymentUpsert) SetUpdatedAt(v time.Time) *PaymentUpsert {
	u.Set(payment.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PaymentUpsert) UpdateUpdatedAt() *PaymentUpsert {
	u.SetExcluded(payment.FieldUpdatedAt)
	return u
}

// SetApprovedBy sets the "approved_by" field.
func (u *PaymentUpsert) SetApprovedBy(v string) *PaymentUpsert {
	u.Set(payment.FieldApprovedBy, v)
	return u
}

// UpdateApprovedBy sets the "approved_by" field to the value that was provided on create.
func (u *PaymentUpsert) UpdateApprovedBy() *PaymentUpsert {
	u.SetExcluded(payment.FieldApprovedBy)
	return u
}

// ClearApprovedBy clears the value of the "approved_by" field.
func (u *PaymentUpsert) ClearApprovedBy() *PaymentUpsert {
	u.SetNull(payment.FieldApprovedBy)
	return u
}

// SetApprovedAt sets the "approved_at" field.
func (u *PaymentUpsert) SetApprovedAt(v time.Time) *PaymentUpsert {
	u.Set(payment.FieldApprovedAt, v)
	return u
}

// UpdateApprovedAt sets the "approved_at" field to the value that was provided on create.
func (u *PaymentUpsert) UpdateApprovedAt() *PaymentUpsert {
	u.SetExcluded(payment.FieldApprovedAt)
	return u
}

// ClearApprovedAt clears the value of the "approved_at" field.
func (u *PaymentUpsert) ClearApprovedAt() *PaymentUpsert {
	u.SetNull(payment.FieldApprovedAt)
	return u
}

// SetMerchantID sets the "merchant_id" field.
func (u *PaymentUpsert) SetMerchantID(v int64) *PaymentUpsert {
	u.Set(payment.FieldMerchantID, v)
	return u
}

// UpdateMerchantID sets the "merchant_id" field to the value that was provided on create.
func (u *PaymentUpsert) UpdateMerchantID() *PaymentUpsert {
	u.SetExcluded(payment.FieldMerchantID)
	return u
}

// AddMerchantID adds v to the "merchant_id" field.
func (u *PaymentUpsert) AddMerchantID(v int64) *PaymentUpsert {
	u.Add(payment.FieldMerchantID, v)
	return u
}

// SetMerchantUserID sets the "merchant_user_id" field.
func (u *PaymentUpsert) SetMerchantUserID(v int64) *PaymentUpsert {
	u.Set(payment.FieldMerchantUserID, v)
	return u
}

// UpdateMerchantUserID sets the "merchant_user_id" field to the value that was provided on create.
func (u *PaymentUpsert) UpdateMerchantUserID() *PaymentUpsert {
	u.SetExcluded(payment.FieldMerchantUserID)
	return u
}

// AddMerchantUserID adds v to the "merchant_user_id" field.
func (u *PaymentUpsert) AddMerchantUserID(v int64) *PaymentUpsert {
	u.Add(payment.FieldMerchantUserID, v)
	return u
}

// SetMethod sets the "method" field.
func (u *PaymentUpsert) SetMethod(v int32) *PaymentUpsert {
	u.Set(payment.FieldMethod, v)
	return u
}

// UpdateMethod sets the "method" field to the value that was provided on create.
func (u *PaymentUpsert) UpdateMethod() *PaymentUpsert {
	u.SetExcluded(payment.FieldMethod)
	return u
}

// AddMethod adds v to the "method" field.
func (u *PaymentUpsert) AddMethod(v int32) *PaymentUpsert {
	u.Add(payment.FieldMethod, v)
	return u
}

// SetType sets the "type" field.
func (u *PaymentUpsert) SetType(v int32) *PaymentUpsert {
	u.Set(payment.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *PaymentUpsert) UpdateType() *PaymentUpsert {
	u.SetExcluded(payment.FieldType)
	return u
}

// AddType adds v to the "type" field.
func (u *PaymentUpsert) AddType(v int32) *PaymentUpsert {
	u.Add(payment.FieldType, v)
	return u
}

// SetStatus sets the "status" field.
func (u *PaymentUpsert) SetStatus(v int32) *PaymentUpsert {
	u.Set(payment.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *PaymentUpsert) UpdateStatus() *PaymentUpsert {
	u.SetExcluded(payment.FieldStatus)
	return u
}

// AddStatus adds v to the "status" field.
func (u *PaymentUpsert) AddStatus(v int32) *PaymentUpsert {
	u.Add(payment.FieldStatus, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Payment.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(payment.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *PaymentUpsertOne) UpdateNewValues() *PaymentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(payment.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.Payment.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *PaymentUpsertOne) Ignore() *PaymentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PaymentUpsertOne) DoNothing() *PaymentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PaymentCreate.OnConflict
// documentation for more info.
func (u *PaymentUpsertOne) Update(set func(*PaymentUpsert)) *PaymentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PaymentUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *PaymentUpsertOne) SetCreatedBy(v string) *PaymentUpsertOne {
	return u.Update(func(s *PaymentUpsert) {
		s.SetCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *PaymentUpsertOne) UpdateCreatedBy() *PaymentUpsertOne {
	return u.Update(func(s *PaymentUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *PaymentUpsertOne) SetCreatedAt(v time.Time) *PaymentUpsertOne {
	return u.Update(func(s *PaymentUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *PaymentUpsertOne) UpdateCreatedAt() *PaymentUpsertOne {
	return u.Update(func(s *PaymentUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *PaymentUpsertOne) SetUpdatedBy(v string) *PaymentUpsertOne {
	return u.Update(func(s *PaymentUpsert) {
		s.SetUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *PaymentUpsertOne) UpdateUpdatedBy() *PaymentUpsertOne {
	return u.Update(func(s *PaymentUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PaymentUpsertOne) SetUpdatedAt(v time.Time) *PaymentUpsertOne {
	return u.Update(func(s *PaymentUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PaymentUpsertOne) UpdateUpdatedAt() *PaymentUpsertOne {
	return u.Update(func(s *PaymentUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetApprovedBy sets the "approved_by" field.
func (u *PaymentUpsertOne) SetApprovedBy(v string) *PaymentUpsertOne {
	return u.Update(func(s *PaymentUpsert) {
		s.SetApprovedBy(v)
	})
}

// UpdateApprovedBy sets the "approved_by" field to the value that was provided on create.
func (u *PaymentUpsertOne) UpdateApprovedBy() *PaymentUpsertOne {
	return u.Update(func(s *PaymentUpsert) {
		s.UpdateApprovedBy()
	})
}

// ClearApprovedBy clears the value of the "approved_by" field.
func (u *PaymentUpsertOne) ClearApprovedBy() *PaymentUpsertOne {
	return u.Update(func(s *PaymentUpsert) {
		s.ClearApprovedBy()
	})
}

// SetApprovedAt sets the "approved_at" field.
func (u *PaymentUpsertOne) SetApprovedAt(v time.Time) *PaymentUpsertOne {
	return u.Update(func(s *PaymentUpsert) {
		s.SetApprovedAt(v)
	})
}

// UpdateApprovedAt sets the "approved_at" field to the value that was provided on create.
func (u *PaymentUpsertOne) UpdateApprovedAt() *PaymentUpsertOne {
	return u.Update(func(s *PaymentUpsert) {
		s.UpdateApprovedAt()
	})
}

// ClearApprovedAt clears the value of the "approved_at" field.
func (u *PaymentUpsertOne) ClearApprovedAt() *PaymentUpsertOne {
	return u.Update(func(s *PaymentUpsert) {
		s.ClearApprovedAt()
	})
}

// SetMerchantID sets the "merchant_id" field.
func (u *PaymentUpsertOne) SetMerchantID(v int64) *PaymentUpsertOne {
	return u.Update(func(s *PaymentUpsert) {
		s.SetMerchantID(v)
	})
}

// AddMerchantID adds v to the "merchant_id" field.
func (u *PaymentUpsertOne) AddMerchantID(v int64) *PaymentUpsertOne {
	return u.Update(func(s *PaymentUpsert) {
		s.AddMerchantID(v)
	})
}

// UpdateMerchantID sets the "merchant_id" field to the value that was provided on create.
func (u *PaymentUpsertOne) UpdateMerchantID() *PaymentUpsertOne {
	return u.Update(func(s *PaymentUpsert) {
		s.UpdateMerchantID()
	})
}

// SetMerchantUserID sets the "merchant_user_id" field.
func (u *PaymentUpsertOne) SetMerchantUserID(v int64) *PaymentUpsertOne {
	return u.Update(func(s *PaymentUpsert) {
		s.SetMerchantUserID(v)
	})
}

// AddMerchantUserID adds v to the "merchant_user_id" field.
func (u *PaymentUpsertOne) AddMerchantUserID(v int64) *PaymentUpsertOne {
	return u.Update(func(s *PaymentUpsert) {
		s.AddMerchantUserID(v)
	})
}

// UpdateMerchantUserID sets the "merchant_user_id" field to the value that was provided on create.
func (u *PaymentUpsertOne) UpdateMerchantUserID() *PaymentUpsertOne {
	return u.Update(func(s *PaymentUpsert) {
		s.UpdateMerchantUserID()
	})
}

// SetMethod sets the "method" field.
func (u *PaymentUpsertOne) SetMethod(v int32) *PaymentUpsertOne {
	return u.Update(func(s *PaymentUpsert) {
		s.SetMethod(v)
	})
}

// AddMethod adds v to the "method" field.
func (u *PaymentUpsertOne) AddMethod(v int32) *PaymentUpsertOne {
	return u.Update(func(s *PaymentUpsert) {
		s.AddMethod(v)
	})
}

// UpdateMethod sets the "method" field to the value that was provided on create.
func (u *PaymentUpsertOne) UpdateMethod() *PaymentUpsertOne {
	return u.Update(func(s *PaymentUpsert) {
		s.UpdateMethod()
	})
}

// SetType sets the "type" field.
func (u *PaymentUpsertOne) SetType(v int32) *PaymentUpsertOne {
	return u.Update(func(s *PaymentUpsert) {
		s.SetType(v)
	})
}

// AddType adds v to the "type" field.
func (u *PaymentUpsertOne) AddType(v int32) *PaymentUpsertOne {
	return u.Update(func(s *PaymentUpsert) {
		s.AddType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *PaymentUpsertOne) UpdateType() *PaymentUpsertOne {
	return u.Update(func(s *PaymentUpsert) {
		s.UpdateType()
	})
}

// SetStatus sets the "status" field.
func (u *PaymentUpsertOne) SetStatus(v int32) *PaymentUpsertOne {
	return u.Update(func(s *PaymentUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *PaymentUpsertOne) AddStatus(v int32) *PaymentUpsertOne {
	return u.Update(func(s *PaymentUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *PaymentUpsertOne) UpdateStatus() *PaymentUpsertOne {
	return u.Update(func(s *PaymentUpsert) {
		s.UpdateStatus()
	})
}

// Exec executes the query.
func (u *PaymentUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PaymentCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PaymentUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PaymentUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PaymentUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PaymentCreateBulk is the builder for creating many Payment entities in bulk.
type PaymentCreateBulk struct {
	config
	builders []*PaymentCreate
	conflict []sql.ConflictOption
}

// Save creates the Payment entities in the database.
func (pcb *PaymentCreateBulk) Save(ctx context.Context) ([]*Payment, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Payment, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PaymentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PaymentCreateBulk) SaveX(ctx context.Context) []*Payment {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PaymentCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PaymentCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Payment.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PaymentUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
//
func (pcb *PaymentCreateBulk) OnConflict(opts ...sql.ConflictOption) *PaymentUpsertBulk {
	pcb.conflict = opts
	return &PaymentUpsertBulk{
		create: pcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Payment.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (pcb *PaymentCreateBulk) OnConflictColumns(columns ...string) *PaymentUpsertBulk {
	pcb.conflict = append(pcb.conflict, sql.ConflictColumns(columns...))
	return &PaymentUpsertBulk{
		create: pcb,
	}
}

// PaymentUpsertBulk is the builder for "upsert"-ing
// a bulk of Payment nodes.
type PaymentUpsertBulk struct {
	create *PaymentCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Payment.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(payment.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *PaymentUpsertBulk) UpdateNewValues() *PaymentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(payment.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Payment.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *PaymentUpsertBulk) Ignore() *PaymentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PaymentUpsertBulk) DoNothing() *PaymentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PaymentCreateBulk.OnConflict
// documentation for more info.
func (u *PaymentUpsertBulk) Update(set func(*PaymentUpsert)) *PaymentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PaymentUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *PaymentUpsertBulk) SetCreatedBy(v string) *PaymentUpsertBulk {
	return u.Update(func(s *PaymentUpsert) {
		s.SetCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *PaymentUpsertBulk) UpdateCreatedBy() *PaymentUpsertBulk {
	return u.Update(func(s *PaymentUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *PaymentUpsertBulk) SetCreatedAt(v time.Time) *PaymentUpsertBulk {
	return u.Update(func(s *PaymentUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *PaymentUpsertBulk) UpdateCreatedAt() *PaymentUpsertBulk {
	return u.Update(func(s *PaymentUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *PaymentUpsertBulk) SetUpdatedBy(v string) *PaymentUpsertBulk {
	return u.Update(func(s *PaymentUpsert) {
		s.SetUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *PaymentUpsertBulk) UpdateUpdatedBy() *PaymentUpsertBulk {
	return u.Update(func(s *PaymentUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PaymentUpsertBulk) SetUpdatedAt(v time.Time) *PaymentUpsertBulk {
	return u.Update(func(s *PaymentUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PaymentUpsertBulk) UpdateUpdatedAt() *PaymentUpsertBulk {
	return u.Update(func(s *PaymentUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetApprovedBy sets the "approved_by" field.
func (u *PaymentUpsertBulk) SetApprovedBy(v string) *PaymentUpsertBulk {
	return u.Update(func(s *PaymentUpsert) {
		s.SetApprovedBy(v)
	})
}

// UpdateApprovedBy sets the "approved_by" field to the value that was provided on create.
func (u *PaymentUpsertBulk) UpdateApprovedBy() *PaymentUpsertBulk {
	return u.Update(func(s *PaymentUpsert) {
		s.UpdateApprovedBy()
	})
}

// ClearApprovedBy clears the value of the "approved_by" field.
func (u *PaymentUpsertBulk) ClearApprovedBy() *PaymentUpsertBulk {
	return u.Update(func(s *PaymentUpsert) {
		s.ClearApprovedBy()
	})
}

// SetApprovedAt sets the "approved_at" field.
func (u *PaymentUpsertBulk) SetApprovedAt(v time.Time) *PaymentUpsertBulk {
	return u.Update(func(s *PaymentUpsert) {
		s.SetApprovedAt(v)
	})
}

// UpdateApprovedAt sets the "approved_at" field to the value that was provided on create.
func (u *PaymentUpsertBulk) UpdateApprovedAt() *PaymentUpsertBulk {
	return u.Update(func(s *PaymentUpsert) {
		s.UpdateApprovedAt()
	})
}

// ClearApprovedAt clears the value of the "approved_at" field.
func (u *PaymentUpsertBulk) ClearApprovedAt() *PaymentUpsertBulk {
	return u.Update(func(s *PaymentUpsert) {
		s.ClearApprovedAt()
	})
}

// SetMerchantID sets the "merchant_id" field.
func (u *PaymentUpsertBulk) SetMerchantID(v int64) *PaymentUpsertBulk {
	return u.Update(func(s *PaymentUpsert) {
		s.SetMerchantID(v)
	})
}

// AddMerchantID adds v to the "merchant_id" field.
func (u *PaymentUpsertBulk) AddMerchantID(v int64) *PaymentUpsertBulk {
	return u.Update(func(s *PaymentUpsert) {
		s.AddMerchantID(v)
	})
}

// UpdateMerchantID sets the "merchant_id" field to the value that was provided on create.
func (u *PaymentUpsertBulk) UpdateMerchantID() *PaymentUpsertBulk {
	return u.Update(func(s *PaymentUpsert) {
		s.UpdateMerchantID()
	})
}

// SetMerchantUserID sets the "merchant_user_id" field.
func (u *PaymentUpsertBulk) SetMerchantUserID(v int64) *PaymentUpsertBulk {
	return u.Update(func(s *PaymentUpsert) {
		s.SetMerchantUserID(v)
	})
}

// AddMerchantUserID adds v to the "merchant_user_id" field.
func (u *PaymentUpsertBulk) AddMerchantUserID(v int64) *PaymentUpsertBulk {
	return u.Update(func(s *PaymentUpsert) {
		s.AddMerchantUserID(v)
	})
}

// UpdateMerchantUserID sets the "merchant_user_id" field to the value that was provided on create.
func (u *PaymentUpsertBulk) UpdateMerchantUserID() *PaymentUpsertBulk {
	return u.Update(func(s *PaymentUpsert) {
		s.UpdateMerchantUserID()
	})
}

// SetMethod sets the "method" field.
func (u *PaymentUpsertBulk) SetMethod(v int32) *PaymentUpsertBulk {
	return u.Update(func(s *PaymentUpsert) {
		s.SetMethod(v)
	})
}

// AddMethod adds v to the "method" field.
func (u *PaymentUpsertBulk) AddMethod(v int32) *PaymentUpsertBulk {
	return u.Update(func(s *PaymentUpsert) {
		s.AddMethod(v)
	})
}

// UpdateMethod sets the "method" field to the value that was provided on create.
func (u *PaymentUpsertBulk) UpdateMethod() *PaymentUpsertBulk {
	return u.Update(func(s *PaymentUpsert) {
		s.UpdateMethod()
	})
}

// SetType sets the "type" field.
func (u *PaymentUpsertBulk) SetType(v int32) *PaymentUpsertBulk {
	return u.Update(func(s *PaymentUpsert) {
		s.SetType(v)
	})
}

// AddType adds v to the "type" field.
func (u *PaymentUpsertBulk) AddType(v int32) *PaymentUpsertBulk {
	return u.Update(func(s *PaymentUpsert) {
		s.AddType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *PaymentUpsertBulk) UpdateType() *PaymentUpsertBulk {
	return u.Update(func(s *PaymentUpsert) {
		s.UpdateType()
	})
}

// SetStatus sets the "status" field.
func (u *PaymentUpsertBulk) SetStatus(v int32) *PaymentUpsertBulk {
	return u.Update(func(s *PaymentUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *PaymentUpsertBulk) AddStatus(v int32) *PaymentUpsertBulk {
	return u.Update(func(s *PaymentUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *PaymentUpsertBulk) UpdateStatus() *PaymentUpsertBulk {
	return u.Update(func(s *PaymentUpsert) {
		s.UpdateStatus()
	})
}

// Exec executes the query.
func (u *PaymentUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PaymentCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PaymentCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PaymentUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
