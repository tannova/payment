// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"gitlab.com/mcuc/monorepo/backend/stark/pkg/ent/payment"
	"gitlab.com/mcuc/monorepo/backend/stark/pkg/ent/paymentewalletdetail"
	"gitlab.com/mcuc/monorepo/backend/stark/pkg/ent/predicate"
)

// PaymentEWalletDetailUpdate is the builder for updating PaymentEWalletDetail entities.
type PaymentEWalletDetailUpdate struct {
	config
	hooks    []Hook
	mutation *PaymentEWalletDetailMutation
}

// Where appends a list predicates to the PaymentEWalletDetailUpdate builder.
func (pedu *PaymentEWalletDetailUpdate) Where(ps ...predicate.PaymentEWalletDetail) *PaymentEWalletDetailUpdate {
	pedu.mutation.Where(ps...)
	return pedu
}

// SetCreatedAt sets the "created_at" field.
func (pedu *PaymentEWalletDetailUpdate) SetCreatedAt(t time.Time) *PaymentEWalletDetailUpdate {
	pedu.mutation.SetCreatedAt(t)
	return pedu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pedu *PaymentEWalletDetailUpdate) SetNillableCreatedAt(t *time.Time) *PaymentEWalletDetailUpdate {
	if t != nil {
		pedu.SetCreatedAt(*t)
	}
	return pedu
}

// SetUpdatedAt sets the "updated_at" field.
func (pedu *PaymentEWalletDetailUpdate) SetUpdatedAt(t time.Time) *PaymentEWalletDetailUpdate {
	pedu.mutation.SetUpdatedAt(t)
	return pedu
}

// SetCreatedBy sets the "created_by" field.
func (pedu *PaymentEWalletDetailUpdate) SetCreatedBy(s string) *PaymentEWalletDetailUpdate {
	pedu.mutation.SetCreatedBy(s)
	return pedu
}

// SetUpdatedBy sets the "updated_by" field.
func (pedu *PaymentEWalletDetailUpdate) SetUpdatedBy(s string) *PaymentEWalletDetailUpdate {
	pedu.mutation.SetUpdatedBy(s)
	return pedu
}

// SetPaymentCode sets the "payment_code" field.
func (pedu *PaymentEWalletDetailUpdate) SetPaymentCode(s string) *PaymentEWalletDetailUpdate {
	pedu.mutation.SetPaymentCode(s)
	return pedu
}

// SetNillablePaymentCode sets the "payment_code" field if the given value is not nil.
func (pedu *PaymentEWalletDetailUpdate) SetNillablePaymentCode(s *string) *PaymentEWalletDetailUpdate {
	if s != nil {
		pedu.SetPaymentCode(*s)
	}
	return pedu
}

// ClearPaymentCode clears the value of the "payment_code" field.
func (pedu *PaymentEWalletDetailUpdate) ClearPaymentCode() *PaymentEWalletDetailUpdate {
	pedu.mutation.ClearPaymentCode()
	return pedu
}

// SetMerchantUserID sets the "merchant_user_id" field.
func (pedu *PaymentEWalletDetailUpdate) SetMerchantUserID(i int64) *PaymentEWalletDetailUpdate {
	pedu.mutation.ResetMerchantUserID()
	pedu.mutation.SetMerchantUserID(i)
	return pedu
}

// SetNillableMerchantUserID sets the "merchant_user_id" field if the given value is not nil.
func (pedu *PaymentEWalletDetailUpdate) SetNillableMerchantUserID(i *int64) *PaymentEWalletDetailUpdate {
	if i != nil {
		pedu.SetMerchantUserID(*i)
	}
	return pedu
}

// AddMerchantUserID adds i to the "merchant_user_id" field.
func (pedu *PaymentEWalletDetailUpdate) AddMerchantUserID(i int64) *PaymentEWalletDetailUpdate {
	pedu.mutation.AddMerchantUserID(i)
	return pedu
}

// ClearMerchantUserID clears the value of the "merchant_user_id" field.
func (pedu *PaymentEWalletDetailUpdate) ClearMerchantUserID() *PaymentEWalletDetailUpdate {
	pedu.mutation.ClearMerchantUserID()
	return pedu
}

// SetEWalletName sets the "e_wallet_name" field.
func (pedu *PaymentEWalletDetailUpdate) SetEWalletName(i int32) *PaymentEWalletDetailUpdate {
	pedu.mutation.ResetEWalletName()
	pedu.mutation.SetEWalletName(i)
	return pedu
}

// SetNillableEWalletName sets the "e_wallet_name" field if the given value is not nil.
func (pedu *PaymentEWalletDetailUpdate) SetNillableEWalletName(i *int32) *PaymentEWalletDetailUpdate {
	if i != nil {
		pedu.SetEWalletName(*i)
	}
	return pedu
}

// AddEWalletName adds i to the "e_wallet_name" field.
func (pedu *PaymentEWalletDetailUpdate) AddEWalletName(i int32) *PaymentEWalletDetailUpdate {
	pedu.mutation.AddEWalletName(i)
	return pedu
}

// ClearEWalletName clears the value of the "e_wallet_name" field.
func (pedu *PaymentEWalletDetailUpdate) ClearEWalletName() *PaymentEWalletDetailUpdate {
	pedu.mutation.ClearEWalletName()
	return pedu
}

// SetMerchantUserAccountPhoneNumber sets the "merchant_user_account_phone_number" field.
func (pedu *PaymentEWalletDetailUpdate) SetMerchantUserAccountPhoneNumber(s string) *PaymentEWalletDetailUpdate {
	pedu.mutation.SetMerchantUserAccountPhoneNumber(s)
	return pedu
}

// SetNillableMerchantUserAccountPhoneNumber sets the "merchant_user_account_phone_number" field if the given value is not nil.
func (pedu *PaymentEWalletDetailUpdate) SetNillableMerchantUserAccountPhoneNumber(s *string) *PaymentEWalletDetailUpdate {
	if s != nil {
		pedu.SetMerchantUserAccountPhoneNumber(*s)
	}
	return pedu
}

// ClearMerchantUserAccountPhoneNumber clears the value of the "merchant_user_account_phone_number" field.
func (pedu *PaymentEWalletDetailUpdate) ClearMerchantUserAccountPhoneNumber() *PaymentEWalletDetailUpdate {
	pedu.mutation.ClearMerchantUserAccountPhoneNumber()
	return pedu
}

// SetMerchantUserAccountName sets the "merchant_user_account_name" field.
func (pedu *PaymentEWalletDetailUpdate) SetMerchantUserAccountName(s string) *PaymentEWalletDetailUpdate {
	pedu.mutation.SetMerchantUserAccountName(s)
	return pedu
}

// SetNillableMerchantUserAccountName sets the "merchant_user_account_name" field if the given value is not nil.
func (pedu *PaymentEWalletDetailUpdate) SetNillableMerchantUserAccountName(s *string) *PaymentEWalletDetailUpdate {
	if s != nil {
		pedu.SetMerchantUserAccountName(*s)
	}
	return pedu
}

// ClearMerchantUserAccountName clears the value of the "merchant_user_account_name" field.
func (pedu *PaymentEWalletDetailUpdate) ClearMerchantUserAccountName() *PaymentEWalletDetailUpdate {
	pedu.mutation.ClearMerchantUserAccountName()
	return pedu
}

// SetSystemAccountPhoneNumber sets the "system_account_phone_number" field.
func (pedu *PaymentEWalletDetailUpdate) SetSystemAccountPhoneNumber(s string) *PaymentEWalletDetailUpdate {
	pedu.mutation.SetSystemAccountPhoneNumber(s)
	return pedu
}

// SetNillableSystemAccountPhoneNumber sets the "system_account_phone_number" field if the given value is not nil.
func (pedu *PaymentEWalletDetailUpdate) SetNillableSystemAccountPhoneNumber(s *string) *PaymentEWalletDetailUpdate {
	if s != nil {
		pedu.SetSystemAccountPhoneNumber(*s)
	}
	return pedu
}

// ClearSystemAccountPhoneNumber clears the value of the "system_account_phone_number" field.
func (pedu *PaymentEWalletDetailUpdate) ClearSystemAccountPhoneNumber() *PaymentEWalletDetailUpdate {
	pedu.mutation.ClearSystemAccountPhoneNumber()
	return pedu
}

// SetSystemAccountName sets the "system_account_name" field.
func (pedu *PaymentEWalletDetailUpdate) SetSystemAccountName(s string) *PaymentEWalletDetailUpdate {
	pedu.mutation.SetSystemAccountName(s)
	return pedu
}

// SetNillableSystemAccountName sets the "system_account_name" field if the given value is not nil.
func (pedu *PaymentEWalletDetailUpdate) SetNillableSystemAccountName(s *string) *PaymentEWalletDetailUpdate {
	if s != nil {
		pedu.SetSystemAccountName(*s)
	}
	return pedu
}

// ClearSystemAccountName clears the value of the "system_account_name" field.
func (pedu *PaymentEWalletDetailUpdate) ClearSystemAccountName() *PaymentEWalletDetailUpdate {
	pedu.mutation.ClearSystemAccountName()
	return pedu
}

// SetAmount sets the "amount" field.
func (pedu *PaymentEWalletDetailUpdate) SetAmount(u uint64) *PaymentEWalletDetailUpdate {
	pedu.mutation.ResetAmount()
	pedu.mutation.SetAmount(u)
	return pedu
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (pedu *PaymentEWalletDetailUpdate) SetNillableAmount(u *uint64) *PaymentEWalletDetailUpdate {
	if u != nil {
		pedu.SetAmount(*u)
	}
	return pedu
}

// AddAmount adds u to the "amount" field.
func (pedu *PaymentEWalletDetailUpdate) AddAmount(u uint64) *PaymentEWalletDetailUpdate {
	pedu.mutation.AddAmount(u)
	return pedu
}

// ClearAmount clears the value of the "amount" field.
func (pedu *PaymentEWalletDetailUpdate) ClearAmount() *PaymentEWalletDetailUpdate {
	pedu.mutation.ClearAmount()
	return pedu
}

// SetFee sets the "fee" field.
func (pedu *PaymentEWalletDetailUpdate) SetFee(u uint64) *PaymentEWalletDetailUpdate {
	pedu.mutation.ResetFee()
	pedu.mutation.SetFee(u)
	return pedu
}

// SetNillableFee sets the "fee" field if the given value is not nil.
func (pedu *PaymentEWalletDetailUpdate) SetNillableFee(u *uint64) *PaymentEWalletDetailUpdate {
	if u != nil {
		pedu.SetFee(*u)
	}
	return pedu
}

// AddFee adds u to the "fee" field.
func (pedu *PaymentEWalletDetailUpdate) AddFee(u uint64) *PaymentEWalletDetailUpdate {
	pedu.mutation.AddFee(u)
	return pedu
}

// ClearFee clears the value of the "fee" field.
func (pedu *PaymentEWalletDetailUpdate) ClearFee() *PaymentEWalletDetailUpdate {
	pedu.mutation.ClearFee()
	return pedu
}

// SetNote sets the "note" field.
func (pedu *PaymentEWalletDetailUpdate) SetNote(s string) *PaymentEWalletDetailUpdate {
	pedu.mutation.SetNote(s)
	return pedu
}

// SetNillableNote sets the "note" field if the given value is not nil.
func (pedu *PaymentEWalletDetailUpdate) SetNillableNote(s *string) *PaymentEWalletDetailUpdate {
	if s != nil {
		pedu.SetNote(*s)
	}
	return pedu
}

// ClearNote clears the value of the "note" field.
func (pedu *PaymentEWalletDetailUpdate) ClearNote() *PaymentEWalletDetailUpdate {
	pedu.mutation.ClearNote()
	return pedu
}

// SetImageURL sets the "image_url" field.
func (pedu *PaymentEWalletDetailUpdate) SetImageURL(s string) *PaymentEWalletDetailUpdate {
	pedu.mutation.SetImageURL(s)
	return pedu
}

// SetNillableImageURL sets the "image_url" field if the given value is not nil.
func (pedu *PaymentEWalletDetailUpdate) SetNillableImageURL(s *string) *PaymentEWalletDetailUpdate {
	if s != nil {
		pedu.SetImageURL(*s)
	}
	return pedu
}

// ClearImageURL clears the value of the "image_url" field.
func (pedu *PaymentEWalletDetailUpdate) ClearImageURL() *PaymentEWalletDetailUpdate {
	pedu.mutation.ClearImageURL()
	return pedu
}

// SetTxID sets the "tx_id" field.
func (pedu *PaymentEWalletDetailUpdate) SetTxID(s string) *PaymentEWalletDetailUpdate {
	pedu.mutation.SetTxID(s)
	return pedu
}

// SetNillableTxID sets the "tx_id" field if the given value is not nil.
func (pedu *PaymentEWalletDetailUpdate) SetNillableTxID(s *string) *PaymentEWalletDetailUpdate {
	if s != nil {
		pedu.SetTxID(*s)
	}
	return pedu
}

// ClearTxID clears the value of the "tx_id" field.
func (pedu *PaymentEWalletDetailUpdate) ClearTxID() *PaymentEWalletDetailUpdate {
	pedu.mutation.ClearTxID()
	return pedu
}

// SetPaymentID sets the "payment" edge to the Payment entity by ID.
func (pedu *PaymentEWalletDetailUpdate) SetPaymentID(id int64) *PaymentEWalletDetailUpdate {
	pedu.mutation.SetPaymentID(id)
	return pedu
}

// SetPayment sets the "payment" edge to the Payment entity.
func (pedu *PaymentEWalletDetailUpdate) SetPayment(p *Payment) *PaymentEWalletDetailUpdate {
	return pedu.SetPaymentID(p.ID)
}

// Mutation returns the PaymentEWalletDetailMutation object of the builder.
func (pedu *PaymentEWalletDetailUpdate) Mutation() *PaymentEWalletDetailMutation {
	return pedu.mutation
}

// ClearPayment clears the "payment" edge to the Payment entity.
func (pedu *PaymentEWalletDetailUpdate) ClearPayment() *PaymentEWalletDetailUpdate {
	pedu.mutation.ClearPayment()
	return pedu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pedu *PaymentEWalletDetailUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	pedu.defaults()
	if len(pedu.hooks) == 0 {
		if err = pedu.check(); err != nil {
			return 0, err
		}
		affected, err = pedu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PaymentEWalletDetailMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pedu.check(); err != nil {
				return 0, err
			}
			pedu.mutation = mutation
			affected, err = pedu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pedu.hooks) - 1; i >= 0; i-- {
			if pedu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pedu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pedu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pedu *PaymentEWalletDetailUpdate) SaveX(ctx context.Context) int {
	affected, err := pedu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pedu *PaymentEWalletDetailUpdate) Exec(ctx context.Context) error {
	_, err := pedu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pedu *PaymentEWalletDetailUpdate) ExecX(ctx context.Context) {
	if err := pedu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pedu *PaymentEWalletDetailUpdate) defaults() {
	if _, ok := pedu.mutation.UpdatedAt(); !ok {
		v := paymentewalletdetail.UpdateDefaultUpdatedAt()
		pedu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pedu *PaymentEWalletDetailUpdate) check() error {
	if v, ok := pedu.mutation.CreatedBy(); ok {
		if err := paymentewalletdetail.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "PaymentEWalletDetail.created_by": %w`, err)}
		}
	}
	if v, ok := pedu.mutation.UpdatedBy(); ok {
		if err := paymentewalletdetail.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "PaymentEWalletDetail.updated_by": %w`, err)}
		}
	}
	if v, ok := pedu.mutation.EWalletName(); ok {
		if err := paymentewalletdetail.EWalletNameValidator(v); err != nil {
			return &ValidationError{Name: "e_wallet_name", err: fmt.Errorf(`ent: validator failed for field "PaymentEWalletDetail.e_wallet_name": %w`, err)}
		}
	}
	if _, ok := pedu.mutation.PaymentID(); pedu.mutation.PaymentCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "PaymentEWalletDetail.payment"`)
	}
	return nil
}

func (pedu *PaymentEWalletDetailUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   paymentewalletdetail.Table,
			Columns: paymentewalletdetail.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: paymentewalletdetail.FieldID,
			},
		},
	}
	if ps := pedu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pedu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: paymentewalletdetail.FieldCreatedAt,
		})
	}
	if value, ok := pedu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: paymentewalletdetail.FieldUpdatedAt,
		})
	}
	if value, ok := pedu.mutation.CreatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: paymentewalletdetail.FieldCreatedBy,
		})
	}
	if value, ok := pedu.mutation.UpdatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: paymentewalletdetail.FieldUpdatedBy,
		})
	}
	if value, ok := pedu.mutation.PaymentCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: paymentewalletdetail.FieldPaymentCode,
		})
	}
	if pedu.mutation.PaymentCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: paymentewalletdetail.FieldPaymentCode,
		})
	}
	if value, ok := pedu.mutation.MerchantUserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: paymentewalletdetail.FieldMerchantUserID,
		})
	}
	if value, ok := pedu.mutation.AddedMerchantUserID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: paymentewalletdetail.FieldMerchantUserID,
		})
	}
	if pedu.mutation.MerchantUserIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: paymentewalletdetail.FieldMerchantUserID,
		})
	}
	if value, ok := pedu.mutation.EWalletName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: paymentewalletdetail.FieldEWalletName,
		})
	}
	if value, ok := pedu.mutation.AddedEWalletName(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: paymentewalletdetail.FieldEWalletName,
		})
	}
	if pedu.mutation.EWalletNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: paymentewalletdetail.FieldEWalletName,
		})
	}
	if value, ok := pedu.mutation.MerchantUserAccountPhoneNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: paymentewalletdetail.FieldMerchantUserAccountPhoneNumber,
		})
	}
	if pedu.mutation.MerchantUserAccountPhoneNumberCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: paymentewalletdetail.FieldMerchantUserAccountPhoneNumber,
		})
	}
	if value, ok := pedu.mutation.MerchantUserAccountName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: paymentewalletdetail.FieldMerchantUserAccountName,
		})
	}
	if pedu.mutation.MerchantUserAccountNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: paymentewalletdetail.FieldMerchantUserAccountName,
		})
	}
	if value, ok := pedu.mutation.SystemAccountPhoneNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: paymentewalletdetail.FieldSystemAccountPhoneNumber,
		})
	}
	if pedu.mutation.SystemAccountPhoneNumberCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: paymentewalletdetail.FieldSystemAccountPhoneNumber,
		})
	}
	if value, ok := pedu.mutation.SystemAccountName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: paymentewalletdetail.FieldSystemAccountName,
		})
	}
	if pedu.mutation.SystemAccountNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: paymentewalletdetail.FieldSystemAccountName,
		})
	}
	if value, ok := pedu.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: paymentewalletdetail.FieldAmount,
		})
	}
	if value, ok := pedu.mutation.AddedAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: paymentewalletdetail.FieldAmount,
		})
	}
	if pedu.mutation.AmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: paymentewalletdetail.FieldAmount,
		})
	}
	if value, ok := pedu.mutation.Fee(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: paymentewalletdetail.FieldFee,
		})
	}
	if value, ok := pedu.mutation.AddedFee(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: paymentewalletdetail.FieldFee,
		})
	}
	if pedu.mutation.FeeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: paymentewalletdetail.FieldFee,
		})
	}
	if value, ok := pedu.mutation.Note(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: paymentewalletdetail.FieldNote,
		})
	}
	if pedu.mutation.NoteCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: paymentewalletdetail.FieldNote,
		})
	}
	if value, ok := pedu.mutation.ImageURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: paymentewalletdetail.FieldImageURL,
		})
	}
	if pedu.mutation.ImageURLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: paymentewalletdetail.FieldImageURL,
		})
	}
	if value, ok := pedu.mutation.TxID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: paymentewalletdetail.FieldTxID,
		})
	}
	if pedu.mutation.TxIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: paymentewalletdetail.FieldTxID,
		})
	}
	if pedu.mutation.PaymentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   paymentewalletdetail.PaymentTable,
			Columns: []string{paymentewalletdetail.PaymentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: payment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pedu.mutation.PaymentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   paymentewalletdetail.PaymentTable,
			Columns: []string{paymentewalletdetail.PaymentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: payment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pedu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{paymentewalletdetail.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// PaymentEWalletDetailUpdateOne is the builder for updating a single PaymentEWalletDetail entity.
type PaymentEWalletDetailUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PaymentEWalletDetailMutation
}

// SetCreatedAt sets the "created_at" field.
func (peduo *PaymentEWalletDetailUpdateOne) SetCreatedAt(t time.Time) *PaymentEWalletDetailUpdateOne {
	peduo.mutation.SetCreatedAt(t)
	return peduo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (peduo *PaymentEWalletDetailUpdateOne) SetNillableCreatedAt(t *time.Time) *PaymentEWalletDetailUpdateOne {
	if t != nil {
		peduo.SetCreatedAt(*t)
	}
	return peduo
}

// SetUpdatedAt sets the "updated_at" field.
func (peduo *PaymentEWalletDetailUpdateOne) SetUpdatedAt(t time.Time) *PaymentEWalletDetailUpdateOne {
	peduo.mutation.SetUpdatedAt(t)
	return peduo
}

// SetCreatedBy sets the "created_by" field.
func (peduo *PaymentEWalletDetailUpdateOne) SetCreatedBy(s string) *PaymentEWalletDetailUpdateOne {
	peduo.mutation.SetCreatedBy(s)
	return peduo
}

// SetUpdatedBy sets the "updated_by" field.
func (peduo *PaymentEWalletDetailUpdateOne) SetUpdatedBy(s string) *PaymentEWalletDetailUpdateOne {
	peduo.mutation.SetUpdatedBy(s)
	return peduo
}

// SetPaymentCode sets the "payment_code" field.
func (peduo *PaymentEWalletDetailUpdateOne) SetPaymentCode(s string) *PaymentEWalletDetailUpdateOne {
	peduo.mutation.SetPaymentCode(s)
	return peduo
}

// SetNillablePaymentCode sets the "payment_code" field if the given value is not nil.
func (peduo *PaymentEWalletDetailUpdateOne) SetNillablePaymentCode(s *string) *PaymentEWalletDetailUpdateOne {
	if s != nil {
		peduo.SetPaymentCode(*s)
	}
	return peduo
}

// ClearPaymentCode clears the value of the "payment_code" field.
func (peduo *PaymentEWalletDetailUpdateOne) ClearPaymentCode() *PaymentEWalletDetailUpdateOne {
	peduo.mutation.ClearPaymentCode()
	return peduo
}

// SetMerchantUserID sets the "merchant_user_id" field.
func (peduo *PaymentEWalletDetailUpdateOne) SetMerchantUserID(i int64) *PaymentEWalletDetailUpdateOne {
	peduo.mutation.ResetMerchantUserID()
	peduo.mutation.SetMerchantUserID(i)
	return peduo
}

// SetNillableMerchantUserID sets the "merchant_user_id" field if the given value is not nil.
func (peduo *PaymentEWalletDetailUpdateOne) SetNillableMerchantUserID(i *int64) *PaymentEWalletDetailUpdateOne {
	if i != nil {
		peduo.SetMerchantUserID(*i)
	}
	return peduo
}

// AddMerchantUserID adds i to the "merchant_user_id" field.
func (peduo *PaymentEWalletDetailUpdateOne) AddMerchantUserID(i int64) *PaymentEWalletDetailUpdateOne {
	peduo.mutation.AddMerchantUserID(i)
	return peduo
}

// ClearMerchantUserID clears the value of the "merchant_user_id" field.
func (peduo *PaymentEWalletDetailUpdateOne) ClearMerchantUserID() *PaymentEWalletDetailUpdateOne {
	peduo.mutation.ClearMerchantUserID()
	return peduo
}

// SetEWalletName sets the "e_wallet_name" field.
func (peduo *PaymentEWalletDetailUpdateOne) SetEWalletName(i int32) *PaymentEWalletDetailUpdateOne {
	peduo.mutation.ResetEWalletName()
	peduo.mutation.SetEWalletName(i)
	return peduo
}

// SetNillableEWalletName sets the "e_wallet_name" field if the given value is not nil.
func (peduo *PaymentEWalletDetailUpdateOne) SetNillableEWalletName(i *int32) *PaymentEWalletDetailUpdateOne {
	if i != nil {
		peduo.SetEWalletName(*i)
	}
	return peduo
}

// AddEWalletName adds i to the "e_wallet_name" field.
func (peduo *PaymentEWalletDetailUpdateOne) AddEWalletName(i int32) *PaymentEWalletDetailUpdateOne {
	peduo.mutation.AddEWalletName(i)
	return peduo
}

// ClearEWalletName clears the value of the "e_wallet_name" field.
func (peduo *PaymentEWalletDetailUpdateOne) ClearEWalletName() *PaymentEWalletDetailUpdateOne {
	peduo.mutation.ClearEWalletName()
	return peduo
}

// SetMerchantUserAccountPhoneNumber sets the "merchant_user_account_phone_number" field.
func (peduo *PaymentEWalletDetailUpdateOne) SetMerchantUserAccountPhoneNumber(s string) *PaymentEWalletDetailUpdateOne {
	peduo.mutation.SetMerchantUserAccountPhoneNumber(s)
	return peduo
}

// SetNillableMerchantUserAccountPhoneNumber sets the "merchant_user_account_phone_number" field if the given value is not nil.
func (peduo *PaymentEWalletDetailUpdateOne) SetNillableMerchantUserAccountPhoneNumber(s *string) *PaymentEWalletDetailUpdateOne {
	if s != nil {
		peduo.SetMerchantUserAccountPhoneNumber(*s)
	}
	return peduo
}

// ClearMerchantUserAccountPhoneNumber clears the value of the "merchant_user_account_phone_number" field.
func (peduo *PaymentEWalletDetailUpdateOne) ClearMerchantUserAccountPhoneNumber() *PaymentEWalletDetailUpdateOne {
	peduo.mutation.ClearMerchantUserAccountPhoneNumber()
	return peduo
}

// SetMerchantUserAccountName sets the "merchant_user_account_name" field.
func (peduo *PaymentEWalletDetailUpdateOne) SetMerchantUserAccountName(s string) *PaymentEWalletDetailUpdateOne {
	peduo.mutation.SetMerchantUserAccountName(s)
	return peduo
}

// SetNillableMerchantUserAccountName sets the "merchant_user_account_name" field if the given value is not nil.
func (peduo *PaymentEWalletDetailUpdateOne) SetNillableMerchantUserAccountName(s *string) *PaymentEWalletDetailUpdateOne {
	if s != nil {
		peduo.SetMerchantUserAccountName(*s)
	}
	return peduo
}

// ClearMerchantUserAccountName clears the value of the "merchant_user_account_name" field.
func (peduo *PaymentEWalletDetailUpdateOne) ClearMerchantUserAccountName() *PaymentEWalletDetailUpdateOne {
	peduo.mutation.ClearMerchantUserAccountName()
	return peduo
}

// SetSystemAccountPhoneNumber sets the "system_account_phone_number" field.
func (peduo *PaymentEWalletDetailUpdateOne) SetSystemAccountPhoneNumber(s string) *PaymentEWalletDetailUpdateOne {
	peduo.mutation.SetSystemAccountPhoneNumber(s)
	return peduo
}

// SetNillableSystemAccountPhoneNumber sets the "system_account_phone_number" field if the given value is not nil.
func (peduo *PaymentEWalletDetailUpdateOne) SetNillableSystemAccountPhoneNumber(s *string) *PaymentEWalletDetailUpdateOne {
	if s != nil {
		peduo.SetSystemAccountPhoneNumber(*s)
	}
	return peduo
}

// ClearSystemAccountPhoneNumber clears the value of the "system_account_phone_number" field.
func (peduo *PaymentEWalletDetailUpdateOne) ClearSystemAccountPhoneNumber() *PaymentEWalletDetailUpdateOne {
	peduo.mutation.ClearSystemAccountPhoneNumber()
	return peduo
}

// SetSystemAccountName sets the "system_account_name" field.
func (peduo *PaymentEWalletDetailUpdateOne) SetSystemAccountName(s string) *PaymentEWalletDetailUpdateOne {
	peduo.mutation.SetSystemAccountName(s)
	return peduo
}

// SetNillableSystemAccountName sets the "system_account_name" field if the given value is not nil.
func (peduo *PaymentEWalletDetailUpdateOne) SetNillableSystemAccountName(s *string) *PaymentEWalletDetailUpdateOne {
	if s != nil {
		peduo.SetSystemAccountName(*s)
	}
	return peduo
}

// ClearSystemAccountName clears the value of the "system_account_name" field.
func (peduo *PaymentEWalletDetailUpdateOne) ClearSystemAccountName() *PaymentEWalletDetailUpdateOne {
	peduo.mutation.ClearSystemAccountName()
	return peduo
}

// SetAmount sets the "amount" field.
func (peduo *PaymentEWalletDetailUpdateOne) SetAmount(u uint64) *PaymentEWalletDetailUpdateOne {
	peduo.mutation.ResetAmount()
	peduo.mutation.SetAmount(u)
	return peduo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (peduo *PaymentEWalletDetailUpdateOne) SetNillableAmount(u *uint64) *PaymentEWalletDetailUpdateOne {
	if u != nil {
		peduo.SetAmount(*u)
	}
	return peduo
}

// AddAmount adds u to the "amount" field.
func (peduo *PaymentEWalletDetailUpdateOne) AddAmount(u uint64) *PaymentEWalletDetailUpdateOne {
	peduo.mutation.AddAmount(u)
	return peduo
}

// ClearAmount clears the value of the "amount" field.
func (peduo *PaymentEWalletDetailUpdateOne) ClearAmount() *PaymentEWalletDetailUpdateOne {
	peduo.mutation.ClearAmount()
	return peduo
}

// SetFee sets the "fee" field.
func (peduo *PaymentEWalletDetailUpdateOne) SetFee(u uint64) *PaymentEWalletDetailUpdateOne {
	peduo.mutation.ResetFee()
	peduo.mutation.SetFee(u)
	return peduo
}

// SetNillableFee sets the "fee" field if the given value is not nil.
func (peduo *PaymentEWalletDetailUpdateOne) SetNillableFee(u *uint64) *PaymentEWalletDetailUpdateOne {
	if u != nil {
		peduo.SetFee(*u)
	}
	return peduo
}

// AddFee adds u to the "fee" field.
func (peduo *PaymentEWalletDetailUpdateOne) AddFee(u uint64) *PaymentEWalletDetailUpdateOne {
	peduo.mutation.AddFee(u)
	return peduo
}

// ClearFee clears the value of the "fee" field.
func (peduo *PaymentEWalletDetailUpdateOne) ClearFee() *PaymentEWalletDetailUpdateOne {
	peduo.mutation.ClearFee()
	return peduo
}

// SetNote sets the "note" field.
func (peduo *PaymentEWalletDetailUpdateOne) SetNote(s string) *PaymentEWalletDetailUpdateOne {
	peduo.mutation.SetNote(s)
	return peduo
}

// SetNillableNote sets the "note" field if the given value is not nil.
func (peduo *PaymentEWalletDetailUpdateOne) SetNillableNote(s *string) *PaymentEWalletDetailUpdateOne {
	if s != nil {
		peduo.SetNote(*s)
	}
	return peduo
}

// ClearNote clears the value of the "note" field.
func (peduo *PaymentEWalletDetailUpdateOne) ClearNote() *PaymentEWalletDetailUpdateOne {
	peduo.mutation.ClearNote()
	return peduo
}

// SetImageURL sets the "image_url" field.
func (peduo *PaymentEWalletDetailUpdateOne) SetImageURL(s string) *PaymentEWalletDetailUpdateOne {
	peduo.mutation.SetImageURL(s)
	return peduo
}

// SetNillableImageURL sets the "image_url" field if the given value is not nil.
func (peduo *PaymentEWalletDetailUpdateOne) SetNillableImageURL(s *string) *PaymentEWalletDetailUpdateOne {
	if s != nil {
		peduo.SetImageURL(*s)
	}
	return peduo
}

// ClearImageURL clears the value of the "image_url" field.
func (peduo *PaymentEWalletDetailUpdateOne) ClearImageURL() *PaymentEWalletDetailUpdateOne {
	peduo.mutation.ClearImageURL()
	return peduo
}

// SetTxID sets the "tx_id" field.
func (peduo *PaymentEWalletDetailUpdateOne) SetTxID(s string) *PaymentEWalletDetailUpdateOne {
	peduo.mutation.SetTxID(s)
	return peduo
}

// SetNillableTxID sets the "tx_id" field if the given value is not nil.
func (peduo *PaymentEWalletDetailUpdateOne) SetNillableTxID(s *string) *PaymentEWalletDetailUpdateOne {
	if s != nil {
		peduo.SetTxID(*s)
	}
	return peduo
}

// ClearTxID clears the value of the "tx_id" field.
func (peduo *PaymentEWalletDetailUpdateOne) ClearTxID() *PaymentEWalletDetailUpdateOne {
	peduo.mutation.ClearTxID()
	return peduo
}

// SetPaymentID sets the "payment" edge to the Payment entity by ID.
func (peduo *PaymentEWalletDetailUpdateOne) SetPaymentID(id int64) *PaymentEWalletDetailUpdateOne {
	peduo.mutation.SetPaymentID(id)
	return peduo
}

// SetPayment sets the "payment" edge to the Payment entity.
func (peduo *PaymentEWalletDetailUpdateOne) SetPayment(p *Payment) *PaymentEWalletDetailUpdateOne {
	return peduo.SetPaymentID(p.ID)
}

// Mutation returns the PaymentEWalletDetailMutation object of the builder.
func (peduo *PaymentEWalletDetailUpdateOne) Mutation() *PaymentEWalletDetailMutation {
	return peduo.mutation
}

// ClearPayment clears the "payment" edge to the Payment entity.
func (peduo *PaymentEWalletDetailUpdateOne) ClearPayment() *PaymentEWalletDetailUpdateOne {
	peduo.mutation.ClearPayment()
	return peduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (peduo *PaymentEWalletDetailUpdateOne) Select(field string, fields ...string) *PaymentEWalletDetailUpdateOne {
	peduo.fields = append([]string{field}, fields...)
	return peduo
}

// Save executes the query and returns the updated PaymentEWalletDetail entity.
func (peduo *PaymentEWalletDetailUpdateOne) Save(ctx context.Context) (*PaymentEWalletDetail, error) {
	var (
		err  error
		node *PaymentEWalletDetail
	)
	peduo.defaults()
	if len(peduo.hooks) == 0 {
		if err = peduo.check(); err != nil {
			return nil, err
		}
		node, err = peduo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PaymentEWalletDetailMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = peduo.check(); err != nil {
				return nil, err
			}
			peduo.mutation = mutation
			node, err = peduo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(peduo.hooks) - 1; i >= 0; i-- {
			if peduo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = peduo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, peduo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (peduo *PaymentEWalletDetailUpdateOne) SaveX(ctx context.Context) *PaymentEWalletDetail {
	node, err := peduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (peduo *PaymentEWalletDetailUpdateOne) Exec(ctx context.Context) error {
	_, err := peduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (peduo *PaymentEWalletDetailUpdateOne) ExecX(ctx context.Context) {
	if err := peduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (peduo *PaymentEWalletDetailUpdateOne) defaults() {
	if _, ok := peduo.mutation.UpdatedAt(); !ok {
		v := paymentewalletdetail.UpdateDefaultUpdatedAt()
		peduo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (peduo *PaymentEWalletDetailUpdateOne) check() error {
	if v, ok := peduo.mutation.CreatedBy(); ok {
		if err := paymentewalletdetail.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "PaymentEWalletDetail.created_by": %w`, err)}
		}
	}
	if v, ok := peduo.mutation.UpdatedBy(); ok {
		if err := paymentewalletdetail.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "PaymentEWalletDetail.updated_by": %w`, err)}
		}
	}
	if v, ok := peduo.mutation.EWalletName(); ok {
		if err := paymentewalletdetail.EWalletNameValidator(v); err != nil {
			return &ValidationError{Name: "e_wallet_name", err: fmt.Errorf(`ent: validator failed for field "PaymentEWalletDetail.e_wallet_name": %w`, err)}
		}
	}
	if _, ok := peduo.mutation.PaymentID(); peduo.mutation.PaymentCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "PaymentEWalletDetail.payment"`)
	}
	return nil
}

func (peduo *PaymentEWalletDetailUpdateOne) sqlSave(ctx context.Context) (_node *PaymentEWalletDetail, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   paymentewalletdetail.Table,
			Columns: paymentewalletdetail.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: paymentewalletdetail.FieldID,
			},
		},
	}
	id, ok := peduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PaymentEWalletDetail.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := peduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, paymentewalletdetail.FieldID)
		for _, f := range fields {
			if !paymentewalletdetail.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != paymentewalletdetail.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := peduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := peduo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: paymentewalletdetail.FieldCreatedAt,
		})
	}
	if value, ok := peduo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: paymentewalletdetail.FieldUpdatedAt,
		})
	}
	if value, ok := peduo.mutation.CreatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: paymentewalletdetail.FieldCreatedBy,
		})
	}
	if value, ok := peduo.mutation.UpdatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: paymentewalletdetail.FieldUpdatedBy,
		})
	}
	if value, ok := peduo.mutation.PaymentCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: paymentewalletdetail.FieldPaymentCode,
		})
	}
	if peduo.mutation.PaymentCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: paymentewalletdetail.FieldPaymentCode,
		})
	}
	if value, ok := peduo.mutation.MerchantUserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: paymentewalletdetail.FieldMerchantUserID,
		})
	}
	if value, ok := peduo.mutation.AddedMerchantUserID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: paymentewalletdetail.FieldMerchantUserID,
		})
	}
	if peduo.mutation.MerchantUserIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: paymentewalletdetail.FieldMerchantUserID,
		})
	}
	if value, ok := peduo.mutation.EWalletName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: paymentewalletdetail.FieldEWalletName,
		})
	}
	if value, ok := peduo.mutation.AddedEWalletName(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: paymentewalletdetail.FieldEWalletName,
		})
	}
	if peduo.mutation.EWalletNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: paymentewalletdetail.FieldEWalletName,
		})
	}
	if value, ok := peduo.mutation.MerchantUserAccountPhoneNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: paymentewalletdetail.FieldMerchantUserAccountPhoneNumber,
		})
	}
	if peduo.mutation.MerchantUserAccountPhoneNumberCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: paymentewalletdetail.FieldMerchantUserAccountPhoneNumber,
		})
	}
	if value, ok := peduo.mutation.MerchantUserAccountName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: paymentewalletdetail.FieldMerchantUserAccountName,
		})
	}
	if peduo.mutation.MerchantUserAccountNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: paymentewalletdetail.FieldMerchantUserAccountName,
		})
	}
	if value, ok := peduo.mutation.SystemAccountPhoneNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: paymentewalletdetail.FieldSystemAccountPhoneNumber,
		})
	}
	if peduo.mutation.SystemAccountPhoneNumberCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: paymentewalletdetail.FieldSystemAccountPhoneNumber,
		})
	}
	if value, ok := peduo.mutation.SystemAccountName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: paymentewalletdetail.FieldSystemAccountName,
		})
	}
	if peduo.mutation.SystemAccountNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: paymentewalletdetail.FieldSystemAccountName,
		})
	}
	if value, ok := peduo.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: paymentewalletdetail.FieldAmount,
		})
	}
	if value, ok := peduo.mutation.AddedAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: paymentewalletdetail.FieldAmount,
		})
	}
	if peduo.mutation.AmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: paymentewalletdetail.FieldAmount,
		})
	}
	if value, ok := peduo.mutation.Fee(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: paymentewalletdetail.FieldFee,
		})
	}
	if value, ok := peduo.mutation.AddedFee(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: paymentewalletdetail.FieldFee,
		})
	}
	if peduo.mutation.FeeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: paymentewalletdetail.FieldFee,
		})
	}
	if value, ok := peduo.mutation.Note(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: paymentewalletdetail.FieldNote,
		})
	}
	if peduo.mutation.NoteCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: paymentewalletdetail.FieldNote,
		})
	}
	if value, ok := peduo.mutation.ImageURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: paymentewalletdetail.FieldImageURL,
		})
	}
	if peduo.mutation.ImageURLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: paymentewalletdetail.FieldImageURL,
		})
	}
	if value, ok := peduo.mutation.TxID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: paymentewalletdetail.FieldTxID,
		})
	}
	if peduo.mutation.TxIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: paymentewalletdetail.FieldTxID,
		})
	}
	if peduo.mutation.PaymentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   paymentewalletdetail.PaymentTable,
			Columns: []string{paymentewalletdetail.PaymentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: payment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := peduo.mutation.PaymentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   paymentewalletdetail.PaymentTable,
			Columns: []string{paymentewalletdetail.PaymentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: payment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PaymentEWalletDetail{config: peduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, peduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{paymentewalletdetail.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
