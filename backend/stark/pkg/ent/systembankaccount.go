// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"gitlab.com/mcuc/monorepo/backend/stark/pkg/ent/systembankaccount"
)

// SystemBankAccount is the model entity for the SystemBankAccount schema.
type SystemBankAccount struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// MerchantID holds the value of the "merchant_id" field.
	MerchantID int64 `json:"merchant_id,omitempty"`
	// Status holds the value of the "status" field.
	Status int32 `json:"status,omitempty"`
	// BankName holds the value of the "bank_name" field.
	BankName int32 `json:"bank_name,omitempty"`
	// AccountNumber holds the value of the "account_number" field.
	AccountNumber string `json:"account_number,omitempty"`
	// AccountName holds the value of the "account_name" field.
	AccountName string `json:"account_name,omitempty"`
	// Branch holds the value of the "branch" field.
	Branch string `json:"branch,omitempty"`
	// Balance holds the value of the "balance" field.
	Balance uint64 `json:"balance,omitempty"`
	// LastUpdatedBalance holds the value of the "last_updated_balance" field.
	LastUpdatedBalance *time.Time `json:"last_updated_balance,omitempty"`
	// DailyBalanceLimit holds the value of the "daily_balance_limit" field.
	DailyBalanceLimit uint64 `json:"daily_balance_limit,omitempty"`
	// DailyUsedAmount holds the value of the "daily_used_amount" field.
	DailyUsedAmount int64 `json:"daily_used_amount,omitempty"`
	// DailyBalance holds the value of the "daily_balance" field.
	DailyBalance uint64 `json:"daily_balance,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SystemBankAccount) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case systembankaccount.FieldID, systembankaccount.FieldMerchantID, systembankaccount.FieldStatus, systembankaccount.FieldBankName, systembankaccount.FieldBalance, systembankaccount.FieldDailyBalanceLimit, systembankaccount.FieldDailyUsedAmount, systembankaccount.FieldDailyBalance:
			values[i] = new(sql.NullInt64)
		case systembankaccount.FieldCreatedBy, systembankaccount.FieldUpdatedBy, systembankaccount.FieldAccountNumber, systembankaccount.FieldAccountName, systembankaccount.FieldBranch:
			values[i] = new(sql.NullString)
		case systembankaccount.FieldCreatedAt, systembankaccount.FieldUpdatedAt, systembankaccount.FieldLastUpdatedBalance:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type SystemBankAccount", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SystemBankAccount fields.
func (sba *SystemBankAccount) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case systembankaccount.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sba.ID = int64(value.Int64)
		case systembankaccount.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				sba.CreatedAt = value.Time
			}
		case systembankaccount.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				sba.UpdatedAt = value.Time
			}
		case systembankaccount.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				sba.CreatedBy = value.String
			}
		case systembankaccount.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				sba.UpdatedBy = value.String
			}
		case systembankaccount.FieldMerchantID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field merchant_id", values[i])
			} else if value.Valid {
				sba.MerchantID = value.Int64
			}
		case systembankaccount.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				sba.Status = int32(value.Int64)
			}
		case systembankaccount.FieldBankName:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field bank_name", values[i])
			} else if value.Valid {
				sba.BankName = int32(value.Int64)
			}
		case systembankaccount.FieldAccountNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field account_number", values[i])
			} else if value.Valid {
				sba.AccountNumber = value.String
			}
		case systembankaccount.FieldAccountName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field account_name", values[i])
			} else if value.Valid {
				sba.AccountName = value.String
			}
		case systembankaccount.FieldBranch:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field branch", values[i])
			} else if value.Valid {
				sba.Branch = value.String
			}
		case systembankaccount.FieldBalance:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field balance", values[i])
			} else if value.Valid {
				sba.Balance = uint64(value.Int64)
			}
		case systembankaccount.FieldLastUpdatedBalance:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_updated_balance", values[i])
			} else if value.Valid {
				sba.LastUpdatedBalance = new(time.Time)
				*sba.LastUpdatedBalance = value.Time
			}
		case systembankaccount.FieldDailyBalanceLimit:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field daily_balance_limit", values[i])
			} else if value.Valid {
				sba.DailyBalanceLimit = uint64(value.Int64)
			}
		case systembankaccount.FieldDailyUsedAmount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field daily_used_amount", values[i])
			} else if value.Valid {
				sba.DailyUsedAmount = value.Int64
			}
		case systembankaccount.FieldDailyBalance:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field daily_balance", values[i])
			} else if value.Valid {
				sba.DailyBalance = uint64(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this SystemBankAccount.
// Note that you need to call SystemBankAccount.Unwrap() before calling this method if this SystemBankAccount
// was returned from a transaction, and the transaction was committed or rolled back.
func (sba *SystemBankAccount) Update() *SystemBankAccountUpdateOne {
	return (&SystemBankAccountClient{config: sba.config}).UpdateOne(sba)
}

// Unwrap unwraps the SystemBankAccount entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sba *SystemBankAccount) Unwrap() *SystemBankAccount {
	tx, ok := sba.config.driver.(*txDriver)
	if !ok {
		panic("ent: SystemBankAccount is not a transactional entity")
	}
	sba.config.driver = tx.drv
	return sba
}

// String implements the fmt.Stringer.
func (sba *SystemBankAccount) String() string {
	var builder strings.Builder
	builder.WriteString("SystemBankAccount(")
	builder.WriteString(fmt.Sprintf("id=%v", sba.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(sba.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(sba.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", created_by=")
	builder.WriteString(sba.CreatedBy)
	builder.WriteString(", updated_by=")
	builder.WriteString(sba.UpdatedBy)
	builder.WriteString(", merchant_id=")
	builder.WriteString(fmt.Sprintf("%v", sba.MerchantID))
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", sba.Status))
	builder.WriteString(", bank_name=")
	builder.WriteString(fmt.Sprintf("%v", sba.BankName))
	builder.WriteString(", account_number=")
	builder.WriteString(sba.AccountNumber)
	builder.WriteString(", account_name=")
	builder.WriteString(sba.AccountName)
	builder.WriteString(", branch=")
	builder.WriteString(sba.Branch)
	builder.WriteString(", balance=")
	builder.WriteString(fmt.Sprintf("%v", sba.Balance))
	if v := sba.LastUpdatedBalance; v != nil {
		builder.WriteString(", last_updated_balance=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", daily_balance_limit=")
	builder.WriteString(fmt.Sprintf("%v", sba.DailyBalanceLimit))
	builder.WriteString(", daily_used_amount=")
	builder.WriteString(fmt.Sprintf("%v", sba.DailyUsedAmount))
	builder.WriteString(", daily_balance=")
	builder.WriteString(fmt.Sprintf("%v", sba.DailyBalance))
	builder.WriteByte(')')
	return builder.String()
}

// SystemBankAccounts is a parsable slice of SystemBankAccount.
type SystemBankAccounts []*SystemBankAccount

func (sba SystemBankAccounts) config(cfg config) {
	for _i := range sba {
		sba[_i].config = cfg
	}
}
