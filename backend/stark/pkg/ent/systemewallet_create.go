// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"gitlab.com/mcuc/monorepo/backend/stark/pkg/ent/systemewallet"
)

// SystemEWalletCreate is the builder for creating a SystemEWallet entity.
type SystemEWalletCreate struct {
	config
	mutation *SystemEWalletMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (sec *SystemEWalletCreate) SetCreatedAt(t time.Time) *SystemEWalletCreate {
	sec.mutation.SetCreatedAt(t)
	return sec
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sec *SystemEWalletCreate) SetNillableCreatedAt(t *time.Time) *SystemEWalletCreate {
	if t != nil {
		sec.SetCreatedAt(*t)
	}
	return sec
}

// SetUpdatedAt sets the "updated_at" field.
func (sec *SystemEWalletCreate) SetUpdatedAt(t time.Time) *SystemEWalletCreate {
	sec.mutation.SetUpdatedAt(t)
	return sec
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sec *SystemEWalletCreate) SetNillableUpdatedAt(t *time.Time) *SystemEWalletCreate {
	if t != nil {
		sec.SetUpdatedAt(*t)
	}
	return sec
}

// SetCreatedBy sets the "created_by" field.
func (sec *SystemEWalletCreate) SetCreatedBy(s string) *SystemEWalletCreate {
	sec.mutation.SetCreatedBy(s)
	return sec
}

// SetUpdatedBy sets the "updated_by" field.
func (sec *SystemEWalletCreate) SetUpdatedBy(s string) *SystemEWalletCreate {
	sec.mutation.SetUpdatedBy(s)
	return sec
}

// SetEWalletName sets the "e_wallet_name" field.
func (sec *SystemEWalletCreate) SetEWalletName(i int32) *SystemEWalletCreate {
	sec.mutation.SetEWalletName(i)
	return sec
}

// SetNillableEWalletName sets the "e_wallet_name" field if the given value is not nil.
func (sec *SystemEWalletCreate) SetNillableEWalletName(i *int32) *SystemEWalletCreate {
	if i != nil {
		sec.SetEWalletName(*i)
	}
	return sec
}

// SetStatus sets the "status" field.
func (sec *SystemEWalletCreate) SetStatus(i int32) *SystemEWalletCreate {
	sec.mutation.SetStatus(i)
	return sec
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (sec *SystemEWalletCreate) SetNillableStatus(i *int32) *SystemEWalletCreate {
	if i != nil {
		sec.SetStatus(*i)
	}
	return sec
}

// SetMerchantID sets the "merchant_id" field.
func (sec *SystemEWalletCreate) SetMerchantID(i int64) *SystemEWalletCreate {
	sec.mutation.SetMerchantID(i)
	return sec
}

// SetNillableMerchantID sets the "merchant_id" field if the given value is not nil.
func (sec *SystemEWalletCreate) SetNillableMerchantID(i *int64) *SystemEWalletCreate {
	if i != nil {
		sec.SetMerchantID(*i)
	}
	return sec
}

// SetAccountPhoneNumber sets the "account_phone_number" field.
func (sec *SystemEWalletCreate) SetAccountPhoneNumber(s string) *SystemEWalletCreate {
	sec.mutation.SetAccountPhoneNumber(s)
	return sec
}

// SetAccountName sets the "account_name" field.
func (sec *SystemEWalletCreate) SetAccountName(s string) *SystemEWalletCreate {
	sec.mutation.SetAccountName(s)
	return sec
}

// SetBalance sets the "balance" field.
func (sec *SystemEWalletCreate) SetBalance(u uint64) *SystemEWalletCreate {
	sec.mutation.SetBalance(u)
	return sec
}

// SetNillableBalance sets the "balance" field if the given value is not nil.
func (sec *SystemEWalletCreate) SetNillableBalance(u *uint64) *SystemEWalletCreate {
	if u != nil {
		sec.SetBalance(*u)
	}
	return sec
}

// SetDailyBalance sets the "daily_balance" field.
func (sec *SystemEWalletCreate) SetDailyBalance(u uint64) *SystemEWalletCreate {
	sec.mutation.SetDailyBalance(u)
	return sec
}

// SetNillableDailyBalance sets the "daily_balance" field if the given value is not nil.
func (sec *SystemEWalletCreate) SetNillableDailyBalance(u *uint64) *SystemEWalletCreate {
	if u != nil {
		sec.SetDailyBalance(*u)
	}
	return sec
}

// SetDailyBalanceLimit sets the "daily_balance_limit" field.
func (sec *SystemEWalletCreate) SetDailyBalanceLimit(u uint64) *SystemEWalletCreate {
	sec.mutation.SetDailyBalanceLimit(u)
	return sec
}

// SetNillableDailyBalanceLimit sets the "daily_balance_limit" field if the given value is not nil.
func (sec *SystemEWalletCreate) SetNillableDailyBalanceLimit(u *uint64) *SystemEWalletCreate {
	if u != nil {
		sec.SetDailyBalanceLimit(*u)
	}
	return sec
}

// SetDailyUsedAmount sets the "daily_used_amount" field.
func (sec *SystemEWalletCreate) SetDailyUsedAmount(i int64) *SystemEWalletCreate {
	sec.mutation.SetDailyUsedAmount(i)
	return sec
}

// SetNillableDailyUsedAmount sets the "daily_used_amount" field if the given value is not nil.
func (sec *SystemEWalletCreate) SetNillableDailyUsedAmount(i *int64) *SystemEWalletCreate {
	if i != nil {
		sec.SetDailyUsedAmount(*i)
	}
	return sec
}

// SetLastUpdatedBalance sets the "last_updated_balance" field.
func (sec *SystemEWalletCreate) SetLastUpdatedBalance(t time.Time) *SystemEWalletCreate {
	sec.mutation.SetLastUpdatedBalance(t)
	return sec
}

// SetNillableLastUpdatedBalance sets the "last_updated_balance" field if the given value is not nil.
func (sec *SystemEWalletCreate) SetNillableLastUpdatedBalance(t *time.Time) *SystemEWalletCreate {
	if t != nil {
		sec.SetLastUpdatedBalance(*t)
	}
	return sec
}

// SetID sets the "id" field.
func (sec *SystemEWalletCreate) SetID(i int64) *SystemEWalletCreate {
	sec.mutation.SetID(i)
	return sec
}

// Mutation returns the SystemEWalletMutation object of the builder.
func (sec *SystemEWalletCreate) Mutation() *SystemEWalletMutation {
	return sec.mutation
}

// Save creates the SystemEWallet in the database.
func (sec *SystemEWalletCreate) Save(ctx context.Context) (*SystemEWallet, error) {
	var (
		err  error
		node *SystemEWallet
	)
	sec.defaults()
	if len(sec.hooks) == 0 {
		if err = sec.check(); err != nil {
			return nil, err
		}
		node, err = sec.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SystemEWalletMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = sec.check(); err != nil {
				return nil, err
			}
			sec.mutation = mutation
			if node, err = sec.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(sec.hooks) - 1; i >= 0; i-- {
			if sec.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = sec.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sec.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (sec *SystemEWalletCreate) SaveX(ctx context.Context) *SystemEWallet {
	v, err := sec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sec *SystemEWalletCreate) Exec(ctx context.Context) error {
	_, err := sec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sec *SystemEWalletCreate) ExecX(ctx context.Context) {
	if err := sec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sec *SystemEWalletCreate) defaults() {
	if _, ok := sec.mutation.CreatedAt(); !ok {
		v := systemewallet.DefaultCreatedAt()
		sec.mutation.SetCreatedAt(v)
	}
	if _, ok := sec.mutation.UpdatedAt(); !ok {
		v := systemewallet.DefaultUpdatedAt()
		sec.mutation.SetUpdatedAt(v)
	}
	if _, ok := sec.mutation.EWalletName(); !ok {
		v := systemewallet.DefaultEWalletName
		sec.mutation.SetEWalletName(v)
	}
	if _, ok := sec.mutation.Status(); !ok {
		v := systemewallet.DefaultStatus
		sec.mutation.SetStatus(v)
	}
	if _, ok := sec.mutation.MerchantID(); !ok {
		v := systemewallet.DefaultMerchantID
		sec.mutation.SetMerchantID(v)
	}
	if _, ok := sec.mutation.Balance(); !ok {
		v := systemewallet.DefaultBalance
		sec.mutation.SetBalance(v)
	}
	if _, ok := sec.mutation.DailyBalance(); !ok {
		v := systemewallet.DefaultDailyBalance
		sec.mutation.SetDailyBalance(v)
	}
	if _, ok := sec.mutation.DailyBalanceLimit(); !ok {
		v := systemewallet.DefaultDailyBalanceLimit
		sec.mutation.SetDailyBalanceLimit(v)
	}
	if _, ok := sec.mutation.DailyUsedAmount(); !ok {
		v := systemewallet.DefaultDailyUsedAmount
		sec.mutation.SetDailyUsedAmount(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sec *SystemEWalletCreate) check() error {
	if _, ok := sec.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "SystemEWallet.created_at"`)}
	}
	if _, ok := sec.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "SystemEWallet.updated_at"`)}
	}
	if _, ok := sec.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent: missing required field "SystemEWallet.created_by"`)}
	}
	if v, ok := sec.mutation.CreatedBy(); ok {
		if err := systemewallet.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "SystemEWallet.created_by": %w`, err)}
		}
	}
	if _, ok := sec.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`ent: missing required field "SystemEWallet.updated_by"`)}
	}
	if v, ok := sec.mutation.UpdatedBy(); ok {
		if err := systemewallet.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "SystemEWallet.updated_by": %w`, err)}
		}
	}
	if _, ok := sec.mutation.EWalletName(); !ok {
		return &ValidationError{Name: "e_wallet_name", err: errors.New(`ent: missing required field "SystemEWallet.e_wallet_name"`)}
	}
	if v, ok := sec.mutation.EWalletName(); ok {
		if err := systemewallet.EWalletNameValidator(v); err != nil {
			return &ValidationError{Name: "e_wallet_name", err: fmt.Errorf(`ent: validator failed for field "SystemEWallet.e_wallet_name": %w`, err)}
		}
	}
	if _, ok := sec.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "SystemEWallet.status"`)}
	}
	if v, ok := sec.mutation.Status(); ok {
		if err := systemewallet.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "SystemEWallet.status": %w`, err)}
		}
	}
	if _, ok := sec.mutation.MerchantID(); !ok {
		return &ValidationError{Name: "merchant_id", err: errors.New(`ent: missing required field "SystemEWallet.merchant_id"`)}
	}
	if v, ok := sec.mutation.MerchantID(); ok {
		if err := systemewallet.MerchantIDValidator(v); err != nil {
			return &ValidationError{Name: "merchant_id", err: fmt.Errorf(`ent: validator failed for field "SystemEWallet.merchant_id": %w`, err)}
		}
	}
	if _, ok := sec.mutation.AccountPhoneNumber(); !ok {
		return &ValidationError{Name: "account_phone_number", err: errors.New(`ent: missing required field "SystemEWallet.account_phone_number"`)}
	}
	if v, ok := sec.mutation.AccountPhoneNumber(); ok {
		if err := systemewallet.AccountPhoneNumberValidator(v); err != nil {
			return &ValidationError{Name: "account_phone_number", err: fmt.Errorf(`ent: validator failed for field "SystemEWallet.account_phone_number": %w`, err)}
		}
	}
	if _, ok := sec.mutation.AccountName(); !ok {
		return &ValidationError{Name: "account_name", err: errors.New(`ent: missing required field "SystemEWallet.account_name"`)}
	}
	if v, ok := sec.mutation.AccountName(); ok {
		if err := systemewallet.AccountNameValidator(v); err != nil {
			return &ValidationError{Name: "account_name", err: fmt.Errorf(`ent: validator failed for field "SystemEWallet.account_name": %w`, err)}
		}
	}
	if _, ok := sec.mutation.Balance(); !ok {
		return &ValidationError{Name: "balance", err: errors.New(`ent: missing required field "SystemEWallet.balance"`)}
	}
	if _, ok := sec.mutation.DailyBalance(); !ok {
		return &ValidationError{Name: "daily_balance", err: errors.New(`ent: missing required field "SystemEWallet.daily_balance"`)}
	}
	if _, ok := sec.mutation.DailyBalanceLimit(); !ok {
		return &ValidationError{Name: "daily_balance_limit", err: errors.New(`ent: missing required field "SystemEWallet.daily_balance_limit"`)}
	}
	if _, ok := sec.mutation.DailyUsedAmount(); !ok {
		return &ValidationError{Name: "daily_used_amount", err: errors.New(`ent: missing required field "SystemEWallet.daily_used_amount"`)}
	}
	return nil
}

func (sec *SystemEWalletCreate) sqlSave(ctx context.Context) (*SystemEWallet, error) {
	_node, _spec := sec.createSpec()
	if err := sqlgraph.CreateNode(ctx, sec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	return _node, nil
}

func (sec *SystemEWalletCreate) createSpec() (*SystemEWallet, *sqlgraph.CreateSpec) {
	var (
		_node = &SystemEWallet{config: sec.config}
		_spec = &sqlgraph.CreateSpec{
			Table: systemewallet.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: systemewallet.FieldID,
			},
		}
	)
	_spec.OnConflict = sec.conflict
	if id, ok := sec.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sec.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: systemewallet.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := sec.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: systemewallet.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := sec.mutation.CreatedBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: systemewallet.FieldCreatedBy,
		})
		_node.CreatedBy = value
	}
	if value, ok := sec.mutation.UpdatedBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: systemewallet.FieldUpdatedBy,
		})
		_node.UpdatedBy = value
	}
	if value, ok := sec.mutation.EWalletName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: systemewallet.FieldEWalletName,
		})
		_node.EWalletName = value
	}
	if value, ok := sec.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: systemewallet.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := sec.mutation.MerchantID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: systemewallet.FieldMerchantID,
		})
		_node.MerchantID = value
	}
	if value, ok := sec.mutation.AccountPhoneNumber(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: systemewallet.FieldAccountPhoneNumber,
		})
		_node.AccountPhoneNumber = value
	}
	if value, ok := sec.mutation.AccountName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: systemewallet.FieldAccountName,
		})
		_node.AccountName = value
	}
	if value, ok := sec.mutation.Balance(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: systemewallet.FieldBalance,
		})
		_node.Balance = value
	}
	if value, ok := sec.mutation.DailyBalance(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: systemewallet.FieldDailyBalance,
		})
		_node.DailyBalance = value
	}
	if value, ok := sec.mutation.DailyBalanceLimit(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: systemewallet.FieldDailyBalanceLimit,
		})
		_node.DailyBalanceLimit = value
	}
	if value, ok := sec.mutation.DailyUsedAmount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: systemewallet.FieldDailyUsedAmount,
		})
		_node.DailyUsedAmount = value
	}
	if value, ok := sec.mutation.LastUpdatedBalance(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: systemewallet.FieldLastUpdatedBalance,
		})
		_node.LastUpdatedBalance = &value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SystemEWallet.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SystemEWalletUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (sec *SystemEWalletCreate) OnConflict(opts ...sql.ConflictOption) *SystemEWalletUpsertOne {
	sec.conflict = opts
	return &SystemEWalletUpsertOne{
		create: sec,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SystemEWallet.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (sec *SystemEWalletCreate) OnConflictColumns(columns ...string) *SystemEWalletUpsertOne {
	sec.conflict = append(sec.conflict, sql.ConflictColumns(columns...))
	return &SystemEWalletUpsertOne{
		create: sec,
	}
}

type (
	// SystemEWalletUpsertOne is the builder for "upsert"-ing
	//  one SystemEWallet node.
	SystemEWalletUpsertOne struct {
		create *SystemEWalletCreate
	}

	// SystemEWalletUpsert is the "OnConflict" setter.
	SystemEWalletUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *SystemEWalletUpsert) SetCreatedAt(v time.Time) *SystemEWalletUpsert {
	u.Set(systemewallet.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SystemEWalletUpsert) UpdateCreatedAt() *SystemEWalletUpsert {
	u.SetExcluded(systemewallet.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SystemEWalletUpsert) SetUpdatedAt(v time.Time) *SystemEWalletUpsert {
	u.Set(systemewallet.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SystemEWalletUpsert) UpdateUpdatedAt() *SystemEWalletUpsert {
	u.SetExcluded(systemewallet.FieldUpdatedAt)
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *SystemEWalletUpsert) SetCreatedBy(v string) *SystemEWalletUpsert {
	u.Set(systemewallet.FieldCreatedBy, v)
	return u
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *SystemEWalletUpsert) UpdateCreatedBy() *SystemEWalletUpsert {
	u.SetExcluded(systemewallet.FieldCreatedBy)
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *SystemEWalletUpsert) SetUpdatedBy(v string) *SystemEWalletUpsert {
	u.Set(systemewallet.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *SystemEWalletUpsert) UpdateUpdatedBy() *SystemEWalletUpsert {
	u.SetExcluded(systemewallet.FieldUpdatedBy)
	return u
}

// SetEWalletName sets the "e_wallet_name" field.
func (u *SystemEWalletUpsert) SetEWalletName(v int32) *SystemEWalletUpsert {
	u.Set(systemewallet.FieldEWalletName, v)
	return u
}

// UpdateEWalletName sets the "e_wallet_name" field to the value that was provided on create.
func (u *SystemEWalletUpsert) UpdateEWalletName() *SystemEWalletUpsert {
	u.SetExcluded(systemewallet.FieldEWalletName)
	return u
}

// AddEWalletName adds v to the "e_wallet_name" field.
func (u *SystemEWalletUpsert) AddEWalletName(v int32) *SystemEWalletUpsert {
	u.Add(systemewallet.FieldEWalletName, v)
	return u
}

// SetStatus sets the "status" field.
func (u *SystemEWalletUpsert) SetStatus(v int32) *SystemEWalletUpsert {
	u.Set(systemewallet.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *SystemEWalletUpsert) UpdateStatus() *SystemEWalletUpsert {
	u.SetExcluded(systemewallet.FieldStatus)
	return u
}

// AddStatus adds v to the "status" field.
func (u *SystemEWalletUpsert) AddStatus(v int32) *SystemEWalletUpsert {
	u.Add(systemewallet.FieldStatus, v)
	return u
}

// SetMerchantID sets the "merchant_id" field.
func (u *SystemEWalletUpsert) SetMerchantID(v int64) *SystemEWalletUpsert {
	u.Set(systemewallet.FieldMerchantID, v)
	return u
}

// UpdateMerchantID sets the "merchant_id" field to the value that was provided on create.
func (u *SystemEWalletUpsert) UpdateMerchantID() *SystemEWalletUpsert {
	u.SetExcluded(systemewallet.FieldMerchantID)
	return u
}

// AddMerchantID adds v to the "merchant_id" field.
func (u *SystemEWalletUpsert) AddMerchantID(v int64) *SystemEWalletUpsert {
	u.Add(systemewallet.FieldMerchantID, v)
	return u
}

// SetAccountPhoneNumber sets the "account_phone_number" field.
func (u *SystemEWalletUpsert) SetAccountPhoneNumber(v string) *SystemEWalletUpsert {
	u.Set(systemewallet.FieldAccountPhoneNumber, v)
	return u
}

// UpdateAccountPhoneNumber sets the "account_phone_number" field to the value that was provided on create.
func (u *SystemEWalletUpsert) UpdateAccountPhoneNumber() *SystemEWalletUpsert {
	u.SetExcluded(systemewallet.FieldAccountPhoneNumber)
	return u
}

// SetAccountName sets the "account_name" field.
func (u *SystemEWalletUpsert) SetAccountName(v string) *SystemEWalletUpsert {
	u.Set(systemewallet.FieldAccountName, v)
	return u
}

// UpdateAccountName sets the "account_name" field to the value that was provided on create.
func (u *SystemEWalletUpsert) UpdateAccountName() *SystemEWalletUpsert {
	u.SetExcluded(systemewallet.FieldAccountName)
	return u
}

// SetBalance sets the "balance" field.
func (u *SystemEWalletUpsert) SetBalance(v uint64) *SystemEWalletUpsert {
	u.Set(systemewallet.FieldBalance, v)
	return u
}

// UpdateBalance sets the "balance" field to the value that was provided on create.
func (u *SystemEWalletUpsert) UpdateBalance() *SystemEWalletUpsert {
	u.SetExcluded(systemewallet.FieldBalance)
	return u
}

// AddBalance adds v to the "balance" field.
func (u *SystemEWalletUpsert) AddBalance(v uint64) *SystemEWalletUpsert {
	u.Add(systemewallet.FieldBalance, v)
	return u
}

// SetDailyBalance sets the "daily_balance" field.
func (u *SystemEWalletUpsert) SetDailyBalance(v uint64) *SystemEWalletUpsert {
	u.Set(systemewallet.FieldDailyBalance, v)
	return u
}

// UpdateDailyBalance sets the "daily_balance" field to the value that was provided on create.
func (u *SystemEWalletUpsert) UpdateDailyBalance() *SystemEWalletUpsert {
	u.SetExcluded(systemewallet.FieldDailyBalance)
	return u
}

// AddDailyBalance adds v to the "daily_balance" field.
func (u *SystemEWalletUpsert) AddDailyBalance(v uint64) *SystemEWalletUpsert {
	u.Add(systemewallet.FieldDailyBalance, v)
	return u
}

// SetDailyBalanceLimit sets the "daily_balance_limit" field.
func (u *SystemEWalletUpsert) SetDailyBalanceLimit(v uint64) *SystemEWalletUpsert {
	u.Set(systemewallet.FieldDailyBalanceLimit, v)
	return u
}

// UpdateDailyBalanceLimit sets the "daily_balance_limit" field to the value that was provided on create.
func (u *SystemEWalletUpsert) UpdateDailyBalanceLimit() *SystemEWalletUpsert {
	u.SetExcluded(systemewallet.FieldDailyBalanceLimit)
	return u
}

// AddDailyBalanceLimit adds v to the "daily_balance_limit" field.
func (u *SystemEWalletUpsert) AddDailyBalanceLimit(v uint64) *SystemEWalletUpsert {
	u.Add(systemewallet.FieldDailyBalanceLimit, v)
	return u
}

// SetDailyUsedAmount sets the "daily_used_amount" field.
func (u *SystemEWalletUpsert) SetDailyUsedAmount(v int64) *SystemEWalletUpsert {
	u.Set(systemewallet.FieldDailyUsedAmount, v)
	return u
}

// UpdateDailyUsedAmount sets the "daily_used_amount" field to the value that was provided on create.
func (u *SystemEWalletUpsert) UpdateDailyUsedAmount() *SystemEWalletUpsert {
	u.SetExcluded(systemewallet.FieldDailyUsedAmount)
	return u
}

// AddDailyUsedAmount adds v to the "daily_used_amount" field.
func (u *SystemEWalletUpsert) AddDailyUsedAmount(v int64) *SystemEWalletUpsert {
	u.Add(systemewallet.FieldDailyUsedAmount, v)
	return u
}

// SetLastUpdatedBalance sets the "last_updated_balance" field.
func (u *SystemEWalletUpsert) SetLastUpdatedBalance(v time.Time) *SystemEWalletUpsert {
	u.Set(systemewallet.FieldLastUpdatedBalance, v)
	return u
}

// UpdateLastUpdatedBalance sets the "last_updated_balance" field to the value that was provided on create.
func (u *SystemEWalletUpsert) UpdateLastUpdatedBalance() *SystemEWalletUpsert {
	u.SetExcluded(systemewallet.FieldLastUpdatedBalance)
	return u
}

// ClearLastUpdatedBalance clears the value of the "last_updated_balance" field.
func (u *SystemEWalletUpsert) ClearLastUpdatedBalance() *SystemEWalletUpsert {
	u.SetNull(systemewallet.FieldLastUpdatedBalance)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.SystemEWallet.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(systemewallet.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *SystemEWalletUpsertOne) UpdateNewValues() *SystemEWalletUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(systemewallet.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.SystemEWallet.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *SystemEWalletUpsertOne) Ignore() *SystemEWalletUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SystemEWalletUpsertOne) DoNothing() *SystemEWalletUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SystemEWalletCreate.OnConflict
// documentation for more info.
func (u *SystemEWalletUpsertOne) Update(set func(*SystemEWalletUpsert)) *SystemEWalletUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SystemEWalletUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *SystemEWalletUpsertOne) SetCreatedAt(v time.Time) *SystemEWalletUpsertOne {
	return u.Update(func(s *SystemEWalletUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SystemEWalletUpsertOne) UpdateCreatedAt() *SystemEWalletUpsertOne {
	return u.Update(func(s *SystemEWalletUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SystemEWalletUpsertOne) SetUpdatedAt(v time.Time) *SystemEWalletUpsertOne {
	return u.Update(func(s *SystemEWalletUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SystemEWalletUpsertOne) UpdateUpdatedAt() *SystemEWalletUpsertOne {
	return u.Update(func(s *SystemEWalletUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetCreatedBy sets the "created_by" field.
func (u *SystemEWalletUpsertOne) SetCreatedBy(v string) *SystemEWalletUpsertOne {
	return u.Update(func(s *SystemEWalletUpsert) {
		s.SetCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *SystemEWalletUpsertOne) UpdateCreatedBy() *SystemEWalletUpsertOne {
	return u.Update(func(s *SystemEWalletUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *SystemEWalletUpsertOne) SetUpdatedBy(v string) *SystemEWalletUpsertOne {
	return u.Update(func(s *SystemEWalletUpsert) {
		s.SetUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *SystemEWalletUpsertOne) UpdateUpdatedBy() *SystemEWalletUpsertOne {
	return u.Update(func(s *SystemEWalletUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetEWalletName sets the "e_wallet_name" field.
func (u *SystemEWalletUpsertOne) SetEWalletName(v int32) *SystemEWalletUpsertOne {
	return u.Update(func(s *SystemEWalletUpsert) {
		s.SetEWalletName(v)
	})
}

// AddEWalletName adds v to the "e_wallet_name" field.
func (u *SystemEWalletUpsertOne) AddEWalletName(v int32) *SystemEWalletUpsertOne {
	return u.Update(func(s *SystemEWalletUpsert) {
		s.AddEWalletName(v)
	})
}

// UpdateEWalletName sets the "e_wallet_name" field to the value that was provided on create.
func (u *SystemEWalletUpsertOne) UpdateEWalletName() *SystemEWalletUpsertOne {
	return u.Update(func(s *SystemEWalletUpsert) {
		s.UpdateEWalletName()
	})
}

// SetStatus sets the "status" field.
func (u *SystemEWalletUpsertOne) SetStatus(v int32) *SystemEWalletUpsertOne {
	return u.Update(func(s *SystemEWalletUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *SystemEWalletUpsertOne) AddStatus(v int32) *SystemEWalletUpsertOne {
	return u.Update(func(s *SystemEWalletUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *SystemEWalletUpsertOne) UpdateStatus() *SystemEWalletUpsertOne {
	return u.Update(func(s *SystemEWalletUpsert) {
		s.UpdateStatus()
	})
}

// SetMerchantID sets the "merchant_id" field.
func (u *SystemEWalletUpsertOne) SetMerchantID(v int64) *SystemEWalletUpsertOne {
	return u.Update(func(s *SystemEWalletUpsert) {
		s.SetMerchantID(v)
	})
}

// AddMerchantID adds v to the "merchant_id" field.
func (u *SystemEWalletUpsertOne) AddMerchantID(v int64) *SystemEWalletUpsertOne {
	return u.Update(func(s *SystemEWalletUpsert) {
		s.AddMerchantID(v)
	})
}

// UpdateMerchantID sets the "merchant_id" field to the value that was provided on create.
func (u *SystemEWalletUpsertOne) UpdateMerchantID() *SystemEWalletUpsertOne {
	return u.Update(func(s *SystemEWalletUpsert) {
		s.UpdateMerchantID()
	})
}

// SetAccountPhoneNumber sets the "account_phone_number" field.
func (u *SystemEWalletUpsertOne) SetAccountPhoneNumber(v string) *SystemEWalletUpsertOne {
	return u.Update(func(s *SystemEWalletUpsert) {
		s.SetAccountPhoneNumber(v)
	})
}

// UpdateAccountPhoneNumber sets the "account_phone_number" field to the value that was provided on create.
func (u *SystemEWalletUpsertOne) UpdateAccountPhoneNumber() *SystemEWalletUpsertOne {
	return u.Update(func(s *SystemEWalletUpsert) {
		s.UpdateAccountPhoneNumber()
	})
}

// SetAccountName sets the "account_name" field.
func (u *SystemEWalletUpsertOne) SetAccountName(v string) *SystemEWalletUpsertOne {
	return u.Update(func(s *SystemEWalletUpsert) {
		s.SetAccountName(v)
	})
}

// UpdateAccountName sets the "account_name" field to the value that was provided on create.
func (u *SystemEWalletUpsertOne) UpdateAccountName() *SystemEWalletUpsertOne {
	return u.Update(func(s *SystemEWalletUpsert) {
		s.UpdateAccountName()
	})
}

// SetBalance sets the "balance" field.
func (u *SystemEWalletUpsertOne) SetBalance(v uint64) *SystemEWalletUpsertOne {
	return u.Update(func(s *SystemEWalletUpsert) {
		s.SetBalance(v)
	})
}

// AddBalance adds v to the "balance" field.
func (u *SystemEWalletUpsertOne) AddBalance(v uint64) *SystemEWalletUpsertOne {
	return u.Update(func(s *SystemEWalletUpsert) {
		s.AddBalance(v)
	})
}

// UpdateBalance sets the "balance" field to the value that was provided on create.
func (u *SystemEWalletUpsertOne) UpdateBalance() *SystemEWalletUpsertOne {
	return u.Update(func(s *SystemEWalletUpsert) {
		s.UpdateBalance()
	})
}

// SetDailyBalance sets the "daily_balance" field.
func (u *SystemEWalletUpsertOne) SetDailyBalance(v uint64) *SystemEWalletUpsertOne {
	return u.Update(func(s *SystemEWalletUpsert) {
		s.SetDailyBalance(v)
	})
}

// AddDailyBalance adds v to the "daily_balance" field.
func (u *SystemEWalletUpsertOne) AddDailyBalance(v uint64) *SystemEWalletUpsertOne {
	return u.Update(func(s *SystemEWalletUpsert) {
		s.AddDailyBalance(v)
	})
}

// UpdateDailyBalance sets the "daily_balance" field to the value that was provided on create.
func (u *SystemEWalletUpsertOne) UpdateDailyBalance() *SystemEWalletUpsertOne {
	return u.Update(func(s *SystemEWalletUpsert) {
		s.UpdateDailyBalance()
	})
}

// SetDailyBalanceLimit sets the "daily_balance_limit" field.
func (u *SystemEWalletUpsertOne) SetDailyBalanceLimit(v uint64) *SystemEWalletUpsertOne {
	return u.Update(func(s *SystemEWalletUpsert) {
		s.SetDailyBalanceLimit(v)
	})
}

// AddDailyBalanceLimit adds v to the "daily_balance_limit" field.
func (u *SystemEWalletUpsertOne) AddDailyBalanceLimit(v uint64) *SystemEWalletUpsertOne {
	return u.Update(func(s *SystemEWalletUpsert) {
		s.AddDailyBalanceLimit(v)
	})
}

// UpdateDailyBalanceLimit sets the "daily_balance_limit" field to the value that was provided on create.
func (u *SystemEWalletUpsertOne) UpdateDailyBalanceLimit() *SystemEWalletUpsertOne {
	return u.Update(func(s *SystemEWalletUpsert) {
		s.UpdateDailyBalanceLimit()
	})
}

// SetDailyUsedAmount sets the "daily_used_amount" field.
func (u *SystemEWalletUpsertOne) SetDailyUsedAmount(v int64) *SystemEWalletUpsertOne {
	return u.Update(func(s *SystemEWalletUpsert) {
		s.SetDailyUsedAmount(v)
	})
}

// AddDailyUsedAmount adds v to the "daily_used_amount" field.
func (u *SystemEWalletUpsertOne) AddDailyUsedAmount(v int64) *SystemEWalletUpsertOne {
	return u.Update(func(s *SystemEWalletUpsert) {
		s.AddDailyUsedAmount(v)
	})
}

// UpdateDailyUsedAmount sets the "daily_used_amount" field to the value that was provided on create.
func (u *SystemEWalletUpsertOne) UpdateDailyUsedAmount() *SystemEWalletUpsertOne {
	return u.Update(func(s *SystemEWalletUpsert) {
		s.UpdateDailyUsedAmount()
	})
}

// SetLastUpdatedBalance sets the "last_updated_balance" field.
func (u *SystemEWalletUpsertOne) SetLastUpdatedBalance(v time.Time) *SystemEWalletUpsertOne {
	return u.Update(func(s *SystemEWalletUpsert) {
		s.SetLastUpdatedBalance(v)
	})
}

// UpdateLastUpdatedBalance sets the "last_updated_balance" field to the value that was provided on create.
func (u *SystemEWalletUpsertOne) UpdateLastUpdatedBalance() *SystemEWalletUpsertOne {
	return u.Update(func(s *SystemEWalletUpsert) {
		s.UpdateLastUpdatedBalance()
	})
}

// ClearLastUpdatedBalance clears the value of the "last_updated_balance" field.
func (u *SystemEWalletUpsertOne) ClearLastUpdatedBalance() *SystemEWalletUpsertOne {
	return u.Update(func(s *SystemEWalletUpsert) {
		s.ClearLastUpdatedBalance()
	})
}

// Exec executes the query.
func (u *SystemEWalletUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SystemEWalletCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SystemEWalletUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SystemEWalletUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SystemEWalletUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SystemEWalletCreateBulk is the builder for creating many SystemEWallet entities in bulk.
type SystemEWalletCreateBulk struct {
	config
	builders []*SystemEWalletCreate
	conflict []sql.ConflictOption
}

// Save creates the SystemEWallet entities in the database.
func (secb *SystemEWalletCreateBulk) Save(ctx context.Context) ([]*SystemEWallet, error) {
	specs := make([]*sqlgraph.CreateSpec, len(secb.builders))
	nodes := make([]*SystemEWallet, len(secb.builders))
	mutators := make([]Mutator, len(secb.builders))
	for i := range secb.builders {
		func(i int, root context.Context) {
			builder := secb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SystemEWalletMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, secb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = secb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, secb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, secb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (secb *SystemEWalletCreateBulk) SaveX(ctx context.Context) []*SystemEWallet {
	v, err := secb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (secb *SystemEWalletCreateBulk) Exec(ctx context.Context) error {
	_, err := secb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (secb *SystemEWalletCreateBulk) ExecX(ctx context.Context) {
	if err := secb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SystemEWallet.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SystemEWalletUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (secb *SystemEWalletCreateBulk) OnConflict(opts ...sql.ConflictOption) *SystemEWalletUpsertBulk {
	secb.conflict = opts
	return &SystemEWalletUpsertBulk{
		create: secb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SystemEWallet.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (secb *SystemEWalletCreateBulk) OnConflictColumns(columns ...string) *SystemEWalletUpsertBulk {
	secb.conflict = append(secb.conflict, sql.ConflictColumns(columns...))
	return &SystemEWalletUpsertBulk{
		create: secb,
	}
}

// SystemEWalletUpsertBulk is the builder for "upsert"-ing
// a bulk of SystemEWallet nodes.
type SystemEWalletUpsertBulk struct {
	create *SystemEWalletCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.SystemEWallet.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(systemewallet.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *SystemEWalletUpsertBulk) UpdateNewValues() *SystemEWalletUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(systemewallet.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SystemEWallet.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *SystemEWalletUpsertBulk) Ignore() *SystemEWalletUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SystemEWalletUpsertBulk) DoNothing() *SystemEWalletUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SystemEWalletCreateBulk.OnConflict
// documentation for more info.
func (u *SystemEWalletUpsertBulk) Update(set func(*SystemEWalletUpsert)) *SystemEWalletUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SystemEWalletUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *SystemEWalletUpsertBulk) SetCreatedAt(v time.Time) *SystemEWalletUpsertBulk {
	return u.Update(func(s *SystemEWalletUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SystemEWalletUpsertBulk) UpdateCreatedAt() *SystemEWalletUpsertBulk {
	return u.Update(func(s *SystemEWalletUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SystemEWalletUpsertBulk) SetUpdatedAt(v time.Time) *SystemEWalletUpsertBulk {
	return u.Update(func(s *SystemEWalletUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SystemEWalletUpsertBulk) UpdateUpdatedAt() *SystemEWalletUpsertBulk {
	return u.Update(func(s *SystemEWalletUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetCreatedBy sets the "created_by" field.
func (u *SystemEWalletUpsertBulk) SetCreatedBy(v string) *SystemEWalletUpsertBulk {
	return u.Update(func(s *SystemEWalletUpsert) {
		s.SetCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *SystemEWalletUpsertBulk) UpdateCreatedBy() *SystemEWalletUpsertBulk {
	return u.Update(func(s *SystemEWalletUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *SystemEWalletUpsertBulk) SetUpdatedBy(v string) *SystemEWalletUpsertBulk {
	return u.Update(func(s *SystemEWalletUpsert) {
		s.SetUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *SystemEWalletUpsertBulk) UpdateUpdatedBy() *SystemEWalletUpsertBulk {
	return u.Update(func(s *SystemEWalletUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetEWalletName sets the "e_wallet_name" field.
func (u *SystemEWalletUpsertBulk) SetEWalletName(v int32) *SystemEWalletUpsertBulk {
	return u.Update(func(s *SystemEWalletUpsert) {
		s.SetEWalletName(v)
	})
}

// AddEWalletName adds v to the "e_wallet_name" field.
func (u *SystemEWalletUpsertBulk) AddEWalletName(v int32) *SystemEWalletUpsertBulk {
	return u.Update(func(s *SystemEWalletUpsert) {
		s.AddEWalletName(v)
	})
}

// UpdateEWalletName sets the "e_wallet_name" field to the value that was provided on create.
func (u *SystemEWalletUpsertBulk) UpdateEWalletName() *SystemEWalletUpsertBulk {
	return u.Update(func(s *SystemEWalletUpsert) {
		s.UpdateEWalletName()
	})
}

// SetStatus sets the "status" field.
func (u *SystemEWalletUpsertBulk) SetStatus(v int32) *SystemEWalletUpsertBulk {
	return u.Update(func(s *SystemEWalletUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *SystemEWalletUpsertBulk) AddStatus(v int32) *SystemEWalletUpsertBulk {
	return u.Update(func(s *SystemEWalletUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *SystemEWalletUpsertBulk) UpdateStatus() *SystemEWalletUpsertBulk {
	return u.Update(func(s *SystemEWalletUpsert) {
		s.UpdateStatus()
	})
}

// SetMerchantID sets the "merchant_id" field.
func (u *SystemEWalletUpsertBulk) SetMerchantID(v int64) *SystemEWalletUpsertBulk {
	return u.Update(func(s *SystemEWalletUpsert) {
		s.SetMerchantID(v)
	})
}

// AddMerchantID adds v to the "merchant_id" field.
func (u *SystemEWalletUpsertBulk) AddMerchantID(v int64) *SystemEWalletUpsertBulk {
	return u.Update(func(s *SystemEWalletUpsert) {
		s.AddMerchantID(v)
	})
}

// UpdateMerchantID sets the "merchant_id" field to the value that was provided on create.
func (u *SystemEWalletUpsertBulk) UpdateMerchantID() *SystemEWalletUpsertBulk {
	return u.Update(func(s *SystemEWalletUpsert) {
		s.UpdateMerchantID()
	})
}

// SetAccountPhoneNumber sets the "account_phone_number" field.
func (u *SystemEWalletUpsertBulk) SetAccountPhoneNumber(v string) *SystemEWalletUpsertBulk {
	return u.Update(func(s *SystemEWalletUpsert) {
		s.SetAccountPhoneNumber(v)
	})
}

// UpdateAccountPhoneNumber sets the "account_phone_number" field to the value that was provided on create.
func (u *SystemEWalletUpsertBulk) UpdateAccountPhoneNumber() *SystemEWalletUpsertBulk {
	return u.Update(func(s *SystemEWalletUpsert) {
		s.UpdateAccountPhoneNumber()
	})
}

// SetAccountName sets the "account_name" field.
func (u *SystemEWalletUpsertBulk) SetAccountName(v string) *SystemEWalletUpsertBulk {
	return u.Update(func(s *SystemEWalletUpsert) {
		s.SetAccountName(v)
	})
}

// UpdateAccountName sets the "account_name" field to the value that was provided on create.
func (u *SystemEWalletUpsertBulk) UpdateAccountName() *SystemEWalletUpsertBulk {
	return u.Update(func(s *SystemEWalletUpsert) {
		s.UpdateAccountName()
	})
}

// SetBalance sets the "balance" field.
func (u *SystemEWalletUpsertBulk) SetBalance(v uint64) *SystemEWalletUpsertBulk {
	return u.Update(func(s *SystemEWalletUpsert) {
		s.SetBalance(v)
	})
}

// AddBalance adds v to the "balance" field.
func (u *SystemEWalletUpsertBulk) AddBalance(v uint64) *SystemEWalletUpsertBulk {
	return u.Update(func(s *SystemEWalletUpsert) {
		s.AddBalance(v)
	})
}

// UpdateBalance sets the "balance" field to the value that was provided on create.
func (u *SystemEWalletUpsertBulk) UpdateBalance() *SystemEWalletUpsertBulk {
	return u.Update(func(s *SystemEWalletUpsert) {
		s.UpdateBalance()
	})
}

// SetDailyBalance sets the "daily_balance" field.
func (u *SystemEWalletUpsertBulk) SetDailyBalance(v uint64) *SystemEWalletUpsertBulk {
	return u.Update(func(s *SystemEWalletUpsert) {
		s.SetDailyBalance(v)
	})
}

// AddDailyBalance adds v to the "daily_balance" field.
func (u *SystemEWalletUpsertBulk) AddDailyBalance(v uint64) *SystemEWalletUpsertBulk {
	return u.Update(func(s *SystemEWalletUpsert) {
		s.AddDailyBalance(v)
	})
}

// UpdateDailyBalance sets the "daily_balance" field to the value that was provided on create.
func (u *SystemEWalletUpsertBulk) UpdateDailyBalance() *SystemEWalletUpsertBulk {
	return u.Update(func(s *SystemEWalletUpsert) {
		s.UpdateDailyBalance()
	})
}

// SetDailyBalanceLimit sets the "daily_balance_limit" field.
func (u *SystemEWalletUpsertBulk) SetDailyBalanceLimit(v uint64) *SystemEWalletUpsertBulk {
	return u.Update(func(s *SystemEWalletUpsert) {
		s.SetDailyBalanceLimit(v)
	})
}

// AddDailyBalanceLimit adds v to the "daily_balance_limit" field.
func (u *SystemEWalletUpsertBulk) AddDailyBalanceLimit(v uint64) *SystemEWalletUpsertBulk {
	return u.Update(func(s *SystemEWalletUpsert) {
		s.AddDailyBalanceLimit(v)
	})
}

// UpdateDailyBalanceLimit sets the "daily_balance_limit" field to the value that was provided on create.
func (u *SystemEWalletUpsertBulk) UpdateDailyBalanceLimit() *SystemEWalletUpsertBulk {
	return u.Update(func(s *SystemEWalletUpsert) {
		s.UpdateDailyBalanceLimit()
	})
}

// SetDailyUsedAmount sets the "daily_used_amount" field.
func (u *SystemEWalletUpsertBulk) SetDailyUsedAmount(v int64) *SystemEWalletUpsertBulk {
	return u.Update(func(s *SystemEWalletUpsert) {
		s.SetDailyUsedAmount(v)
	})
}

// AddDailyUsedAmount adds v to the "daily_used_amount" field.
func (u *SystemEWalletUpsertBulk) AddDailyUsedAmount(v int64) *SystemEWalletUpsertBulk {
	return u.Update(func(s *SystemEWalletUpsert) {
		s.AddDailyUsedAmount(v)
	})
}

// UpdateDailyUsedAmount sets the "daily_used_amount" field to the value that was provided on create.
func (u *SystemEWalletUpsertBulk) UpdateDailyUsedAmount() *SystemEWalletUpsertBulk {
	return u.Update(func(s *SystemEWalletUpsert) {
		s.UpdateDailyUsedAmount()
	})
}

// SetLastUpdatedBalance sets the "last_updated_balance" field.
func (u *SystemEWalletUpsertBulk) SetLastUpdatedBalance(v time.Time) *SystemEWalletUpsertBulk {
	return u.Update(func(s *SystemEWalletUpsert) {
		s.SetLastUpdatedBalance(v)
	})
}

// UpdateLastUpdatedBalance sets the "last_updated_balance" field to the value that was provided on create.
func (u *SystemEWalletUpsertBulk) UpdateLastUpdatedBalance() *SystemEWalletUpsertBulk {
	return u.Update(func(s *SystemEWalletUpsert) {
		s.UpdateLastUpdatedBalance()
	})
}

// ClearLastUpdatedBalance clears the value of the "last_updated_balance" field.
func (u *SystemEWalletUpsertBulk) ClearLastUpdatedBalance() *SystemEWalletUpsertBulk {
	return u.Update(func(s *SystemEWalletUpsert) {
		s.ClearLastUpdatedBalance()
	})
}

// Exec executes the query.
func (u *SystemEWalletUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the SystemEWalletCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SystemEWalletCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SystemEWalletUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
