// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"gitlab.com/mcuc/monorepo/backend/stark/pkg/ent/predicate"
	"gitlab.com/mcuc/monorepo/backend/stark/pkg/ent/systembankaccount"
)

// SystemBankAccountUpdate is the builder for updating SystemBankAccount entities.
type SystemBankAccountUpdate struct {
	config
	hooks    []Hook
	mutation *SystemBankAccountMutation
}

// Where appends a list predicates to the SystemBankAccountUpdate builder.
func (sbau *SystemBankAccountUpdate) Where(ps ...predicate.SystemBankAccount) *SystemBankAccountUpdate {
	sbau.mutation.Where(ps...)
	return sbau
}

// SetCreatedAt sets the "created_at" field.
func (sbau *SystemBankAccountUpdate) SetCreatedAt(t time.Time) *SystemBankAccountUpdate {
	sbau.mutation.SetCreatedAt(t)
	return sbau
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sbau *SystemBankAccountUpdate) SetNillableCreatedAt(t *time.Time) *SystemBankAccountUpdate {
	if t != nil {
		sbau.SetCreatedAt(*t)
	}
	return sbau
}

// SetUpdatedAt sets the "updated_at" field.
func (sbau *SystemBankAccountUpdate) SetUpdatedAt(t time.Time) *SystemBankAccountUpdate {
	sbau.mutation.SetUpdatedAt(t)
	return sbau
}

// SetCreatedBy sets the "created_by" field.
func (sbau *SystemBankAccountUpdate) SetCreatedBy(s string) *SystemBankAccountUpdate {
	sbau.mutation.SetCreatedBy(s)
	return sbau
}

// SetUpdatedBy sets the "updated_by" field.
func (sbau *SystemBankAccountUpdate) SetUpdatedBy(s string) *SystemBankAccountUpdate {
	sbau.mutation.SetUpdatedBy(s)
	return sbau
}

// SetMerchantID sets the "merchant_id" field.
func (sbau *SystemBankAccountUpdate) SetMerchantID(i int64) *SystemBankAccountUpdate {
	sbau.mutation.ResetMerchantID()
	sbau.mutation.SetMerchantID(i)
	return sbau
}

// SetNillableMerchantID sets the "merchant_id" field if the given value is not nil.
func (sbau *SystemBankAccountUpdate) SetNillableMerchantID(i *int64) *SystemBankAccountUpdate {
	if i != nil {
		sbau.SetMerchantID(*i)
	}
	return sbau
}

// AddMerchantID adds i to the "merchant_id" field.
func (sbau *SystemBankAccountUpdate) AddMerchantID(i int64) *SystemBankAccountUpdate {
	sbau.mutation.AddMerchantID(i)
	return sbau
}

// SetStatus sets the "status" field.
func (sbau *SystemBankAccountUpdate) SetStatus(i int32) *SystemBankAccountUpdate {
	sbau.mutation.ResetStatus()
	sbau.mutation.SetStatus(i)
	return sbau
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (sbau *SystemBankAccountUpdate) SetNillableStatus(i *int32) *SystemBankAccountUpdate {
	if i != nil {
		sbau.SetStatus(*i)
	}
	return sbau
}

// AddStatus adds i to the "status" field.
func (sbau *SystemBankAccountUpdate) AddStatus(i int32) *SystemBankAccountUpdate {
	sbau.mutation.AddStatus(i)
	return sbau
}

// SetBankName sets the "bank_name" field.
func (sbau *SystemBankAccountUpdate) SetBankName(i int32) *SystemBankAccountUpdate {
	sbau.mutation.ResetBankName()
	sbau.mutation.SetBankName(i)
	return sbau
}

// SetNillableBankName sets the "bank_name" field if the given value is not nil.
func (sbau *SystemBankAccountUpdate) SetNillableBankName(i *int32) *SystemBankAccountUpdate {
	if i != nil {
		sbau.SetBankName(*i)
	}
	return sbau
}

// AddBankName adds i to the "bank_name" field.
func (sbau *SystemBankAccountUpdate) AddBankName(i int32) *SystemBankAccountUpdate {
	sbau.mutation.AddBankName(i)
	return sbau
}

// SetAccountNumber sets the "account_number" field.
func (sbau *SystemBankAccountUpdate) SetAccountNumber(s string) *SystemBankAccountUpdate {
	sbau.mutation.SetAccountNumber(s)
	return sbau
}

// SetAccountName sets the "account_name" field.
func (sbau *SystemBankAccountUpdate) SetAccountName(s string) *SystemBankAccountUpdate {
	sbau.mutation.SetAccountName(s)
	return sbau
}

// SetBranch sets the "branch" field.
func (sbau *SystemBankAccountUpdate) SetBranch(s string) *SystemBankAccountUpdate {
	sbau.mutation.SetBranch(s)
	return sbau
}

// SetBalance sets the "balance" field.
func (sbau *SystemBankAccountUpdate) SetBalance(u uint64) *SystemBankAccountUpdate {
	sbau.mutation.ResetBalance()
	sbau.mutation.SetBalance(u)
	return sbau
}

// SetNillableBalance sets the "balance" field if the given value is not nil.
func (sbau *SystemBankAccountUpdate) SetNillableBalance(u *uint64) *SystemBankAccountUpdate {
	if u != nil {
		sbau.SetBalance(*u)
	}
	return sbau
}

// AddBalance adds u to the "balance" field.
func (sbau *SystemBankAccountUpdate) AddBalance(u uint64) *SystemBankAccountUpdate {
	sbau.mutation.AddBalance(u)
	return sbau
}

// SetLastUpdatedBalance sets the "last_updated_balance" field.
func (sbau *SystemBankAccountUpdate) SetLastUpdatedBalance(t time.Time) *SystemBankAccountUpdate {
	sbau.mutation.SetLastUpdatedBalance(t)
	return sbau
}

// SetNillableLastUpdatedBalance sets the "last_updated_balance" field if the given value is not nil.
func (sbau *SystemBankAccountUpdate) SetNillableLastUpdatedBalance(t *time.Time) *SystemBankAccountUpdate {
	if t != nil {
		sbau.SetLastUpdatedBalance(*t)
	}
	return sbau
}

// ClearLastUpdatedBalance clears the value of the "last_updated_balance" field.
func (sbau *SystemBankAccountUpdate) ClearLastUpdatedBalance() *SystemBankAccountUpdate {
	sbau.mutation.ClearLastUpdatedBalance()
	return sbau
}

// SetDailyBalanceLimit sets the "daily_balance_limit" field.
func (sbau *SystemBankAccountUpdate) SetDailyBalanceLimit(u uint64) *SystemBankAccountUpdate {
	sbau.mutation.ResetDailyBalanceLimit()
	sbau.mutation.SetDailyBalanceLimit(u)
	return sbau
}

// SetNillableDailyBalanceLimit sets the "daily_balance_limit" field if the given value is not nil.
func (sbau *SystemBankAccountUpdate) SetNillableDailyBalanceLimit(u *uint64) *SystemBankAccountUpdate {
	if u != nil {
		sbau.SetDailyBalanceLimit(*u)
	}
	return sbau
}

// AddDailyBalanceLimit adds u to the "daily_balance_limit" field.
func (sbau *SystemBankAccountUpdate) AddDailyBalanceLimit(u uint64) *SystemBankAccountUpdate {
	sbau.mutation.AddDailyBalanceLimit(u)
	return sbau
}

// SetDailyUsedAmount sets the "daily_used_amount" field.
func (sbau *SystemBankAccountUpdate) SetDailyUsedAmount(i int64) *SystemBankAccountUpdate {
	sbau.mutation.ResetDailyUsedAmount()
	sbau.mutation.SetDailyUsedAmount(i)
	return sbau
}

// SetNillableDailyUsedAmount sets the "daily_used_amount" field if the given value is not nil.
func (sbau *SystemBankAccountUpdate) SetNillableDailyUsedAmount(i *int64) *SystemBankAccountUpdate {
	if i != nil {
		sbau.SetDailyUsedAmount(*i)
	}
	return sbau
}

// AddDailyUsedAmount adds i to the "daily_used_amount" field.
func (sbau *SystemBankAccountUpdate) AddDailyUsedAmount(i int64) *SystemBankAccountUpdate {
	sbau.mutation.AddDailyUsedAmount(i)
	return sbau
}

// SetDailyBalance sets the "daily_balance" field.
func (sbau *SystemBankAccountUpdate) SetDailyBalance(u uint64) *SystemBankAccountUpdate {
	sbau.mutation.ResetDailyBalance()
	sbau.mutation.SetDailyBalance(u)
	return sbau
}

// SetNillableDailyBalance sets the "daily_balance" field if the given value is not nil.
func (sbau *SystemBankAccountUpdate) SetNillableDailyBalance(u *uint64) *SystemBankAccountUpdate {
	if u != nil {
		sbau.SetDailyBalance(*u)
	}
	return sbau
}

// AddDailyBalance adds u to the "daily_balance" field.
func (sbau *SystemBankAccountUpdate) AddDailyBalance(u uint64) *SystemBankAccountUpdate {
	sbau.mutation.AddDailyBalance(u)
	return sbau
}

// Mutation returns the SystemBankAccountMutation object of the builder.
func (sbau *SystemBankAccountUpdate) Mutation() *SystemBankAccountMutation {
	return sbau.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sbau *SystemBankAccountUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	sbau.defaults()
	if len(sbau.hooks) == 0 {
		if err = sbau.check(); err != nil {
			return 0, err
		}
		affected, err = sbau.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SystemBankAccountMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = sbau.check(); err != nil {
				return 0, err
			}
			sbau.mutation = mutation
			affected, err = sbau.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(sbau.hooks) - 1; i >= 0; i-- {
			if sbau.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = sbau.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sbau.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (sbau *SystemBankAccountUpdate) SaveX(ctx context.Context) int {
	affected, err := sbau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sbau *SystemBankAccountUpdate) Exec(ctx context.Context) error {
	_, err := sbau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sbau *SystemBankAccountUpdate) ExecX(ctx context.Context) {
	if err := sbau.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sbau *SystemBankAccountUpdate) defaults() {
	if _, ok := sbau.mutation.UpdatedAt(); !ok {
		v := systembankaccount.UpdateDefaultUpdatedAt()
		sbau.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sbau *SystemBankAccountUpdate) check() error {
	if v, ok := sbau.mutation.CreatedBy(); ok {
		if err := systembankaccount.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "SystemBankAccount.created_by": %w`, err)}
		}
	}
	if v, ok := sbau.mutation.UpdatedBy(); ok {
		if err := systembankaccount.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "SystemBankAccount.updated_by": %w`, err)}
		}
	}
	if v, ok := sbau.mutation.MerchantID(); ok {
		if err := systembankaccount.MerchantIDValidator(v); err != nil {
			return &ValidationError{Name: "merchant_id", err: fmt.Errorf(`ent: validator failed for field "SystemBankAccount.merchant_id": %w`, err)}
		}
	}
	if v, ok := sbau.mutation.Status(); ok {
		if err := systembankaccount.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "SystemBankAccount.status": %w`, err)}
		}
	}
	if v, ok := sbau.mutation.BankName(); ok {
		if err := systembankaccount.BankNameValidator(v); err != nil {
			return &ValidationError{Name: "bank_name", err: fmt.Errorf(`ent: validator failed for field "SystemBankAccount.bank_name": %w`, err)}
		}
	}
	if v, ok := sbau.mutation.AccountNumber(); ok {
		if err := systembankaccount.AccountNumberValidator(v); err != nil {
			return &ValidationError{Name: "account_number", err: fmt.Errorf(`ent: validator failed for field "SystemBankAccount.account_number": %w`, err)}
		}
	}
	if v, ok := sbau.mutation.AccountName(); ok {
		if err := systembankaccount.AccountNameValidator(v); err != nil {
			return &ValidationError{Name: "account_name", err: fmt.Errorf(`ent: validator failed for field "SystemBankAccount.account_name": %w`, err)}
		}
	}
	return nil
}

func (sbau *SystemBankAccountUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   systembankaccount.Table,
			Columns: systembankaccount.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: systembankaccount.FieldID,
			},
		},
	}
	if ps := sbau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sbau.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: systembankaccount.FieldCreatedAt,
		})
	}
	if value, ok := sbau.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: systembankaccount.FieldUpdatedAt,
		})
	}
	if value, ok := sbau.mutation.CreatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: systembankaccount.FieldCreatedBy,
		})
	}
	if value, ok := sbau.mutation.UpdatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: systembankaccount.FieldUpdatedBy,
		})
	}
	if value, ok := sbau.mutation.MerchantID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: systembankaccount.FieldMerchantID,
		})
	}
	if value, ok := sbau.mutation.AddedMerchantID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: systembankaccount.FieldMerchantID,
		})
	}
	if value, ok := sbau.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: systembankaccount.FieldStatus,
		})
	}
	if value, ok := sbau.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: systembankaccount.FieldStatus,
		})
	}
	if value, ok := sbau.mutation.BankName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: systembankaccount.FieldBankName,
		})
	}
	if value, ok := sbau.mutation.AddedBankName(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: systembankaccount.FieldBankName,
		})
	}
	if value, ok := sbau.mutation.AccountNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: systembankaccount.FieldAccountNumber,
		})
	}
	if value, ok := sbau.mutation.AccountName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: systembankaccount.FieldAccountName,
		})
	}
	if value, ok := sbau.mutation.Branch(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: systembankaccount.FieldBranch,
		})
	}
	if value, ok := sbau.mutation.Balance(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: systembankaccount.FieldBalance,
		})
	}
	if value, ok := sbau.mutation.AddedBalance(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: systembankaccount.FieldBalance,
		})
	}
	if value, ok := sbau.mutation.LastUpdatedBalance(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: systembankaccount.FieldLastUpdatedBalance,
		})
	}
	if sbau.mutation.LastUpdatedBalanceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: systembankaccount.FieldLastUpdatedBalance,
		})
	}
	if value, ok := sbau.mutation.DailyBalanceLimit(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: systembankaccount.FieldDailyBalanceLimit,
		})
	}
	if value, ok := sbau.mutation.AddedDailyBalanceLimit(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: systembankaccount.FieldDailyBalanceLimit,
		})
	}
	if value, ok := sbau.mutation.DailyUsedAmount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: systembankaccount.FieldDailyUsedAmount,
		})
	}
	if value, ok := sbau.mutation.AddedDailyUsedAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: systembankaccount.FieldDailyUsedAmount,
		})
	}
	if value, ok := sbau.mutation.DailyBalance(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: systembankaccount.FieldDailyBalance,
		})
	}
	if value, ok := sbau.mutation.AddedDailyBalance(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: systembankaccount.FieldDailyBalance,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, sbau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{systembankaccount.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// SystemBankAccountUpdateOne is the builder for updating a single SystemBankAccount entity.
type SystemBankAccountUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SystemBankAccountMutation
}

// SetCreatedAt sets the "created_at" field.
func (sbauo *SystemBankAccountUpdateOne) SetCreatedAt(t time.Time) *SystemBankAccountUpdateOne {
	sbauo.mutation.SetCreatedAt(t)
	return sbauo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sbauo *SystemBankAccountUpdateOne) SetNillableCreatedAt(t *time.Time) *SystemBankAccountUpdateOne {
	if t != nil {
		sbauo.SetCreatedAt(*t)
	}
	return sbauo
}

// SetUpdatedAt sets the "updated_at" field.
func (sbauo *SystemBankAccountUpdateOne) SetUpdatedAt(t time.Time) *SystemBankAccountUpdateOne {
	sbauo.mutation.SetUpdatedAt(t)
	return sbauo
}

// SetCreatedBy sets the "created_by" field.
func (sbauo *SystemBankAccountUpdateOne) SetCreatedBy(s string) *SystemBankAccountUpdateOne {
	sbauo.mutation.SetCreatedBy(s)
	return sbauo
}

// SetUpdatedBy sets the "updated_by" field.
func (sbauo *SystemBankAccountUpdateOne) SetUpdatedBy(s string) *SystemBankAccountUpdateOne {
	sbauo.mutation.SetUpdatedBy(s)
	return sbauo
}

// SetMerchantID sets the "merchant_id" field.
func (sbauo *SystemBankAccountUpdateOne) SetMerchantID(i int64) *SystemBankAccountUpdateOne {
	sbauo.mutation.ResetMerchantID()
	sbauo.mutation.SetMerchantID(i)
	return sbauo
}

// SetNillableMerchantID sets the "merchant_id" field if the given value is not nil.
func (sbauo *SystemBankAccountUpdateOne) SetNillableMerchantID(i *int64) *SystemBankAccountUpdateOne {
	if i != nil {
		sbauo.SetMerchantID(*i)
	}
	return sbauo
}

// AddMerchantID adds i to the "merchant_id" field.
func (sbauo *SystemBankAccountUpdateOne) AddMerchantID(i int64) *SystemBankAccountUpdateOne {
	sbauo.mutation.AddMerchantID(i)
	return sbauo
}

// SetStatus sets the "status" field.
func (sbauo *SystemBankAccountUpdateOne) SetStatus(i int32) *SystemBankAccountUpdateOne {
	sbauo.mutation.ResetStatus()
	sbauo.mutation.SetStatus(i)
	return sbauo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (sbauo *SystemBankAccountUpdateOne) SetNillableStatus(i *int32) *SystemBankAccountUpdateOne {
	if i != nil {
		sbauo.SetStatus(*i)
	}
	return sbauo
}

// AddStatus adds i to the "status" field.
func (sbauo *SystemBankAccountUpdateOne) AddStatus(i int32) *SystemBankAccountUpdateOne {
	sbauo.mutation.AddStatus(i)
	return sbauo
}

// SetBankName sets the "bank_name" field.
func (sbauo *SystemBankAccountUpdateOne) SetBankName(i int32) *SystemBankAccountUpdateOne {
	sbauo.mutation.ResetBankName()
	sbauo.mutation.SetBankName(i)
	return sbauo
}

// SetNillableBankName sets the "bank_name" field if the given value is not nil.
func (sbauo *SystemBankAccountUpdateOne) SetNillableBankName(i *int32) *SystemBankAccountUpdateOne {
	if i != nil {
		sbauo.SetBankName(*i)
	}
	return sbauo
}

// AddBankName adds i to the "bank_name" field.
func (sbauo *SystemBankAccountUpdateOne) AddBankName(i int32) *SystemBankAccountUpdateOne {
	sbauo.mutation.AddBankName(i)
	return sbauo
}

// SetAccountNumber sets the "account_number" field.
func (sbauo *SystemBankAccountUpdateOne) SetAccountNumber(s string) *SystemBankAccountUpdateOne {
	sbauo.mutation.SetAccountNumber(s)
	return sbauo
}

// SetAccountName sets the "account_name" field.
func (sbauo *SystemBankAccountUpdateOne) SetAccountName(s string) *SystemBankAccountUpdateOne {
	sbauo.mutation.SetAccountName(s)
	return sbauo
}

// SetBranch sets the "branch" field.
func (sbauo *SystemBankAccountUpdateOne) SetBranch(s string) *SystemBankAccountUpdateOne {
	sbauo.mutation.SetBranch(s)
	return sbauo
}

// SetBalance sets the "balance" field.
func (sbauo *SystemBankAccountUpdateOne) SetBalance(u uint64) *SystemBankAccountUpdateOne {
	sbauo.mutation.ResetBalance()
	sbauo.mutation.SetBalance(u)
	return sbauo
}

// SetNillableBalance sets the "balance" field if the given value is not nil.
func (sbauo *SystemBankAccountUpdateOne) SetNillableBalance(u *uint64) *SystemBankAccountUpdateOne {
	if u != nil {
		sbauo.SetBalance(*u)
	}
	return sbauo
}

// AddBalance adds u to the "balance" field.
func (sbauo *SystemBankAccountUpdateOne) AddBalance(u uint64) *SystemBankAccountUpdateOne {
	sbauo.mutation.AddBalance(u)
	return sbauo
}

// SetLastUpdatedBalance sets the "last_updated_balance" field.
func (sbauo *SystemBankAccountUpdateOne) SetLastUpdatedBalance(t time.Time) *SystemBankAccountUpdateOne {
	sbauo.mutation.SetLastUpdatedBalance(t)
	return sbauo
}

// SetNillableLastUpdatedBalance sets the "last_updated_balance" field if the given value is not nil.
func (sbauo *SystemBankAccountUpdateOne) SetNillableLastUpdatedBalance(t *time.Time) *SystemBankAccountUpdateOne {
	if t != nil {
		sbauo.SetLastUpdatedBalance(*t)
	}
	return sbauo
}

// ClearLastUpdatedBalance clears the value of the "last_updated_balance" field.
func (sbauo *SystemBankAccountUpdateOne) ClearLastUpdatedBalance() *SystemBankAccountUpdateOne {
	sbauo.mutation.ClearLastUpdatedBalance()
	return sbauo
}

// SetDailyBalanceLimit sets the "daily_balance_limit" field.
func (sbauo *SystemBankAccountUpdateOne) SetDailyBalanceLimit(u uint64) *SystemBankAccountUpdateOne {
	sbauo.mutation.ResetDailyBalanceLimit()
	sbauo.mutation.SetDailyBalanceLimit(u)
	return sbauo
}

// SetNillableDailyBalanceLimit sets the "daily_balance_limit" field if the given value is not nil.
func (sbauo *SystemBankAccountUpdateOne) SetNillableDailyBalanceLimit(u *uint64) *SystemBankAccountUpdateOne {
	if u != nil {
		sbauo.SetDailyBalanceLimit(*u)
	}
	return sbauo
}

// AddDailyBalanceLimit adds u to the "daily_balance_limit" field.
func (sbauo *SystemBankAccountUpdateOne) AddDailyBalanceLimit(u uint64) *SystemBankAccountUpdateOne {
	sbauo.mutation.AddDailyBalanceLimit(u)
	return sbauo
}

// SetDailyUsedAmount sets the "daily_used_amount" field.
func (sbauo *SystemBankAccountUpdateOne) SetDailyUsedAmount(i int64) *SystemBankAccountUpdateOne {
	sbauo.mutation.ResetDailyUsedAmount()
	sbauo.mutation.SetDailyUsedAmount(i)
	return sbauo
}

// SetNillableDailyUsedAmount sets the "daily_used_amount" field if the given value is not nil.
func (sbauo *SystemBankAccountUpdateOne) SetNillableDailyUsedAmount(i *int64) *SystemBankAccountUpdateOne {
	if i != nil {
		sbauo.SetDailyUsedAmount(*i)
	}
	return sbauo
}

// AddDailyUsedAmount adds i to the "daily_used_amount" field.
func (sbauo *SystemBankAccountUpdateOne) AddDailyUsedAmount(i int64) *SystemBankAccountUpdateOne {
	sbauo.mutation.AddDailyUsedAmount(i)
	return sbauo
}

// SetDailyBalance sets the "daily_balance" field.
func (sbauo *SystemBankAccountUpdateOne) SetDailyBalance(u uint64) *SystemBankAccountUpdateOne {
	sbauo.mutation.ResetDailyBalance()
	sbauo.mutation.SetDailyBalance(u)
	return sbauo
}

// SetNillableDailyBalance sets the "daily_balance" field if the given value is not nil.
func (sbauo *SystemBankAccountUpdateOne) SetNillableDailyBalance(u *uint64) *SystemBankAccountUpdateOne {
	if u != nil {
		sbauo.SetDailyBalance(*u)
	}
	return sbauo
}

// AddDailyBalance adds u to the "daily_balance" field.
func (sbauo *SystemBankAccountUpdateOne) AddDailyBalance(u uint64) *SystemBankAccountUpdateOne {
	sbauo.mutation.AddDailyBalance(u)
	return sbauo
}

// Mutation returns the SystemBankAccountMutation object of the builder.
func (sbauo *SystemBankAccountUpdateOne) Mutation() *SystemBankAccountMutation {
	return sbauo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sbauo *SystemBankAccountUpdateOne) Select(field string, fields ...string) *SystemBankAccountUpdateOne {
	sbauo.fields = append([]string{field}, fields...)
	return sbauo
}

// Save executes the query and returns the updated SystemBankAccount entity.
func (sbauo *SystemBankAccountUpdateOne) Save(ctx context.Context) (*SystemBankAccount, error) {
	var (
		err  error
		node *SystemBankAccount
	)
	sbauo.defaults()
	if len(sbauo.hooks) == 0 {
		if err = sbauo.check(); err != nil {
			return nil, err
		}
		node, err = sbauo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SystemBankAccountMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = sbauo.check(); err != nil {
				return nil, err
			}
			sbauo.mutation = mutation
			node, err = sbauo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(sbauo.hooks) - 1; i >= 0; i-- {
			if sbauo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = sbauo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sbauo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (sbauo *SystemBankAccountUpdateOne) SaveX(ctx context.Context) *SystemBankAccount {
	node, err := sbauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sbauo *SystemBankAccountUpdateOne) Exec(ctx context.Context) error {
	_, err := sbauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sbauo *SystemBankAccountUpdateOne) ExecX(ctx context.Context) {
	if err := sbauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sbauo *SystemBankAccountUpdateOne) defaults() {
	if _, ok := sbauo.mutation.UpdatedAt(); !ok {
		v := systembankaccount.UpdateDefaultUpdatedAt()
		sbauo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sbauo *SystemBankAccountUpdateOne) check() error {
	if v, ok := sbauo.mutation.CreatedBy(); ok {
		if err := systembankaccount.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "SystemBankAccount.created_by": %w`, err)}
		}
	}
	if v, ok := sbauo.mutation.UpdatedBy(); ok {
		if err := systembankaccount.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "SystemBankAccount.updated_by": %w`, err)}
		}
	}
	if v, ok := sbauo.mutation.MerchantID(); ok {
		if err := systembankaccount.MerchantIDValidator(v); err != nil {
			return &ValidationError{Name: "merchant_id", err: fmt.Errorf(`ent: validator failed for field "SystemBankAccount.merchant_id": %w`, err)}
		}
	}
	if v, ok := sbauo.mutation.Status(); ok {
		if err := systembankaccount.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "SystemBankAccount.status": %w`, err)}
		}
	}
	if v, ok := sbauo.mutation.BankName(); ok {
		if err := systembankaccount.BankNameValidator(v); err != nil {
			return &ValidationError{Name: "bank_name", err: fmt.Errorf(`ent: validator failed for field "SystemBankAccount.bank_name": %w`, err)}
		}
	}
	if v, ok := sbauo.mutation.AccountNumber(); ok {
		if err := systembankaccount.AccountNumberValidator(v); err != nil {
			return &ValidationError{Name: "account_number", err: fmt.Errorf(`ent: validator failed for field "SystemBankAccount.account_number": %w`, err)}
		}
	}
	if v, ok := sbauo.mutation.AccountName(); ok {
		if err := systembankaccount.AccountNameValidator(v); err != nil {
			return &ValidationError{Name: "account_name", err: fmt.Errorf(`ent: validator failed for field "SystemBankAccount.account_name": %w`, err)}
		}
	}
	return nil
}

func (sbauo *SystemBankAccountUpdateOne) sqlSave(ctx context.Context) (_node *SystemBankAccount, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   systembankaccount.Table,
			Columns: systembankaccount.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: systembankaccount.FieldID,
			},
		},
	}
	id, ok := sbauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SystemBankAccount.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sbauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, systembankaccount.FieldID)
		for _, f := range fields {
			if !systembankaccount.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != systembankaccount.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sbauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sbauo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: systembankaccount.FieldCreatedAt,
		})
	}
	if value, ok := sbauo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: systembankaccount.FieldUpdatedAt,
		})
	}
	if value, ok := sbauo.mutation.CreatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: systembankaccount.FieldCreatedBy,
		})
	}
	if value, ok := sbauo.mutation.UpdatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: systembankaccount.FieldUpdatedBy,
		})
	}
	if value, ok := sbauo.mutation.MerchantID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: systembankaccount.FieldMerchantID,
		})
	}
	if value, ok := sbauo.mutation.AddedMerchantID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: systembankaccount.FieldMerchantID,
		})
	}
	if value, ok := sbauo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: systembankaccount.FieldStatus,
		})
	}
	if value, ok := sbauo.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: systembankaccount.FieldStatus,
		})
	}
	if value, ok := sbauo.mutation.BankName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: systembankaccount.FieldBankName,
		})
	}
	if value, ok := sbauo.mutation.AddedBankName(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: systembankaccount.FieldBankName,
		})
	}
	if value, ok := sbauo.mutation.AccountNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: systembankaccount.FieldAccountNumber,
		})
	}
	if value, ok := sbauo.mutation.AccountName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: systembankaccount.FieldAccountName,
		})
	}
	if value, ok := sbauo.mutation.Branch(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: systembankaccount.FieldBranch,
		})
	}
	if value, ok := sbauo.mutation.Balance(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: systembankaccount.FieldBalance,
		})
	}
	if value, ok := sbauo.mutation.AddedBalance(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: systembankaccount.FieldBalance,
		})
	}
	if value, ok := sbauo.mutation.LastUpdatedBalance(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: systembankaccount.FieldLastUpdatedBalance,
		})
	}
	if sbauo.mutation.LastUpdatedBalanceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: systembankaccount.FieldLastUpdatedBalance,
		})
	}
	if value, ok := sbauo.mutation.DailyBalanceLimit(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: systembankaccount.FieldDailyBalanceLimit,
		})
	}
	if value, ok := sbauo.mutation.AddedDailyBalanceLimit(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: systembankaccount.FieldDailyBalanceLimit,
		})
	}
	if value, ok := sbauo.mutation.DailyUsedAmount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: systembankaccount.FieldDailyUsedAmount,
		})
	}
	if value, ok := sbauo.mutation.AddedDailyUsedAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: systembankaccount.FieldDailyUsedAmount,
		})
	}
	if value, ok := sbauo.mutation.DailyBalance(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: systembankaccount.FieldDailyBalance,
		})
	}
	if value, ok := sbauo.mutation.AddedDailyBalance(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: systembankaccount.FieldDailyBalance,
		})
	}
	_node = &SystemBankAccount{config: sbauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sbauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{systembankaccount.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
