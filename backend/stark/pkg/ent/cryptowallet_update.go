// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"gitlab.com/mcuc/monorepo/backend/stark/pkg/ent/cryptowallet"
	"gitlab.com/mcuc/monorepo/backend/stark/pkg/ent/predicate"
)

// CryptoWalletUpdate is the builder for updating CryptoWallet entities.
type CryptoWalletUpdate struct {
	config
	hooks    []Hook
	mutation *CryptoWalletMutation
}

// Where appends a list predicates to the CryptoWalletUpdate builder.
func (cwu *CryptoWalletUpdate) Where(ps ...predicate.CryptoWallet) *CryptoWalletUpdate {
	cwu.mutation.Where(ps...)
	return cwu
}

// SetCreatedAt sets the "created_at" field.
func (cwu *CryptoWalletUpdate) SetCreatedAt(t time.Time) *CryptoWalletUpdate {
	cwu.mutation.SetCreatedAt(t)
	return cwu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cwu *CryptoWalletUpdate) SetNillableCreatedAt(t *time.Time) *CryptoWalletUpdate {
	if t != nil {
		cwu.SetCreatedAt(*t)
	}
	return cwu
}

// SetUpdatedAt sets the "updated_at" field.
func (cwu *CryptoWalletUpdate) SetUpdatedAt(t time.Time) *CryptoWalletUpdate {
	cwu.mutation.SetUpdatedAt(t)
	return cwu
}

// SetCreatedBy sets the "created_by" field.
func (cwu *CryptoWalletUpdate) SetCreatedBy(s string) *CryptoWalletUpdate {
	cwu.mutation.SetCreatedBy(s)
	return cwu
}

// SetUpdatedBy sets the "updated_by" field.
func (cwu *CryptoWalletUpdate) SetUpdatedBy(s string) *CryptoWalletUpdate {
	cwu.mutation.SetUpdatedBy(s)
	return cwu
}

// SetMerchantID sets the "merchant_id" field.
func (cwu *CryptoWalletUpdate) SetMerchantID(i int64) *CryptoWalletUpdate {
	cwu.mutation.ResetMerchantID()
	cwu.mutation.SetMerchantID(i)
	return cwu
}

// SetNillableMerchantID sets the "merchant_id" field if the given value is not nil.
func (cwu *CryptoWalletUpdate) SetNillableMerchantID(i *int64) *CryptoWalletUpdate {
	if i != nil {
		cwu.SetMerchantID(*i)
	}
	return cwu
}

// AddMerchantID adds i to the "merchant_id" field.
func (cwu *CryptoWalletUpdate) AddMerchantID(i int64) *CryptoWalletUpdate {
	cwu.mutation.AddMerchantID(i)
	return cwu
}

// SetMerchantUserID sets the "merchant_user_id" field.
func (cwu *CryptoWalletUpdate) SetMerchantUserID(i int64) *CryptoWalletUpdate {
	cwu.mutation.ResetMerchantUserID()
	cwu.mutation.SetMerchantUserID(i)
	return cwu
}

// SetNillableMerchantUserID sets the "merchant_user_id" field if the given value is not nil.
func (cwu *CryptoWalletUpdate) SetNillableMerchantUserID(i *int64) *CryptoWalletUpdate {
	if i != nil {
		cwu.SetMerchantUserID(*i)
	}
	return cwu
}

// AddMerchantUserID adds i to the "merchant_user_id" field.
func (cwu *CryptoWalletUpdate) AddMerchantUserID(i int64) *CryptoWalletUpdate {
	cwu.mutation.AddMerchantUserID(i)
	return cwu
}

// SetCryptoType sets the "crypto_type" field.
func (cwu *CryptoWalletUpdate) SetCryptoType(i int32) *CryptoWalletUpdate {
	cwu.mutation.ResetCryptoType()
	cwu.mutation.SetCryptoType(i)
	return cwu
}

// SetNillableCryptoType sets the "crypto_type" field if the given value is not nil.
func (cwu *CryptoWalletUpdate) SetNillableCryptoType(i *int32) *CryptoWalletUpdate {
	if i != nil {
		cwu.SetCryptoType(*i)
	}
	return cwu
}

// AddCryptoType adds i to the "crypto_type" field.
func (cwu *CryptoWalletUpdate) AddCryptoType(i int32) *CryptoWalletUpdate {
	cwu.mutation.AddCryptoType(i)
	return cwu
}

// SetCryptoNetworkType sets the "crypto_network_type" field.
func (cwu *CryptoWalletUpdate) SetCryptoNetworkType(i int32) *CryptoWalletUpdate {
	cwu.mutation.ResetCryptoNetworkType()
	cwu.mutation.SetCryptoNetworkType(i)
	return cwu
}

// SetNillableCryptoNetworkType sets the "crypto_network_type" field if the given value is not nil.
func (cwu *CryptoWalletUpdate) SetNillableCryptoNetworkType(i *int32) *CryptoWalletUpdate {
	if i != nil {
		cwu.SetCryptoNetworkType(*i)
	}
	return cwu
}

// AddCryptoNetworkType adds i to the "crypto_network_type" field.
func (cwu *CryptoWalletUpdate) AddCryptoNetworkType(i int32) *CryptoWalletUpdate {
	cwu.mutation.AddCryptoNetworkType(i)
	return cwu
}

// SetAddress sets the "address" field.
func (cwu *CryptoWalletUpdate) SetAddress(s string) *CryptoWalletUpdate {
	cwu.mutation.SetAddress(s)
	return cwu
}

// SetStatus sets the "status" field.
func (cwu *CryptoWalletUpdate) SetStatus(i int32) *CryptoWalletUpdate {
	cwu.mutation.ResetStatus()
	cwu.mutation.SetStatus(i)
	return cwu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cwu *CryptoWalletUpdate) SetNillableStatus(i *int32) *CryptoWalletUpdate {
	if i != nil {
		cwu.SetStatus(*i)
	}
	return cwu
}

// AddStatus adds i to the "status" field.
func (cwu *CryptoWalletUpdate) AddStatus(i int32) *CryptoWalletUpdate {
	cwu.mutation.AddStatus(i)
	return cwu
}

// Mutation returns the CryptoWalletMutation object of the builder.
func (cwu *CryptoWalletUpdate) Mutation() *CryptoWalletMutation {
	return cwu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cwu *CryptoWalletUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	cwu.defaults()
	if len(cwu.hooks) == 0 {
		if err = cwu.check(); err != nil {
			return 0, err
		}
		affected, err = cwu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CryptoWalletMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cwu.check(); err != nil {
				return 0, err
			}
			cwu.mutation = mutation
			affected, err = cwu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cwu.hooks) - 1; i >= 0; i-- {
			if cwu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cwu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cwu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cwu *CryptoWalletUpdate) SaveX(ctx context.Context) int {
	affected, err := cwu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cwu *CryptoWalletUpdate) Exec(ctx context.Context) error {
	_, err := cwu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cwu *CryptoWalletUpdate) ExecX(ctx context.Context) {
	if err := cwu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cwu *CryptoWalletUpdate) defaults() {
	if _, ok := cwu.mutation.UpdatedAt(); !ok {
		v := cryptowallet.UpdateDefaultUpdatedAt()
		cwu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cwu *CryptoWalletUpdate) check() error {
	if v, ok := cwu.mutation.CreatedBy(); ok {
		if err := cryptowallet.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "CryptoWallet.created_by": %w`, err)}
		}
	}
	if v, ok := cwu.mutation.UpdatedBy(); ok {
		if err := cryptowallet.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "CryptoWallet.updated_by": %w`, err)}
		}
	}
	if v, ok := cwu.mutation.MerchantID(); ok {
		if err := cryptowallet.MerchantIDValidator(v); err != nil {
			return &ValidationError{Name: "merchant_id", err: fmt.Errorf(`ent: validator failed for field "CryptoWallet.merchant_id": %w`, err)}
		}
	}
	if v, ok := cwu.mutation.MerchantUserID(); ok {
		if err := cryptowallet.MerchantUserIDValidator(v); err != nil {
			return &ValidationError{Name: "merchant_user_id", err: fmt.Errorf(`ent: validator failed for field "CryptoWallet.merchant_user_id": %w`, err)}
		}
	}
	if v, ok := cwu.mutation.CryptoType(); ok {
		if err := cryptowallet.CryptoTypeValidator(v); err != nil {
			return &ValidationError{Name: "crypto_type", err: fmt.Errorf(`ent: validator failed for field "CryptoWallet.crypto_type": %w`, err)}
		}
	}
	if v, ok := cwu.mutation.CryptoNetworkType(); ok {
		if err := cryptowallet.CryptoNetworkTypeValidator(v); err != nil {
			return &ValidationError{Name: "crypto_network_type", err: fmt.Errorf(`ent: validator failed for field "CryptoWallet.crypto_network_type": %w`, err)}
		}
	}
	if v, ok := cwu.mutation.Address(); ok {
		if err := cryptowallet.AddressValidator(v); err != nil {
			return &ValidationError{Name: "address", err: fmt.Errorf(`ent: validator failed for field "CryptoWallet.address": %w`, err)}
		}
	}
	if v, ok := cwu.mutation.Status(); ok {
		if err := cryptowallet.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "CryptoWallet.status": %w`, err)}
		}
	}
	return nil
}

func (cwu *CryptoWalletUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   cryptowallet.Table,
			Columns: cryptowallet.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: cryptowallet.FieldID,
			},
		},
	}
	if ps := cwu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cwu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: cryptowallet.FieldCreatedAt,
		})
	}
	if value, ok := cwu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: cryptowallet.FieldUpdatedAt,
		})
	}
	if value, ok := cwu.mutation.CreatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cryptowallet.FieldCreatedBy,
		})
	}
	if value, ok := cwu.mutation.UpdatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cryptowallet.FieldUpdatedBy,
		})
	}
	if value, ok := cwu.mutation.MerchantID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cryptowallet.FieldMerchantID,
		})
	}
	if value, ok := cwu.mutation.AddedMerchantID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cryptowallet.FieldMerchantID,
		})
	}
	if value, ok := cwu.mutation.MerchantUserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cryptowallet.FieldMerchantUserID,
		})
	}
	if value, ok := cwu.mutation.AddedMerchantUserID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cryptowallet.FieldMerchantUserID,
		})
	}
	if value, ok := cwu.mutation.CryptoType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: cryptowallet.FieldCryptoType,
		})
	}
	if value, ok := cwu.mutation.AddedCryptoType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: cryptowallet.FieldCryptoType,
		})
	}
	if value, ok := cwu.mutation.CryptoNetworkType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: cryptowallet.FieldCryptoNetworkType,
		})
	}
	if value, ok := cwu.mutation.AddedCryptoNetworkType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: cryptowallet.FieldCryptoNetworkType,
		})
	}
	if value, ok := cwu.mutation.Address(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cryptowallet.FieldAddress,
		})
	}
	if value, ok := cwu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: cryptowallet.FieldStatus,
		})
	}
	if value, ok := cwu.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: cryptowallet.FieldStatus,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cwu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cryptowallet.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// CryptoWalletUpdateOne is the builder for updating a single CryptoWallet entity.
type CryptoWalletUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CryptoWalletMutation
}

// SetCreatedAt sets the "created_at" field.
func (cwuo *CryptoWalletUpdateOne) SetCreatedAt(t time.Time) *CryptoWalletUpdateOne {
	cwuo.mutation.SetCreatedAt(t)
	return cwuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cwuo *CryptoWalletUpdateOne) SetNillableCreatedAt(t *time.Time) *CryptoWalletUpdateOne {
	if t != nil {
		cwuo.SetCreatedAt(*t)
	}
	return cwuo
}

// SetUpdatedAt sets the "updated_at" field.
func (cwuo *CryptoWalletUpdateOne) SetUpdatedAt(t time.Time) *CryptoWalletUpdateOne {
	cwuo.mutation.SetUpdatedAt(t)
	return cwuo
}

// SetCreatedBy sets the "created_by" field.
func (cwuo *CryptoWalletUpdateOne) SetCreatedBy(s string) *CryptoWalletUpdateOne {
	cwuo.mutation.SetCreatedBy(s)
	return cwuo
}

// SetUpdatedBy sets the "updated_by" field.
func (cwuo *CryptoWalletUpdateOne) SetUpdatedBy(s string) *CryptoWalletUpdateOne {
	cwuo.mutation.SetUpdatedBy(s)
	return cwuo
}

// SetMerchantID sets the "merchant_id" field.
func (cwuo *CryptoWalletUpdateOne) SetMerchantID(i int64) *CryptoWalletUpdateOne {
	cwuo.mutation.ResetMerchantID()
	cwuo.mutation.SetMerchantID(i)
	return cwuo
}

// SetNillableMerchantID sets the "merchant_id" field if the given value is not nil.
func (cwuo *CryptoWalletUpdateOne) SetNillableMerchantID(i *int64) *CryptoWalletUpdateOne {
	if i != nil {
		cwuo.SetMerchantID(*i)
	}
	return cwuo
}

// AddMerchantID adds i to the "merchant_id" field.
func (cwuo *CryptoWalletUpdateOne) AddMerchantID(i int64) *CryptoWalletUpdateOne {
	cwuo.mutation.AddMerchantID(i)
	return cwuo
}

// SetMerchantUserID sets the "merchant_user_id" field.
func (cwuo *CryptoWalletUpdateOne) SetMerchantUserID(i int64) *CryptoWalletUpdateOne {
	cwuo.mutation.ResetMerchantUserID()
	cwuo.mutation.SetMerchantUserID(i)
	return cwuo
}

// SetNillableMerchantUserID sets the "merchant_user_id" field if the given value is not nil.
func (cwuo *CryptoWalletUpdateOne) SetNillableMerchantUserID(i *int64) *CryptoWalletUpdateOne {
	if i != nil {
		cwuo.SetMerchantUserID(*i)
	}
	return cwuo
}

// AddMerchantUserID adds i to the "merchant_user_id" field.
func (cwuo *CryptoWalletUpdateOne) AddMerchantUserID(i int64) *CryptoWalletUpdateOne {
	cwuo.mutation.AddMerchantUserID(i)
	return cwuo
}

// SetCryptoType sets the "crypto_type" field.
func (cwuo *CryptoWalletUpdateOne) SetCryptoType(i int32) *CryptoWalletUpdateOne {
	cwuo.mutation.ResetCryptoType()
	cwuo.mutation.SetCryptoType(i)
	return cwuo
}

// SetNillableCryptoType sets the "crypto_type" field if the given value is not nil.
func (cwuo *CryptoWalletUpdateOne) SetNillableCryptoType(i *int32) *CryptoWalletUpdateOne {
	if i != nil {
		cwuo.SetCryptoType(*i)
	}
	return cwuo
}

// AddCryptoType adds i to the "crypto_type" field.
func (cwuo *CryptoWalletUpdateOne) AddCryptoType(i int32) *CryptoWalletUpdateOne {
	cwuo.mutation.AddCryptoType(i)
	return cwuo
}

// SetCryptoNetworkType sets the "crypto_network_type" field.
func (cwuo *CryptoWalletUpdateOne) SetCryptoNetworkType(i int32) *CryptoWalletUpdateOne {
	cwuo.mutation.ResetCryptoNetworkType()
	cwuo.mutation.SetCryptoNetworkType(i)
	return cwuo
}

// SetNillableCryptoNetworkType sets the "crypto_network_type" field if the given value is not nil.
func (cwuo *CryptoWalletUpdateOne) SetNillableCryptoNetworkType(i *int32) *CryptoWalletUpdateOne {
	if i != nil {
		cwuo.SetCryptoNetworkType(*i)
	}
	return cwuo
}

// AddCryptoNetworkType adds i to the "crypto_network_type" field.
func (cwuo *CryptoWalletUpdateOne) AddCryptoNetworkType(i int32) *CryptoWalletUpdateOne {
	cwuo.mutation.AddCryptoNetworkType(i)
	return cwuo
}

// SetAddress sets the "address" field.
func (cwuo *CryptoWalletUpdateOne) SetAddress(s string) *CryptoWalletUpdateOne {
	cwuo.mutation.SetAddress(s)
	return cwuo
}

// SetStatus sets the "status" field.
func (cwuo *CryptoWalletUpdateOne) SetStatus(i int32) *CryptoWalletUpdateOne {
	cwuo.mutation.ResetStatus()
	cwuo.mutation.SetStatus(i)
	return cwuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cwuo *CryptoWalletUpdateOne) SetNillableStatus(i *int32) *CryptoWalletUpdateOne {
	if i != nil {
		cwuo.SetStatus(*i)
	}
	return cwuo
}

// AddStatus adds i to the "status" field.
func (cwuo *CryptoWalletUpdateOne) AddStatus(i int32) *CryptoWalletUpdateOne {
	cwuo.mutation.AddStatus(i)
	return cwuo
}

// Mutation returns the CryptoWalletMutation object of the builder.
func (cwuo *CryptoWalletUpdateOne) Mutation() *CryptoWalletMutation {
	return cwuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cwuo *CryptoWalletUpdateOne) Select(field string, fields ...string) *CryptoWalletUpdateOne {
	cwuo.fields = append([]string{field}, fields...)
	return cwuo
}

// Save executes the query and returns the updated CryptoWallet entity.
func (cwuo *CryptoWalletUpdateOne) Save(ctx context.Context) (*CryptoWallet, error) {
	var (
		err  error
		node *CryptoWallet
	)
	cwuo.defaults()
	if len(cwuo.hooks) == 0 {
		if err = cwuo.check(); err != nil {
			return nil, err
		}
		node, err = cwuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CryptoWalletMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cwuo.check(); err != nil {
				return nil, err
			}
			cwuo.mutation = mutation
			node, err = cwuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cwuo.hooks) - 1; i >= 0; i-- {
			if cwuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cwuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cwuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cwuo *CryptoWalletUpdateOne) SaveX(ctx context.Context) *CryptoWallet {
	node, err := cwuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cwuo *CryptoWalletUpdateOne) Exec(ctx context.Context) error {
	_, err := cwuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cwuo *CryptoWalletUpdateOne) ExecX(ctx context.Context) {
	if err := cwuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cwuo *CryptoWalletUpdateOne) defaults() {
	if _, ok := cwuo.mutation.UpdatedAt(); !ok {
		v := cryptowallet.UpdateDefaultUpdatedAt()
		cwuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cwuo *CryptoWalletUpdateOne) check() error {
	if v, ok := cwuo.mutation.CreatedBy(); ok {
		if err := cryptowallet.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "CryptoWallet.created_by": %w`, err)}
		}
	}
	if v, ok := cwuo.mutation.UpdatedBy(); ok {
		if err := cryptowallet.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "CryptoWallet.updated_by": %w`, err)}
		}
	}
	if v, ok := cwuo.mutation.MerchantID(); ok {
		if err := cryptowallet.MerchantIDValidator(v); err != nil {
			return &ValidationError{Name: "merchant_id", err: fmt.Errorf(`ent: validator failed for field "CryptoWallet.merchant_id": %w`, err)}
		}
	}
	if v, ok := cwuo.mutation.MerchantUserID(); ok {
		if err := cryptowallet.MerchantUserIDValidator(v); err != nil {
			return &ValidationError{Name: "merchant_user_id", err: fmt.Errorf(`ent: validator failed for field "CryptoWallet.merchant_user_id": %w`, err)}
		}
	}
	if v, ok := cwuo.mutation.CryptoType(); ok {
		if err := cryptowallet.CryptoTypeValidator(v); err != nil {
			return &ValidationError{Name: "crypto_type", err: fmt.Errorf(`ent: validator failed for field "CryptoWallet.crypto_type": %w`, err)}
		}
	}
	if v, ok := cwuo.mutation.CryptoNetworkType(); ok {
		if err := cryptowallet.CryptoNetworkTypeValidator(v); err != nil {
			return &ValidationError{Name: "crypto_network_type", err: fmt.Errorf(`ent: validator failed for field "CryptoWallet.crypto_network_type": %w`, err)}
		}
	}
	if v, ok := cwuo.mutation.Address(); ok {
		if err := cryptowallet.AddressValidator(v); err != nil {
			return &ValidationError{Name: "address", err: fmt.Errorf(`ent: validator failed for field "CryptoWallet.address": %w`, err)}
		}
	}
	if v, ok := cwuo.mutation.Status(); ok {
		if err := cryptowallet.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "CryptoWallet.status": %w`, err)}
		}
	}
	return nil
}

func (cwuo *CryptoWalletUpdateOne) sqlSave(ctx context.Context) (_node *CryptoWallet, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   cryptowallet.Table,
			Columns: cryptowallet.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: cryptowallet.FieldID,
			},
		},
	}
	id, ok := cwuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CryptoWallet.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cwuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, cryptowallet.FieldID)
		for _, f := range fields {
			if !cryptowallet.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != cryptowallet.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cwuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cwuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: cryptowallet.FieldCreatedAt,
		})
	}
	if value, ok := cwuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: cryptowallet.FieldUpdatedAt,
		})
	}
	if value, ok := cwuo.mutation.CreatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cryptowallet.FieldCreatedBy,
		})
	}
	if value, ok := cwuo.mutation.UpdatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cryptowallet.FieldUpdatedBy,
		})
	}
	if value, ok := cwuo.mutation.MerchantID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cryptowallet.FieldMerchantID,
		})
	}
	if value, ok := cwuo.mutation.AddedMerchantID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cryptowallet.FieldMerchantID,
		})
	}
	if value, ok := cwuo.mutation.MerchantUserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cryptowallet.FieldMerchantUserID,
		})
	}
	if value, ok := cwuo.mutation.AddedMerchantUserID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: cryptowallet.FieldMerchantUserID,
		})
	}
	if value, ok := cwuo.mutation.CryptoType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: cryptowallet.FieldCryptoType,
		})
	}
	if value, ok := cwuo.mutation.AddedCryptoType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: cryptowallet.FieldCryptoType,
		})
	}
	if value, ok := cwuo.mutation.CryptoNetworkType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: cryptowallet.FieldCryptoNetworkType,
		})
	}
	if value, ok := cwuo.mutation.AddedCryptoNetworkType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: cryptowallet.FieldCryptoNetworkType,
		})
	}
	if value, ok := cwuo.mutation.Address(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cryptowallet.FieldAddress,
		})
	}
	if value, ok := cwuo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: cryptowallet.FieldStatus,
		})
	}
	if value, ok := cwuo.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: cryptowallet.FieldStatus,
		})
	}
	_node = &CryptoWallet{config: cwuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cwuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cryptowallet.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
