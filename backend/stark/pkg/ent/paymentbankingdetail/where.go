// Code generated by entc, DO NOT EDIT.

package paymentbankingdetail

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"gitlab.com/mcuc/monorepo/backend/stark/pkg/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v string) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedBy), v))
	})
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v string) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedBy), v))
	})
}

// PaymentCode applies equality check predicate on the "payment_code" field. It's identical to PaymentCodeEQ.
func PaymentCode(v string) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPaymentCode), v))
	})
}

// MerchantUserID applies equality check predicate on the "merchant_user_id" field. It's identical to MerchantUserIDEQ.
func MerchantUserID(v int64) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMerchantUserID), v))
	})
}

// MerchantUserBankName applies equality check predicate on the "merchant_user_bank_name" field. It's identical to MerchantUserBankNameEQ.
func MerchantUserBankName(v int32) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMerchantUserBankName), v))
	})
}

// MerchantUserAccountNumber applies equality check predicate on the "merchant_user_account_number" field. It's identical to MerchantUserAccountNumberEQ.
func MerchantUserAccountNumber(v string) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMerchantUserAccountNumber), v))
	})
}

// MerchantUserAccountName applies equality check predicate on the "merchant_user_account_name" field. It's identical to MerchantUserAccountNameEQ.
func MerchantUserAccountName(v string) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMerchantUserAccountName), v))
	})
}

// SystemAccountBankName applies equality check predicate on the "system_account_bank_name" field. It's identical to SystemAccountBankNameEQ.
func SystemAccountBankName(v int32) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSystemAccountBankName), v))
	})
}

// SystemAccountNumber applies equality check predicate on the "system_account_number" field. It's identical to SystemAccountNumberEQ.
func SystemAccountNumber(v string) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSystemAccountNumber), v))
	})
}

// SystemAccountName applies equality check predicate on the "system_account_name" field. It's identical to SystemAccountNameEQ.
func SystemAccountName(v string) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSystemAccountName), v))
	})
}

// ImageURL applies equality check predicate on the "image_url" field. It's identical to ImageURLEQ.
func ImageURL(v string) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldImageURL), v))
	})
}

// TxID applies equality check predicate on the "tx_id" field. It's identical to TxIDEQ.
func TxID(v string) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTxID), v))
	})
}

// Amount applies equality check predicate on the "amount" field. It's identical to AmountEQ.
func Amount(v uint64) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAmount), v))
	})
}

// Fee applies equality check predicate on the "fee" field. It's identical to FeeEQ.
func Fee(v uint64) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFee), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.PaymentBankingDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.PaymentBankingDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.PaymentBankingDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.PaymentBankingDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v string) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedBy), v))
	})
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v string) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedBy), v))
	})
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...string) predicate.PaymentBankingDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedBy), v...))
	})
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...string) predicate.PaymentBankingDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedBy), v...))
	})
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v string) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedBy), v))
	})
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v string) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedBy), v))
	})
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v string) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedBy), v))
	})
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v string) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedBy), v))
	})
}

// CreatedByContains applies the Contains predicate on the "created_by" field.
func CreatedByContains(v string) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCreatedBy), v))
	})
}

// CreatedByHasPrefix applies the HasPrefix predicate on the "created_by" field.
func CreatedByHasPrefix(v string) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCreatedBy), v))
	})
}

// CreatedByHasSuffix applies the HasSuffix predicate on the "created_by" field.
func CreatedByHasSuffix(v string) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCreatedBy), v))
	})
}

// CreatedByEqualFold applies the EqualFold predicate on the "created_by" field.
func CreatedByEqualFold(v string) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCreatedBy), v))
	})
}

// CreatedByContainsFold applies the ContainsFold predicate on the "created_by" field.
func CreatedByContainsFold(v string) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCreatedBy), v))
	})
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v string) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedBy), v))
	})
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v string) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedBy), v))
	})
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...string) predicate.PaymentBankingDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedBy), v...))
	})
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...string) predicate.PaymentBankingDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedBy), v...))
	})
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v string) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedBy), v))
	})
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v string) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedBy), v))
	})
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v string) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedBy), v))
	})
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v string) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedBy), v))
	})
}

// UpdatedByContains applies the Contains predicate on the "updated_by" field.
func UpdatedByContains(v string) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUpdatedBy), v))
	})
}

// UpdatedByHasPrefix applies the HasPrefix predicate on the "updated_by" field.
func UpdatedByHasPrefix(v string) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUpdatedBy), v))
	})
}

// UpdatedByHasSuffix applies the HasSuffix predicate on the "updated_by" field.
func UpdatedByHasSuffix(v string) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUpdatedBy), v))
	})
}

// UpdatedByEqualFold applies the EqualFold predicate on the "updated_by" field.
func UpdatedByEqualFold(v string) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUpdatedBy), v))
	})
}

// UpdatedByContainsFold applies the ContainsFold predicate on the "updated_by" field.
func UpdatedByContainsFold(v string) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUpdatedBy), v))
	})
}

// PaymentCodeEQ applies the EQ predicate on the "payment_code" field.
func PaymentCodeEQ(v string) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPaymentCode), v))
	})
}

// PaymentCodeNEQ applies the NEQ predicate on the "payment_code" field.
func PaymentCodeNEQ(v string) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPaymentCode), v))
	})
}

// PaymentCodeIn applies the In predicate on the "payment_code" field.
func PaymentCodeIn(vs ...string) predicate.PaymentBankingDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPaymentCode), v...))
	})
}

// PaymentCodeNotIn applies the NotIn predicate on the "payment_code" field.
func PaymentCodeNotIn(vs ...string) predicate.PaymentBankingDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPaymentCode), v...))
	})
}

// PaymentCodeGT applies the GT predicate on the "payment_code" field.
func PaymentCodeGT(v string) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPaymentCode), v))
	})
}

// PaymentCodeGTE applies the GTE predicate on the "payment_code" field.
func PaymentCodeGTE(v string) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPaymentCode), v))
	})
}

// PaymentCodeLT applies the LT predicate on the "payment_code" field.
func PaymentCodeLT(v string) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPaymentCode), v))
	})
}

// PaymentCodeLTE applies the LTE predicate on the "payment_code" field.
func PaymentCodeLTE(v string) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPaymentCode), v))
	})
}

// PaymentCodeContains applies the Contains predicate on the "payment_code" field.
func PaymentCodeContains(v string) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPaymentCode), v))
	})
}

// PaymentCodeHasPrefix applies the HasPrefix predicate on the "payment_code" field.
func PaymentCodeHasPrefix(v string) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPaymentCode), v))
	})
}

// PaymentCodeHasSuffix applies the HasSuffix predicate on the "payment_code" field.
func PaymentCodeHasSuffix(v string) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPaymentCode), v))
	})
}

// PaymentCodeIsNil applies the IsNil predicate on the "payment_code" field.
func PaymentCodeIsNil() predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPaymentCode)))
	})
}

// PaymentCodeNotNil applies the NotNil predicate on the "payment_code" field.
func PaymentCodeNotNil() predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPaymentCode)))
	})
}

// PaymentCodeEqualFold applies the EqualFold predicate on the "payment_code" field.
func PaymentCodeEqualFold(v string) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPaymentCode), v))
	})
}

// PaymentCodeContainsFold applies the ContainsFold predicate on the "payment_code" field.
func PaymentCodeContainsFold(v string) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPaymentCode), v))
	})
}

// MerchantUserIDEQ applies the EQ predicate on the "merchant_user_id" field.
func MerchantUserIDEQ(v int64) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMerchantUserID), v))
	})
}

// MerchantUserIDNEQ applies the NEQ predicate on the "merchant_user_id" field.
func MerchantUserIDNEQ(v int64) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMerchantUserID), v))
	})
}

// MerchantUserIDIn applies the In predicate on the "merchant_user_id" field.
func MerchantUserIDIn(vs ...int64) predicate.PaymentBankingDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMerchantUserID), v...))
	})
}

// MerchantUserIDNotIn applies the NotIn predicate on the "merchant_user_id" field.
func MerchantUserIDNotIn(vs ...int64) predicate.PaymentBankingDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMerchantUserID), v...))
	})
}

// MerchantUserIDGT applies the GT predicate on the "merchant_user_id" field.
func MerchantUserIDGT(v int64) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMerchantUserID), v))
	})
}

// MerchantUserIDGTE applies the GTE predicate on the "merchant_user_id" field.
func MerchantUserIDGTE(v int64) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMerchantUserID), v))
	})
}

// MerchantUserIDLT applies the LT predicate on the "merchant_user_id" field.
func MerchantUserIDLT(v int64) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMerchantUserID), v))
	})
}

// MerchantUserIDLTE applies the LTE predicate on the "merchant_user_id" field.
func MerchantUserIDLTE(v int64) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMerchantUserID), v))
	})
}

// MerchantUserIDIsNil applies the IsNil predicate on the "merchant_user_id" field.
func MerchantUserIDIsNil() predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMerchantUserID)))
	})
}

// MerchantUserIDNotNil applies the NotNil predicate on the "merchant_user_id" field.
func MerchantUserIDNotNil() predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMerchantUserID)))
	})
}

// MerchantUserBankNameEQ applies the EQ predicate on the "merchant_user_bank_name" field.
func MerchantUserBankNameEQ(v int32) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMerchantUserBankName), v))
	})
}

// MerchantUserBankNameNEQ applies the NEQ predicate on the "merchant_user_bank_name" field.
func MerchantUserBankNameNEQ(v int32) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMerchantUserBankName), v))
	})
}

// MerchantUserBankNameIn applies the In predicate on the "merchant_user_bank_name" field.
func MerchantUserBankNameIn(vs ...int32) predicate.PaymentBankingDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMerchantUserBankName), v...))
	})
}

// MerchantUserBankNameNotIn applies the NotIn predicate on the "merchant_user_bank_name" field.
func MerchantUserBankNameNotIn(vs ...int32) predicate.PaymentBankingDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMerchantUserBankName), v...))
	})
}

// MerchantUserBankNameGT applies the GT predicate on the "merchant_user_bank_name" field.
func MerchantUserBankNameGT(v int32) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMerchantUserBankName), v))
	})
}

// MerchantUserBankNameGTE applies the GTE predicate on the "merchant_user_bank_name" field.
func MerchantUserBankNameGTE(v int32) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMerchantUserBankName), v))
	})
}

// MerchantUserBankNameLT applies the LT predicate on the "merchant_user_bank_name" field.
func MerchantUserBankNameLT(v int32) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMerchantUserBankName), v))
	})
}

// MerchantUserBankNameLTE applies the LTE predicate on the "merchant_user_bank_name" field.
func MerchantUserBankNameLTE(v int32) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMerchantUserBankName), v))
	})
}

// MerchantUserBankNameIsNil applies the IsNil predicate on the "merchant_user_bank_name" field.
func MerchantUserBankNameIsNil() predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMerchantUserBankName)))
	})
}

// MerchantUserBankNameNotNil applies the NotNil predicate on the "merchant_user_bank_name" field.
func MerchantUserBankNameNotNil() predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMerchantUserBankName)))
	})
}

// MerchantUserAccountNumberEQ applies the EQ predicate on the "merchant_user_account_number" field.
func MerchantUserAccountNumberEQ(v string) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMerchantUserAccountNumber), v))
	})
}

// MerchantUserAccountNumberNEQ applies the NEQ predicate on the "merchant_user_account_number" field.
func MerchantUserAccountNumberNEQ(v string) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMerchantUserAccountNumber), v))
	})
}

// MerchantUserAccountNumberIn applies the In predicate on the "merchant_user_account_number" field.
func MerchantUserAccountNumberIn(vs ...string) predicate.PaymentBankingDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMerchantUserAccountNumber), v...))
	})
}

// MerchantUserAccountNumberNotIn applies the NotIn predicate on the "merchant_user_account_number" field.
func MerchantUserAccountNumberNotIn(vs ...string) predicate.PaymentBankingDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMerchantUserAccountNumber), v...))
	})
}

// MerchantUserAccountNumberGT applies the GT predicate on the "merchant_user_account_number" field.
func MerchantUserAccountNumberGT(v string) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMerchantUserAccountNumber), v))
	})
}

// MerchantUserAccountNumberGTE applies the GTE predicate on the "merchant_user_account_number" field.
func MerchantUserAccountNumberGTE(v string) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMerchantUserAccountNumber), v))
	})
}

// MerchantUserAccountNumberLT applies the LT predicate on the "merchant_user_account_number" field.
func MerchantUserAccountNumberLT(v string) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMerchantUserAccountNumber), v))
	})
}

// MerchantUserAccountNumberLTE applies the LTE predicate on the "merchant_user_account_number" field.
func MerchantUserAccountNumberLTE(v string) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMerchantUserAccountNumber), v))
	})
}

// MerchantUserAccountNumberContains applies the Contains predicate on the "merchant_user_account_number" field.
func MerchantUserAccountNumberContains(v string) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMerchantUserAccountNumber), v))
	})
}

// MerchantUserAccountNumberHasPrefix applies the HasPrefix predicate on the "merchant_user_account_number" field.
func MerchantUserAccountNumberHasPrefix(v string) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMerchantUserAccountNumber), v))
	})
}

// MerchantUserAccountNumberHasSuffix applies the HasSuffix predicate on the "merchant_user_account_number" field.
func MerchantUserAccountNumberHasSuffix(v string) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMerchantUserAccountNumber), v))
	})
}

// MerchantUserAccountNumberIsNil applies the IsNil predicate on the "merchant_user_account_number" field.
func MerchantUserAccountNumberIsNil() predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMerchantUserAccountNumber)))
	})
}

// MerchantUserAccountNumberNotNil applies the NotNil predicate on the "merchant_user_account_number" field.
func MerchantUserAccountNumberNotNil() predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMerchantUserAccountNumber)))
	})
}

// MerchantUserAccountNumberEqualFold applies the EqualFold predicate on the "merchant_user_account_number" field.
func MerchantUserAccountNumberEqualFold(v string) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMerchantUserAccountNumber), v))
	})
}

// MerchantUserAccountNumberContainsFold applies the ContainsFold predicate on the "merchant_user_account_number" field.
func MerchantUserAccountNumberContainsFold(v string) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMerchantUserAccountNumber), v))
	})
}

// MerchantUserAccountNameEQ applies the EQ predicate on the "merchant_user_account_name" field.
func MerchantUserAccountNameEQ(v string) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMerchantUserAccountName), v))
	})
}

// MerchantUserAccountNameNEQ applies the NEQ predicate on the "merchant_user_account_name" field.
func MerchantUserAccountNameNEQ(v string) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMerchantUserAccountName), v))
	})
}

// MerchantUserAccountNameIn applies the In predicate on the "merchant_user_account_name" field.
func MerchantUserAccountNameIn(vs ...string) predicate.PaymentBankingDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMerchantUserAccountName), v...))
	})
}

// MerchantUserAccountNameNotIn applies the NotIn predicate on the "merchant_user_account_name" field.
func MerchantUserAccountNameNotIn(vs ...string) predicate.PaymentBankingDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMerchantUserAccountName), v...))
	})
}

// MerchantUserAccountNameGT applies the GT predicate on the "merchant_user_account_name" field.
func MerchantUserAccountNameGT(v string) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMerchantUserAccountName), v))
	})
}

// MerchantUserAccountNameGTE applies the GTE predicate on the "merchant_user_account_name" field.
func MerchantUserAccountNameGTE(v string) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMerchantUserAccountName), v))
	})
}

// MerchantUserAccountNameLT applies the LT predicate on the "merchant_user_account_name" field.
func MerchantUserAccountNameLT(v string) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMerchantUserAccountName), v))
	})
}

// MerchantUserAccountNameLTE applies the LTE predicate on the "merchant_user_account_name" field.
func MerchantUserAccountNameLTE(v string) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMerchantUserAccountName), v))
	})
}

// MerchantUserAccountNameContains applies the Contains predicate on the "merchant_user_account_name" field.
func MerchantUserAccountNameContains(v string) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMerchantUserAccountName), v))
	})
}

// MerchantUserAccountNameHasPrefix applies the HasPrefix predicate on the "merchant_user_account_name" field.
func MerchantUserAccountNameHasPrefix(v string) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMerchantUserAccountName), v))
	})
}

// MerchantUserAccountNameHasSuffix applies the HasSuffix predicate on the "merchant_user_account_name" field.
func MerchantUserAccountNameHasSuffix(v string) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMerchantUserAccountName), v))
	})
}

// MerchantUserAccountNameIsNil applies the IsNil predicate on the "merchant_user_account_name" field.
func MerchantUserAccountNameIsNil() predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMerchantUserAccountName)))
	})
}

// MerchantUserAccountNameNotNil applies the NotNil predicate on the "merchant_user_account_name" field.
func MerchantUserAccountNameNotNil() predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMerchantUserAccountName)))
	})
}

// MerchantUserAccountNameEqualFold applies the EqualFold predicate on the "merchant_user_account_name" field.
func MerchantUserAccountNameEqualFold(v string) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMerchantUserAccountName), v))
	})
}

// MerchantUserAccountNameContainsFold applies the ContainsFold predicate on the "merchant_user_account_name" field.
func MerchantUserAccountNameContainsFold(v string) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMerchantUserAccountName), v))
	})
}

// SystemAccountBankNameEQ applies the EQ predicate on the "system_account_bank_name" field.
func SystemAccountBankNameEQ(v int32) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSystemAccountBankName), v))
	})
}

// SystemAccountBankNameNEQ applies the NEQ predicate on the "system_account_bank_name" field.
func SystemAccountBankNameNEQ(v int32) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSystemAccountBankName), v))
	})
}

// SystemAccountBankNameIn applies the In predicate on the "system_account_bank_name" field.
func SystemAccountBankNameIn(vs ...int32) predicate.PaymentBankingDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSystemAccountBankName), v...))
	})
}

// SystemAccountBankNameNotIn applies the NotIn predicate on the "system_account_bank_name" field.
func SystemAccountBankNameNotIn(vs ...int32) predicate.PaymentBankingDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSystemAccountBankName), v...))
	})
}

// SystemAccountBankNameGT applies the GT predicate on the "system_account_bank_name" field.
func SystemAccountBankNameGT(v int32) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSystemAccountBankName), v))
	})
}

// SystemAccountBankNameGTE applies the GTE predicate on the "system_account_bank_name" field.
func SystemAccountBankNameGTE(v int32) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSystemAccountBankName), v))
	})
}

// SystemAccountBankNameLT applies the LT predicate on the "system_account_bank_name" field.
func SystemAccountBankNameLT(v int32) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSystemAccountBankName), v))
	})
}

// SystemAccountBankNameLTE applies the LTE predicate on the "system_account_bank_name" field.
func SystemAccountBankNameLTE(v int32) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSystemAccountBankName), v))
	})
}

// SystemAccountBankNameIsNil applies the IsNil predicate on the "system_account_bank_name" field.
func SystemAccountBankNameIsNil() predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSystemAccountBankName)))
	})
}

// SystemAccountBankNameNotNil applies the NotNil predicate on the "system_account_bank_name" field.
func SystemAccountBankNameNotNil() predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSystemAccountBankName)))
	})
}

// SystemAccountNumberEQ applies the EQ predicate on the "system_account_number" field.
func SystemAccountNumberEQ(v string) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSystemAccountNumber), v))
	})
}

// SystemAccountNumberNEQ applies the NEQ predicate on the "system_account_number" field.
func SystemAccountNumberNEQ(v string) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSystemAccountNumber), v))
	})
}

// SystemAccountNumberIn applies the In predicate on the "system_account_number" field.
func SystemAccountNumberIn(vs ...string) predicate.PaymentBankingDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSystemAccountNumber), v...))
	})
}

// SystemAccountNumberNotIn applies the NotIn predicate on the "system_account_number" field.
func SystemAccountNumberNotIn(vs ...string) predicate.PaymentBankingDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSystemAccountNumber), v...))
	})
}

// SystemAccountNumberGT applies the GT predicate on the "system_account_number" field.
func SystemAccountNumberGT(v string) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSystemAccountNumber), v))
	})
}

// SystemAccountNumberGTE applies the GTE predicate on the "system_account_number" field.
func SystemAccountNumberGTE(v string) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSystemAccountNumber), v))
	})
}

// SystemAccountNumberLT applies the LT predicate on the "system_account_number" field.
func SystemAccountNumberLT(v string) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSystemAccountNumber), v))
	})
}

// SystemAccountNumberLTE applies the LTE predicate on the "system_account_number" field.
func SystemAccountNumberLTE(v string) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSystemAccountNumber), v))
	})
}

// SystemAccountNumberContains applies the Contains predicate on the "system_account_number" field.
func SystemAccountNumberContains(v string) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSystemAccountNumber), v))
	})
}

// SystemAccountNumberHasPrefix applies the HasPrefix predicate on the "system_account_number" field.
func SystemAccountNumberHasPrefix(v string) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSystemAccountNumber), v))
	})
}

// SystemAccountNumberHasSuffix applies the HasSuffix predicate on the "system_account_number" field.
func SystemAccountNumberHasSuffix(v string) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSystemAccountNumber), v))
	})
}

// SystemAccountNumberIsNil applies the IsNil predicate on the "system_account_number" field.
func SystemAccountNumberIsNil() predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSystemAccountNumber)))
	})
}

// SystemAccountNumberNotNil applies the NotNil predicate on the "system_account_number" field.
func SystemAccountNumberNotNil() predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSystemAccountNumber)))
	})
}

// SystemAccountNumberEqualFold applies the EqualFold predicate on the "system_account_number" field.
func SystemAccountNumberEqualFold(v string) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSystemAccountNumber), v))
	})
}

// SystemAccountNumberContainsFold applies the ContainsFold predicate on the "system_account_number" field.
func SystemAccountNumberContainsFold(v string) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSystemAccountNumber), v))
	})
}

// SystemAccountNameEQ applies the EQ predicate on the "system_account_name" field.
func SystemAccountNameEQ(v string) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSystemAccountName), v))
	})
}

// SystemAccountNameNEQ applies the NEQ predicate on the "system_account_name" field.
func SystemAccountNameNEQ(v string) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSystemAccountName), v))
	})
}

// SystemAccountNameIn applies the In predicate on the "system_account_name" field.
func SystemAccountNameIn(vs ...string) predicate.PaymentBankingDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSystemAccountName), v...))
	})
}

// SystemAccountNameNotIn applies the NotIn predicate on the "system_account_name" field.
func SystemAccountNameNotIn(vs ...string) predicate.PaymentBankingDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSystemAccountName), v...))
	})
}

// SystemAccountNameGT applies the GT predicate on the "system_account_name" field.
func SystemAccountNameGT(v string) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSystemAccountName), v))
	})
}

// SystemAccountNameGTE applies the GTE predicate on the "system_account_name" field.
func SystemAccountNameGTE(v string) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSystemAccountName), v))
	})
}

// SystemAccountNameLT applies the LT predicate on the "system_account_name" field.
func SystemAccountNameLT(v string) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSystemAccountName), v))
	})
}

// SystemAccountNameLTE applies the LTE predicate on the "system_account_name" field.
func SystemAccountNameLTE(v string) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSystemAccountName), v))
	})
}

// SystemAccountNameContains applies the Contains predicate on the "system_account_name" field.
func SystemAccountNameContains(v string) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSystemAccountName), v))
	})
}

// SystemAccountNameHasPrefix applies the HasPrefix predicate on the "system_account_name" field.
func SystemAccountNameHasPrefix(v string) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSystemAccountName), v))
	})
}

// SystemAccountNameHasSuffix applies the HasSuffix predicate on the "system_account_name" field.
func SystemAccountNameHasSuffix(v string) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSystemAccountName), v))
	})
}

// SystemAccountNameIsNil applies the IsNil predicate on the "system_account_name" field.
func SystemAccountNameIsNil() predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSystemAccountName)))
	})
}

// SystemAccountNameNotNil applies the NotNil predicate on the "system_account_name" field.
func SystemAccountNameNotNil() predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSystemAccountName)))
	})
}

// SystemAccountNameEqualFold applies the EqualFold predicate on the "system_account_name" field.
func SystemAccountNameEqualFold(v string) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSystemAccountName), v))
	})
}

// SystemAccountNameContainsFold applies the ContainsFold predicate on the "system_account_name" field.
func SystemAccountNameContainsFold(v string) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSystemAccountName), v))
	})
}

// ImageURLEQ applies the EQ predicate on the "image_url" field.
func ImageURLEQ(v string) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldImageURL), v))
	})
}

// ImageURLNEQ applies the NEQ predicate on the "image_url" field.
func ImageURLNEQ(v string) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldImageURL), v))
	})
}

// ImageURLIn applies the In predicate on the "image_url" field.
func ImageURLIn(vs ...string) predicate.PaymentBankingDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldImageURL), v...))
	})
}

// ImageURLNotIn applies the NotIn predicate on the "image_url" field.
func ImageURLNotIn(vs ...string) predicate.PaymentBankingDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldImageURL), v...))
	})
}

// ImageURLGT applies the GT predicate on the "image_url" field.
func ImageURLGT(v string) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldImageURL), v))
	})
}

// ImageURLGTE applies the GTE predicate on the "image_url" field.
func ImageURLGTE(v string) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldImageURL), v))
	})
}

// ImageURLLT applies the LT predicate on the "image_url" field.
func ImageURLLT(v string) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldImageURL), v))
	})
}

// ImageURLLTE applies the LTE predicate on the "image_url" field.
func ImageURLLTE(v string) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldImageURL), v))
	})
}

// ImageURLContains applies the Contains predicate on the "image_url" field.
func ImageURLContains(v string) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldImageURL), v))
	})
}

// ImageURLHasPrefix applies the HasPrefix predicate on the "image_url" field.
func ImageURLHasPrefix(v string) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldImageURL), v))
	})
}

// ImageURLHasSuffix applies the HasSuffix predicate on the "image_url" field.
func ImageURLHasSuffix(v string) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldImageURL), v))
	})
}

// ImageURLIsNil applies the IsNil predicate on the "image_url" field.
func ImageURLIsNil() predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldImageURL)))
	})
}

// ImageURLNotNil applies the NotNil predicate on the "image_url" field.
func ImageURLNotNil() predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldImageURL)))
	})
}

// ImageURLEqualFold applies the EqualFold predicate on the "image_url" field.
func ImageURLEqualFold(v string) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldImageURL), v))
	})
}

// ImageURLContainsFold applies the ContainsFold predicate on the "image_url" field.
func ImageURLContainsFold(v string) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldImageURL), v))
	})
}

// TxIDEQ applies the EQ predicate on the "tx_id" field.
func TxIDEQ(v string) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTxID), v))
	})
}

// TxIDNEQ applies the NEQ predicate on the "tx_id" field.
func TxIDNEQ(v string) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTxID), v))
	})
}

// TxIDIn applies the In predicate on the "tx_id" field.
func TxIDIn(vs ...string) predicate.PaymentBankingDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTxID), v...))
	})
}

// TxIDNotIn applies the NotIn predicate on the "tx_id" field.
func TxIDNotIn(vs ...string) predicate.PaymentBankingDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTxID), v...))
	})
}

// TxIDGT applies the GT predicate on the "tx_id" field.
func TxIDGT(v string) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTxID), v))
	})
}

// TxIDGTE applies the GTE predicate on the "tx_id" field.
func TxIDGTE(v string) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTxID), v))
	})
}

// TxIDLT applies the LT predicate on the "tx_id" field.
func TxIDLT(v string) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTxID), v))
	})
}

// TxIDLTE applies the LTE predicate on the "tx_id" field.
func TxIDLTE(v string) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTxID), v))
	})
}

// TxIDContains applies the Contains predicate on the "tx_id" field.
func TxIDContains(v string) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTxID), v))
	})
}

// TxIDHasPrefix applies the HasPrefix predicate on the "tx_id" field.
func TxIDHasPrefix(v string) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTxID), v))
	})
}

// TxIDHasSuffix applies the HasSuffix predicate on the "tx_id" field.
func TxIDHasSuffix(v string) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTxID), v))
	})
}

// TxIDIsNil applies the IsNil predicate on the "tx_id" field.
func TxIDIsNil() predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTxID)))
	})
}

// TxIDNotNil applies the NotNil predicate on the "tx_id" field.
func TxIDNotNil() predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTxID)))
	})
}

// TxIDEqualFold applies the EqualFold predicate on the "tx_id" field.
func TxIDEqualFold(v string) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTxID), v))
	})
}

// TxIDContainsFold applies the ContainsFold predicate on the "tx_id" field.
func TxIDContainsFold(v string) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTxID), v))
	})
}

// AmountEQ applies the EQ predicate on the "amount" field.
func AmountEQ(v uint64) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAmount), v))
	})
}

// AmountNEQ applies the NEQ predicate on the "amount" field.
func AmountNEQ(v uint64) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAmount), v))
	})
}

// AmountIn applies the In predicate on the "amount" field.
func AmountIn(vs ...uint64) predicate.PaymentBankingDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAmount), v...))
	})
}

// AmountNotIn applies the NotIn predicate on the "amount" field.
func AmountNotIn(vs ...uint64) predicate.PaymentBankingDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAmount), v...))
	})
}

// AmountGT applies the GT predicate on the "amount" field.
func AmountGT(v uint64) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAmount), v))
	})
}

// AmountGTE applies the GTE predicate on the "amount" field.
func AmountGTE(v uint64) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAmount), v))
	})
}

// AmountLT applies the LT predicate on the "amount" field.
func AmountLT(v uint64) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAmount), v))
	})
}

// AmountLTE applies the LTE predicate on the "amount" field.
func AmountLTE(v uint64) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAmount), v))
	})
}

// AmountIsNil applies the IsNil predicate on the "amount" field.
func AmountIsNil() predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAmount)))
	})
}

// AmountNotNil applies the NotNil predicate on the "amount" field.
func AmountNotNil() predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAmount)))
	})
}

// FeeEQ applies the EQ predicate on the "fee" field.
func FeeEQ(v uint64) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFee), v))
	})
}

// FeeNEQ applies the NEQ predicate on the "fee" field.
func FeeNEQ(v uint64) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFee), v))
	})
}

// FeeIn applies the In predicate on the "fee" field.
func FeeIn(vs ...uint64) predicate.PaymentBankingDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFee), v...))
	})
}

// FeeNotIn applies the NotIn predicate on the "fee" field.
func FeeNotIn(vs ...uint64) predicate.PaymentBankingDetail {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFee), v...))
	})
}

// FeeGT applies the GT predicate on the "fee" field.
func FeeGT(v uint64) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFee), v))
	})
}

// FeeGTE applies the GTE predicate on the "fee" field.
func FeeGTE(v uint64) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFee), v))
	})
}

// FeeLT applies the LT predicate on the "fee" field.
func FeeLT(v uint64) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFee), v))
	})
}

// FeeLTE applies the LTE predicate on the "fee" field.
func FeeLTE(v uint64) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFee), v))
	})
}

// FeeIsNil applies the IsNil predicate on the "fee" field.
func FeeIsNil() predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldFee)))
	})
}

// FeeNotNil applies the NotNil predicate on the "fee" field.
func FeeNotNil() predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldFee)))
	})
}

// HasPayment applies the HasEdge predicate on the "payment" edge.
func HasPayment() predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PaymentTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PaymentTable, PaymentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPaymentWith applies the HasEdge predicate on the "payment" edge with a given conditions (other predicates).
func HasPaymentWith(preds ...predicate.Payment) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PaymentInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PaymentTable, PaymentColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PaymentBankingDetail) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PaymentBankingDetail) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PaymentBankingDetail) predicate.PaymentBankingDetail {
	return predicate.PaymentBankingDetail(func(s *sql.Selector) {
		p(s.Not())
	})
}
