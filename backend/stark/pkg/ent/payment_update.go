// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"gitlab.com/mcuc/monorepo/backend/stark/pkg/ent/payment"
	"gitlab.com/mcuc/monorepo/backend/stark/pkg/ent/paymentbankingdetail"
	"gitlab.com/mcuc/monorepo/backend/stark/pkg/ent/paymentcryptodetail"
	"gitlab.com/mcuc/monorepo/backend/stark/pkg/ent/paymentewalletdetail"
	"gitlab.com/mcuc/monorepo/backend/stark/pkg/ent/paymenttelcodetail"
	"gitlab.com/mcuc/monorepo/backend/stark/pkg/ent/predicate"
	"gitlab.com/mcuc/monorepo/backend/stark/pkg/ent/revision"
)

// PaymentUpdate is the builder for updating Payment entities.
type PaymentUpdate struct {
	config
	hooks    []Hook
	mutation *PaymentMutation
}

// Where appends a list predicates to the PaymentUpdate builder.
func (pu *PaymentUpdate) Where(ps ...predicate.Payment) *PaymentUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetCreatedBy sets the "created_by" field.
func (pu *PaymentUpdate) SetCreatedBy(s string) *PaymentUpdate {
	pu.mutation.SetCreatedBy(s)
	return pu
}

// SetCreatedAt sets the "created_at" field.
func (pu *PaymentUpdate) SetCreatedAt(t time.Time) *PaymentUpdate {
	pu.mutation.SetCreatedAt(t)
	return pu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pu *PaymentUpdate) SetNillableCreatedAt(t *time.Time) *PaymentUpdate {
	if t != nil {
		pu.SetCreatedAt(*t)
	}
	return pu
}

// SetUpdatedBy sets the "updated_by" field.
func (pu *PaymentUpdate) SetUpdatedBy(s string) *PaymentUpdate {
	pu.mutation.SetUpdatedBy(s)
	return pu
}

// SetUpdatedAt sets the "updated_at" field.
func (pu *PaymentUpdate) SetUpdatedAt(t time.Time) *PaymentUpdate {
	pu.mutation.SetUpdatedAt(t)
	return pu
}

// SetApprovedBy sets the "approved_by" field.
func (pu *PaymentUpdate) SetApprovedBy(s string) *PaymentUpdate {
	pu.mutation.SetApprovedBy(s)
	return pu
}

// SetNillableApprovedBy sets the "approved_by" field if the given value is not nil.
func (pu *PaymentUpdate) SetNillableApprovedBy(s *string) *PaymentUpdate {
	if s != nil {
		pu.SetApprovedBy(*s)
	}
	return pu
}

// ClearApprovedBy clears the value of the "approved_by" field.
func (pu *PaymentUpdate) ClearApprovedBy() *PaymentUpdate {
	pu.mutation.ClearApprovedBy()
	return pu
}

// SetApprovedAt sets the "approved_at" field.
func (pu *PaymentUpdate) SetApprovedAt(t time.Time) *PaymentUpdate {
	pu.mutation.SetApprovedAt(t)
	return pu
}

// SetNillableApprovedAt sets the "approved_at" field if the given value is not nil.
func (pu *PaymentUpdate) SetNillableApprovedAt(t *time.Time) *PaymentUpdate {
	if t != nil {
		pu.SetApprovedAt(*t)
	}
	return pu
}

// ClearApprovedAt clears the value of the "approved_at" field.
func (pu *PaymentUpdate) ClearApprovedAt() *PaymentUpdate {
	pu.mutation.ClearApprovedAt()
	return pu
}

// SetMerchantID sets the "merchant_id" field.
func (pu *PaymentUpdate) SetMerchantID(i int64) *PaymentUpdate {
	pu.mutation.ResetMerchantID()
	pu.mutation.SetMerchantID(i)
	return pu
}

// SetNillableMerchantID sets the "merchant_id" field if the given value is not nil.
func (pu *PaymentUpdate) SetNillableMerchantID(i *int64) *PaymentUpdate {
	if i != nil {
		pu.SetMerchantID(*i)
	}
	return pu
}

// AddMerchantID adds i to the "merchant_id" field.
func (pu *PaymentUpdate) AddMerchantID(i int64) *PaymentUpdate {
	pu.mutation.AddMerchantID(i)
	return pu
}

// SetMerchantUserID sets the "merchant_user_id" field.
func (pu *PaymentUpdate) SetMerchantUserID(i int64) *PaymentUpdate {
	pu.mutation.ResetMerchantUserID()
	pu.mutation.SetMerchantUserID(i)
	return pu
}

// SetNillableMerchantUserID sets the "merchant_user_id" field if the given value is not nil.
func (pu *PaymentUpdate) SetNillableMerchantUserID(i *int64) *PaymentUpdate {
	if i != nil {
		pu.SetMerchantUserID(*i)
	}
	return pu
}

// AddMerchantUserID adds i to the "merchant_user_id" field.
func (pu *PaymentUpdate) AddMerchantUserID(i int64) *PaymentUpdate {
	pu.mutation.AddMerchantUserID(i)
	return pu
}

// SetMethod sets the "method" field.
func (pu *PaymentUpdate) SetMethod(i int32) *PaymentUpdate {
	pu.mutation.ResetMethod()
	pu.mutation.SetMethod(i)
	return pu
}

// SetNillableMethod sets the "method" field if the given value is not nil.
func (pu *PaymentUpdate) SetNillableMethod(i *int32) *PaymentUpdate {
	if i != nil {
		pu.SetMethod(*i)
	}
	return pu
}

// AddMethod adds i to the "method" field.
func (pu *PaymentUpdate) AddMethod(i int32) *PaymentUpdate {
	pu.mutation.AddMethod(i)
	return pu
}

// SetType sets the "type" field.
func (pu *PaymentUpdate) SetType(i int32) *PaymentUpdate {
	pu.mutation.ResetType()
	pu.mutation.SetType(i)
	return pu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (pu *PaymentUpdate) SetNillableType(i *int32) *PaymentUpdate {
	if i != nil {
		pu.SetType(*i)
	}
	return pu
}

// AddType adds i to the "type" field.
func (pu *PaymentUpdate) AddType(i int32) *PaymentUpdate {
	pu.mutation.AddType(i)
	return pu
}

// SetStatus sets the "status" field.
func (pu *PaymentUpdate) SetStatus(i int32) *PaymentUpdate {
	pu.mutation.ResetStatus()
	pu.mutation.SetStatus(i)
	return pu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (pu *PaymentUpdate) SetNillableStatus(i *int32) *PaymentUpdate {
	if i != nil {
		pu.SetStatus(*i)
	}
	return pu
}

// AddStatus adds i to the "status" field.
func (pu *PaymentUpdate) AddStatus(i int32) *PaymentUpdate {
	pu.mutation.AddStatus(i)
	return pu
}

// AddPaymentBankingDetailIDs adds the "payment_banking_detail" edge to the PaymentBankingDetail entity by IDs.
func (pu *PaymentUpdate) AddPaymentBankingDetailIDs(ids ...int64) *PaymentUpdate {
	pu.mutation.AddPaymentBankingDetailIDs(ids...)
	return pu
}

// AddPaymentBankingDetail adds the "payment_banking_detail" edges to the PaymentBankingDetail entity.
func (pu *PaymentUpdate) AddPaymentBankingDetail(p ...*PaymentBankingDetail) *PaymentUpdate {
	ids := make([]int64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.AddPaymentBankingDetailIDs(ids...)
}

// AddPaymentTelcoDetailIDs adds the "payment_telco_detail" edge to the PaymentTelcoDetail entity by IDs.
func (pu *PaymentUpdate) AddPaymentTelcoDetailIDs(ids ...int64) *PaymentUpdate {
	pu.mutation.AddPaymentTelcoDetailIDs(ids...)
	return pu
}

// AddPaymentTelcoDetail adds the "payment_telco_detail" edges to the PaymentTelcoDetail entity.
func (pu *PaymentUpdate) AddPaymentTelcoDetail(p ...*PaymentTelcoDetail) *PaymentUpdate {
	ids := make([]int64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.AddPaymentTelcoDetailIDs(ids...)
}

// AddPaymentEWalletDetailIDs adds the "payment_e_wallet_detail" edge to the PaymentEWalletDetail entity by IDs.
func (pu *PaymentUpdate) AddPaymentEWalletDetailIDs(ids ...int64) *PaymentUpdate {
	pu.mutation.AddPaymentEWalletDetailIDs(ids...)
	return pu
}

// AddPaymentEWalletDetail adds the "payment_e_wallet_detail" edges to the PaymentEWalletDetail entity.
func (pu *PaymentUpdate) AddPaymentEWalletDetail(p ...*PaymentEWalletDetail) *PaymentUpdate {
	ids := make([]int64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.AddPaymentEWalletDetailIDs(ids...)
}

// AddPaymentCryptoDetailIDs adds the "payment_crypto_detail" edge to the PaymentCryptoDetail entity by IDs.
func (pu *PaymentUpdate) AddPaymentCryptoDetailIDs(ids ...int64) *PaymentUpdate {
	pu.mutation.AddPaymentCryptoDetailIDs(ids...)
	return pu
}

// AddPaymentCryptoDetail adds the "payment_crypto_detail" edges to the PaymentCryptoDetail entity.
func (pu *PaymentUpdate) AddPaymentCryptoDetail(p ...*PaymentCryptoDetail) *PaymentUpdate {
	ids := make([]int64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.AddPaymentCryptoDetailIDs(ids...)
}

// AddRevisionIDs adds the "revisions" edge to the Revision entity by IDs.
func (pu *PaymentUpdate) AddRevisionIDs(ids ...int64) *PaymentUpdate {
	pu.mutation.AddRevisionIDs(ids...)
	return pu
}

// AddRevisions adds the "revisions" edges to the Revision entity.
func (pu *PaymentUpdate) AddRevisions(r ...*Revision) *PaymentUpdate {
	ids := make([]int64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return pu.AddRevisionIDs(ids...)
}

// Mutation returns the PaymentMutation object of the builder.
func (pu *PaymentUpdate) Mutation() *PaymentMutation {
	return pu.mutation
}

// ClearPaymentBankingDetail clears all "payment_banking_detail" edges to the PaymentBankingDetail entity.
func (pu *PaymentUpdate) ClearPaymentBankingDetail() *PaymentUpdate {
	pu.mutation.ClearPaymentBankingDetail()
	return pu
}

// RemovePaymentBankingDetailIDs removes the "payment_banking_detail" edge to PaymentBankingDetail entities by IDs.
func (pu *PaymentUpdate) RemovePaymentBankingDetailIDs(ids ...int64) *PaymentUpdate {
	pu.mutation.RemovePaymentBankingDetailIDs(ids...)
	return pu
}

// RemovePaymentBankingDetail removes "payment_banking_detail" edges to PaymentBankingDetail entities.
func (pu *PaymentUpdate) RemovePaymentBankingDetail(p ...*PaymentBankingDetail) *PaymentUpdate {
	ids := make([]int64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.RemovePaymentBankingDetailIDs(ids...)
}

// ClearPaymentTelcoDetail clears all "payment_telco_detail" edges to the PaymentTelcoDetail entity.
func (pu *PaymentUpdate) ClearPaymentTelcoDetail() *PaymentUpdate {
	pu.mutation.ClearPaymentTelcoDetail()
	return pu
}

// RemovePaymentTelcoDetailIDs removes the "payment_telco_detail" edge to PaymentTelcoDetail entities by IDs.
func (pu *PaymentUpdate) RemovePaymentTelcoDetailIDs(ids ...int64) *PaymentUpdate {
	pu.mutation.RemovePaymentTelcoDetailIDs(ids...)
	return pu
}

// RemovePaymentTelcoDetail removes "payment_telco_detail" edges to PaymentTelcoDetail entities.
func (pu *PaymentUpdate) RemovePaymentTelcoDetail(p ...*PaymentTelcoDetail) *PaymentUpdate {
	ids := make([]int64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.RemovePaymentTelcoDetailIDs(ids...)
}

// ClearPaymentEWalletDetail clears all "payment_e_wallet_detail" edges to the PaymentEWalletDetail entity.
func (pu *PaymentUpdate) ClearPaymentEWalletDetail() *PaymentUpdate {
	pu.mutation.ClearPaymentEWalletDetail()
	return pu
}

// RemovePaymentEWalletDetailIDs removes the "payment_e_wallet_detail" edge to PaymentEWalletDetail entities by IDs.
func (pu *PaymentUpdate) RemovePaymentEWalletDetailIDs(ids ...int64) *PaymentUpdate {
	pu.mutation.RemovePaymentEWalletDetailIDs(ids...)
	return pu
}

// RemovePaymentEWalletDetail removes "payment_e_wallet_detail" edges to PaymentEWalletDetail entities.
func (pu *PaymentUpdate) RemovePaymentEWalletDetail(p ...*PaymentEWalletDetail) *PaymentUpdate {
	ids := make([]int64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.RemovePaymentEWalletDetailIDs(ids...)
}

// ClearPaymentCryptoDetail clears all "payment_crypto_detail" edges to the PaymentCryptoDetail entity.
func (pu *PaymentUpdate) ClearPaymentCryptoDetail() *PaymentUpdate {
	pu.mutation.ClearPaymentCryptoDetail()
	return pu
}

// RemovePaymentCryptoDetailIDs removes the "payment_crypto_detail" edge to PaymentCryptoDetail entities by IDs.
func (pu *PaymentUpdate) RemovePaymentCryptoDetailIDs(ids ...int64) *PaymentUpdate {
	pu.mutation.RemovePaymentCryptoDetailIDs(ids...)
	return pu
}

// RemovePaymentCryptoDetail removes "payment_crypto_detail" edges to PaymentCryptoDetail entities.
func (pu *PaymentUpdate) RemovePaymentCryptoDetail(p ...*PaymentCryptoDetail) *PaymentUpdate {
	ids := make([]int64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.RemovePaymentCryptoDetailIDs(ids...)
}

// ClearRevisions clears all "revisions" edges to the Revision entity.
func (pu *PaymentUpdate) ClearRevisions() *PaymentUpdate {
	pu.mutation.ClearRevisions()
	return pu
}

// RemoveRevisionIDs removes the "revisions" edge to Revision entities by IDs.
func (pu *PaymentUpdate) RemoveRevisionIDs(ids ...int64) *PaymentUpdate {
	pu.mutation.RemoveRevisionIDs(ids...)
	return pu
}

// RemoveRevisions removes "revisions" edges to Revision entities.
func (pu *PaymentUpdate) RemoveRevisions(r ...*Revision) *PaymentUpdate {
	ids := make([]int64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return pu.RemoveRevisionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PaymentUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	pu.defaults()
	if len(pu.hooks) == 0 {
		if err = pu.check(); err != nil {
			return 0, err
		}
		affected, err = pu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PaymentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pu.check(); err != nil {
				return 0, err
			}
			pu.mutation = mutation
			affected, err = pu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pu.hooks) - 1; i >= 0; i-- {
			if pu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PaymentUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PaymentUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PaymentUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *PaymentUpdate) defaults() {
	if _, ok := pu.mutation.UpdatedAt(); !ok {
		v := payment.UpdateDefaultUpdatedAt()
		pu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *PaymentUpdate) check() error {
	if v, ok := pu.mutation.CreatedBy(); ok {
		if err := payment.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "Payment.created_by": %w`, err)}
		}
	}
	if v, ok := pu.mutation.UpdatedBy(); ok {
		if err := payment.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "Payment.updated_by": %w`, err)}
		}
	}
	if v, ok := pu.mutation.MerchantID(); ok {
		if err := payment.MerchantIDValidator(v); err != nil {
			return &ValidationError{Name: "merchant_id", err: fmt.Errorf(`ent: validator failed for field "Payment.merchant_id": %w`, err)}
		}
	}
	if v, ok := pu.mutation.MerchantUserID(); ok {
		if err := payment.MerchantUserIDValidator(v); err != nil {
			return &ValidationError{Name: "merchant_user_id", err: fmt.Errorf(`ent: validator failed for field "Payment.merchant_user_id": %w`, err)}
		}
	}
	if v, ok := pu.mutation.Method(); ok {
		if err := payment.MethodValidator(v); err != nil {
			return &ValidationError{Name: "method", err: fmt.Errorf(`ent: validator failed for field "Payment.method": %w`, err)}
		}
	}
	if v, ok := pu.mutation.GetType(); ok {
		if err := payment.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Payment.type": %w`, err)}
		}
	}
	if v, ok := pu.mutation.Status(); ok {
		if err := payment.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Payment.status": %w`, err)}
		}
	}
	return nil
}

func (pu *PaymentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   payment.Table,
			Columns: payment.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: payment.FieldID,
			},
		},
	}
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.CreatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: payment.FieldCreatedBy,
		})
	}
	if value, ok := pu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: payment.FieldCreatedAt,
		})
	}
	if value, ok := pu.mutation.UpdatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: payment.FieldUpdatedBy,
		})
	}
	if value, ok := pu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: payment.FieldUpdatedAt,
		})
	}
	if value, ok := pu.mutation.ApprovedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: payment.FieldApprovedBy,
		})
	}
	if pu.mutation.ApprovedByCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: payment.FieldApprovedBy,
		})
	}
	if value, ok := pu.mutation.ApprovedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: payment.FieldApprovedAt,
		})
	}
	if pu.mutation.ApprovedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: payment.FieldApprovedAt,
		})
	}
	if value, ok := pu.mutation.MerchantID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: payment.FieldMerchantID,
		})
	}
	if value, ok := pu.mutation.AddedMerchantID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: payment.FieldMerchantID,
		})
	}
	if value, ok := pu.mutation.MerchantUserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: payment.FieldMerchantUserID,
		})
	}
	if value, ok := pu.mutation.AddedMerchantUserID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: payment.FieldMerchantUserID,
		})
	}
	if value, ok := pu.mutation.Method(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: payment.FieldMethod,
		})
	}
	if value, ok := pu.mutation.AddedMethod(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: payment.FieldMethod,
		})
	}
	if value, ok := pu.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: payment.FieldType,
		})
	}
	if value, ok := pu.mutation.AddedType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: payment.FieldType,
		})
	}
	if value, ok := pu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: payment.FieldStatus,
		})
	}
	if value, ok := pu.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: payment.FieldStatus,
		})
	}
	if pu.mutation.PaymentBankingDetailCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   payment.PaymentBankingDetailTable,
			Columns: []string{payment.PaymentBankingDetailColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: paymentbankingdetail.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedPaymentBankingDetailIDs(); len(nodes) > 0 && !pu.mutation.PaymentBankingDetailCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   payment.PaymentBankingDetailTable,
			Columns: []string{payment.PaymentBankingDetailColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: paymentbankingdetail.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.PaymentBankingDetailIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   payment.PaymentBankingDetailTable,
			Columns: []string{payment.PaymentBankingDetailColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: paymentbankingdetail.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.PaymentTelcoDetailCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   payment.PaymentTelcoDetailTable,
			Columns: []string{payment.PaymentTelcoDetailColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: paymenttelcodetail.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedPaymentTelcoDetailIDs(); len(nodes) > 0 && !pu.mutation.PaymentTelcoDetailCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   payment.PaymentTelcoDetailTable,
			Columns: []string{payment.PaymentTelcoDetailColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: paymenttelcodetail.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.PaymentTelcoDetailIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   payment.PaymentTelcoDetailTable,
			Columns: []string{payment.PaymentTelcoDetailColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: paymenttelcodetail.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.PaymentEWalletDetailCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   payment.PaymentEWalletDetailTable,
			Columns: []string{payment.PaymentEWalletDetailColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: paymentewalletdetail.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedPaymentEWalletDetailIDs(); len(nodes) > 0 && !pu.mutation.PaymentEWalletDetailCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   payment.PaymentEWalletDetailTable,
			Columns: []string{payment.PaymentEWalletDetailColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: paymentewalletdetail.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.PaymentEWalletDetailIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   payment.PaymentEWalletDetailTable,
			Columns: []string{payment.PaymentEWalletDetailColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: paymentewalletdetail.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.PaymentCryptoDetailCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   payment.PaymentCryptoDetailTable,
			Columns: []string{payment.PaymentCryptoDetailColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: paymentcryptodetail.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedPaymentCryptoDetailIDs(); len(nodes) > 0 && !pu.mutation.PaymentCryptoDetailCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   payment.PaymentCryptoDetailTable,
			Columns: []string{payment.PaymentCryptoDetailColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: paymentcryptodetail.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.PaymentCryptoDetailIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   payment.PaymentCryptoDetailTable,
			Columns: []string{payment.PaymentCryptoDetailColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: paymentcryptodetail.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.RevisionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   payment.RevisionsTable,
			Columns: []string{payment.RevisionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: revision.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedRevisionsIDs(); len(nodes) > 0 && !pu.mutation.RevisionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   payment.RevisionsTable,
			Columns: []string{payment.RevisionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: revision.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RevisionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   payment.RevisionsTable,
			Columns: []string{payment.RevisionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: revision.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{payment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// PaymentUpdateOne is the builder for updating a single Payment entity.
type PaymentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PaymentMutation
}

// SetCreatedBy sets the "created_by" field.
func (puo *PaymentUpdateOne) SetCreatedBy(s string) *PaymentUpdateOne {
	puo.mutation.SetCreatedBy(s)
	return puo
}

// SetCreatedAt sets the "created_at" field.
func (puo *PaymentUpdateOne) SetCreatedAt(t time.Time) *PaymentUpdateOne {
	puo.mutation.SetCreatedAt(t)
	return puo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (puo *PaymentUpdateOne) SetNillableCreatedAt(t *time.Time) *PaymentUpdateOne {
	if t != nil {
		puo.SetCreatedAt(*t)
	}
	return puo
}

// SetUpdatedBy sets the "updated_by" field.
func (puo *PaymentUpdateOne) SetUpdatedBy(s string) *PaymentUpdateOne {
	puo.mutation.SetUpdatedBy(s)
	return puo
}

// SetUpdatedAt sets the "updated_at" field.
func (puo *PaymentUpdateOne) SetUpdatedAt(t time.Time) *PaymentUpdateOne {
	puo.mutation.SetUpdatedAt(t)
	return puo
}

// SetApprovedBy sets the "approved_by" field.
func (puo *PaymentUpdateOne) SetApprovedBy(s string) *PaymentUpdateOne {
	puo.mutation.SetApprovedBy(s)
	return puo
}

// SetNillableApprovedBy sets the "approved_by" field if the given value is not nil.
func (puo *PaymentUpdateOne) SetNillableApprovedBy(s *string) *PaymentUpdateOne {
	if s != nil {
		puo.SetApprovedBy(*s)
	}
	return puo
}

// ClearApprovedBy clears the value of the "approved_by" field.
func (puo *PaymentUpdateOne) ClearApprovedBy() *PaymentUpdateOne {
	puo.mutation.ClearApprovedBy()
	return puo
}

// SetApprovedAt sets the "approved_at" field.
func (puo *PaymentUpdateOne) SetApprovedAt(t time.Time) *PaymentUpdateOne {
	puo.mutation.SetApprovedAt(t)
	return puo
}

// SetNillableApprovedAt sets the "approved_at" field if the given value is not nil.
func (puo *PaymentUpdateOne) SetNillableApprovedAt(t *time.Time) *PaymentUpdateOne {
	if t != nil {
		puo.SetApprovedAt(*t)
	}
	return puo
}

// ClearApprovedAt clears the value of the "approved_at" field.
func (puo *PaymentUpdateOne) ClearApprovedAt() *PaymentUpdateOne {
	puo.mutation.ClearApprovedAt()
	return puo
}

// SetMerchantID sets the "merchant_id" field.
func (puo *PaymentUpdateOne) SetMerchantID(i int64) *PaymentUpdateOne {
	puo.mutation.ResetMerchantID()
	puo.mutation.SetMerchantID(i)
	return puo
}

// SetNillableMerchantID sets the "merchant_id" field if the given value is not nil.
func (puo *PaymentUpdateOne) SetNillableMerchantID(i *int64) *PaymentUpdateOne {
	if i != nil {
		puo.SetMerchantID(*i)
	}
	return puo
}

// AddMerchantID adds i to the "merchant_id" field.
func (puo *PaymentUpdateOne) AddMerchantID(i int64) *PaymentUpdateOne {
	puo.mutation.AddMerchantID(i)
	return puo
}

// SetMerchantUserID sets the "merchant_user_id" field.
func (puo *PaymentUpdateOne) SetMerchantUserID(i int64) *PaymentUpdateOne {
	puo.mutation.ResetMerchantUserID()
	puo.mutation.SetMerchantUserID(i)
	return puo
}

// SetNillableMerchantUserID sets the "merchant_user_id" field if the given value is not nil.
func (puo *PaymentUpdateOne) SetNillableMerchantUserID(i *int64) *PaymentUpdateOne {
	if i != nil {
		puo.SetMerchantUserID(*i)
	}
	return puo
}

// AddMerchantUserID adds i to the "merchant_user_id" field.
func (puo *PaymentUpdateOne) AddMerchantUserID(i int64) *PaymentUpdateOne {
	puo.mutation.AddMerchantUserID(i)
	return puo
}

// SetMethod sets the "method" field.
func (puo *PaymentUpdateOne) SetMethod(i int32) *PaymentUpdateOne {
	puo.mutation.ResetMethod()
	puo.mutation.SetMethod(i)
	return puo
}

// SetNillableMethod sets the "method" field if the given value is not nil.
func (puo *PaymentUpdateOne) SetNillableMethod(i *int32) *PaymentUpdateOne {
	if i != nil {
		puo.SetMethod(*i)
	}
	return puo
}

// AddMethod adds i to the "method" field.
func (puo *PaymentUpdateOne) AddMethod(i int32) *PaymentUpdateOne {
	puo.mutation.AddMethod(i)
	return puo
}

// SetType sets the "type" field.
func (puo *PaymentUpdateOne) SetType(i int32) *PaymentUpdateOne {
	puo.mutation.ResetType()
	puo.mutation.SetType(i)
	return puo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (puo *PaymentUpdateOne) SetNillableType(i *int32) *PaymentUpdateOne {
	if i != nil {
		puo.SetType(*i)
	}
	return puo
}

// AddType adds i to the "type" field.
func (puo *PaymentUpdateOne) AddType(i int32) *PaymentUpdateOne {
	puo.mutation.AddType(i)
	return puo
}

// SetStatus sets the "status" field.
func (puo *PaymentUpdateOne) SetStatus(i int32) *PaymentUpdateOne {
	puo.mutation.ResetStatus()
	puo.mutation.SetStatus(i)
	return puo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (puo *PaymentUpdateOne) SetNillableStatus(i *int32) *PaymentUpdateOne {
	if i != nil {
		puo.SetStatus(*i)
	}
	return puo
}

// AddStatus adds i to the "status" field.
func (puo *PaymentUpdateOne) AddStatus(i int32) *PaymentUpdateOne {
	puo.mutation.AddStatus(i)
	return puo
}

// AddPaymentBankingDetailIDs adds the "payment_banking_detail" edge to the PaymentBankingDetail entity by IDs.
func (puo *PaymentUpdateOne) AddPaymentBankingDetailIDs(ids ...int64) *PaymentUpdateOne {
	puo.mutation.AddPaymentBankingDetailIDs(ids...)
	return puo
}

// AddPaymentBankingDetail adds the "payment_banking_detail" edges to the PaymentBankingDetail entity.
func (puo *PaymentUpdateOne) AddPaymentBankingDetail(p ...*PaymentBankingDetail) *PaymentUpdateOne {
	ids := make([]int64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.AddPaymentBankingDetailIDs(ids...)
}

// AddPaymentTelcoDetailIDs adds the "payment_telco_detail" edge to the PaymentTelcoDetail entity by IDs.
func (puo *PaymentUpdateOne) AddPaymentTelcoDetailIDs(ids ...int64) *PaymentUpdateOne {
	puo.mutation.AddPaymentTelcoDetailIDs(ids...)
	return puo
}

// AddPaymentTelcoDetail adds the "payment_telco_detail" edges to the PaymentTelcoDetail entity.
func (puo *PaymentUpdateOne) AddPaymentTelcoDetail(p ...*PaymentTelcoDetail) *PaymentUpdateOne {
	ids := make([]int64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.AddPaymentTelcoDetailIDs(ids...)
}

// AddPaymentEWalletDetailIDs adds the "payment_e_wallet_detail" edge to the PaymentEWalletDetail entity by IDs.
func (puo *PaymentUpdateOne) AddPaymentEWalletDetailIDs(ids ...int64) *PaymentUpdateOne {
	puo.mutation.AddPaymentEWalletDetailIDs(ids...)
	return puo
}

// AddPaymentEWalletDetail adds the "payment_e_wallet_detail" edges to the PaymentEWalletDetail entity.
func (puo *PaymentUpdateOne) AddPaymentEWalletDetail(p ...*PaymentEWalletDetail) *PaymentUpdateOne {
	ids := make([]int64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.AddPaymentEWalletDetailIDs(ids...)
}

// AddPaymentCryptoDetailIDs adds the "payment_crypto_detail" edge to the PaymentCryptoDetail entity by IDs.
func (puo *PaymentUpdateOne) AddPaymentCryptoDetailIDs(ids ...int64) *PaymentUpdateOne {
	puo.mutation.AddPaymentCryptoDetailIDs(ids...)
	return puo
}

// AddPaymentCryptoDetail adds the "payment_crypto_detail" edges to the PaymentCryptoDetail entity.
func (puo *PaymentUpdateOne) AddPaymentCryptoDetail(p ...*PaymentCryptoDetail) *PaymentUpdateOne {
	ids := make([]int64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.AddPaymentCryptoDetailIDs(ids...)
}

// AddRevisionIDs adds the "revisions" edge to the Revision entity by IDs.
func (puo *PaymentUpdateOne) AddRevisionIDs(ids ...int64) *PaymentUpdateOne {
	puo.mutation.AddRevisionIDs(ids...)
	return puo
}

// AddRevisions adds the "revisions" edges to the Revision entity.
func (puo *PaymentUpdateOne) AddRevisions(r ...*Revision) *PaymentUpdateOne {
	ids := make([]int64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return puo.AddRevisionIDs(ids...)
}

// Mutation returns the PaymentMutation object of the builder.
func (puo *PaymentUpdateOne) Mutation() *PaymentMutation {
	return puo.mutation
}

// ClearPaymentBankingDetail clears all "payment_banking_detail" edges to the PaymentBankingDetail entity.
func (puo *PaymentUpdateOne) ClearPaymentBankingDetail() *PaymentUpdateOne {
	puo.mutation.ClearPaymentBankingDetail()
	return puo
}

// RemovePaymentBankingDetailIDs removes the "payment_banking_detail" edge to PaymentBankingDetail entities by IDs.
func (puo *PaymentUpdateOne) RemovePaymentBankingDetailIDs(ids ...int64) *PaymentUpdateOne {
	puo.mutation.RemovePaymentBankingDetailIDs(ids...)
	return puo
}

// RemovePaymentBankingDetail removes "payment_banking_detail" edges to PaymentBankingDetail entities.
func (puo *PaymentUpdateOne) RemovePaymentBankingDetail(p ...*PaymentBankingDetail) *PaymentUpdateOne {
	ids := make([]int64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.RemovePaymentBankingDetailIDs(ids...)
}

// ClearPaymentTelcoDetail clears all "payment_telco_detail" edges to the PaymentTelcoDetail entity.
func (puo *PaymentUpdateOne) ClearPaymentTelcoDetail() *PaymentUpdateOne {
	puo.mutation.ClearPaymentTelcoDetail()
	return puo
}

// RemovePaymentTelcoDetailIDs removes the "payment_telco_detail" edge to PaymentTelcoDetail entities by IDs.
func (puo *PaymentUpdateOne) RemovePaymentTelcoDetailIDs(ids ...int64) *PaymentUpdateOne {
	puo.mutation.RemovePaymentTelcoDetailIDs(ids...)
	return puo
}

// RemovePaymentTelcoDetail removes "payment_telco_detail" edges to PaymentTelcoDetail entities.
func (puo *PaymentUpdateOne) RemovePaymentTelcoDetail(p ...*PaymentTelcoDetail) *PaymentUpdateOne {
	ids := make([]int64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.RemovePaymentTelcoDetailIDs(ids...)
}

// ClearPaymentEWalletDetail clears all "payment_e_wallet_detail" edges to the PaymentEWalletDetail entity.
func (puo *PaymentUpdateOne) ClearPaymentEWalletDetail() *PaymentUpdateOne {
	puo.mutation.ClearPaymentEWalletDetail()
	return puo
}

// RemovePaymentEWalletDetailIDs removes the "payment_e_wallet_detail" edge to PaymentEWalletDetail entities by IDs.
func (puo *PaymentUpdateOne) RemovePaymentEWalletDetailIDs(ids ...int64) *PaymentUpdateOne {
	puo.mutation.RemovePaymentEWalletDetailIDs(ids...)
	return puo
}

// RemovePaymentEWalletDetail removes "payment_e_wallet_detail" edges to PaymentEWalletDetail entities.
func (puo *PaymentUpdateOne) RemovePaymentEWalletDetail(p ...*PaymentEWalletDetail) *PaymentUpdateOne {
	ids := make([]int64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.RemovePaymentEWalletDetailIDs(ids...)
}

// ClearPaymentCryptoDetail clears all "payment_crypto_detail" edges to the PaymentCryptoDetail entity.
func (puo *PaymentUpdateOne) ClearPaymentCryptoDetail() *PaymentUpdateOne {
	puo.mutation.ClearPaymentCryptoDetail()
	return puo
}

// RemovePaymentCryptoDetailIDs removes the "payment_crypto_detail" edge to PaymentCryptoDetail entities by IDs.
func (puo *PaymentUpdateOne) RemovePaymentCryptoDetailIDs(ids ...int64) *PaymentUpdateOne {
	puo.mutation.RemovePaymentCryptoDetailIDs(ids...)
	return puo
}

// RemovePaymentCryptoDetail removes "payment_crypto_detail" edges to PaymentCryptoDetail entities.
func (puo *PaymentUpdateOne) RemovePaymentCryptoDetail(p ...*PaymentCryptoDetail) *PaymentUpdateOne {
	ids := make([]int64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.RemovePaymentCryptoDetailIDs(ids...)
}

// ClearRevisions clears all "revisions" edges to the Revision entity.
func (puo *PaymentUpdateOne) ClearRevisions() *PaymentUpdateOne {
	puo.mutation.ClearRevisions()
	return puo
}

// RemoveRevisionIDs removes the "revisions" edge to Revision entities by IDs.
func (puo *PaymentUpdateOne) RemoveRevisionIDs(ids ...int64) *PaymentUpdateOne {
	puo.mutation.RemoveRevisionIDs(ids...)
	return puo
}

// RemoveRevisions removes "revisions" edges to Revision entities.
func (puo *PaymentUpdateOne) RemoveRevisions(r ...*Revision) *PaymentUpdateOne {
	ids := make([]int64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return puo.RemoveRevisionIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PaymentUpdateOne) Select(field string, fields ...string) *PaymentUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Payment entity.
func (puo *PaymentUpdateOne) Save(ctx context.Context) (*Payment, error) {
	var (
		err  error
		node *Payment
	)
	puo.defaults()
	if len(puo.hooks) == 0 {
		if err = puo.check(); err != nil {
			return nil, err
		}
		node, err = puo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PaymentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = puo.check(); err != nil {
				return nil, err
			}
			puo.mutation = mutation
			node, err = puo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(puo.hooks) - 1; i >= 0; i-- {
			if puo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = puo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, puo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PaymentUpdateOne) SaveX(ctx context.Context) *Payment {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PaymentUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PaymentUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *PaymentUpdateOne) defaults() {
	if _, ok := puo.mutation.UpdatedAt(); !ok {
		v := payment.UpdateDefaultUpdatedAt()
		puo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *PaymentUpdateOne) check() error {
	if v, ok := puo.mutation.CreatedBy(); ok {
		if err := payment.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "Payment.created_by": %w`, err)}
		}
	}
	if v, ok := puo.mutation.UpdatedBy(); ok {
		if err := payment.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "Payment.updated_by": %w`, err)}
		}
	}
	if v, ok := puo.mutation.MerchantID(); ok {
		if err := payment.MerchantIDValidator(v); err != nil {
			return &ValidationError{Name: "merchant_id", err: fmt.Errorf(`ent: validator failed for field "Payment.merchant_id": %w`, err)}
		}
	}
	if v, ok := puo.mutation.MerchantUserID(); ok {
		if err := payment.MerchantUserIDValidator(v); err != nil {
			return &ValidationError{Name: "merchant_user_id", err: fmt.Errorf(`ent: validator failed for field "Payment.merchant_user_id": %w`, err)}
		}
	}
	if v, ok := puo.mutation.Method(); ok {
		if err := payment.MethodValidator(v); err != nil {
			return &ValidationError{Name: "method", err: fmt.Errorf(`ent: validator failed for field "Payment.method": %w`, err)}
		}
	}
	if v, ok := puo.mutation.GetType(); ok {
		if err := payment.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Payment.type": %w`, err)}
		}
	}
	if v, ok := puo.mutation.Status(); ok {
		if err := payment.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Payment.status": %w`, err)}
		}
	}
	return nil
}

func (puo *PaymentUpdateOne) sqlSave(ctx context.Context) (_node *Payment, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   payment.Table,
			Columns: payment.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: payment.FieldID,
			},
		},
	}
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Payment.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, payment.FieldID)
		for _, f := range fields {
			if !payment.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != payment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.CreatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: payment.FieldCreatedBy,
		})
	}
	if value, ok := puo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: payment.FieldCreatedAt,
		})
	}
	if value, ok := puo.mutation.UpdatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: payment.FieldUpdatedBy,
		})
	}
	if value, ok := puo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: payment.FieldUpdatedAt,
		})
	}
	if value, ok := puo.mutation.ApprovedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: payment.FieldApprovedBy,
		})
	}
	if puo.mutation.ApprovedByCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: payment.FieldApprovedBy,
		})
	}
	if value, ok := puo.mutation.ApprovedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: payment.FieldApprovedAt,
		})
	}
	if puo.mutation.ApprovedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: payment.FieldApprovedAt,
		})
	}
	if value, ok := puo.mutation.MerchantID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: payment.FieldMerchantID,
		})
	}
	if value, ok := puo.mutation.AddedMerchantID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: payment.FieldMerchantID,
		})
	}
	if value, ok := puo.mutation.MerchantUserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: payment.FieldMerchantUserID,
		})
	}
	if value, ok := puo.mutation.AddedMerchantUserID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: payment.FieldMerchantUserID,
		})
	}
	if value, ok := puo.mutation.Method(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: payment.FieldMethod,
		})
	}
	if value, ok := puo.mutation.AddedMethod(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: payment.FieldMethod,
		})
	}
	if value, ok := puo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: payment.FieldType,
		})
	}
	if value, ok := puo.mutation.AddedType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: payment.FieldType,
		})
	}
	if value, ok := puo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: payment.FieldStatus,
		})
	}
	if value, ok := puo.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: payment.FieldStatus,
		})
	}
	if puo.mutation.PaymentBankingDetailCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   payment.PaymentBankingDetailTable,
			Columns: []string{payment.PaymentBankingDetailColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: paymentbankingdetail.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedPaymentBankingDetailIDs(); len(nodes) > 0 && !puo.mutation.PaymentBankingDetailCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   payment.PaymentBankingDetailTable,
			Columns: []string{payment.PaymentBankingDetailColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: paymentbankingdetail.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.PaymentBankingDetailIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   payment.PaymentBankingDetailTable,
			Columns: []string{payment.PaymentBankingDetailColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: paymentbankingdetail.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.PaymentTelcoDetailCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   payment.PaymentTelcoDetailTable,
			Columns: []string{payment.PaymentTelcoDetailColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: paymenttelcodetail.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedPaymentTelcoDetailIDs(); len(nodes) > 0 && !puo.mutation.PaymentTelcoDetailCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   payment.PaymentTelcoDetailTable,
			Columns: []string{payment.PaymentTelcoDetailColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: paymenttelcodetail.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.PaymentTelcoDetailIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   payment.PaymentTelcoDetailTable,
			Columns: []string{payment.PaymentTelcoDetailColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: paymenttelcodetail.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.PaymentEWalletDetailCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   payment.PaymentEWalletDetailTable,
			Columns: []string{payment.PaymentEWalletDetailColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: paymentewalletdetail.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedPaymentEWalletDetailIDs(); len(nodes) > 0 && !puo.mutation.PaymentEWalletDetailCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   payment.PaymentEWalletDetailTable,
			Columns: []string{payment.PaymentEWalletDetailColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: paymentewalletdetail.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.PaymentEWalletDetailIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   payment.PaymentEWalletDetailTable,
			Columns: []string{payment.PaymentEWalletDetailColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: paymentewalletdetail.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.PaymentCryptoDetailCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   payment.PaymentCryptoDetailTable,
			Columns: []string{payment.PaymentCryptoDetailColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: paymentcryptodetail.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedPaymentCryptoDetailIDs(); len(nodes) > 0 && !puo.mutation.PaymentCryptoDetailCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   payment.PaymentCryptoDetailTable,
			Columns: []string{payment.PaymentCryptoDetailColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: paymentcryptodetail.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.PaymentCryptoDetailIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   payment.PaymentCryptoDetailTable,
			Columns: []string{payment.PaymentCryptoDetailColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: paymentcryptodetail.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.RevisionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   payment.RevisionsTable,
			Columns: []string{payment.RevisionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: revision.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedRevisionsIDs(); len(nodes) > 0 && !puo.mutation.RevisionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   payment.RevisionsTable,
			Columns: []string{payment.RevisionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: revision.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RevisionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   payment.RevisionsTable,
			Columns: []string{payment.RevisionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: revision.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Payment{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{payment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
