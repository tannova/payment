// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"gitlab.com/mcuc/monorepo/backend/stark/pkg/ent/payment"
	"gitlab.com/mcuc/monorepo/backend/stark/pkg/ent/paymentbankingdetail"
)

// PaymentBankingDetailCreate is the builder for creating a PaymentBankingDetail entity.
type PaymentBankingDetailCreate struct {
	config
	mutation *PaymentBankingDetailMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (pbdc *PaymentBankingDetailCreate) SetCreatedAt(t time.Time) *PaymentBankingDetailCreate {
	pbdc.mutation.SetCreatedAt(t)
	return pbdc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pbdc *PaymentBankingDetailCreate) SetNillableCreatedAt(t *time.Time) *PaymentBankingDetailCreate {
	if t != nil {
		pbdc.SetCreatedAt(*t)
	}
	return pbdc
}

// SetUpdatedAt sets the "updated_at" field.
func (pbdc *PaymentBankingDetailCreate) SetUpdatedAt(t time.Time) *PaymentBankingDetailCreate {
	pbdc.mutation.SetUpdatedAt(t)
	return pbdc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pbdc *PaymentBankingDetailCreate) SetNillableUpdatedAt(t *time.Time) *PaymentBankingDetailCreate {
	if t != nil {
		pbdc.SetUpdatedAt(*t)
	}
	return pbdc
}

// SetCreatedBy sets the "created_by" field.
func (pbdc *PaymentBankingDetailCreate) SetCreatedBy(s string) *PaymentBankingDetailCreate {
	pbdc.mutation.SetCreatedBy(s)
	return pbdc
}

// SetUpdatedBy sets the "updated_by" field.
func (pbdc *PaymentBankingDetailCreate) SetUpdatedBy(s string) *PaymentBankingDetailCreate {
	pbdc.mutation.SetUpdatedBy(s)
	return pbdc
}

// SetPaymentCode sets the "payment_code" field.
func (pbdc *PaymentBankingDetailCreate) SetPaymentCode(s string) *PaymentBankingDetailCreate {
	pbdc.mutation.SetPaymentCode(s)
	return pbdc
}

// SetNillablePaymentCode sets the "payment_code" field if the given value is not nil.
func (pbdc *PaymentBankingDetailCreate) SetNillablePaymentCode(s *string) *PaymentBankingDetailCreate {
	if s != nil {
		pbdc.SetPaymentCode(*s)
	}
	return pbdc
}

// SetMerchantUserID sets the "merchant_user_id" field.
func (pbdc *PaymentBankingDetailCreate) SetMerchantUserID(i int64) *PaymentBankingDetailCreate {
	pbdc.mutation.SetMerchantUserID(i)
	return pbdc
}

// SetNillableMerchantUserID sets the "merchant_user_id" field if the given value is not nil.
func (pbdc *PaymentBankingDetailCreate) SetNillableMerchantUserID(i *int64) *PaymentBankingDetailCreate {
	if i != nil {
		pbdc.SetMerchantUserID(*i)
	}
	return pbdc
}

// SetMerchantUserBankName sets the "merchant_user_bank_name" field.
func (pbdc *PaymentBankingDetailCreate) SetMerchantUserBankName(i int32) *PaymentBankingDetailCreate {
	pbdc.mutation.SetMerchantUserBankName(i)
	return pbdc
}

// SetNillableMerchantUserBankName sets the "merchant_user_bank_name" field if the given value is not nil.
func (pbdc *PaymentBankingDetailCreate) SetNillableMerchantUserBankName(i *int32) *PaymentBankingDetailCreate {
	if i != nil {
		pbdc.SetMerchantUserBankName(*i)
	}
	return pbdc
}

// SetMerchantUserAccountNumber sets the "merchant_user_account_number" field.
func (pbdc *PaymentBankingDetailCreate) SetMerchantUserAccountNumber(s string) *PaymentBankingDetailCreate {
	pbdc.mutation.SetMerchantUserAccountNumber(s)
	return pbdc
}

// SetNillableMerchantUserAccountNumber sets the "merchant_user_account_number" field if the given value is not nil.
func (pbdc *PaymentBankingDetailCreate) SetNillableMerchantUserAccountNumber(s *string) *PaymentBankingDetailCreate {
	if s != nil {
		pbdc.SetMerchantUserAccountNumber(*s)
	}
	return pbdc
}

// SetMerchantUserAccountName sets the "merchant_user_account_name" field.
func (pbdc *PaymentBankingDetailCreate) SetMerchantUserAccountName(s string) *PaymentBankingDetailCreate {
	pbdc.mutation.SetMerchantUserAccountName(s)
	return pbdc
}

// SetNillableMerchantUserAccountName sets the "merchant_user_account_name" field if the given value is not nil.
func (pbdc *PaymentBankingDetailCreate) SetNillableMerchantUserAccountName(s *string) *PaymentBankingDetailCreate {
	if s != nil {
		pbdc.SetMerchantUserAccountName(*s)
	}
	return pbdc
}

// SetSystemAccountBankName sets the "system_account_bank_name" field.
func (pbdc *PaymentBankingDetailCreate) SetSystemAccountBankName(i int32) *PaymentBankingDetailCreate {
	pbdc.mutation.SetSystemAccountBankName(i)
	return pbdc
}

// SetNillableSystemAccountBankName sets the "system_account_bank_name" field if the given value is not nil.
func (pbdc *PaymentBankingDetailCreate) SetNillableSystemAccountBankName(i *int32) *PaymentBankingDetailCreate {
	if i != nil {
		pbdc.SetSystemAccountBankName(*i)
	}
	return pbdc
}

// SetSystemAccountNumber sets the "system_account_number" field.
func (pbdc *PaymentBankingDetailCreate) SetSystemAccountNumber(s string) *PaymentBankingDetailCreate {
	pbdc.mutation.SetSystemAccountNumber(s)
	return pbdc
}

// SetNillableSystemAccountNumber sets the "system_account_number" field if the given value is not nil.
func (pbdc *PaymentBankingDetailCreate) SetNillableSystemAccountNumber(s *string) *PaymentBankingDetailCreate {
	if s != nil {
		pbdc.SetSystemAccountNumber(*s)
	}
	return pbdc
}

// SetSystemAccountName sets the "system_account_name" field.
func (pbdc *PaymentBankingDetailCreate) SetSystemAccountName(s string) *PaymentBankingDetailCreate {
	pbdc.mutation.SetSystemAccountName(s)
	return pbdc
}

// SetNillableSystemAccountName sets the "system_account_name" field if the given value is not nil.
func (pbdc *PaymentBankingDetailCreate) SetNillableSystemAccountName(s *string) *PaymentBankingDetailCreate {
	if s != nil {
		pbdc.SetSystemAccountName(*s)
	}
	return pbdc
}

// SetImageURL sets the "image_url" field.
func (pbdc *PaymentBankingDetailCreate) SetImageURL(s string) *PaymentBankingDetailCreate {
	pbdc.mutation.SetImageURL(s)
	return pbdc
}

// SetNillableImageURL sets the "image_url" field if the given value is not nil.
func (pbdc *PaymentBankingDetailCreate) SetNillableImageURL(s *string) *PaymentBankingDetailCreate {
	if s != nil {
		pbdc.SetImageURL(*s)
	}
	return pbdc
}

// SetTxID sets the "tx_id" field.
func (pbdc *PaymentBankingDetailCreate) SetTxID(s string) *PaymentBankingDetailCreate {
	pbdc.mutation.SetTxID(s)
	return pbdc
}

// SetNillableTxID sets the "tx_id" field if the given value is not nil.
func (pbdc *PaymentBankingDetailCreate) SetNillableTxID(s *string) *PaymentBankingDetailCreate {
	if s != nil {
		pbdc.SetTxID(*s)
	}
	return pbdc
}

// SetAmount sets the "amount" field.
func (pbdc *PaymentBankingDetailCreate) SetAmount(u uint64) *PaymentBankingDetailCreate {
	pbdc.mutation.SetAmount(u)
	return pbdc
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (pbdc *PaymentBankingDetailCreate) SetNillableAmount(u *uint64) *PaymentBankingDetailCreate {
	if u != nil {
		pbdc.SetAmount(*u)
	}
	return pbdc
}

// SetFee sets the "fee" field.
func (pbdc *PaymentBankingDetailCreate) SetFee(u uint64) *PaymentBankingDetailCreate {
	pbdc.mutation.SetFee(u)
	return pbdc
}

// SetNillableFee sets the "fee" field if the given value is not nil.
func (pbdc *PaymentBankingDetailCreate) SetNillableFee(u *uint64) *PaymentBankingDetailCreate {
	if u != nil {
		pbdc.SetFee(*u)
	}
	return pbdc
}

// SetID sets the "id" field.
func (pbdc *PaymentBankingDetailCreate) SetID(i int64) *PaymentBankingDetailCreate {
	pbdc.mutation.SetID(i)
	return pbdc
}

// SetPaymentID sets the "payment" edge to the Payment entity by ID.
func (pbdc *PaymentBankingDetailCreate) SetPaymentID(id int64) *PaymentBankingDetailCreate {
	pbdc.mutation.SetPaymentID(id)
	return pbdc
}

// SetPayment sets the "payment" edge to the Payment entity.
func (pbdc *PaymentBankingDetailCreate) SetPayment(p *Payment) *PaymentBankingDetailCreate {
	return pbdc.SetPaymentID(p.ID)
}

// Mutation returns the PaymentBankingDetailMutation object of the builder.
func (pbdc *PaymentBankingDetailCreate) Mutation() *PaymentBankingDetailMutation {
	return pbdc.mutation
}

// Save creates the PaymentBankingDetail in the database.
func (pbdc *PaymentBankingDetailCreate) Save(ctx context.Context) (*PaymentBankingDetail, error) {
	var (
		err  error
		node *PaymentBankingDetail
	)
	pbdc.defaults()
	if len(pbdc.hooks) == 0 {
		if err = pbdc.check(); err != nil {
			return nil, err
		}
		node, err = pbdc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PaymentBankingDetailMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pbdc.check(); err != nil {
				return nil, err
			}
			pbdc.mutation = mutation
			if node, err = pbdc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(pbdc.hooks) - 1; i >= 0; i-- {
			if pbdc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pbdc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pbdc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pbdc *PaymentBankingDetailCreate) SaveX(ctx context.Context) *PaymentBankingDetail {
	v, err := pbdc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pbdc *PaymentBankingDetailCreate) Exec(ctx context.Context) error {
	_, err := pbdc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pbdc *PaymentBankingDetailCreate) ExecX(ctx context.Context) {
	if err := pbdc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pbdc *PaymentBankingDetailCreate) defaults() {
	if _, ok := pbdc.mutation.CreatedAt(); !ok {
		v := paymentbankingdetail.DefaultCreatedAt()
		pbdc.mutation.SetCreatedAt(v)
	}
	if _, ok := pbdc.mutation.UpdatedAt(); !ok {
		v := paymentbankingdetail.DefaultUpdatedAt()
		pbdc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pbdc *PaymentBankingDetailCreate) check() error {
	if _, ok := pbdc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "PaymentBankingDetail.created_at"`)}
	}
	if _, ok := pbdc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "PaymentBankingDetail.updated_at"`)}
	}
	if _, ok := pbdc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent: missing required field "PaymentBankingDetail.created_by"`)}
	}
	if v, ok := pbdc.mutation.CreatedBy(); ok {
		if err := paymentbankingdetail.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "PaymentBankingDetail.created_by": %w`, err)}
		}
	}
	if _, ok := pbdc.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`ent: missing required field "PaymentBankingDetail.updated_by"`)}
	}
	if v, ok := pbdc.mutation.UpdatedBy(); ok {
		if err := paymentbankingdetail.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "PaymentBankingDetail.updated_by": %w`, err)}
		}
	}
	if v, ok := pbdc.mutation.MerchantUserBankName(); ok {
		if err := paymentbankingdetail.MerchantUserBankNameValidator(v); err != nil {
			return &ValidationError{Name: "merchant_user_bank_name", err: fmt.Errorf(`ent: validator failed for field "PaymentBankingDetail.merchant_user_bank_name": %w`, err)}
		}
	}
	if v, ok := pbdc.mutation.SystemAccountBankName(); ok {
		if err := paymentbankingdetail.SystemAccountBankNameValidator(v); err != nil {
			return &ValidationError{Name: "system_account_bank_name", err: fmt.Errorf(`ent: validator failed for field "PaymentBankingDetail.system_account_bank_name": %w`, err)}
		}
	}
	if _, ok := pbdc.mutation.PaymentID(); !ok {
		return &ValidationError{Name: "payment", err: errors.New(`ent: missing required edge "PaymentBankingDetail.payment"`)}
	}
	return nil
}

func (pbdc *PaymentBankingDetailCreate) sqlSave(ctx context.Context) (*PaymentBankingDetail, error) {
	_node, _spec := pbdc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pbdc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	return _node, nil
}

func (pbdc *PaymentBankingDetailCreate) createSpec() (*PaymentBankingDetail, *sqlgraph.CreateSpec) {
	var (
		_node = &PaymentBankingDetail{config: pbdc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: paymentbankingdetail.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: paymentbankingdetail.FieldID,
			},
		}
	)
	_spec.OnConflict = pbdc.conflict
	if id, ok := pbdc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pbdc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: paymentbankingdetail.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := pbdc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: paymentbankingdetail.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := pbdc.mutation.CreatedBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: paymentbankingdetail.FieldCreatedBy,
		})
		_node.CreatedBy = value
	}
	if value, ok := pbdc.mutation.UpdatedBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: paymentbankingdetail.FieldUpdatedBy,
		})
		_node.UpdatedBy = value
	}
	if value, ok := pbdc.mutation.PaymentCode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: paymentbankingdetail.FieldPaymentCode,
		})
		_node.PaymentCode = value
	}
	if value, ok := pbdc.mutation.MerchantUserID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: paymentbankingdetail.FieldMerchantUserID,
		})
		_node.MerchantUserID = value
	}
	if value, ok := pbdc.mutation.MerchantUserBankName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: paymentbankingdetail.FieldMerchantUserBankName,
		})
		_node.MerchantUserBankName = value
	}
	if value, ok := pbdc.mutation.MerchantUserAccountNumber(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: paymentbankingdetail.FieldMerchantUserAccountNumber,
		})
		_node.MerchantUserAccountNumber = value
	}
	if value, ok := pbdc.mutation.MerchantUserAccountName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: paymentbankingdetail.FieldMerchantUserAccountName,
		})
		_node.MerchantUserAccountName = value
	}
	if value, ok := pbdc.mutation.SystemAccountBankName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: paymentbankingdetail.FieldSystemAccountBankName,
		})
		_node.SystemAccountBankName = value
	}
	if value, ok := pbdc.mutation.SystemAccountNumber(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: paymentbankingdetail.FieldSystemAccountNumber,
		})
		_node.SystemAccountNumber = value
	}
	if value, ok := pbdc.mutation.SystemAccountName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: paymentbankingdetail.FieldSystemAccountName,
		})
		_node.SystemAccountName = value
	}
	if value, ok := pbdc.mutation.ImageURL(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: paymentbankingdetail.FieldImageURL,
		})
		_node.ImageURL = value
	}
	if value, ok := pbdc.mutation.TxID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: paymentbankingdetail.FieldTxID,
		})
		_node.TxID = value
	}
	if value, ok := pbdc.mutation.Amount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: paymentbankingdetail.FieldAmount,
		})
		_node.Amount = value
	}
	if value, ok := pbdc.mutation.Fee(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: paymentbankingdetail.FieldFee,
		})
		_node.Fee = value
	}
	if nodes := pbdc.mutation.PaymentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   paymentbankingdetail.PaymentTable,
			Columns: []string{paymentbankingdetail.PaymentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: payment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.payment_payment_banking_detail = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PaymentBankingDetail.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PaymentBankingDetailUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (pbdc *PaymentBankingDetailCreate) OnConflict(opts ...sql.ConflictOption) *PaymentBankingDetailUpsertOne {
	pbdc.conflict = opts
	return &PaymentBankingDetailUpsertOne{
		create: pbdc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PaymentBankingDetail.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (pbdc *PaymentBankingDetailCreate) OnConflictColumns(columns ...string) *PaymentBankingDetailUpsertOne {
	pbdc.conflict = append(pbdc.conflict, sql.ConflictColumns(columns...))
	return &PaymentBankingDetailUpsertOne{
		create: pbdc,
	}
}

type (
	// PaymentBankingDetailUpsertOne is the builder for "upsert"-ing
	//  one PaymentBankingDetail node.
	PaymentBankingDetailUpsertOne struct {
		create *PaymentBankingDetailCreate
	}

	// PaymentBankingDetailUpsert is the "OnConflict" setter.
	PaymentBankingDetailUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *PaymentBankingDetailUpsert) SetCreatedAt(v time.Time) *PaymentBankingDetailUpsert {
	u.Set(paymentbankingdetail.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *PaymentBankingDetailUpsert) UpdateCreatedAt() *PaymentBankingDetailUpsert {
	u.SetExcluded(paymentbankingdetail.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PaymentBankingDetailUpsert) SetUpdatedAt(v time.Time) *PaymentBankingDetailUpsert {
	u.Set(paymentbankingdetail.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PaymentBankingDetailUpsert) UpdateUpdatedAt() *PaymentBankingDetailUpsert {
	u.SetExcluded(paymentbankingdetail.FieldUpdatedAt)
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *PaymentBankingDetailUpsert) SetCreatedBy(v string) *PaymentBankingDetailUpsert {
	u.Set(paymentbankingdetail.FieldCreatedBy, v)
	return u
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *PaymentBankingDetailUpsert) UpdateCreatedBy() *PaymentBankingDetailUpsert {
	u.SetExcluded(paymentbankingdetail.FieldCreatedBy)
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *PaymentBankingDetailUpsert) SetUpdatedBy(v string) *PaymentBankingDetailUpsert {
	u.Set(paymentbankingdetail.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *PaymentBankingDetailUpsert) UpdateUpdatedBy() *PaymentBankingDetailUpsert {
	u.SetExcluded(paymentbankingdetail.FieldUpdatedBy)
	return u
}

// SetPaymentCode sets the "payment_code" field.
func (u *PaymentBankingDetailUpsert) SetPaymentCode(v string) *PaymentBankingDetailUpsert {
	u.Set(paymentbankingdetail.FieldPaymentCode, v)
	return u
}

// UpdatePaymentCode sets the "payment_code" field to the value that was provided on create.
func (u *PaymentBankingDetailUpsert) UpdatePaymentCode() *PaymentBankingDetailUpsert {
	u.SetExcluded(paymentbankingdetail.FieldPaymentCode)
	return u
}

// ClearPaymentCode clears the value of the "payment_code" field.
func (u *PaymentBankingDetailUpsert) ClearPaymentCode() *PaymentBankingDetailUpsert {
	u.SetNull(paymentbankingdetail.FieldPaymentCode)
	return u
}

// SetMerchantUserID sets the "merchant_user_id" field.
func (u *PaymentBankingDetailUpsert) SetMerchantUserID(v int64) *PaymentBankingDetailUpsert {
	u.Set(paymentbankingdetail.FieldMerchantUserID, v)
	return u
}

// UpdateMerchantUserID sets the "merchant_user_id" field to the value that was provided on create.
func (u *PaymentBankingDetailUpsert) UpdateMerchantUserID() *PaymentBankingDetailUpsert {
	u.SetExcluded(paymentbankingdetail.FieldMerchantUserID)
	return u
}

// AddMerchantUserID adds v to the "merchant_user_id" field.
func (u *PaymentBankingDetailUpsert) AddMerchantUserID(v int64) *PaymentBankingDetailUpsert {
	u.Add(paymentbankingdetail.FieldMerchantUserID, v)
	return u
}

// ClearMerchantUserID clears the value of the "merchant_user_id" field.
func (u *PaymentBankingDetailUpsert) ClearMerchantUserID() *PaymentBankingDetailUpsert {
	u.SetNull(paymentbankingdetail.FieldMerchantUserID)
	return u
}

// SetMerchantUserBankName sets the "merchant_user_bank_name" field.
func (u *PaymentBankingDetailUpsert) SetMerchantUserBankName(v int32) *PaymentBankingDetailUpsert {
	u.Set(paymentbankingdetail.FieldMerchantUserBankName, v)
	return u
}

// UpdateMerchantUserBankName sets the "merchant_user_bank_name" field to the value that was provided on create.
func (u *PaymentBankingDetailUpsert) UpdateMerchantUserBankName() *PaymentBankingDetailUpsert {
	u.SetExcluded(paymentbankingdetail.FieldMerchantUserBankName)
	return u
}

// AddMerchantUserBankName adds v to the "merchant_user_bank_name" field.
func (u *PaymentBankingDetailUpsert) AddMerchantUserBankName(v int32) *PaymentBankingDetailUpsert {
	u.Add(paymentbankingdetail.FieldMerchantUserBankName, v)
	return u
}

// ClearMerchantUserBankName clears the value of the "merchant_user_bank_name" field.
func (u *PaymentBankingDetailUpsert) ClearMerchantUserBankName() *PaymentBankingDetailUpsert {
	u.SetNull(paymentbankingdetail.FieldMerchantUserBankName)
	return u
}

// SetMerchantUserAccountNumber sets the "merchant_user_account_number" field.
func (u *PaymentBankingDetailUpsert) SetMerchantUserAccountNumber(v string) *PaymentBankingDetailUpsert {
	u.Set(paymentbankingdetail.FieldMerchantUserAccountNumber, v)
	return u
}

// UpdateMerchantUserAccountNumber sets the "merchant_user_account_number" field to the value that was provided on create.
func (u *PaymentBankingDetailUpsert) UpdateMerchantUserAccountNumber() *PaymentBankingDetailUpsert {
	u.SetExcluded(paymentbankingdetail.FieldMerchantUserAccountNumber)
	return u
}

// ClearMerchantUserAccountNumber clears the value of the "merchant_user_account_number" field.
func (u *PaymentBankingDetailUpsert) ClearMerchantUserAccountNumber() *PaymentBankingDetailUpsert {
	u.SetNull(paymentbankingdetail.FieldMerchantUserAccountNumber)
	return u
}

// SetMerchantUserAccountName sets the "merchant_user_account_name" field.
func (u *PaymentBankingDetailUpsert) SetMerchantUserAccountName(v string) *PaymentBankingDetailUpsert {
	u.Set(paymentbankingdetail.FieldMerchantUserAccountName, v)
	return u
}

// UpdateMerchantUserAccountName sets the "merchant_user_account_name" field to the value that was provided on create.
func (u *PaymentBankingDetailUpsert) UpdateMerchantUserAccountName() *PaymentBankingDetailUpsert {
	u.SetExcluded(paymentbankingdetail.FieldMerchantUserAccountName)
	return u
}

// ClearMerchantUserAccountName clears the value of the "merchant_user_account_name" field.
func (u *PaymentBankingDetailUpsert) ClearMerchantUserAccountName() *PaymentBankingDetailUpsert {
	u.SetNull(paymentbankingdetail.FieldMerchantUserAccountName)
	return u
}

// SetSystemAccountBankName sets the "system_account_bank_name" field.
func (u *PaymentBankingDetailUpsert) SetSystemAccountBankName(v int32) *PaymentBankingDetailUpsert {
	u.Set(paymentbankingdetail.FieldSystemAccountBankName, v)
	return u
}

// UpdateSystemAccountBankName sets the "system_account_bank_name" field to the value that was provided on create.
func (u *PaymentBankingDetailUpsert) UpdateSystemAccountBankName() *PaymentBankingDetailUpsert {
	u.SetExcluded(paymentbankingdetail.FieldSystemAccountBankName)
	return u
}

// AddSystemAccountBankName adds v to the "system_account_bank_name" field.
func (u *PaymentBankingDetailUpsert) AddSystemAccountBankName(v int32) *PaymentBankingDetailUpsert {
	u.Add(paymentbankingdetail.FieldSystemAccountBankName, v)
	return u
}

// ClearSystemAccountBankName clears the value of the "system_account_bank_name" field.
func (u *PaymentBankingDetailUpsert) ClearSystemAccountBankName() *PaymentBankingDetailUpsert {
	u.SetNull(paymentbankingdetail.FieldSystemAccountBankName)
	return u
}

// SetSystemAccountNumber sets the "system_account_number" field.
func (u *PaymentBankingDetailUpsert) SetSystemAccountNumber(v string) *PaymentBankingDetailUpsert {
	u.Set(paymentbankingdetail.FieldSystemAccountNumber, v)
	return u
}

// UpdateSystemAccountNumber sets the "system_account_number" field to the value that was provided on create.
func (u *PaymentBankingDetailUpsert) UpdateSystemAccountNumber() *PaymentBankingDetailUpsert {
	u.SetExcluded(paymentbankingdetail.FieldSystemAccountNumber)
	return u
}

// ClearSystemAccountNumber clears the value of the "system_account_number" field.
func (u *PaymentBankingDetailUpsert) ClearSystemAccountNumber() *PaymentBankingDetailUpsert {
	u.SetNull(paymentbankingdetail.FieldSystemAccountNumber)
	return u
}

// SetSystemAccountName sets the "system_account_name" field.
func (u *PaymentBankingDetailUpsert) SetSystemAccountName(v string) *PaymentBankingDetailUpsert {
	u.Set(paymentbankingdetail.FieldSystemAccountName, v)
	return u
}

// UpdateSystemAccountName sets the "system_account_name" field to the value that was provided on create.
func (u *PaymentBankingDetailUpsert) UpdateSystemAccountName() *PaymentBankingDetailUpsert {
	u.SetExcluded(paymentbankingdetail.FieldSystemAccountName)
	return u
}

// ClearSystemAccountName clears the value of the "system_account_name" field.
func (u *PaymentBankingDetailUpsert) ClearSystemAccountName() *PaymentBankingDetailUpsert {
	u.SetNull(paymentbankingdetail.FieldSystemAccountName)
	return u
}

// SetImageURL sets the "image_url" field.
func (u *PaymentBankingDetailUpsert) SetImageURL(v string) *PaymentBankingDetailUpsert {
	u.Set(paymentbankingdetail.FieldImageURL, v)
	return u
}

// UpdateImageURL sets the "image_url" field to the value that was provided on create.
func (u *PaymentBankingDetailUpsert) UpdateImageURL() *PaymentBankingDetailUpsert {
	u.SetExcluded(paymentbankingdetail.FieldImageURL)
	return u
}

// ClearImageURL clears the value of the "image_url" field.
func (u *PaymentBankingDetailUpsert) ClearImageURL() *PaymentBankingDetailUpsert {
	u.SetNull(paymentbankingdetail.FieldImageURL)
	return u
}

// SetTxID sets the "tx_id" field.
func (u *PaymentBankingDetailUpsert) SetTxID(v string) *PaymentBankingDetailUpsert {
	u.Set(paymentbankingdetail.FieldTxID, v)
	return u
}

// UpdateTxID sets the "tx_id" field to the value that was provided on create.
func (u *PaymentBankingDetailUpsert) UpdateTxID() *PaymentBankingDetailUpsert {
	u.SetExcluded(paymentbankingdetail.FieldTxID)
	return u
}

// ClearTxID clears the value of the "tx_id" field.
func (u *PaymentBankingDetailUpsert) ClearTxID() *PaymentBankingDetailUpsert {
	u.SetNull(paymentbankingdetail.FieldTxID)
	return u
}

// SetAmount sets the "amount" field.
func (u *PaymentBankingDetailUpsert) SetAmount(v uint64) *PaymentBankingDetailUpsert {
	u.Set(paymentbankingdetail.FieldAmount, v)
	return u
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *PaymentBankingDetailUpsert) UpdateAmount() *PaymentBankingDetailUpsert {
	u.SetExcluded(paymentbankingdetail.FieldAmount)
	return u
}

// AddAmount adds v to the "amount" field.
func (u *PaymentBankingDetailUpsert) AddAmount(v uint64) *PaymentBankingDetailUpsert {
	u.Add(paymentbankingdetail.FieldAmount, v)
	return u
}

// ClearAmount clears the value of the "amount" field.
func (u *PaymentBankingDetailUpsert) ClearAmount() *PaymentBankingDetailUpsert {
	u.SetNull(paymentbankingdetail.FieldAmount)
	return u
}

// SetFee sets the "fee" field.
func (u *PaymentBankingDetailUpsert) SetFee(v uint64) *PaymentBankingDetailUpsert {
	u.Set(paymentbankingdetail.FieldFee, v)
	return u
}

// UpdateFee sets the "fee" field to the value that was provided on create.
func (u *PaymentBankingDetailUpsert) UpdateFee() *PaymentBankingDetailUpsert {
	u.SetExcluded(paymentbankingdetail.FieldFee)
	return u
}

// AddFee adds v to the "fee" field.
func (u *PaymentBankingDetailUpsert) AddFee(v uint64) *PaymentBankingDetailUpsert {
	u.Add(paymentbankingdetail.FieldFee, v)
	return u
}

// ClearFee clears the value of the "fee" field.
func (u *PaymentBankingDetailUpsert) ClearFee() *PaymentBankingDetailUpsert {
	u.SetNull(paymentbankingdetail.FieldFee)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.PaymentBankingDetail.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(paymentbankingdetail.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *PaymentBankingDetailUpsertOne) UpdateNewValues() *PaymentBankingDetailUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(paymentbankingdetail.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.PaymentBankingDetail.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *PaymentBankingDetailUpsertOne) Ignore() *PaymentBankingDetailUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PaymentBankingDetailUpsertOne) DoNothing() *PaymentBankingDetailUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PaymentBankingDetailCreate.OnConflict
// documentation for more info.
func (u *PaymentBankingDetailUpsertOne) Update(set func(*PaymentBankingDetailUpsert)) *PaymentBankingDetailUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PaymentBankingDetailUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *PaymentBankingDetailUpsertOne) SetCreatedAt(v time.Time) *PaymentBankingDetailUpsertOne {
	return u.Update(func(s *PaymentBankingDetailUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *PaymentBankingDetailUpsertOne) UpdateCreatedAt() *PaymentBankingDetailUpsertOne {
	return u.Update(func(s *PaymentBankingDetailUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PaymentBankingDetailUpsertOne) SetUpdatedAt(v time.Time) *PaymentBankingDetailUpsertOne {
	return u.Update(func(s *PaymentBankingDetailUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PaymentBankingDetailUpsertOne) UpdateUpdatedAt() *PaymentBankingDetailUpsertOne {
	return u.Update(func(s *PaymentBankingDetailUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetCreatedBy sets the "created_by" field.
func (u *PaymentBankingDetailUpsertOne) SetCreatedBy(v string) *PaymentBankingDetailUpsertOne {
	return u.Update(func(s *PaymentBankingDetailUpsert) {
		s.SetCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *PaymentBankingDetailUpsertOne) UpdateCreatedBy() *PaymentBankingDetailUpsertOne {
	return u.Update(func(s *PaymentBankingDetailUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *PaymentBankingDetailUpsertOne) SetUpdatedBy(v string) *PaymentBankingDetailUpsertOne {
	return u.Update(func(s *PaymentBankingDetailUpsert) {
		s.SetUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *PaymentBankingDetailUpsertOne) UpdateUpdatedBy() *PaymentBankingDetailUpsertOne {
	return u.Update(func(s *PaymentBankingDetailUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetPaymentCode sets the "payment_code" field.
func (u *PaymentBankingDetailUpsertOne) SetPaymentCode(v string) *PaymentBankingDetailUpsertOne {
	return u.Update(func(s *PaymentBankingDetailUpsert) {
		s.SetPaymentCode(v)
	})
}

// UpdatePaymentCode sets the "payment_code" field to the value that was provided on create.
func (u *PaymentBankingDetailUpsertOne) UpdatePaymentCode() *PaymentBankingDetailUpsertOne {
	return u.Update(func(s *PaymentBankingDetailUpsert) {
		s.UpdatePaymentCode()
	})
}

// ClearPaymentCode clears the value of the "payment_code" field.
func (u *PaymentBankingDetailUpsertOne) ClearPaymentCode() *PaymentBankingDetailUpsertOne {
	return u.Update(func(s *PaymentBankingDetailUpsert) {
		s.ClearPaymentCode()
	})
}

// SetMerchantUserID sets the "merchant_user_id" field.
func (u *PaymentBankingDetailUpsertOne) SetMerchantUserID(v int64) *PaymentBankingDetailUpsertOne {
	return u.Update(func(s *PaymentBankingDetailUpsert) {
		s.SetMerchantUserID(v)
	})
}

// AddMerchantUserID adds v to the "merchant_user_id" field.
func (u *PaymentBankingDetailUpsertOne) AddMerchantUserID(v int64) *PaymentBankingDetailUpsertOne {
	return u.Update(func(s *PaymentBankingDetailUpsert) {
		s.AddMerchantUserID(v)
	})
}

// UpdateMerchantUserID sets the "merchant_user_id" field to the value that was provided on create.
func (u *PaymentBankingDetailUpsertOne) UpdateMerchantUserID() *PaymentBankingDetailUpsertOne {
	return u.Update(func(s *PaymentBankingDetailUpsert) {
		s.UpdateMerchantUserID()
	})
}

// ClearMerchantUserID clears the value of the "merchant_user_id" field.
func (u *PaymentBankingDetailUpsertOne) ClearMerchantUserID() *PaymentBankingDetailUpsertOne {
	return u.Update(func(s *PaymentBankingDetailUpsert) {
		s.ClearMerchantUserID()
	})
}

// SetMerchantUserBankName sets the "merchant_user_bank_name" field.
func (u *PaymentBankingDetailUpsertOne) SetMerchantUserBankName(v int32) *PaymentBankingDetailUpsertOne {
	return u.Update(func(s *PaymentBankingDetailUpsert) {
		s.SetMerchantUserBankName(v)
	})
}

// AddMerchantUserBankName adds v to the "merchant_user_bank_name" field.
func (u *PaymentBankingDetailUpsertOne) AddMerchantUserBankName(v int32) *PaymentBankingDetailUpsertOne {
	return u.Update(func(s *PaymentBankingDetailUpsert) {
		s.AddMerchantUserBankName(v)
	})
}

// UpdateMerchantUserBankName sets the "merchant_user_bank_name" field to the value that was provided on create.
func (u *PaymentBankingDetailUpsertOne) UpdateMerchantUserBankName() *PaymentBankingDetailUpsertOne {
	return u.Update(func(s *PaymentBankingDetailUpsert) {
		s.UpdateMerchantUserBankName()
	})
}

// ClearMerchantUserBankName clears the value of the "merchant_user_bank_name" field.
func (u *PaymentBankingDetailUpsertOne) ClearMerchantUserBankName() *PaymentBankingDetailUpsertOne {
	return u.Update(func(s *PaymentBankingDetailUpsert) {
		s.ClearMerchantUserBankName()
	})
}

// SetMerchantUserAccountNumber sets the "merchant_user_account_number" field.
func (u *PaymentBankingDetailUpsertOne) SetMerchantUserAccountNumber(v string) *PaymentBankingDetailUpsertOne {
	return u.Update(func(s *PaymentBankingDetailUpsert) {
		s.SetMerchantUserAccountNumber(v)
	})
}

// UpdateMerchantUserAccountNumber sets the "merchant_user_account_number" field to the value that was provided on create.
func (u *PaymentBankingDetailUpsertOne) UpdateMerchantUserAccountNumber() *PaymentBankingDetailUpsertOne {
	return u.Update(func(s *PaymentBankingDetailUpsert) {
		s.UpdateMerchantUserAccountNumber()
	})
}

// ClearMerchantUserAccountNumber clears the value of the "merchant_user_account_number" field.
func (u *PaymentBankingDetailUpsertOne) ClearMerchantUserAccountNumber() *PaymentBankingDetailUpsertOne {
	return u.Update(func(s *PaymentBankingDetailUpsert) {
		s.ClearMerchantUserAccountNumber()
	})
}

// SetMerchantUserAccountName sets the "merchant_user_account_name" field.
func (u *PaymentBankingDetailUpsertOne) SetMerchantUserAccountName(v string) *PaymentBankingDetailUpsertOne {
	return u.Update(func(s *PaymentBankingDetailUpsert) {
		s.SetMerchantUserAccountName(v)
	})
}

// UpdateMerchantUserAccountName sets the "merchant_user_account_name" field to the value that was provided on create.
func (u *PaymentBankingDetailUpsertOne) UpdateMerchantUserAccountName() *PaymentBankingDetailUpsertOne {
	return u.Update(func(s *PaymentBankingDetailUpsert) {
		s.UpdateMerchantUserAccountName()
	})
}

// ClearMerchantUserAccountName clears the value of the "merchant_user_account_name" field.
func (u *PaymentBankingDetailUpsertOne) ClearMerchantUserAccountName() *PaymentBankingDetailUpsertOne {
	return u.Update(func(s *PaymentBankingDetailUpsert) {
		s.ClearMerchantUserAccountName()
	})
}

// SetSystemAccountBankName sets the "system_account_bank_name" field.
func (u *PaymentBankingDetailUpsertOne) SetSystemAccountBankName(v int32) *PaymentBankingDetailUpsertOne {
	return u.Update(func(s *PaymentBankingDetailUpsert) {
		s.SetSystemAccountBankName(v)
	})
}

// AddSystemAccountBankName adds v to the "system_account_bank_name" field.
func (u *PaymentBankingDetailUpsertOne) AddSystemAccountBankName(v int32) *PaymentBankingDetailUpsertOne {
	return u.Update(func(s *PaymentBankingDetailUpsert) {
		s.AddSystemAccountBankName(v)
	})
}

// UpdateSystemAccountBankName sets the "system_account_bank_name" field to the value that was provided on create.
func (u *PaymentBankingDetailUpsertOne) UpdateSystemAccountBankName() *PaymentBankingDetailUpsertOne {
	return u.Update(func(s *PaymentBankingDetailUpsert) {
		s.UpdateSystemAccountBankName()
	})
}

// ClearSystemAccountBankName clears the value of the "system_account_bank_name" field.
func (u *PaymentBankingDetailUpsertOne) ClearSystemAccountBankName() *PaymentBankingDetailUpsertOne {
	return u.Update(func(s *PaymentBankingDetailUpsert) {
		s.ClearSystemAccountBankName()
	})
}

// SetSystemAccountNumber sets the "system_account_number" field.
func (u *PaymentBankingDetailUpsertOne) SetSystemAccountNumber(v string) *PaymentBankingDetailUpsertOne {
	return u.Update(func(s *PaymentBankingDetailUpsert) {
		s.SetSystemAccountNumber(v)
	})
}

// UpdateSystemAccountNumber sets the "system_account_number" field to the value that was provided on create.
func (u *PaymentBankingDetailUpsertOne) UpdateSystemAccountNumber() *PaymentBankingDetailUpsertOne {
	return u.Update(func(s *PaymentBankingDetailUpsert) {
		s.UpdateSystemAccountNumber()
	})
}

// ClearSystemAccountNumber clears the value of the "system_account_number" field.
func (u *PaymentBankingDetailUpsertOne) ClearSystemAccountNumber() *PaymentBankingDetailUpsertOne {
	return u.Update(func(s *PaymentBankingDetailUpsert) {
		s.ClearSystemAccountNumber()
	})
}

// SetSystemAccountName sets the "system_account_name" field.
func (u *PaymentBankingDetailUpsertOne) SetSystemAccountName(v string) *PaymentBankingDetailUpsertOne {
	return u.Update(func(s *PaymentBankingDetailUpsert) {
		s.SetSystemAccountName(v)
	})
}

// UpdateSystemAccountName sets the "system_account_name" field to the value that was provided on create.
func (u *PaymentBankingDetailUpsertOne) UpdateSystemAccountName() *PaymentBankingDetailUpsertOne {
	return u.Update(func(s *PaymentBankingDetailUpsert) {
		s.UpdateSystemAccountName()
	})
}

// ClearSystemAccountName clears the value of the "system_account_name" field.
func (u *PaymentBankingDetailUpsertOne) ClearSystemAccountName() *PaymentBankingDetailUpsertOne {
	return u.Update(func(s *PaymentBankingDetailUpsert) {
		s.ClearSystemAccountName()
	})
}

// SetImageURL sets the "image_url" field.
func (u *PaymentBankingDetailUpsertOne) SetImageURL(v string) *PaymentBankingDetailUpsertOne {
	return u.Update(func(s *PaymentBankingDetailUpsert) {
		s.SetImageURL(v)
	})
}

// UpdateImageURL sets the "image_url" field to the value that was provided on create.
func (u *PaymentBankingDetailUpsertOne) UpdateImageURL() *PaymentBankingDetailUpsertOne {
	return u.Update(func(s *PaymentBankingDetailUpsert) {
		s.UpdateImageURL()
	})
}

// ClearImageURL clears the value of the "image_url" field.
func (u *PaymentBankingDetailUpsertOne) ClearImageURL() *PaymentBankingDetailUpsertOne {
	return u.Update(func(s *PaymentBankingDetailUpsert) {
		s.ClearImageURL()
	})
}

// SetTxID sets the "tx_id" field.
func (u *PaymentBankingDetailUpsertOne) SetTxID(v string) *PaymentBankingDetailUpsertOne {
	return u.Update(func(s *PaymentBankingDetailUpsert) {
		s.SetTxID(v)
	})
}

// UpdateTxID sets the "tx_id" field to the value that was provided on create.
func (u *PaymentBankingDetailUpsertOne) UpdateTxID() *PaymentBankingDetailUpsertOne {
	return u.Update(func(s *PaymentBankingDetailUpsert) {
		s.UpdateTxID()
	})
}

// ClearTxID clears the value of the "tx_id" field.
func (u *PaymentBankingDetailUpsertOne) ClearTxID() *PaymentBankingDetailUpsertOne {
	return u.Update(func(s *PaymentBankingDetailUpsert) {
		s.ClearTxID()
	})
}

// SetAmount sets the "amount" field.
func (u *PaymentBankingDetailUpsertOne) SetAmount(v uint64) *PaymentBankingDetailUpsertOne {
	return u.Update(func(s *PaymentBankingDetailUpsert) {
		s.SetAmount(v)
	})
}

// AddAmount adds v to the "amount" field.
func (u *PaymentBankingDetailUpsertOne) AddAmount(v uint64) *PaymentBankingDetailUpsertOne {
	return u.Update(func(s *PaymentBankingDetailUpsert) {
		s.AddAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *PaymentBankingDetailUpsertOne) UpdateAmount() *PaymentBankingDetailUpsertOne {
	return u.Update(func(s *PaymentBankingDetailUpsert) {
		s.UpdateAmount()
	})
}

// ClearAmount clears the value of the "amount" field.
func (u *PaymentBankingDetailUpsertOne) ClearAmount() *PaymentBankingDetailUpsertOne {
	return u.Update(func(s *PaymentBankingDetailUpsert) {
		s.ClearAmount()
	})
}

// SetFee sets the "fee" field.
func (u *PaymentBankingDetailUpsertOne) SetFee(v uint64) *PaymentBankingDetailUpsertOne {
	return u.Update(func(s *PaymentBankingDetailUpsert) {
		s.SetFee(v)
	})
}

// AddFee adds v to the "fee" field.
func (u *PaymentBankingDetailUpsertOne) AddFee(v uint64) *PaymentBankingDetailUpsertOne {
	return u.Update(func(s *PaymentBankingDetailUpsert) {
		s.AddFee(v)
	})
}

// UpdateFee sets the "fee" field to the value that was provided on create.
func (u *PaymentBankingDetailUpsertOne) UpdateFee() *PaymentBankingDetailUpsertOne {
	return u.Update(func(s *PaymentBankingDetailUpsert) {
		s.UpdateFee()
	})
}

// ClearFee clears the value of the "fee" field.
func (u *PaymentBankingDetailUpsertOne) ClearFee() *PaymentBankingDetailUpsertOne {
	return u.Update(func(s *PaymentBankingDetailUpsert) {
		s.ClearFee()
	})
}

// Exec executes the query.
func (u *PaymentBankingDetailUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PaymentBankingDetailCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PaymentBankingDetailUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PaymentBankingDetailUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PaymentBankingDetailUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PaymentBankingDetailCreateBulk is the builder for creating many PaymentBankingDetail entities in bulk.
type PaymentBankingDetailCreateBulk struct {
	config
	builders []*PaymentBankingDetailCreate
	conflict []sql.ConflictOption
}

// Save creates the PaymentBankingDetail entities in the database.
func (pbdcb *PaymentBankingDetailCreateBulk) Save(ctx context.Context) ([]*PaymentBankingDetail, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pbdcb.builders))
	nodes := make([]*PaymentBankingDetail, len(pbdcb.builders))
	mutators := make([]Mutator, len(pbdcb.builders))
	for i := range pbdcb.builders {
		func(i int, root context.Context) {
			builder := pbdcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PaymentBankingDetailMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pbdcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pbdcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pbdcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pbdcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pbdcb *PaymentBankingDetailCreateBulk) SaveX(ctx context.Context) []*PaymentBankingDetail {
	v, err := pbdcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pbdcb *PaymentBankingDetailCreateBulk) Exec(ctx context.Context) error {
	_, err := pbdcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pbdcb *PaymentBankingDetailCreateBulk) ExecX(ctx context.Context) {
	if err := pbdcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PaymentBankingDetail.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PaymentBankingDetailUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (pbdcb *PaymentBankingDetailCreateBulk) OnConflict(opts ...sql.ConflictOption) *PaymentBankingDetailUpsertBulk {
	pbdcb.conflict = opts
	return &PaymentBankingDetailUpsertBulk{
		create: pbdcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PaymentBankingDetail.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (pbdcb *PaymentBankingDetailCreateBulk) OnConflictColumns(columns ...string) *PaymentBankingDetailUpsertBulk {
	pbdcb.conflict = append(pbdcb.conflict, sql.ConflictColumns(columns...))
	return &PaymentBankingDetailUpsertBulk{
		create: pbdcb,
	}
}

// PaymentBankingDetailUpsertBulk is the builder for "upsert"-ing
// a bulk of PaymentBankingDetail nodes.
type PaymentBankingDetailUpsertBulk struct {
	create *PaymentBankingDetailCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.PaymentBankingDetail.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(paymentbankingdetail.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *PaymentBankingDetailUpsertBulk) UpdateNewValues() *PaymentBankingDetailUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(paymentbankingdetail.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PaymentBankingDetail.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *PaymentBankingDetailUpsertBulk) Ignore() *PaymentBankingDetailUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PaymentBankingDetailUpsertBulk) DoNothing() *PaymentBankingDetailUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PaymentBankingDetailCreateBulk.OnConflict
// documentation for more info.
func (u *PaymentBankingDetailUpsertBulk) Update(set func(*PaymentBankingDetailUpsert)) *PaymentBankingDetailUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PaymentBankingDetailUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *PaymentBankingDetailUpsertBulk) SetCreatedAt(v time.Time) *PaymentBankingDetailUpsertBulk {
	return u.Update(func(s *PaymentBankingDetailUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *PaymentBankingDetailUpsertBulk) UpdateCreatedAt() *PaymentBankingDetailUpsertBulk {
	return u.Update(func(s *PaymentBankingDetailUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PaymentBankingDetailUpsertBulk) SetUpdatedAt(v time.Time) *PaymentBankingDetailUpsertBulk {
	return u.Update(func(s *PaymentBankingDetailUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PaymentBankingDetailUpsertBulk) UpdateUpdatedAt() *PaymentBankingDetailUpsertBulk {
	return u.Update(func(s *PaymentBankingDetailUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetCreatedBy sets the "created_by" field.
func (u *PaymentBankingDetailUpsertBulk) SetCreatedBy(v string) *PaymentBankingDetailUpsertBulk {
	return u.Update(func(s *PaymentBankingDetailUpsert) {
		s.SetCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *PaymentBankingDetailUpsertBulk) UpdateCreatedBy() *PaymentBankingDetailUpsertBulk {
	return u.Update(func(s *PaymentBankingDetailUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *PaymentBankingDetailUpsertBulk) SetUpdatedBy(v string) *PaymentBankingDetailUpsertBulk {
	return u.Update(func(s *PaymentBankingDetailUpsert) {
		s.SetUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *PaymentBankingDetailUpsertBulk) UpdateUpdatedBy() *PaymentBankingDetailUpsertBulk {
	return u.Update(func(s *PaymentBankingDetailUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetPaymentCode sets the "payment_code" field.
func (u *PaymentBankingDetailUpsertBulk) SetPaymentCode(v string) *PaymentBankingDetailUpsertBulk {
	return u.Update(func(s *PaymentBankingDetailUpsert) {
		s.SetPaymentCode(v)
	})
}

// UpdatePaymentCode sets the "payment_code" field to the value that was provided on create.
func (u *PaymentBankingDetailUpsertBulk) UpdatePaymentCode() *PaymentBankingDetailUpsertBulk {
	return u.Update(func(s *PaymentBankingDetailUpsert) {
		s.UpdatePaymentCode()
	})
}

// ClearPaymentCode clears the value of the "payment_code" field.
func (u *PaymentBankingDetailUpsertBulk) ClearPaymentCode() *PaymentBankingDetailUpsertBulk {
	return u.Update(func(s *PaymentBankingDetailUpsert) {
		s.ClearPaymentCode()
	})
}

// SetMerchantUserID sets the "merchant_user_id" field.
func (u *PaymentBankingDetailUpsertBulk) SetMerchantUserID(v int64) *PaymentBankingDetailUpsertBulk {
	return u.Update(func(s *PaymentBankingDetailUpsert) {
		s.SetMerchantUserID(v)
	})
}

// AddMerchantUserID adds v to the "merchant_user_id" field.
func (u *PaymentBankingDetailUpsertBulk) AddMerchantUserID(v int64) *PaymentBankingDetailUpsertBulk {
	return u.Update(func(s *PaymentBankingDetailUpsert) {
		s.AddMerchantUserID(v)
	})
}

// UpdateMerchantUserID sets the "merchant_user_id" field to the value that was provided on create.
func (u *PaymentBankingDetailUpsertBulk) UpdateMerchantUserID() *PaymentBankingDetailUpsertBulk {
	return u.Update(func(s *PaymentBankingDetailUpsert) {
		s.UpdateMerchantUserID()
	})
}

// ClearMerchantUserID clears the value of the "merchant_user_id" field.
func (u *PaymentBankingDetailUpsertBulk) ClearMerchantUserID() *PaymentBankingDetailUpsertBulk {
	return u.Update(func(s *PaymentBankingDetailUpsert) {
		s.ClearMerchantUserID()
	})
}

// SetMerchantUserBankName sets the "merchant_user_bank_name" field.
func (u *PaymentBankingDetailUpsertBulk) SetMerchantUserBankName(v int32) *PaymentBankingDetailUpsertBulk {
	return u.Update(func(s *PaymentBankingDetailUpsert) {
		s.SetMerchantUserBankName(v)
	})
}

// AddMerchantUserBankName adds v to the "merchant_user_bank_name" field.
func (u *PaymentBankingDetailUpsertBulk) AddMerchantUserBankName(v int32) *PaymentBankingDetailUpsertBulk {
	return u.Update(func(s *PaymentBankingDetailUpsert) {
		s.AddMerchantUserBankName(v)
	})
}

// UpdateMerchantUserBankName sets the "merchant_user_bank_name" field to the value that was provided on create.
func (u *PaymentBankingDetailUpsertBulk) UpdateMerchantUserBankName() *PaymentBankingDetailUpsertBulk {
	return u.Update(func(s *PaymentBankingDetailUpsert) {
		s.UpdateMerchantUserBankName()
	})
}

// ClearMerchantUserBankName clears the value of the "merchant_user_bank_name" field.
func (u *PaymentBankingDetailUpsertBulk) ClearMerchantUserBankName() *PaymentBankingDetailUpsertBulk {
	return u.Update(func(s *PaymentBankingDetailUpsert) {
		s.ClearMerchantUserBankName()
	})
}

// SetMerchantUserAccountNumber sets the "merchant_user_account_number" field.
func (u *PaymentBankingDetailUpsertBulk) SetMerchantUserAccountNumber(v string) *PaymentBankingDetailUpsertBulk {
	return u.Update(func(s *PaymentBankingDetailUpsert) {
		s.SetMerchantUserAccountNumber(v)
	})
}

// UpdateMerchantUserAccountNumber sets the "merchant_user_account_number" field to the value that was provided on create.
func (u *PaymentBankingDetailUpsertBulk) UpdateMerchantUserAccountNumber() *PaymentBankingDetailUpsertBulk {
	return u.Update(func(s *PaymentBankingDetailUpsert) {
		s.UpdateMerchantUserAccountNumber()
	})
}

// ClearMerchantUserAccountNumber clears the value of the "merchant_user_account_number" field.
func (u *PaymentBankingDetailUpsertBulk) ClearMerchantUserAccountNumber() *PaymentBankingDetailUpsertBulk {
	return u.Update(func(s *PaymentBankingDetailUpsert) {
		s.ClearMerchantUserAccountNumber()
	})
}

// SetMerchantUserAccountName sets the "merchant_user_account_name" field.
func (u *PaymentBankingDetailUpsertBulk) SetMerchantUserAccountName(v string) *PaymentBankingDetailUpsertBulk {
	return u.Update(func(s *PaymentBankingDetailUpsert) {
		s.SetMerchantUserAccountName(v)
	})
}

// UpdateMerchantUserAccountName sets the "merchant_user_account_name" field to the value that was provided on create.
func (u *PaymentBankingDetailUpsertBulk) UpdateMerchantUserAccountName() *PaymentBankingDetailUpsertBulk {
	return u.Update(func(s *PaymentBankingDetailUpsert) {
		s.UpdateMerchantUserAccountName()
	})
}

// ClearMerchantUserAccountName clears the value of the "merchant_user_account_name" field.
func (u *PaymentBankingDetailUpsertBulk) ClearMerchantUserAccountName() *PaymentBankingDetailUpsertBulk {
	return u.Update(func(s *PaymentBankingDetailUpsert) {
		s.ClearMerchantUserAccountName()
	})
}

// SetSystemAccountBankName sets the "system_account_bank_name" field.
func (u *PaymentBankingDetailUpsertBulk) SetSystemAccountBankName(v int32) *PaymentBankingDetailUpsertBulk {
	return u.Update(func(s *PaymentBankingDetailUpsert) {
		s.SetSystemAccountBankName(v)
	})
}

// AddSystemAccountBankName adds v to the "system_account_bank_name" field.
func (u *PaymentBankingDetailUpsertBulk) AddSystemAccountBankName(v int32) *PaymentBankingDetailUpsertBulk {
	return u.Update(func(s *PaymentBankingDetailUpsert) {
		s.AddSystemAccountBankName(v)
	})
}

// UpdateSystemAccountBankName sets the "system_account_bank_name" field to the value that was provided on create.
func (u *PaymentBankingDetailUpsertBulk) UpdateSystemAccountBankName() *PaymentBankingDetailUpsertBulk {
	return u.Update(func(s *PaymentBankingDetailUpsert) {
		s.UpdateSystemAccountBankName()
	})
}

// ClearSystemAccountBankName clears the value of the "system_account_bank_name" field.
func (u *PaymentBankingDetailUpsertBulk) ClearSystemAccountBankName() *PaymentBankingDetailUpsertBulk {
	return u.Update(func(s *PaymentBankingDetailUpsert) {
		s.ClearSystemAccountBankName()
	})
}

// SetSystemAccountNumber sets the "system_account_number" field.
func (u *PaymentBankingDetailUpsertBulk) SetSystemAccountNumber(v string) *PaymentBankingDetailUpsertBulk {
	return u.Update(func(s *PaymentBankingDetailUpsert) {
		s.SetSystemAccountNumber(v)
	})
}

// UpdateSystemAccountNumber sets the "system_account_number" field to the value that was provided on create.
func (u *PaymentBankingDetailUpsertBulk) UpdateSystemAccountNumber() *PaymentBankingDetailUpsertBulk {
	return u.Update(func(s *PaymentBankingDetailUpsert) {
		s.UpdateSystemAccountNumber()
	})
}

// ClearSystemAccountNumber clears the value of the "system_account_number" field.
func (u *PaymentBankingDetailUpsertBulk) ClearSystemAccountNumber() *PaymentBankingDetailUpsertBulk {
	return u.Update(func(s *PaymentBankingDetailUpsert) {
		s.ClearSystemAccountNumber()
	})
}

// SetSystemAccountName sets the "system_account_name" field.
func (u *PaymentBankingDetailUpsertBulk) SetSystemAccountName(v string) *PaymentBankingDetailUpsertBulk {
	return u.Update(func(s *PaymentBankingDetailUpsert) {
		s.SetSystemAccountName(v)
	})
}

// UpdateSystemAccountName sets the "system_account_name" field to the value that was provided on create.
func (u *PaymentBankingDetailUpsertBulk) UpdateSystemAccountName() *PaymentBankingDetailUpsertBulk {
	return u.Update(func(s *PaymentBankingDetailUpsert) {
		s.UpdateSystemAccountName()
	})
}

// ClearSystemAccountName clears the value of the "system_account_name" field.
func (u *PaymentBankingDetailUpsertBulk) ClearSystemAccountName() *PaymentBankingDetailUpsertBulk {
	return u.Update(func(s *PaymentBankingDetailUpsert) {
		s.ClearSystemAccountName()
	})
}

// SetImageURL sets the "image_url" field.
func (u *PaymentBankingDetailUpsertBulk) SetImageURL(v string) *PaymentBankingDetailUpsertBulk {
	return u.Update(func(s *PaymentBankingDetailUpsert) {
		s.SetImageURL(v)
	})
}

// UpdateImageURL sets the "image_url" field to the value that was provided on create.
func (u *PaymentBankingDetailUpsertBulk) UpdateImageURL() *PaymentBankingDetailUpsertBulk {
	return u.Update(func(s *PaymentBankingDetailUpsert) {
		s.UpdateImageURL()
	})
}

// ClearImageURL clears the value of the "image_url" field.
func (u *PaymentBankingDetailUpsertBulk) ClearImageURL() *PaymentBankingDetailUpsertBulk {
	return u.Update(func(s *PaymentBankingDetailUpsert) {
		s.ClearImageURL()
	})
}

// SetTxID sets the "tx_id" field.
func (u *PaymentBankingDetailUpsertBulk) SetTxID(v string) *PaymentBankingDetailUpsertBulk {
	return u.Update(func(s *PaymentBankingDetailUpsert) {
		s.SetTxID(v)
	})
}

// UpdateTxID sets the "tx_id" field to the value that was provided on create.
func (u *PaymentBankingDetailUpsertBulk) UpdateTxID() *PaymentBankingDetailUpsertBulk {
	return u.Update(func(s *PaymentBankingDetailUpsert) {
		s.UpdateTxID()
	})
}

// ClearTxID clears the value of the "tx_id" field.
func (u *PaymentBankingDetailUpsertBulk) ClearTxID() *PaymentBankingDetailUpsertBulk {
	return u.Update(func(s *PaymentBankingDetailUpsert) {
		s.ClearTxID()
	})
}

// SetAmount sets the "amount" field.
func (u *PaymentBankingDetailUpsertBulk) SetAmount(v uint64) *PaymentBankingDetailUpsertBulk {
	return u.Update(func(s *PaymentBankingDetailUpsert) {
		s.SetAmount(v)
	})
}

// AddAmount adds v to the "amount" field.
func (u *PaymentBankingDetailUpsertBulk) AddAmount(v uint64) *PaymentBankingDetailUpsertBulk {
	return u.Update(func(s *PaymentBankingDetailUpsert) {
		s.AddAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *PaymentBankingDetailUpsertBulk) UpdateAmount() *PaymentBankingDetailUpsertBulk {
	return u.Update(func(s *PaymentBankingDetailUpsert) {
		s.UpdateAmount()
	})
}

// ClearAmount clears the value of the "amount" field.
func (u *PaymentBankingDetailUpsertBulk) ClearAmount() *PaymentBankingDetailUpsertBulk {
	return u.Update(func(s *PaymentBankingDetailUpsert) {
		s.ClearAmount()
	})
}

// SetFee sets the "fee" field.
func (u *PaymentBankingDetailUpsertBulk) SetFee(v uint64) *PaymentBankingDetailUpsertBulk {
	return u.Update(func(s *PaymentBankingDetailUpsert) {
		s.SetFee(v)
	})
}

// AddFee adds v to the "fee" field.
func (u *PaymentBankingDetailUpsertBulk) AddFee(v uint64) *PaymentBankingDetailUpsertBulk {
	return u.Update(func(s *PaymentBankingDetailUpsert) {
		s.AddFee(v)
	})
}

// UpdateFee sets the "fee" field to the value that was provided on create.
func (u *PaymentBankingDetailUpsertBulk) UpdateFee() *PaymentBankingDetailUpsertBulk {
	return u.Update(func(s *PaymentBankingDetailUpsert) {
		s.UpdateFee()
	})
}

// ClearFee clears the value of the "fee" field.
func (u *PaymentBankingDetailUpsertBulk) ClearFee() *PaymentBankingDetailUpsertBulk {
	return u.Update(func(s *PaymentBankingDetailUpsert) {
		s.ClearFee()
	})
}

// Exec executes the query.
func (u *PaymentBankingDetailUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PaymentBankingDetailCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PaymentBankingDetailCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PaymentBankingDetailUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
