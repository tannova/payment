// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"gitlab.com/mcuc/monorepo/backend/stark/pkg/ent/payment"
	"gitlab.com/mcuc/monorepo/backend/stark/pkg/ent/paymentewalletdetail"
	"gitlab.com/mcuc/monorepo/backend/stark/pkg/ent/predicate"
)

// PaymentEWalletDetailQuery is the builder for querying PaymentEWalletDetail entities.
type PaymentEWalletDetailQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.PaymentEWalletDetail
	// eager-loading edges.
	withPayment *PaymentQuery
	withFKs     bool
	modifiers   []func(s *sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the PaymentEWalletDetailQuery builder.
func (pedq *PaymentEWalletDetailQuery) Where(ps ...predicate.PaymentEWalletDetail) *PaymentEWalletDetailQuery {
	pedq.predicates = append(pedq.predicates, ps...)
	return pedq
}

// Limit adds a limit step to the query.
func (pedq *PaymentEWalletDetailQuery) Limit(limit int) *PaymentEWalletDetailQuery {
	pedq.limit = &limit
	return pedq
}

// Offset adds an offset step to the query.
func (pedq *PaymentEWalletDetailQuery) Offset(offset int) *PaymentEWalletDetailQuery {
	pedq.offset = &offset
	return pedq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (pedq *PaymentEWalletDetailQuery) Unique(unique bool) *PaymentEWalletDetailQuery {
	pedq.unique = &unique
	return pedq
}

// Order adds an order step to the query.
func (pedq *PaymentEWalletDetailQuery) Order(o ...OrderFunc) *PaymentEWalletDetailQuery {
	pedq.order = append(pedq.order, o...)
	return pedq
}

// QueryPayment chains the current query on the "payment" edge.
func (pedq *PaymentEWalletDetailQuery) QueryPayment() *PaymentQuery {
	query := &PaymentQuery{config: pedq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pedq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pedq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(paymentewalletdetail.Table, paymentewalletdetail.FieldID, selector),
			sqlgraph.To(payment.Table, payment.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, paymentewalletdetail.PaymentTable, paymentewalletdetail.PaymentColumn),
		)
		fromU = sqlgraph.SetNeighbors(pedq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first PaymentEWalletDetail entity from the query.
// Returns a *NotFoundError when no PaymentEWalletDetail was found.
func (pedq *PaymentEWalletDetailQuery) First(ctx context.Context) (*PaymentEWalletDetail, error) {
	nodes, err := pedq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{paymentewalletdetail.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (pedq *PaymentEWalletDetailQuery) FirstX(ctx context.Context) *PaymentEWalletDetail {
	node, err := pedq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first PaymentEWalletDetail ID from the query.
// Returns a *NotFoundError when no PaymentEWalletDetail ID was found.
func (pedq *PaymentEWalletDetailQuery) FirstID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = pedq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{paymentewalletdetail.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (pedq *PaymentEWalletDetailQuery) FirstIDX(ctx context.Context) int64 {
	id, err := pedq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single PaymentEWalletDetail entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one PaymentEWalletDetail entity is not found.
// Returns a *NotFoundError when no PaymentEWalletDetail entities are found.
func (pedq *PaymentEWalletDetailQuery) Only(ctx context.Context) (*PaymentEWalletDetail, error) {
	nodes, err := pedq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{paymentewalletdetail.Label}
	default:
		return nil, &NotSingularError{paymentewalletdetail.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (pedq *PaymentEWalletDetailQuery) OnlyX(ctx context.Context) *PaymentEWalletDetail {
	node, err := pedq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only PaymentEWalletDetail ID in the query.
// Returns a *NotSingularError when exactly one PaymentEWalletDetail ID is not found.
// Returns a *NotFoundError when no entities are found.
func (pedq *PaymentEWalletDetailQuery) OnlyID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = pedq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{paymentewalletdetail.Label}
	default:
		err = &NotSingularError{paymentewalletdetail.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (pedq *PaymentEWalletDetailQuery) OnlyIDX(ctx context.Context) int64 {
	id, err := pedq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of PaymentEWalletDetails.
func (pedq *PaymentEWalletDetailQuery) All(ctx context.Context) ([]*PaymentEWalletDetail, error) {
	if err := pedq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return pedq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (pedq *PaymentEWalletDetailQuery) AllX(ctx context.Context) []*PaymentEWalletDetail {
	nodes, err := pedq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of PaymentEWalletDetail IDs.
func (pedq *PaymentEWalletDetailQuery) IDs(ctx context.Context) ([]int64, error) {
	var ids []int64
	if err := pedq.Select(paymentewalletdetail.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (pedq *PaymentEWalletDetailQuery) IDsX(ctx context.Context) []int64 {
	ids, err := pedq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (pedq *PaymentEWalletDetailQuery) Count(ctx context.Context) (int, error) {
	if err := pedq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return pedq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (pedq *PaymentEWalletDetailQuery) CountX(ctx context.Context) int {
	count, err := pedq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (pedq *PaymentEWalletDetailQuery) Exist(ctx context.Context) (bool, error) {
	if err := pedq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return pedq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (pedq *PaymentEWalletDetailQuery) ExistX(ctx context.Context) bool {
	exist, err := pedq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the PaymentEWalletDetailQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (pedq *PaymentEWalletDetailQuery) Clone() *PaymentEWalletDetailQuery {
	if pedq == nil {
		return nil
	}
	return &PaymentEWalletDetailQuery{
		config:      pedq.config,
		limit:       pedq.limit,
		offset:      pedq.offset,
		order:       append([]OrderFunc{}, pedq.order...),
		predicates:  append([]predicate.PaymentEWalletDetail{}, pedq.predicates...),
		withPayment: pedq.withPayment.Clone(),
		// clone intermediate query.
		sql:  pedq.sql.Clone(),
		path: pedq.path,
	}
}

// WithPayment tells the query-builder to eager-load the nodes that are connected to
// the "payment" edge. The optional arguments are used to configure the query builder of the edge.
func (pedq *PaymentEWalletDetailQuery) WithPayment(opts ...func(*PaymentQuery)) *PaymentEWalletDetailQuery {
	query := &PaymentQuery{config: pedq.config}
	for _, opt := range opts {
		opt(query)
	}
	pedq.withPayment = query
	return pedq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.PaymentEWalletDetail.Query().
//		GroupBy(paymentewalletdetail.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (pedq *PaymentEWalletDetailQuery) GroupBy(field string, fields ...string) *PaymentEWalletDetailGroupBy {
	group := &PaymentEWalletDetailGroupBy{config: pedq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := pedq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return pedq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.PaymentEWalletDetail.Query().
//		Select(paymentewalletdetail.FieldCreatedAt).
//		Scan(ctx, &v)
//
func (pedq *PaymentEWalletDetailQuery) Select(fields ...string) *PaymentEWalletDetailSelect {
	pedq.fields = append(pedq.fields, fields...)
	return &PaymentEWalletDetailSelect{PaymentEWalletDetailQuery: pedq}
}

func (pedq *PaymentEWalletDetailQuery) prepareQuery(ctx context.Context) error {
	for _, f := range pedq.fields {
		if !paymentewalletdetail.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if pedq.path != nil {
		prev, err := pedq.path(ctx)
		if err != nil {
			return err
		}
		pedq.sql = prev
	}
	return nil
}

func (pedq *PaymentEWalletDetailQuery) sqlAll(ctx context.Context) ([]*PaymentEWalletDetail, error) {
	var (
		nodes       = []*PaymentEWalletDetail{}
		withFKs     = pedq.withFKs
		_spec       = pedq.querySpec()
		loadedTypes = [1]bool{
			pedq.withPayment != nil,
		}
	)
	if pedq.withPayment != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, paymentewalletdetail.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &PaymentEWalletDetail{config: pedq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(pedq.modifiers) > 0 {
		_spec.Modifiers = pedq.modifiers
	}
	if err := sqlgraph.QueryNodes(ctx, pedq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := pedq.withPayment; query != nil {
		ids := make([]int64, 0, len(nodes))
		nodeids := make(map[int64][]*PaymentEWalletDetail)
		for i := range nodes {
			if nodes[i].payment_payment_e_wallet_detail == nil {
				continue
			}
			fk := *nodes[i].payment_payment_e_wallet_detail
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(payment.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "payment_payment_e_wallet_detail" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Payment = n
			}
		}
	}

	return nodes, nil
}

func (pedq *PaymentEWalletDetailQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := pedq.querySpec()
	if len(pedq.modifiers) > 0 {
		_spec.Modifiers = pedq.modifiers
	}
	return sqlgraph.CountNodes(ctx, pedq.driver, _spec)
}

func (pedq *PaymentEWalletDetailQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := pedq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (pedq *PaymentEWalletDetailQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   paymentewalletdetail.Table,
			Columns: paymentewalletdetail.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: paymentewalletdetail.FieldID,
			},
		},
		From:   pedq.sql,
		Unique: true,
	}
	if unique := pedq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := pedq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, paymentewalletdetail.FieldID)
		for i := range fields {
			if fields[i] != paymentewalletdetail.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := pedq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := pedq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := pedq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := pedq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (pedq *PaymentEWalletDetailQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(pedq.driver.Dialect())
	t1 := builder.Table(paymentewalletdetail.Table)
	columns := pedq.fields
	if len(columns) == 0 {
		columns = paymentewalletdetail.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if pedq.sql != nil {
		selector = pedq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if pedq.unique != nil && *pedq.unique {
		selector.Distinct()
	}
	for _, m := range pedq.modifiers {
		m(selector)
	}
	for _, p := range pedq.predicates {
		p(selector)
	}
	for _, p := range pedq.order {
		p(selector)
	}
	if offset := pedq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := pedq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ForUpdate locks the selected rows against concurrent updates, and prevent them from being
// updated, deleted or "selected ... for update" by other sessions, until the transaction is
// either committed or rolled-back.
func (pedq *PaymentEWalletDetailQuery) ForUpdate(opts ...sql.LockOption) *PaymentEWalletDetailQuery {
	if pedq.driver.Dialect() == dialect.Postgres {
		pedq.Unique(false)
	}
	pedq.modifiers = append(pedq.modifiers, func(s *sql.Selector) {
		s.ForUpdate(opts...)
	})
	return pedq
}

// ForShare behaves similarly to ForUpdate, except that it acquires a shared mode lock
// on any rows that are read. Other sessions can read the rows, but cannot modify them
// until your transaction commits.
func (pedq *PaymentEWalletDetailQuery) ForShare(opts ...sql.LockOption) *PaymentEWalletDetailQuery {
	if pedq.driver.Dialect() == dialect.Postgres {
		pedq.Unique(false)
	}
	pedq.modifiers = append(pedq.modifiers, func(s *sql.Selector) {
		s.ForShare(opts...)
	})
	return pedq
}

// Modify adds a query modifier for attaching custom logic to queries.
func (pedq *PaymentEWalletDetailQuery) Modify(modifiers ...func(s *sql.Selector)) *PaymentEWalletDetailSelect {
	pedq.modifiers = append(pedq.modifiers, modifiers...)
	return pedq.Select()
}

// PaymentEWalletDetailGroupBy is the group-by builder for PaymentEWalletDetail entities.
type PaymentEWalletDetailGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (pedgb *PaymentEWalletDetailGroupBy) Aggregate(fns ...AggregateFunc) *PaymentEWalletDetailGroupBy {
	pedgb.fns = append(pedgb.fns, fns...)
	return pedgb
}

// Scan applies the group-by query and scans the result into the given value.
func (pedgb *PaymentEWalletDetailGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := pedgb.path(ctx)
	if err != nil {
		return err
	}
	pedgb.sql = query
	return pedgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (pedgb *PaymentEWalletDetailGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := pedgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (pedgb *PaymentEWalletDetailGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(pedgb.fields) > 1 {
		return nil, errors.New("ent: PaymentEWalletDetailGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := pedgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (pedgb *PaymentEWalletDetailGroupBy) StringsX(ctx context.Context) []string {
	v, err := pedgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (pedgb *PaymentEWalletDetailGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = pedgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{paymentewalletdetail.Label}
	default:
		err = fmt.Errorf("ent: PaymentEWalletDetailGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (pedgb *PaymentEWalletDetailGroupBy) StringX(ctx context.Context) string {
	v, err := pedgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (pedgb *PaymentEWalletDetailGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(pedgb.fields) > 1 {
		return nil, errors.New("ent: PaymentEWalletDetailGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := pedgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (pedgb *PaymentEWalletDetailGroupBy) IntsX(ctx context.Context) []int {
	v, err := pedgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (pedgb *PaymentEWalletDetailGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = pedgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{paymentewalletdetail.Label}
	default:
		err = fmt.Errorf("ent: PaymentEWalletDetailGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (pedgb *PaymentEWalletDetailGroupBy) IntX(ctx context.Context) int {
	v, err := pedgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (pedgb *PaymentEWalletDetailGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(pedgb.fields) > 1 {
		return nil, errors.New("ent: PaymentEWalletDetailGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := pedgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (pedgb *PaymentEWalletDetailGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := pedgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (pedgb *PaymentEWalletDetailGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = pedgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{paymentewalletdetail.Label}
	default:
		err = fmt.Errorf("ent: PaymentEWalletDetailGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (pedgb *PaymentEWalletDetailGroupBy) Float64X(ctx context.Context) float64 {
	v, err := pedgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (pedgb *PaymentEWalletDetailGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(pedgb.fields) > 1 {
		return nil, errors.New("ent: PaymentEWalletDetailGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := pedgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (pedgb *PaymentEWalletDetailGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := pedgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (pedgb *PaymentEWalletDetailGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = pedgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{paymentewalletdetail.Label}
	default:
		err = fmt.Errorf("ent: PaymentEWalletDetailGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (pedgb *PaymentEWalletDetailGroupBy) BoolX(ctx context.Context) bool {
	v, err := pedgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (pedgb *PaymentEWalletDetailGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range pedgb.fields {
		if !paymentewalletdetail.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := pedgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := pedgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (pedgb *PaymentEWalletDetailGroupBy) sqlQuery() *sql.Selector {
	selector := pedgb.sql.Select()
	aggregation := make([]string, 0, len(pedgb.fns))
	for _, fn := range pedgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(pedgb.fields)+len(pedgb.fns))
		for _, f := range pedgb.fields {
			columns = append(columns, selector.C(f))
		}
		for _, c := range aggregation {
			columns = append(columns, c)
		}
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(pedgb.fields...)...)
}

// PaymentEWalletDetailSelect is the builder for selecting fields of PaymentEWalletDetail entities.
type PaymentEWalletDetailSelect struct {
	*PaymentEWalletDetailQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (peds *PaymentEWalletDetailSelect) Scan(ctx context.Context, v interface{}) error {
	if err := peds.prepareQuery(ctx); err != nil {
		return err
	}
	peds.sql = peds.PaymentEWalletDetailQuery.sqlQuery(ctx)
	return peds.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (peds *PaymentEWalletDetailSelect) ScanX(ctx context.Context, v interface{}) {
	if err := peds.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (peds *PaymentEWalletDetailSelect) Strings(ctx context.Context) ([]string, error) {
	if len(peds.fields) > 1 {
		return nil, errors.New("ent: PaymentEWalletDetailSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := peds.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (peds *PaymentEWalletDetailSelect) StringsX(ctx context.Context) []string {
	v, err := peds.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (peds *PaymentEWalletDetailSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = peds.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{paymentewalletdetail.Label}
	default:
		err = fmt.Errorf("ent: PaymentEWalletDetailSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (peds *PaymentEWalletDetailSelect) StringX(ctx context.Context) string {
	v, err := peds.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (peds *PaymentEWalletDetailSelect) Ints(ctx context.Context) ([]int, error) {
	if len(peds.fields) > 1 {
		return nil, errors.New("ent: PaymentEWalletDetailSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := peds.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (peds *PaymentEWalletDetailSelect) IntsX(ctx context.Context) []int {
	v, err := peds.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (peds *PaymentEWalletDetailSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = peds.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{paymentewalletdetail.Label}
	default:
		err = fmt.Errorf("ent: PaymentEWalletDetailSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (peds *PaymentEWalletDetailSelect) IntX(ctx context.Context) int {
	v, err := peds.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (peds *PaymentEWalletDetailSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(peds.fields) > 1 {
		return nil, errors.New("ent: PaymentEWalletDetailSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := peds.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (peds *PaymentEWalletDetailSelect) Float64sX(ctx context.Context) []float64 {
	v, err := peds.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (peds *PaymentEWalletDetailSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = peds.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{paymentewalletdetail.Label}
	default:
		err = fmt.Errorf("ent: PaymentEWalletDetailSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (peds *PaymentEWalletDetailSelect) Float64X(ctx context.Context) float64 {
	v, err := peds.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (peds *PaymentEWalletDetailSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(peds.fields) > 1 {
		return nil, errors.New("ent: PaymentEWalletDetailSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := peds.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (peds *PaymentEWalletDetailSelect) BoolsX(ctx context.Context) []bool {
	v, err := peds.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (peds *PaymentEWalletDetailSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = peds.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{paymentewalletdetail.Label}
	default:
		err = fmt.Errorf("ent: PaymentEWalletDetailSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (peds *PaymentEWalletDetailSelect) BoolX(ctx context.Context) bool {
	v, err := peds.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (peds *PaymentEWalletDetailSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := peds.sql.Query()
	if err := peds.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (peds *PaymentEWalletDetailSelect) Modify(modifiers ...func(s *sql.Selector)) *PaymentEWalletDetailSelect {
	peds.modifiers = append(peds.modifiers, modifiers...)
	return peds
}
