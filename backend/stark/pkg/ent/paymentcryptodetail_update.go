// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"gitlab.com/mcuc/monorepo/backend/stark/pkg/ent/payment"
	"gitlab.com/mcuc/monorepo/backend/stark/pkg/ent/paymentcryptodetail"
	"gitlab.com/mcuc/monorepo/backend/stark/pkg/ent/predicate"
)

// PaymentCryptoDetailUpdate is the builder for updating PaymentCryptoDetail entities.
type PaymentCryptoDetailUpdate struct {
	config
	hooks    []Hook
	mutation *PaymentCryptoDetailMutation
}

// Where appends a list predicates to the PaymentCryptoDetailUpdate builder.
func (pcdu *PaymentCryptoDetailUpdate) Where(ps ...predicate.PaymentCryptoDetail) *PaymentCryptoDetailUpdate {
	pcdu.mutation.Where(ps...)
	return pcdu
}

// SetCreatedAt sets the "created_at" field.
func (pcdu *PaymentCryptoDetailUpdate) SetCreatedAt(t time.Time) *PaymentCryptoDetailUpdate {
	pcdu.mutation.SetCreatedAt(t)
	return pcdu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pcdu *PaymentCryptoDetailUpdate) SetNillableCreatedAt(t *time.Time) *PaymentCryptoDetailUpdate {
	if t != nil {
		pcdu.SetCreatedAt(*t)
	}
	return pcdu
}

// SetUpdatedAt sets the "updated_at" field.
func (pcdu *PaymentCryptoDetailUpdate) SetUpdatedAt(t time.Time) *PaymentCryptoDetailUpdate {
	pcdu.mutation.SetUpdatedAt(t)
	return pcdu
}

// SetCreatedBy sets the "created_by" field.
func (pcdu *PaymentCryptoDetailUpdate) SetCreatedBy(s string) *PaymentCryptoDetailUpdate {
	pcdu.mutation.SetCreatedBy(s)
	return pcdu
}

// SetUpdatedBy sets the "updated_by" field.
func (pcdu *PaymentCryptoDetailUpdate) SetUpdatedBy(s string) *PaymentCryptoDetailUpdate {
	pcdu.mutation.SetUpdatedBy(s)
	return pcdu
}

// SetCryptoType sets the "crypto_type" field.
func (pcdu *PaymentCryptoDetailUpdate) SetCryptoType(i int32) *PaymentCryptoDetailUpdate {
	pcdu.mutation.ResetCryptoType()
	pcdu.mutation.SetCryptoType(i)
	return pcdu
}

// SetNillableCryptoType sets the "crypto_type" field if the given value is not nil.
func (pcdu *PaymentCryptoDetailUpdate) SetNillableCryptoType(i *int32) *PaymentCryptoDetailUpdate {
	if i != nil {
		pcdu.SetCryptoType(*i)
	}
	return pcdu
}

// AddCryptoType adds i to the "crypto_type" field.
func (pcdu *PaymentCryptoDetailUpdate) AddCryptoType(i int32) *PaymentCryptoDetailUpdate {
	pcdu.mutation.AddCryptoType(i)
	return pcdu
}

// SetCryptoNetworkType sets the "crypto_network_type" field.
func (pcdu *PaymentCryptoDetailUpdate) SetCryptoNetworkType(i int32) *PaymentCryptoDetailUpdate {
	pcdu.mutation.ResetCryptoNetworkType()
	pcdu.mutation.SetCryptoNetworkType(i)
	return pcdu
}

// SetNillableCryptoNetworkType sets the "crypto_network_type" field if the given value is not nil.
func (pcdu *PaymentCryptoDetailUpdate) SetNillableCryptoNetworkType(i *int32) *PaymentCryptoDetailUpdate {
	if i != nil {
		pcdu.SetCryptoNetworkType(*i)
	}
	return pcdu
}

// AddCryptoNetworkType adds i to the "crypto_network_type" field.
func (pcdu *PaymentCryptoDetailUpdate) AddCryptoNetworkType(i int32) *PaymentCryptoDetailUpdate {
	pcdu.mutation.AddCryptoNetworkType(i)
	return pcdu
}

// SetCryptoWalletName sets the "crypto_wallet_name" field.
func (pcdu *PaymentCryptoDetailUpdate) SetCryptoWalletName(i int32) *PaymentCryptoDetailUpdate {
	pcdu.mutation.ResetCryptoWalletName()
	pcdu.mutation.SetCryptoWalletName(i)
	return pcdu
}

// SetNillableCryptoWalletName sets the "crypto_wallet_name" field if the given value is not nil.
func (pcdu *PaymentCryptoDetailUpdate) SetNillableCryptoWalletName(i *int32) *PaymentCryptoDetailUpdate {
	if i != nil {
		pcdu.SetCryptoWalletName(*i)
	}
	return pcdu
}

// AddCryptoWalletName adds i to the "crypto_wallet_name" field.
func (pcdu *PaymentCryptoDetailUpdate) AddCryptoWalletName(i int32) *PaymentCryptoDetailUpdate {
	pcdu.mutation.AddCryptoWalletName(i)
	return pcdu
}

// SetReceiverAddress sets the "receiver_address" field.
func (pcdu *PaymentCryptoDetailUpdate) SetReceiverAddress(s string) *PaymentCryptoDetailUpdate {
	pcdu.mutation.SetReceiverAddress(s)
	return pcdu
}

// SetSenderAddress sets the "sender_address" field.
func (pcdu *PaymentCryptoDetailUpdate) SetSenderAddress(s string) *PaymentCryptoDetailUpdate {
	pcdu.mutation.SetSenderAddress(s)
	return pcdu
}

// SetNillableSenderAddress sets the "sender_address" field if the given value is not nil.
func (pcdu *PaymentCryptoDetailUpdate) SetNillableSenderAddress(s *string) *PaymentCryptoDetailUpdate {
	if s != nil {
		pcdu.SetSenderAddress(*s)
	}
	return pcdu
}

// ClearSenderAddress clears the value of the "sender_address" field.
func (pcdu *PaymentCryptoDetailUpdate) ClearSenderAddress() *PaymentCryptoDetailUpdate {
	pcdu.mutation.ClearSenderAddress()
	return pcdu
}

// SetAmount sets the "amount" field.
func (pcdu *PaymentCryptoDetailUpdate) SetAmount(f float64) *PaymentCryptoDetailUpdate {
	pcdu.mutation.ResetAmount()
	pcdu.mutation.SetAmount(f)
	return pcdu
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (pcdu *PaymentCryptoDetailUpdate) SetNillableAmount(f *float64) *PaymentCryptoDetailUpdate {
	if f != nil {
		pcdu.SetAmount(*f)
	}
	return pcdu
}

// AddAmount adds f to the "amount" field.
func (pcdu *PaymentCryptoDetailUpdate) AddAmount(f float64) *PaymentCryptoDetailUpdate {
	pcdu.mutation.AddAmount(f)
	return pcdu
}

// ClearAmount clears the value of the "amount" field.
func (pcdu *PaymentCryptoDetailUpdate) ClearAmount() *PaymentCryptoDetailUpdate {
	pcdu.mutation.ClearAmount()
	return pcdu
}

// SetReceivedAmount sets the "received_amount" field.
func (pcdu *PaymentCryptoDetailUpdate) SetReceivedAmount(f float64) *PaymentCryptoDetailUpdate {
	pcdu.mutation.ResetReceivedAmount()
	pcdu.mutation.SetReceivedAmount(f)
	return pcdu
}

// SetNillableReceivedAmount sets the "received_amount" field if the given value is not nil.
func (pcdu *PaymentCryptoDetailUpdate) SetNillableReceivedAmount(f *float64) *PaymentCryptoDetailUpdate {
	if f != nil {
		pcdu.SetReceivedAmount(*f)
	}
	return pcdu
}

// AddReceivedAmount adds f to the "received_amount" field.
func (pcdu *PaymentCryptoDetailUpdate) AddReceivedAmount(f float64) *PaymentCryptoDetailUpdate {
	pcdu.mutation.AddReceivedAmount(f)
	return pcdu
}

// ClearReceivedAmount clears the value of the "received_amount" field.
func (pcdu *PaymentCryptoDetailUpdate) ClearReceivedAmount() *PaymentCryptoDetailUpdate {
	pcdu.mutation.ClearReceivedAmount()
	return pcdu
}

// SetTxHash sets the "tx_hash" field.
func (pcdu *PaymentCryptoDetailUpdate) SetTxHash(s string) *PaymentCryptoDetailUpdate {
	pcdu.mutation.SetTxHash(s)
	return pcdu
}

// SetNillableTxHash sets the "tx_hash" field if the given value is not nil.
func (pcdu *PaymentCryptoDetailUpdate) SetNillableTxHash(s *string) *PaymentCryptoDetailUpdate {
	if s != nil {
		pcdu.SetTxHash(*s)
	}
	return pcdu
}

// ClearTxHash clears the value of the "tx_hash" field.
func (pcdu *PaymentCryptoDetailUpdate) ClearTxHash() *PaymentCryptoDetailUpdate {
	pcdu.mutation.ClearTxHash()
	return pcdu
}

// SetTxID sets the "tx_id" field.
func (pcdu *PaymentCryptoDetailUpdate) SetTxID(s string) *PaymentCryptoDetailUpdate {
	pcdu.mutation.SetTxID(s)
	return pcdu
}

// SetNillableTxID sets the "tx_id" field if the given value is not nil.
func (pcdu *PaymentCryptoDetailUpdate) SetNillableTxID(s *string) *PaymentCryptoDetailUpdate {
	if s != nil {
		pcdu.SetTxID(*s)
	}
	return pcdu
}

// ClearTxID clears the value of the "tx_id" field.
func (pcdu *PaymentCryptoDetailUpdate) ClearTxID() *PaymentCryptoDetailUpdate {
	pcdu.mutation.ClearTxID()
	return pcdu
}

// SetFee sets the "fee" field.
func (pcdu *PaymentCryptoDetailUpdate) SetFee(f float64) *PaymentCryptoDetailUpdate {
	pcdu.mutation.ResetFee()
	pcdu.mutation.SetFee(f)
	return pcdu
}

// SetNillableFee sets the "fee" field if the given value is not nil.
func (pcdu *PaymentCryptoDetailUpdate) SetNillableFee(f *float64) *PaymentCryptoDetailUpdate {
	if f != nil {
		pcdu.SetFee(*f)
	}
	return pcdu
}

// AddFee adds f to the "fee" field.
func (pcdu *PaymentCryptoDetailUpdate) AddFee(f float64) *PaymentCryptoDetailUpdate {
	pcdu.mutation.AddFee(f)
	return pcdu
}

// ClearFee clears the value of the "fee" field.
func (pcdu *PaymentCryptoDetailUpdate) ClearFee() *PaymentCryptoDetailUpdate {
	pcdu.mutation.ClearFee()
	return pcdu
}

// SetImageURL sets the "image_url" field.
func (pcdu *PaymentCryptoDetailUpdate) SetImageURL(s string) *PaymentCryptoDetailUpdate {
	pcdu.mutation.SetImageURL(s)
	return pcdu
}

// SetNillableImageURL sets the "image_url" field if the given value is not nil.
func (pcdu *PaymentCryptoDetailUpdate) SetNillableImageURL(s *string) *PaymentCryptoDetailUpdate {
	if s != nil {
		pcdu.SetImageURL(*s)
	}
	return pcdu
}

// ClearImageURL clears the value of the "image_url" field.
func (pcdu *PaymentCryptoDetailUpdate) ClearImageURL() *PaymentCryptoDetailUpdate {
	pcdu.mutation.ClearImageURL()
	return pcdu
}

// SetPaymentID sets the "payment" edge to the Payment entity by ID.
func (pcdu *PaymentCryptoDetailUpdate) SetPaymentID(id int64) *PaymentCryptoDetailUpdate {
	pcdu.mutation.SetPaymentID(id)
	return pcdu
}

// SetPayment sets the "payment" edge to the Payment entity.
func (pcdu *PaymentCryptoDetailUpdate) SetPayment(p *Payment) *PaymentCryptoDetailUpdate {
	return pcdu.SetPaymentID(p.ID)
}

// Mutation returns the PaymentCryptoDetailMutation object of the builder.
func (pcdu *PaymentCryptoDetailUpdate) Mutation() *PaymentCryptoDetailMutation {
	return pcdu.mutation
}

// ClearPayment clears the "payment" edge to the Payment entity.
func (pcdu *PaymentCryptoDetailUpdate) ClearPayment() *PaymentCryptoDetailUpdate {
	pcdu.mutation.ClearPayment()
	return pcdu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pcdu *PaymentCryptoDetailUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	pcdu.defaults()
	if len(pcdu.hooks) == 0 {
		if err = pcdu.check(); err != nil {
			return 0, err
		}
		affected, err = pcdu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PaymentCryptoDetailMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pcdu.check(); err != nil {
				return 0, err
			}
			pcdu.mutation = mutation
			affected, err = pcdu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pcdu.hooks) - 1; i >= 0; i-- {
			if pcdu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pcdu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pcdu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pcdu *PaymentCryptoDetailUpdate) SaveX(ctx context.Context) int {
	affected, err := pcdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pcdu *PaymentCryptoDetailUpdate) Exec(ctx context.Context) error {
	_, err := pcdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcdu *PaymentCryptoDetailUpdate) ExecX(ctx context.Context) {
	if err := pcdu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pcdu *PaymentCryptoDetailUpdate) defaults() {
	if _, ok := pcdu.mutation.UpdatedAt(); !ok {
		v := paymentcryptodetail.UpdateDefaultUpdatedAt()
		pcdu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pcdu *PaymentCryptoDetailUpdate) check() error {
	if v, ok := pcdu.mutation.CreatedBy(); ok {
		if err := paymentcryptodetail.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "PaymentCryptoDetail.created_by": %w`, err)}
		}
	}
	if v, ok := pcdu.mutation.UpdatedBy(); ok {
		if err := paymentcryptodetail.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "PaymentCryptoDetail.updated_by": %w`, err)}
		}
	}
	if v, ok := pcdu.mutation.CryptoType(); ok {
		if err := paymentcryptodetail.CryptoTypeValidator(v); err != nil {
			return &ValidationError{Name: "crypto_type", err: fmt.Errorf(`ent: validator failed for field "PaymentCryptoDetail.crypto_type": %w`, err)}
		}
	}
	if v, ok := pcdu.mutation.CryptoNetworkType(); ok {
		if err := paymentcryptodetail.CryptoNetworkTypeValidator(v); err != nil {
			return &ValidationError{Name: "crypto_network_type", err: fmt.Errorf(`ent: validator failed for field "PaymentCryptoDetail.crypto_network_type": %w`, err)}
		}
	}
	if v, ok := pcdu.mutation.CryptoWalletName(); ok {
		if err := paymentcryptodetail.CryptoWalletNameValidator(v); err != nil {
			return &ValidationError{Name: "crypto_wallet_name", err: fmt.Errorf(`ent: validator failed for field "PaymentCryptoDetail.crypto_wallet_name": %w`, err)}
		}
	}
	if v, ok := pcdu.mutation.ReceiverAddress(); ok {
		if err := paymentcryptodetail.ReceiverAddressValidator(v); err != nil {
			return &ValidationError{Name: "receiver_address", err: fmt.Errorf(`ent: validator failed for field "PaymentCryptoDetail.receiver_address": %w`, err)}
		}
	}
	if _, ok := pcdu.mutation.PaymentID(); pcdu.mutation.PaymentCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "PaymentCryptoDetail.payment"`)
	}
	return nil
}

func (pcdu *PaymentCryptoDetailUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   paymentcryptodetail.Table,
			Columns: paymentcryptodetail.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: paymentcryptodetail.FieldID,
			},
		},
	}
	if ps := pcdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pcdu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: paymentcryptodetail.FieldCreatedAt,
		})
	}
	if value, ok := pcdu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: paymentcryptodetail.FieldUpdatedAt,
		})
	}
	if value, ok := pcdu.mutation.CreatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: paymentcryptodetail.FieldCreatedBy,
		})
	}
	if value, ok := pcdu.mutation.UpdatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: paymentcryptodetail.FieldUpdatedBy,
		})
	}
	if value, ok := pcdu.mutation.CryptoType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: paymentcryptodetail.FieldCryptoType,
		})
	}
	if value, ok := pcdu.mutation.AddedCryptoType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: paymentcryptodetail.FieldCryptoType,
		})
	}
	if value, ok := pcdu.mutation.CryptoNetworkType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: paymentcryptodetail.FieldCryptoNetworkType,
		})
	}
	if value, ok := pcdu.mutation.AddedCryptoNetworkType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: paymentcryptodetail.FieldCryptoNetworkType,
		})
	}
	if value, ok := pcdu.mutation.CryptoWalletName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: paymentcryptodetail.FieldCryptoWalletName,
		})
	}
	if value, ok := pcdu.mutation.AddedCryptoWalletName(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: paymentcryptodetail.FieldCryptoWalletName,
		})
	}
	if value, ok := pcdu.mutation.ReceiverAddress(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: paymentcryptodetail.FieldReceiverAddress,
		})
	}
	if value, ok := pcdu.mutation.SenderAddress(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: paymentcryptodetail.FieldSenderAddress,
		})
	}
	if pcdu.mutation.SenderAddressCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: paymentcryptodetail.FieldSenderAddress,
		})
	}
	if value, ok := pcdu.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: paymentcryptodetail.FieldAmount,
		})
	}
	if value, ok := pcdu.mutation.AddedAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: paymentcryptodetail.FieldAmount,
		})
	}
	if pcdu.mutation.AmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: paymentcryptodetail.FieldAmount,
		})
	}
	if value, ok := pcdu.mutation.ReceivedAmount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: paymentcryptodetail.FieldReceivedAmount,
		})
	}
	if value, ok := pcdu.mutation.AddedReceivedAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: paymentcryptodetail.FieldReceivedAmount,
		})
	}
	if pcdu.mutation.ReceivedAmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: paymentcryptodetail.FieldReceivedAmount,
		})
	}
	if value, ok := pcdu.mutation.TxHash(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: paymentcryptodetail.FieldTxHash,
		})
	}
	if pcdu.mutation.TxHashCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: paymentcryptodetail.FieldTxHash,
		})
	}
	if value, ok := pcdu.mutation.TxID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: paymentcryptodetail.FieldTxID,
		})
	}
	if pcdu.mutation.TxIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: paymentcryptodetail.FieldTxID,
		})
	}
	if value, ok := pcdu.mutation.Fee(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: paymentcryptodetail.FieldFee,
		})
	}
	if value, ok := pcdu.mutation.AddedFee(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: paymentcryptodetail.FieldFee,
		})
	}
	if pcdu.mutation.FeeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: paymentcryptodetail.FieldFee,
		})
	}
	if value, ok := pcdu.mutation.ImageURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: paymentcryptodetail.FieldImageURL,
		})
	}
	if pcdu.mutation.ImageURLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: paymentcryptodetail.FieldImageURL,
		})
	}
	if pcdu.mutation.PaymentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   paymentcryptodetail.PaymentTable,
			Columns: []string{paymentcryptodetail.PaymentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: payment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcdu.mutation.PaymentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   paymentcryptodetail.PaymentTable,
			Columns: []string{paymentcryptodetail.PaymentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: payment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pcdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{paymentcryptodetail.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// PaymentCryptoDetailUpdateOne is the builder for updating a single PaymentCryptoDetail entity.
type PaymentCryptoDetailUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PaymentCryptoDetailMutation
}

// SetCreatedAt sets the "created_at" field.
func (pcduo *PaymentCryptoDetailUpdateOne) SetCreatedAt(t time.Time) *PaymentCryptoDetailUpdateOne {
	pcduo.mutation.SetCreatedAt(t)
	return pcduo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pcduo *PaymentCryptoDetailUpdateOne) SetNillableCreatedAt(t *time.Time) *PaymentCryptoDetailUpdateOne {
	if t != nil {
		pcduo.SetCreatedAt(*t)
	}
	return pcduo
}

// SetUpdatedAt sets the "updated_at" field.
func (pcduo *PaymentCryptoDetailUpdateOne) SetUpdatedAt(t time.Time) *PaymentCryptoDetailUpdateOne {
	pcduo.mutation.SetUpdatedAt(t)
	return pcduo
}

// SetCreatedBy sets the "created_by" field.
func (pcduo *PaymentCryptoDetailUpdateOne) SetCreatedBy(s string) *PaymentCryptoDetailUpdateOne {
	pcduo.mutation.SetCreatedBy(s)
	return pcduo
}

// SetUpdatedBy sets the "updated_by" field.
func (pcduo *PaymentCryptoDetailUpdateOne) SetUpdatedBy(s string) *PaymentCryptoDetailUpdateOne {
	pcduo.mutation.SetUpdatedBy(s)
	return pcduo
}

// SetCryptoType sets the "crypto_type" field.
func (pcduo *PaymentCryptoDetailUpdateOne) SetCryptoType(i int32) *PaymentCryptoDetailUpdateOne {
	pcduo.mutation.ResetCryptoType()
	pcduo.mutation.SetCryptoType(i)
	return pcduo
}

// SetNillableCryptoType sets the "crypto_type" field if the given value is not nil.
func (pcduo *PaymentCryptoDetailUpdateOne) SetNillableCryptoType(i *int32) *PaymentCryptoDetailUpdateOne {
	if i != nil {
		pcduo.SetCryptoType(*i)
	}
	return pcduo
}

// AddCryptoType adds i to the "crypto_type" field.
func (pcduo *PaymentCryptoDetailUpdateOne) AddCryptoType(i int32) *PaymentCryptoDetailUpdateOne {
	pcduo.mutation.AddCryptoType(i)
	return pcduo
}

// SetCryptoNetworkType sets the "crypto_network_type" field.
func (pcduo *PaymentCryptoDetailUpdateOne) SetCryptoNetworkType(i int32) *PaymentCryptoDetailUpdateOne {
	pcduo.mutation.ResetCryptoNetworkType()
	pcduo.mutation.SetCryptoNetworkType(i)
	return pcduo
}

// SetNillableCryptoNetworkType sets the "crypto_network_type" field if the given value is not nil.
func (pcduo *PaymentCryptoDetailUpdateOne) SetNillableCryptoNetworkType(i *int32) *PaymentCryptoDetailUpdateOne {
	if i != nil {
		pcduo.SetCryptoNetworkType(*i)
	}
	return pcduo
}

// AddCryptoNetworkType adds i to the "crypto_network_type" field.
func (pcduo *PaymentCryptoDetailUpdateOne) AddCryptoNetworkType(i int32) *PaymentCryptoDetailUpdateOne {
	pcduo.mutation.AddCryptoNetworkType(i)
	return pcduo
}

// SetCryptoWalletName sets the "crypto_wallet_name" field.
func (pcduo *PaymentCryptoDetailUpdateOne) SetCryptoWalletName(i int32) *PaymentCryptoDetailUpdateOne {
	pcduo.mutation.ResetCryptoWalletName()
	pcduo.mutation.SetCryptoWalletName(i)
	return pcduo
}

// SetNillableCryptoWalletName sets the "crypto_wallet_name" field if the given value is not nil.
func (pcduo *PaymentCryptoDetailUpdateOne) SetNillableCryptoWalletName(i *int32) *PaymentCryptoDetailUpdateOne {
	if i != nil {
		pcduo.SetCryptoWalletName(*i)
	}
	return pcduo
}

// AddCryptoWalletName adds i to the "crypto_wallet_name" field.
func (pcduo *PaymentCryptoDetailUpdateOne) AddCryptoWalletName(i int32) *PaymentCryptoDetailUpdateOne {
	pcduo.mutation.AddCryptoWalletName(i)
	return pcduo
}

// SetReceiverAddress sets the "receiver_address" field.
func (pcduo *PaymentCryptoDetailUpdateOne) SetReceiverAddress(s string) *PaymentCryptoDetailUpdateOne {
	pcduo.mutation.SetReceiverAddress(s)
	return pcduo
}

// SetSenderAddress sets the "sender_address" field.
func (pcduo *PaymentCryptoDetailUpdateOne) SetSenderAddress(s string) *PaymentCryptoDetailUpdateOne {
	pcduo.mutation.SetSenderAddress(s)
	return pcduo
}

// SetNillableSenderAddress sets the "sender_address" field if the given value is not nil.
func (pcduo *PaymentCryptoDetailUpdateOne) SetNillableSenderAddress(s *string) *PaymentCryptoDetailUpdateOne {
	if s != nil {
		pcduo.SetSenderAddress(*s)
	}
	return pcduo
}

// ClearSenderAddress clears the value of the "sender_address" field.
func (pcduo *PaymentCryptoDetailUpdateOne) ClearSenderAddress() *PaymentCryptoDetailUpdateOne {
	pcduo.mutation.ClearSenderAddress()
	return pcduo
}

// SetAmount sets the "amount" field.
func (pcduo *PaymentCryptoDetailUpdateOne) SetAmount(f float64) *PaymentCryptoDetailUpdateOne {
	pcduo.mutation.ResetAmount()
	pcduo.mutation.SetAmount(f)
	return pcduo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (pcduo *PaymentCryptoDetailUpdateOne) SetNillableAmount(f *float64) *PaymentCryptoDetailUpdateOne {
	if f != nil {
		pcduo.SetAmount(*f)
	}
	return pcduo
}

// AddAmount adds f to the "amount" field.
func (pcduo *PaymentCryptoDetailUpdateOne) AddAmount(f float64) *PaymentCryptoDetailUpdateOne {
	pcduo.mutation.AddAmount(f)
	return pcduo
}

// ClearAmount clears the value of the "amount" field.
func (pcduo *PaymentCryptoDetailUpdateOne) ClearAmount() *PaymentCryptoDetailUpdateOne {
	pcduo.mutation.ClearAmount()
	return pcduo
}

// SetReceivedAmount sets the "received_amount" field.
func (pcduo *PaymentCryptoDetailUpdateOne) SetReceivedAmount(f float64) *PaymentCryptoDetailUpdateOne {
	pcduo.mutation.ResetReceivedAmount()
	pcduo.mutation.SetReceivedAmount(f)
	return pcduo
}

// SetNillableReceivedAmount sets the "received_amount" field if the given value is not nil.
func (pcduo *PaymentCryptoDetailUpdateOne) SetNillableReceivedAmount(f *float64) *PaymentCryptoDetailUpdateOne {
	if f != nil {
		pcduo.SetReceivedAmount(*f)
	}
	return pcduo
}

// AddReceivedAmount adds f to the "received_amount" field.
func (pcduo *PaymentCryptoDetailUpdateOne) AddReceivedAmount(f float64) *PaymentCryptoDetailUpdateOne {
	pcduo.mutation.AddReceivedAmount(f)
	return pcduo
}

// ClearReceivedAmount clears the value of the "received_amount" field.
func (pcduo *PaymentCryptoDetailUpdateOne) ClearReceivedAmount() *PaymentCryptoDetailUpdateOne {
	pcduo.mutation.ClearReceivedAmount()
	return pcduo
}

// SetTxHash sets the "tx_hash" field.
func (pcduo *PaymentCryptoDetailUpdateOne) SetTxHash(s string) *PaymentCryptoDetailUpdateOne {
	pcduo.mutation.SetTxHash(s)
	return pcduo
}

// SetNillableTxHash sets the "tx_hash" field if the given value is not nil.
func (pcduo *PaymentCryptoDetailUpdateOne) SetNillableTxHash(s *string) *PaymentCryptoDetailUpdateOne {
	if s != nil {
		pcduo.SetTxHash(*s)
	}
	return pcduo
}

// ClearTxHash clears the value of the "tx_hash" field.
func (pcduo *PaymentCryptoDetailUpdateOne) ClearTxHash() *PaymentCryptoDetailUpdateOne {
	pcduo.mutation.ClearTxHash()
	return pcduo
}

// SetTxID sets the "tx_id" field.
func (pcduo *PaymentCryptoDetailUpdateOne) SetTxID(s string) *PaymentCryptoDetailUpdateOne {
	pcduo.mutation.SetTxID(s)
	return pcduo
}

// SetNillableTxID sets the "tx_id" field if the given value is not nil.
func (pcduo *PaymentCryptoDetailUpdateOne) SetNillableTxID(s *string) *PaymentCryptoDetailUpdateOne {
	if s != nil {
		pcduo.SetTxID(*s)
	}
	return pcduo
}

// ClearTxID clears the value of the "tx_id" field.
func (pcduo *PaymentCryptoDetailUpdateOne) ClearTxID() *PaymentCryptoDetailUpdateOne {
	pcduo.mutation.ClearTxID()
	return pcduo
}

// SetFee sets the "fee" field.
func (pcduo *PaymentCryptoDetailUpdateOne) SetFee(f float64) *PaymentCryptoDetailUpdateOne {
	pcduo.mutation.ResetFee()
	pcduo.mutation.SetFee(f)
	return pcduo
}

// SetNillableFee sets the "fee" field if the given value is not nil.
func (pcduo *PaymentCryptoDetailUpdateOne) SetNillableFee(f *float64) *PaymentCryptoDetailUpdateOne {
	if f != nil {
		pcduo.SetFee(*f)
	}
	return pcduo
}

// AddFee adds f to the "fee" field.
func (pcduo *PaymentCryptoDetailUpdateOne) AddFee(f float64) *PaymentCryptoDetailUpdateOne {
	pcduo.mutation.AddFee(f)
	return pcduo
}

// ClearFee clears the value of the "fee" field.
func (pcduo *PaymentCryptoDetailUpdateOne) ClearFee() *PaymentCryptoDetailUpdateOne {
	pcduo.mutation.ClearFee()
	return pcduo
}

// SetImageURL sets the "image_url" field.
func (pcduo *PaymentCryptoDetailUpdateOne) SetImageURL(s string) *PaymentCryptoDetailUpdateOne {
	pcduo.mutation.SetImageURL(s)
	return pcduo
}

// SetNillableImageURL sets the "image_url" field if the given value is not nil.
func (pcduo *PaymentCryptoDetailUpdateOne) SetNillableImageURL(s *string) *PaymentCryptoDetailUpdateOne {
	if s != nil {
		pcduo.SetImageURL(*s)
	}
	return pcduo
}

// ClearImageURL clears the value of the "image_url" field.
func (pcduo *PaymentCryptoDetailUpdateOne) ClearImageURL() *PaymentCryptoDetailUpdateOne {
	pcduo.mutation.ClearImageURL()
	return pcduo
}

// SetPaymentID sets the "payment" edge to the Payment entity by ID.
func (pcduo *PaymentCryptoDetailUpdateOne) SetPaymentID(id int64) *PaymentCryptoDetailUpdateOne {
	pcduo.mutation.SetPaymentID(id)
	return pcduo
}

// SetPayment sets the "payment" edge to the Payment entity.
func (pcduo *PaymentCryptoDetailUpdateOne) SetPayment(p *Payment) *PaymentCryptoDetailUpdateOne {
	return pcduo.SetPaymentID(p.ID)
}

// Mutation returns the PaymentCryptoDetailMutation object of the builder.
func (pcduo *PaymentCryptoDetailUpdateOne) Mutation() *PaymentCryptoDetailMutation {
	return pcduo.mutation
}

// ClearPayment clears the "payment" edge to the Payment entity.
func (pcduo *PaymentCryptoDetailUpdateOne) ClearPayment() *PaymentCryptoDetailUpdateOne {
	pcduo.mutation.ClearPayment()
	return pcduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pcduo *PaymentCryptoDetailUpdateOne) Select(field string, fields ...string) *PaymentCryptoDetailUpdateOne {
	pcduo.fields = append([]string{field}, fields...)
	return pcduo
}

// Save executes the query and returns the updated PaymentCryptoDetail entity.
func (pcduo *PaymentCryptoDetailUpdateOne) Save(ctx context.Context) (*PaymentCryptoDetail, error) {
	var (
		err  error
		node *PaymentCryptoDetail
	)
	pcduo.defaults()
	if len(pcduo.hooks) == 0 {
		if err = pcduo.check(); err != nil {
			return nil, err
		}
		node, err = pcduo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PaymentCryptoDetailMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pcduo.check(); err != nil {
				return nil, err
			}
			pcduo.mutation = mutation
			node, err = pcduo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(pcduo.hooks) - 1; i >= 0; i-- {
			if pcduo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pcduo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pcduo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (pcduo *PaymentCryptoDetailUpdateOne) SaveX(ctx context.Context) *PaymentCryptoDetail {
	node, err := pcduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pcduo *PaymentCryptoDetailUpdateOne) Exec(ctx context.Context) error {
	_, err := pcduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcduo *PaymentCryptoDetailUpdateOne) ExecX(ctx context.Context) {
	if err := pcduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pcduo *PaymentCryptoDetailUpdateOne) defaults() {
	if _, ok := pcduo.mutation.UpdatedAt(); !ok {
		v := paymentcryptodetail.UpdateDefaultUpdatedAt()
		pcduo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pcduo *PaymentCryptoDetailUpdateOne) check() error {
	if v, ok := pcduo.mutation.CreatedBy(); ok {
		if err := paymentcryptodetail.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "PaymentCryptoDetail.created_by": %w`, err)}
		}
	}
	if v, ok := pcduo.mutation.UpdatedBy(); ok {
		if err := paymentcryptodetail.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "PaymentCryptoDetail.updated_by": %w`, err)}
		}
	}
	if v, ok := pcduo.mutation.CryptoType(); ok {
		if err := paymentcryptodetail.CryptoTypeValidator(v); err != nil {
			return &ValidationError{Name: "crypto_type", err: fmt.Errorf(`ent: validator failed for field "PaymentCryptoDetail.crypto_type": %w`, err)}
		}
	}
	if v, ok := pcduo.mutation.CryptoNetworkType(); ok {
		if err := paymentcryptodetail.CryptoNetworkTypeValidator(v); err != nil {
			return &ValidationError{Name: "crypto_network_type", err: fmt.Errorf(`ent: validator failed for field "PaymentCryptoDetail.crypto_network_type": %w`, err)}
		}
	}
	if v, ok := pcduo.mutation.CryptoWalletName(); ok {
		if err := paymentcryptodetail.CryptoWalletNameValidator(v); err != nil {
			return &ValidationError{Name: "crypto_wallet_name", err: fmt.Errorf(`ent: validator failed for field "PaymentCryptoDetail.crypto_wallet_name": %w`, err)}
		}
	}
	if v, ok := pcduo.mutation.ReceiverAddress(); ok {
		if err := paymentcryptodetail.ReceiverAddressValidator(v); err != nil {
			return &ValidationError{Name: "receiver_address", err: fmt.Errorf(`ent: validator failed for field "PaymentCryptoDetail.receiver_address": %w`, err)}
		}
	}
	if _, ok := pcduo.mutation.PaymentID(); pcduo.mutation.PaymentCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "PaymentCryptoDetail.payment"`)
	}
	return nil
}

func (pcduo *PaymentCryptoDetailUpdateOne) sqlSave(ctx context.Context) (_node *PaymentCryptoDetail, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   paymentcryptodetail.Table,
			Columns: paymentcryptodetail.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: paymentcryptodetail.FieldID,
			},
		},
	}
	id, ok := pcduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PaymentCryptoDetail.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pcduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, paymentcryptodetail.FieldID)
		for _, f := range fields {
			if !paymentcryptodetail.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != paymentcryptodetail.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pcduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pcduo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: paymentcryptodetail.FieldCreatedAt,
		})
	}
	if value, ok := pcduo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: paymentcryptodetail.FieldUpdatedAt,
		})
	}
	if value, ok := pcduo.mutation.CreatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: paymentcryptodetail.FieldCreatedBy,
		})
	}
	if value, ok := pcduo.mutation.UpdatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: paymentcryptodetail.FieldUpdatedBy,
		})
	}
	if value, ok := pcduo.mutation.CryptoType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: paymentcryptodetail.FieldCryptoType,
		})
	}
	if value, ok := pcduo.mutation.AddedCryptoType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: paymentcryptodetail.FieldCryptoType,
		})
	}
	if value, ok := pcduo.mutation.CryptoNetworkType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: paymentcryptodetail.FieldCryptoNetworkType,
		})
	}
	if value, ok := pcduo.mutation.AddedCryptoNetworkType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: paymentcryptodetail.FieldCryptoNetworkType,
		})
	}
	if value, ok := pcduo.mutation.CryptoWalletName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: paymentcryptodetail.FieldCryptoWalletName,
		})
	}
	if value, ok := pcduo.mutation.AddedCryptoWalletName(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: paymentcryptodetail.FieldCryptoWalletName,
		})
	}
	if value, ok := pcduo.mutation.ReceiverAddress(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: paymentcryptodetail.FieldReceiverAddress,
		})
	}
	if value, ok := pcduo.mutation.SenderAddress(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: paymentcryptodetail.FieldSenderAddress,
		})
	}
	if pcduo.mutation.SenderAddressCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: paymentcryptodetail.FieldSenderAddress,
		})
	}
	if value, ok := pcduo.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: paymentcryptodetail.FieldAmount,
		})
	}
	if value, ok := pcduo.mutation.AddedAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: paymentcryptodetail.FieldAmount,
		})
	}
	if pcduo.mutation.AmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: paymentcryptodetail.FieldAmount,
		})
	}
	if value, ok := pcduo.mutation.ReceivedAmount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: paymentcryptodetail.FieldReceivedAmount,
		})
	}
	if value, ok := pcduo.mutation.AddedReceivedAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: paymentcryptodetail.FieldReceivedAmount,
		})
	}
	if pcduo.mutation.ReceivedAmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: paymentcryptodetail.FieldReceivedAmount,
		})
	}
	if value, ok := pcduo.mutation.TxHash(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: paymentcryptodetail.FieldTxHash,
		})
	}
	if pcduo.mutation.TxHashCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: paymentcryptodetail.FieldTxHash,
		})
	}
	if value, ok := pcduo.mutation.TxID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: paymentcryptodetail.FieldTxID,
		})
	}
	if pcduo.mutation.TxIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: paymentcryptodetail.FieldTxID,
		})
	}
	if value, ok := pcduo.mutation.Fee(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: paymentcryptodetail.FieldFee,
		})
	}
	if value, ok := pcduo.mutation.AddedFee(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: paymentcryptodetail.FieldFee,
		})
	}
	if pcduo.mutation.FeeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: paymentcryptodetail.FieldFee,
		})
	}
	if value, ok := pcduo.mutation.ImageURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: paymentcryptodetail.FieldImageURL,
		})
	}
	if pcduo.mutation.ImageURLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: paymentcryptodetail.FieldImageURL,
		})
	}
	if pcduo.mutation.PaymentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   paymentcryptodetail.PaymentTable,
			Columns: []string{paymentcryptodetail.PaymentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: payment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcduo.mutation.PaymentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   paymentcryptodetail.PaymentTable,
			Columns: []string{paymentcryptodetail.PaymentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: payment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PaymentCryptoDetail{config: pcduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pcduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{paymentcryptodetail.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
