// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"gitlab.com/mcuc/monorepo/backend/stark/pkg/ent/merchantuserbankaccount"
)

// MerchantUserBankAccountCreate is the builder for creating a MerchantUserBankAccount entity.
type MerchantUserBankAccountCreate struct {
	config
	mutation *MerchantUserBankAccountMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (mubac *MerchantUserBankAccountCreate) SetCreatedAt(t time.Time) *MerchantUserBankAccountCreate {
	mubac.mutation.SetCreatedAt(t)
	return mubac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mubac *MerchantUserBankAccountCreate) SetNillableCreatedAt(t *time.Time) *MerchantUserBankAccountCreate {
	if t != nil {
		mubac.SetCreatedAt(*t)
	}
	return mubac
}

// SetUpdatedAt sets the "updated_at" field.
func (mubac *MerchantUserBankAccountCreate) SetUpdatedAt(t time.Time) *MerchantUserBankAccountCreate {
	mubac.mutation.SetUpdatedAt(t)
	return mubac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (mubac *MerchantUserBankAccountCreate) SetNillableUpdatedAt(t *time.Time) *MerchantUserBankAccountCreate {
	if t != nil {
		mubac.SetUpdatedAt(*t)
	}
	return mubac
}

// SetCreatedBy sets the "created_by" field.
func (mubac *MerchantUserBankAccountCreate) SetCreatedBy(s string) *MerchantUserBankAccountCreate {
	mubac.mutation.SetCreatedBy(s)
	return mubac
}

// SetUpdatedBy sets the "updated_by" field.
func (mubac *MerchantUserBankAccountCreate) SetUpdatedBy(s string) *MerchantUserBankAccountCreate {
	mubac.mutation.SetUpdatedBy(s)
	return mubac
}

// SetBankName sets the "bank_name" field.
func (mubac *MerchantUserBankAccountCreate) SetBankName(i int32) *MerchantUserBankAccountCreate {
	mubac.mutation.SetBankName(i)
	return mubac
}

// SetNillableBankName sets the "bank_name" field if the given value is not nil.
func (mubac *MerchantUserBankAccountCreate) SetNillableBankName(i *int32) *MerchantUserBankAccountCreate {
	if i != nil {
		mubac.SetBankName(*i)
	}
	return mubac
}

// SetAccountNumber sets the "account_number" field.
func (mubac *MerchantUserBankAccountCreate) SetAccountNumber(s string) *MerchantUserBankAccountCreate {
	mubac.mutation.SetAccountNumber(s)
	return mubac
}

// SetAccountName sets the "account_name" field.
func (mubac *MerchantUserBankAccountCreate) SetAccountName(s string) *MerchantUserBankAccountCreate {
	mubac.mutation.SetAccountName(s)
	return mubac
}

// SetID sets the "id" field.
func (mubac *MerchantUserBankAccountCreate) SetID(i int64) *MerchantUserBankAccountCreate {
	mubac.mutation.SetID(i)
	return mubac
}

// Mutation returns the MerchantUserBankAccountMutation object of the builder.
func (mubac *MerchantUserBankAccountCreate) Mutation() *MerchantUserBankAccountMutation {
	return mubac.mutation
}

// Save creates the MerchantUserBankAccount in the database.
func (mubac *MerchantUserBankAccountCreate) Save(ctx context.Context) (*MerchantUserBankAccount, error) {
	var (
		err  error
		node *MerchantUserBankAccount
	)
	mubac.defaults()
	if len(mubac.hooks) == 0 {
		if err = mubac.check(); err != nil {
			return nil, err
		}
		node, err = mubac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MerchantUserBankAccountMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = mubac.check(); err != nil {
				return nil, err
			}
			mubac.mutation = mutation
			if node, err = mubac.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(mubac.hooks) - 1; i >= 0; i-- {
			if mubac.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = mubac.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mubac.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (mubac *MerchantUserBankAccountCreate) SaveX(ctx context.Context) *MerchantUserBankAccount {
	v, err := mubac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mubac *MerchantUserBankAccountCreate) Exec(ctx context.Context) error {
	_, err := mubac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mubac *MerchantUserBankAccountCreate) ExecX(ctx context.Context) {
	if err := mubac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mubac *MerchantUserBankAccountCreate) defaults() {
	if _, ok := mubac.mutation.CreatedAt(); !ok {
		v := merchantuserbankaccount.DefaultCreatedAt()
		mubac.mutation.SetCreatedAt(v)
	}
	if _, ok := mubac.mutation.UpdatedAt(); !ok {
		v := merchantuserbankaccount.DefaultUpdatedAt()
		mubac.mutation.SetUpdatedAt(v)
	}
	if _, ok := mubac.mutation.BankName(); !ok {
		v := merchantuserbankaccount.DefaultBankName
		mubac.mutation.SetBankName(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mubac *MerchantUserBankAccountCreate) check() error {
	if _, ok := mubac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "MerchantUserBankAccount.created_at"`)}
	}
	if _, ok := mubac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "MerchantUserBankAccount.updated_at"`)}
	}
	if _, ok := mubac.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent: missing required field "MerchantUserBankAccount.created_by"`)}
	}
	if v, ok := mubac.mutation.CreatedBy(); ok {
		if err := merchantuserbankaccount.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "MerchantUserBankAccount.created_by": %w`, err)}
		}
	}
	if _, ok := mubac.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`ent: missing required field "MerchantUserBankAccount.updated_by"`)}
	}
	if v, ok := mubac.mutation.UpdatedBy(); ok {
		if err := merchantuserbankaccount.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "MerchantUserBankAccount.updated_by": %w`, err)}
		}
	}
	if _, ok := mubac.mutation.BankName(); !ok {
		return &ValidationError{Name: "bank_name", err: errors.New(`ent: missing required field "MerchantUserBankAccount.bank_name"`)}
	}
	if v, ok := mubac.mutation.BankName(); ok {
		if err := merchantuserbankaccount.BankNameValidator(v); err != nil {
			return &ValidationError{Name: "bank_name", err: fmt.Errorf(`ent: validator failed for field "MerchantUserBankAccount.bank_name": %w`, err)}
		}
	}
	if _, ok := mubac.mutation.AccountNumber(); !ok {
		return &ValidationError{Name: "account_number", err: errors.New(`ent: missing required field "MerchantUserBankAccount.account_number"`)}
	}
	if v, ok := mubac.mutation.AccountNumber(); ok {
		if err := merchantuserbankaccount.AccountNumberValidator(v); err != nil {
			return &ValidationError{Name: "account_number", err: fmt.Errorf(`ent: validator failed for field "MerchantUserBankAccount.account_number": %w`, err)}
		}
	}
	if _, ok := mubac.mutation.AccountName(); !ok {
		return &ValidationError{Name: "account_name", err: errors.New(`ent: missing required field "MerchantUserBankAccount.account_name"`)}
	}
	if v, ok := mubac.mutation.AccountName(); ok {
		if err := merchantuserbankaccount.AccountNameValidator(v); err != nil {
			return &ValidationError{Name: "account_name", err: fmt.Errorf(`ent: validator failed for field "MerchantUserBankAccount.account_name": %w`, err)}
		}
	}
	return nil
}

func (mubac *MerchantUserBankAccountCreate) sqlSave(ctx context.Context) (*MerchantUserBankAccount, error) {
	_node, _spec := mubac.createSpec()
	if err := sqlgraph.CreateNode(ctx, mubac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	return _node, nil
}

func (mubac *MerchantUserBankAccountCreate) createSpec() (*MerchantUserBankAccount, *sqlgraph.CreateSpec) {
	var (
		_node = &MerchantUserBankAccount{config: mubac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: merchantuserbankaccount.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: merchantuserbankaccount.FieldID,
			},
		}
	)
	_spec.OnConflict = mubac.conflict
	if id, ok := mubac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := mubac.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: merchantuserbankaccount.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := mubac.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: merchantuserbankaccount.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := mubac.mutation.CreatedBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: merchantuserbankaccount.FieldCreatedBy,
		})
		_node.CreatedBy = value
	}
	if value, ok := mubac.mutation.UpdatedBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: merchantuserbankaccount.FieldUpdatedBy,
		})
		_node.UpdatedBy = value
	}
	if value, ok := mubac.mutation.BankName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: merchantuserbankaccount.FieldBankName,
		})
		_node.BankName = value
	}
	if value, ok := mubac.mutation.AccountNumber(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: merchantuserbankaccount.FieldAccountNumber,
		})
		_node.AccountNumber = value
	}
	if value, ok := mubac.mutation.AccountName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: merchantuserbankaccount.FieldAccountName,
		})
		_node.AccountName = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.MerchantUserBankAccount.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MerchantUserBankAccountUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (mubac *MerchantUserBankAccountCreate) OnConflict(opts ...sql.ConflictOption) *MerchantUserBankAccountUpsertOne {
	mubac.conflict = opts
	return &MerchantUserBankAccountUpsertOne{
		create: mubac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.MerchantUserBankAccount.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (mubac *MerchantUserBankAccountCreate) OnConflictColumns(columns ...string) *MerchantUserBankAccountUpsertOne {
	mubac.conflict = append(mubac.conflict, sql.ConflictColumns(columns...))
	return &MerchantUserBankAccountUpsertOne{
		create: mubac,
	}
}

type (
	// MerchantUserBankAccountUpsertOne is the builder for "upsert"-ing
	//  one MerchantUserBankAccount node.
	MerchantUserBankAccountUpsertOne struct {
		create *MerchantUserBankAccountCreate
	}

	// MerchantUserBankAccountUpsert is the "OnConflict" setter.
	MerchantUserBankAccountUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *MerchantUserBankAccountUpsert) SetCreatedAt(v time.Time) *MerchantUserBankAccountUpsert {
	u.Set(merchantuserbankaccount.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *MerchantUserBankAccountUpsert) UpdateCreatedAt() *MerchantUserBankAccountUpsert {
	u.SetExcluded(merchantuserbankaccount.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *MerchantUserBankAccountUpsert) SetUpdatedAt(v time.Time) *MerchantUserBankAccountUpsert {
	u.Set(merchantuserbankaccount.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *MerchantUserBankAccountUpsert) UpdateUpdatedAt() *MerchantUserBankAccountUpsert {
	u.SetExcluded(merchantuserbankaccount.FieldUpdatedAt)
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *MerchantUserBankAccountUpsert) SetCreatedBy(v string) *MerchantUserBankAccountUpsert {
	u.Set(merchantuserbankaccount.FieldCreatedBy, v)
	return u
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *MerchantUserBankAccountUpsert) UpdateCreatedBy() *MerchantUserBankAccountUpsert {
	u.SetExcluded(merchantuserbankaccount.FieldCreatedBy)
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *MerchantUserBankAccountUpsert) SetUpdatedBy(v string) *MerchantUserBankAccountUpsert {
	u.Set(merchantuserbankaccount.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *MerchantUserBankAccountUpsert) UpdateUpdatedBy() *MerchantUserBankAccountUpsert {
	u.SetExcluded(merchantuserbankaccount.FieldUpdatedBy)
	return u
}

// SetBankName sets the "bank_name" field.
func (u *MerchantUserBankAccountUpsert) SetBankName(v int32) *MerchantUserBankAccountUpsert {
	u.Set(merchantuserbankaccount.FieldBankName, v)
	return u
}

// UpdateBankName sets the "bank_name" field to the value that was provided on create.
func (u *MerchantUserBankAccountUpsert) UpdateBankName() *MerchantUserBankAccountUpsert {
	u.SetExcluded(merchantuserbankaccount.FieldBankName)
	return u
}

// AddBankName adds v to the "bank_name" field.
func (u *MerchantUserBankAccountUpsert) AddBankName(v int32) *MerchantUserBankAccountUpsert {
	u.Add(merchantuserbankaccount.FieldBankName, v)
	return u
}

// SetAccountNumber sets the "account_number" field.
func (u *MerchantUserBankAccountUpsert) SetAccountNumber(v string) *MerchantUserBankAccountUpsert {
	u.Set(merchantuserbankaccount.FieldAccountNumber, v)
	return u
}

// UpdateAccountNumber sets the "account_number" field to the value that was provided on create.
func (u *MerchantUserBankAccountUpsert) UpdateAccountNumber() *MerchantUserBankAccountUpsert {
	u.SetExcluded(merchantuserbankaccount.FieldAccountNumber)
	return u
}

// SetAccountName sets the "account_name" field.
func (u *MerchantUserBankAccountUpsert) SetAccountName(v string) *MerchantUserBankAccountUpsert {
	u.Set(merchantuserbankaccount.FieldAccountName, v)
	return u
}

// UpdateAccountName sets the "account_name" field to the value that was provided on create.
func (u *MerchantUserBankAccountUpsert) UpdateAccountName() *MerchantUserBankAccountUpsert {
	u.SetExcluded(merchantuserbankaccount.FieldAccountName)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.MerchantUserBankAccount.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(merchantuserbankaccount.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *MerchantUserBankAccountUpsertOne) UpdateNewValues() *MerchantUserBankAccountUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(merchantuserbankaccount.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.MerchantUserBankAccount.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *MerchantUserBankAccountUpsertOne) Ignore() *MerchantUserBankAccountUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MerchantUserBankAccountUpsertOne) DoNothing() *MerchantUserBankAccountUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MerchantUserBankAccountCreate.OnConflict
// documentation for more info.
func (u *MerchantUserBankAccountUpsertOne) Update(set func(*MerchantUserBankAccountUpsert)) *MerchantUserBankAccountUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MerchantUserBankAccountUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *MerchantUserBankAccountUpsertOne) SetCreatedAt(v time.Time) *MerchantUserBankAccountUpsertOne {
	return u.Update(func(s *MerchantUserBankAccountUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *MerchantUserBankAccountUpsertOne) UpdateCreatedAt() *MerchantUserBankAccountUpsertOne {
	return u.Update(func(s *MerchantUserBankAccountUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *MerchantUserBankAccountUpsertOne) SetUpdatedAt(v time.Time) *MerchantUserBankAccountUpsertOne {
	return u.Update(func(s *MerchantUserBankAccountUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *MerchantUserBankAccountUpsertOne) UpdateUpdatedAt() *MerchantUserBankAccountUpsertOne {
	return u.Update(func(s *MerchantUserBankAccountUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetCreatedBy sets the "created_by" field.
func (u *MerchantUserBankAccountUpsertOne) SetCreatedBy(v string) *MerchantUserBankAccountUpsertOne {
	return u.Update(func(s *MerchantUserBankAccountUpsert) {
		s.SetCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *MerchantUserBankAccountUpsertOne) UpdateCreatedBy() *MerchantUserBankAccountUpsertOne {
	return u.Update(func(s *MerchantUserBankAccountUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *MerchantUserBankAccountUpsertOne) SetUpdatedBy(v string) *MerchantUserBankAccountUpsertOne {
	return u.Update(func(s *MerchantUserBankAccountUpsert) {
		s.SetUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *MerchantUserBankAccountUpsertOne) UpdateUpdatedBy() *MerchantUserBankAccountUpsertOne {
	return u.Update(func(s *MerchantUserBankAccountUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetBankName sets the "bank_name" field.
func (u *MerchantUserBankAccountUpsertOne) SetBankName(v int32) *MerchantUserBankAccountUpsertOne {
	return u.Update(func(s *MerchantUserBankAccountUpsert) {
		s.SetBankName(v)
	})
}

// AddBankName adds v to the "bank_name" field.
func (u *MerchantUserBankAccountUpsertOne) AddBankName(v int32) *MerchantUserBankAccountUpsertOne {
	return u.Update(func(s *MerchantUserBankAccountUpsert) {
		s.AddBankName(v)
	})
}

// UpdateBankName sets the "bank_name" field to the value that was provided on create.
func (u *MerchantUserBankAccountUpsertOne) UpdateBankName() *MerchantUserBankAccountUpsertOne {
	return u.Update(func(s *MerchantUserBankAccountUpsert) {
		s.UpdateBankName()
	})
}

// SetAccountNumber sets the "account_number" field.
func (u *MerchantUserBankAccountUpsertOne) SetAccountNumber(v string) *MerchantUserBankAccountUpsertOne {
	return u.Update(func(s *MerchantUserBankAccountUpsert) {
		s.SetAccountNumber(v)
	})
}

// UpdateAccountNumber sets the "account_number" field to the value that was provided on create.
func (u *MerchantUserBankAccountUpsertOne) UpdateAccountNumber() *MerchantUserBankAccountUpsertOne {
	return u.Update(func(s *MerchantUserBankAccountUpsert) {
		s.UpdateAccountNumber()
	})
}

// SetAccountName sets the "account_name" field.
func (u *MerchantUserBankAccountUpsertOne) SetAccountName(v string) *MerchantUserBankAccountUpsertOne {
	return u.Update(func(s *MerchantUserBankAccountUpsert) {
		s.SetAccountName(v)
	})
}

// UpdateAccountName sets the "account_name" field to the value that was provided on create.
func (u *MerchantUserBankAccountUpsertOne) UpdateAccountName() *MerchantUserBankAccountUpsertOne {
	return u.Update(func(s *MerchantUserBankAccountUpsert) {
		s.UpdateAccountName()
	})
}

// Exec executes the query.
func (u *MerchantUserBankAccountUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for MerchantUserBankAccountCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MerchantUserBankAccountUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *MerchantUserBankAccountUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *MerchantUserBankAccountUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// MerchantUserBankAccountCreateBulk is the builder for creating many MerchantUserBankAccount entities in bulk.
type MerchantUserBankAccountCreateBulk struct {
	config
	builders []*MerchantUserBankAccountCreate
	conflict []sql.ConflictOption
}

// Save creates the MerchantUserBankAccount entities in the database.
func (mubacb *MerchantUserBankAccountCreateBulk) Save(ctx context.Context) ([]*MerchantUserBankAccount, error) {
	specs := make([]*sqlgraph.CreateSpec, len(mubacb.builders))
	nodes := make([]*MerchantUserBankAccount, len(mubacb.builders))
	mutators := make([]Mutator, len(mubacb.builders))
	for i := range mubacb.builders {
		func(i int, root context.Context) {
			builder := mubacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MerchantUserBankAccountMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mubacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = mubacb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mubacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mubacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mubacb *MerchantUserBankAccountCreateBulk) SaveX(ctx context.Context) []*MerchantUserBankAccount {
	v, err := mubacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mubacb *MerchantUserBankAccountCreateBulk) Exec(ctx context.Context) error {
	_, err := mubacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mubacb *MerchantUserBankAccountCreateBulk) ExecX(ctx context.Context) {
	if err := mubacb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.MerchantUserBankAccount.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MerchantUserBankAccountUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (mubacb *MerchantUserBankAccountCreateBulk) OnConflict(opts ...sql.ConflictOption) *MerchantUserBankAccountUpsertBulk {
	mubacb.conflict = opts
	return &MerchantUserBankAccountUpsertBulk{
		create: mubacb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.MerchantUserBankAccount.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (mubacb *MerchantUserBankAccountCreateBulk) OnConflictColumns(columns ...string) *MerchantUserBankAccountUpsertBulk {
	mubacb.conflict = append(mubacb.conflict, sql.ConflictColumns(columns...))
	return &MerchantUserBankAccountUpsertBulk{
		create: mubacb,
	}
}

// MerchantUserBankAccountUpsertBulk is the builder for "upsert"-ing
// a bulk of MerchantUserBankAccount nodes.
type MerchantUserBankAccountUpsertBulk struct {
	create *MerchantUserBankAccountCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.MerchantUserBankAccount.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(merchantuserbankaccount.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *MerchantUserBankAccountUpsertBulk) UpdateNewValues() *MerchantUserBankAccountUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(merchantuserbankaccount.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.MerchantUserBankAccount.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *MerchantUserBankAccountUpsertBulk) Ignore() *MerchantUserBankAccountUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MerchantUserBankAccountUpsertBulk) DoNothing() *MerchantUserBankAccountUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MerchantUserBankAccountCreateBulk.OnConflict
// documentation for more info.
func (u *MerchantUserBankAccountUpsertBulk) Update(set func(*MerchantUserBankAccountUpsert)) *MerchantUserBankAccountUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MerchantUserBankAccountUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *MerchantUserBankAccountUpsertBulk) SetCreatedAt(v time.Time) *MerchantUserBankAccountUpsertBulk {
	return u.Update(func(s *MerchantUserBankAccountUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *MerchantUserBankAccountUpsertBulk) UpdateCreatedAt() *MerchantUserBankAccountUpsertBulk {
	return u.Update(func(s *MerchantUserBankAccountUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *MerchantUserBankAccountUpsertBulk) SetUpdatedAt(v time.Time) *MerchantUserBankAccountUpsertBulk {
	return u.Update(func(s *MerchantUserBankAccountUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *MerchantUserBankAccountUpsertBulk) UpdateUpdatedAt() *MerchantUserBankAccountUpsertBulk {
	return u.Update(func(s *MerchantUserBankAccountUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetCreatedBy sets the "created_by" field.
func (u *MerchantUserBankAccountUpsertBulk) SetCreatedBy(v string) *MerchantUserBankAccountUpsertBulk {
	return u.Update(func(s *MerchantUserBankAccountUpsert) {
		s.SetCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *MerchantUserBankAccountUpsertBulk) UpdateCreatedBy() *MerchantUserBankAccountUpsertBulk {
	return u.Update(func(s *MerchantUserBankAccountUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *MerchantUserBankAccountUpsertBulk) SetUpdatedBy(v string) *MerchantUserBankAccountUpsertBulk {
	return u.Update(func(s *MerchantUserBankAccountUpsert) {
		s.SetUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *MerchantUserBankAccountUpsertBulk) UpdateUpdatedBy() *MerchantUserBankAccountUpsertBulk {
	return u.Update(func(s *MerchantUserBankAccountUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetBankName sets the "bank_name" field.
func (u *MerchantUserBankAccountUpsertBulk) SetBankName(v int32) *MerchantUserBankAccountUpsertBulk {
	return u.Update(func(s *MerchantUserBankAccountUpsert) {
		s.SetBankName(v)
	})
}

// AddBankName adds v to the "bank_name" field.
func (u *MerchantUserBankAccountUpsertBulk) AddBankName(v int32) *MerchantUserBankAccountUpsertBulk {
	return u.Update(func(s *MerchantUserBankAccountUpsert) {
		s.AddBankName(v)
	})
}

// UpdateBankName sets the "bank_name" field to the value that was provided on create.
func (u *MerchantUserBankAccountUpsertBulk) UpdateBankName() *MerchantUserBankAccountUpsertBulk {
	return u.Update(func(s *MerchantUserBankAccountUpsert) {
		s.UpdateBankName()
	})
}

// SetAccountNumber sets the "account_number" field.
func (u *MerchantUserBankAccountUpsertBulk) SetAccountNumber(v string) *MerchantUserBankAccountUpsertBulk {
	return u.Update(func(s *MerchantUserBankAccountUpsert) {
		s.SetAccountNumber(v)
	})
}

// UpdateAccountNumber sets the "account_number" field to the value that was provided on create.
func (u *MerchantUserBankAccountUpsertBulk) UpdateAccountNumber() *MerchantUserBankAccountUpsertBulk {
	return u.Update(func(s *MerchantUserBankAccountUpsert) {
		s.UpdateAccountNumber()
	})
}

// SetAccountName sets the "account_name" field.
func (u *MerchantUserBankAccountUpsertBulk) SetAccountName(v string) *MerchantUserBankAccountUpsertBulk {
	return u.Update(func(s *MerchantUserBankAccountUpsert) {
		s.SetAccountName(v)
	})
}

// UpdateAccountName sets the "account_name" field to the value that was provided on create.
func (u *MerchantUserBankAccountUpsertBulk) UpdateAccountName() *MerchantUserBankAccountUpsertBulk {
	return u.Update(func(s *MerchantUserBankAccountUpsert) {
		s.UpdateAccountName()
	})
}

// Exec executes the query.
func (u *MerchantUserBankAccountUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the MerchantUserBankAccountCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for MerchantUserBankAccountCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MerchantUserBankAccountUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
