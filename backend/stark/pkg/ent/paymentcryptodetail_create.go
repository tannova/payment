// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"gitlab.com/mcuc/monorepo/backend/stark/pkg/ent/payment"
	"gitlab.com/mcuc/monorepo/backend/stark/pkg/ent/paymentcryptodetail"
)

// PaymentCryptoDetailCreate is the builder for creating a PaymentCryptoDetail entity.
type PaymentCryptoDetailCreate struct {
	config
	mutation *PaymentCryptoDetailMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (pcdc *PaymentCryptoDetailCreate) SetCreatedAt(t time.Time) *PaymentCryptoDetailCreate {
	pcdc.mutation.SetCreatedAt(t)
	return pcdc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pcdc *PaymentCryptoDetailCreate) SetNillableCreatedAt(t *time.Time) *PaymentCryptoDetailCreate {
	if t != nil {
		pcdc.SetCreatedAt(*t)
	}
	return pcdc
}

// SetUpdatedAt sets the "updated_at" field.
func (pcdc *PaymentCryptoDetailCreate) SetUpdatedAt(t time.Time) *PaymentCryptoDetailCreate {
	pcdc.mutation.SetUpdatedAt(t)
	return pcdc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pcdc *PaymentCryptoDetailCreate) SetNillableUpdatedAt(t *time.Time) *PaymentCryptoDetailCreate {
	if t != nil {
		pcdc.SetUpdatedAt(*t)
	}
	return pcdc
}

// SetCreatedBy sets the "created_by" field.
func (pcdc *PaymentCryptoDetailCreate) SetCreatedBy(s string) *PaymentCryptoDetailCreate {
	pcdc.mutation.SetCreatedBy(s)
	return pcdc
}

// SetUpdatedBy sets the "updated_by" field.
func (pcdc *PaymentCryptoDetailCreate) SetUpdatedBy(s string) *PaymentCryptoDetailCreate {
	pcdc.mutation.SetUpdatedBy(s)
	return pcdc
}

// SetCryptoType sets the "crypto_type" field.
func (pcdc *PaymentCryptoDetailCreate) SetCryptoType(i int32) *PaymentCryptoDetailCreate {
	pcdc.mutation.SetCryptoType(i)
	return pcdc
}

// SetNillableCryptoType sets the "crypto_type" field if the given value is not nil.
func (pcdc *PaymentCryptoDetailCreate) SetNillableCryptoType(i *int32) *PaymentCryptoDetailCreate {
	if i != nil {
		pcdc.SetCryptoType(*i)
	}
	return pcdc
}

// SetCryptoNetworkType sets the "crypto_network_type" field.
func (pcdc *PaymentCryptoDetailCreate) SetCryptoNetworkType(i int32) *PaymentCryptoDetailCreate {
	pcdc.mutation.SetCryptoNetworkType(i)
	return pcdc
}

// SetNillableCryptoNetworkType sets the "crypto_network_type" field if the given value is not nil.
func (pcdc *PaymentCryptoDetailCreate) SetNillableCryptoNetworkType(i *int32) *PaymentCryptoDetailCreate {
	if i != nil {
		pcdc.SetCryptoNetworkType(*i)
	}
	return pcdc
}

// SetCryptoWalletName sets the "crypto_wallet_name" field.
func (pcdc *PaymentCryptoDetailCreate) SetCryptoWalletName(i int32) *PaymentCryptoDetailCreate {
	pcdc.mutation.SetCryptoWalletName(i)
	return pcdc
}

// SetNillableCryptoWalletName sets the "crypto_wallet_name" field if the given value is not nil.
func (pcdc *PaymentCryptoDetailCreate) SetNillableCryptoWalletName(i *int32) *PaymentCryptoDetailCreate {
	if i != nil {
		pcdc.SetCryptoWalletName(*i)
	}
	return pcdc
}

// SetReceiverAddress sets the "receiver_address" field.
func (pcdc *PaymentCryptoDetailCreate) SetReceiverAddress(s string) *PaymentCryptoDetailCreate {
	pcdc.mutation.SetReceiverAddress(s)
	return pcdc
}

// SetSenderAddress sets the "sender_address" field.
func (pcdc *PaymentCryptoDetailCreate) SetSenderAddress(s string) *PaymentCryptoDetailCreate {
	pcdc.mutation.SetSenderAddress(s)
	return pcdc
}

// SetNillableSenderAddress sets the "sender_address" field if the given value is not nil.
func (pcdc *PaymentCryptoDetailCreate) SetNillableSenderAddress(s *string) *PaymentCryptoDetailCreate {
	if s != nil {
		pcdc.SetSenderAddress(*s)
	}
	return pcdc
}

// SetAmount sets the "amount" field.
func (pcdc *PaymentCryptoDetailCreate) SetAmount(f float64) *PaymentCryptoDetailCreate {
	pcdc.mutation.SetAmount(f)
	return pcdc
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (pcdc *PaymentCryptoDetailCreate) SetNillableAmount(f *float64) *PaymentCryptoDetailCreate {
	if f != nil {
		pcdc.SetAmount(*f)
	}
	return pcdc
}

// SetReceivedAmount sets the "received_amount" field.
func (pcdc *PaymentCryptoDetailCreate) SetReceivedAmount(f float64) *PaymentCryptoDetailCreate {
	pcdc.mutation.SetReceivedAmount(f)
	return pcdc
}

// SetNillableReceivedAmount sets the "received_amount" field if the given value is not nil.
func (pcdc *PaymentCryptoDetailCreate) SetNillableReceivedAmount(f *float64) *PaymentCryptoDetailCreate {
	if f != nil {
		pcdc.SetReceivedAmount(*f)
	}
	return pcdc
}

// SetTxHash sets the "tx_hash" field.
func (pcdc *PaymentCryptoDetailCreate) SetTxHash(s string) *PaymentCryptoDetailCreate {
	pcdc.mutation.SetTxHash(s)
	return pcdc
}

// SetNillableTxHash sets the "tx_hash" field if the given value is not nil.
func (pcdc *PaymentCryptoDetailCreate) SetNillableTxHash(s *string) *PaymentCryptoDetailCreate {
	if s != nil {
		pcdc.SetTxHash(*s)
	}
	return pcdc
}

// SetTxID sets the "tx_id" field.
func (pcdc *PaymentCryptoDetailCreate) SetTxID(s string) *PaymentCryptoDetailCreate {
	pcdc.mutation.SetTxID(s)
	return pcdc
}

// SetNillableTxID sets the "tx_id" field if the given value is not nil.
func (pcdc *PaymentCryptoDetailCreate) SetNillableTxID(s *string) *PaymentCryptoDetailCreate {
	if s != nil {
		pcdc.SetTxID(*s)
	}
	return pcdc
}

// SetFee sets the "fee" field.
func (pcdc *PaymentCryptoDetailCreate) SetFee(f float64) *PaymentCryptoDetailCreate {
	pcdc.mutation.SetFee(f)
	return pcdc
}

// SetNillableFee sets the "fee" field if the given value is not nil.
func (pcdc *PaymentCryptoDetailCreate) SetNillableFee(f *float64) *PaymentCryptoDetailCreate {
	if f != nil {
		pcdc.SetFee(*f)
	}
	return pcdc
}

// SetImageURL sets the "image_url" field.
func (pcdc *PaymentCryptoDetailCreate) SetImageURL(s string) *PaymentCryptoDetailCreate {
	pcdc.mutation.SetImageURL(s)
	return pcdc
}

// SetNillableImageURL sets the "image_url" field if the given value is not nil.
func (pcdc *PaymentCryptoDetailCreate) SetNillableImageURL(s *string) *PaymentCryptoDetailCreate {
	if s != nil {
		pcdc.SetImageURL(*s)
	}
	return pcdc
}

// SetID sets the "id" field.
func (pcdc *PaymentCryptoDetailCreate) SetID(i int64) *PaymentCryptoDetailCreate {
	pcdc.mutation.SetID(i)
	return pcdc
}

// SetPaymentID sets the "payment" edge to the Payment entity by ID.
func (pcdc *PaymentCryptoDetailCreate) SetPaymentID(id int64) *PaymentCryptoDetailCreate {
	pcdc.mutation.SetPaymentID(id)
	return pcdc
}

// SetPayment sets the "payment" edge to the Payment entity.
func (pcdc *PaymentCryptoDetailCreate) SetPayment(p *Payment) *PaymentCryptoDetailCreate {
	return pcdc.SetPaymentID(p.ID)
}

// Mutation returns the PaymentCryptoDetailMutation object of the builder.
func (pcdc *PaymentCryptoDetailCreate) Mutation() *PaymentCryptoDetailMutation {
	return pcdc.mutation
}

// Save creates the PaymentCryptoDetail in the database.
func (pcdc *PaymentCryptoDetailCreate) Save(ctx context.Context) (*PaymentCryptoDetail, error) {
	var (
		err  error
		node *PaymentCryptoDetail
	)
	pcdc.defaults()
	if len(pcdc.hooks) == 0 {
		if err = pcdc.check(); err != nil {
			return nil, err
		}
		node, err = pcdc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PaymentCryptoDetailMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pcdc.check(); err != nil {
				return nil, err
			}
			pcdc.mutation = mutation
			if node, err = pcdc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(pcdc.hooks) - 1; i >= 0; i-- {
			if pcdc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pcdc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pcdc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pcdc *PaymentCryptoDetailCreate) SaveX(ctx context.Context) *PaymentCryptoDetail {
	v, err := pcdc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcdc *PaymentCryptoDetailCreate) Exec(ctx context.Context) error {
	_, err := pcdc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcdc *PaymentCryptoDetailCreate) ExecX(ctx context.Context) {
	if err := pcdc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pcdc *PaymentCryptoDetailCreate) defaults() {
	if _, ok := pcdc.mutation.CreatedAt(); !ok {
		v := paymentcryptodetail.DefaultCreatedAt()
		pcdc.mutation.SetCreatedAt(v)
	}
	if _, ok := pcdc.mutation.UpdatedAt(); !ok {
		v := paymentcryptodetail.DefaultUpdatedAt()
		pcdc.mutation.SetUpdatedAt(v)
	}
	if _, ok := pcdc.mutation.CryptoType(); !ok {
		v := paymentcryptodetail.DefaultCryptoType
		pcdc.mutation.SetCryptoType(v)
	}
	if _, ok := pcdc.mutation.CryptoNetworkType(); !ok {
		v := paymentcryptodetail.DefaultCryptoNetworkType
		pcdc.mutation.SetCryptoNetworkType(v)
	}
	if _, ok := pcdc.mutation.CryptoWalletName(); !ok {
		v := paymentcryptodetail.DefaultCryptoWalletName
		pcdc.mutation.SetCryptoWalletName(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pcdc *PaymentCryptoDetailCreate) check() error {
	if _, ok := pcdc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "PaymentCryptoDetail.created_at"`)}
	}
	if _, ok := pcdc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "PaymentCryptoDetail.updated_at"`)}
	}
	if _, ok := pcdc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent: missing required field "PaymentCryptoDetail.created_by"`)}
	}
	if v, ok := pcdc.mutation.CreatedBy(); ok {
		if err := paymentcryptodetail.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "PaymentCryptoDetail.created_by": %w`, err)}
		}
	}
	if _, ok := pcdc.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`ent: missing required field "PaymentCryptoDetail.updated_by"`)}
	}
	if v, ok := pcdc.mutation.UpdatedBy(); ok {
		if err := paymentcryptodetail.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "PaymentCryptoDetail.updated_by": %w`, err)}
		}
	}
	if _, ok := pcdc.mutation.CryptoType(); !ok {
		return &ValidationError{Name: "crypto_type", err: errors.New(`ent: missing required field "PaymentCryptoDetail.crypto_type"`)}
	}
	if v, ok := pcdc.mutation.CryptoType(); ok {
		if err := paymentcryptodetail.CryptoTypeValidator(v); err != nil {
			return &ValidationError{Name: "crypto_type", err: fmt.Errorf(`ent: validator failed for field "PaymentCryptoDetail.crypto_type": %w`, err)}
		}
	}
	if _, ok := pcdc.mutation.CryptoNetworkType(); !ok {
		return &ValidationError{Name: "crypto_network_type", err: errors.New(`ent: missing required field "PaymentCryptoDetail.crypto_network_type"`)}
	}
	if v, ok := pcdc.mutation.CryptoNetworkType(); ok {
		if err := paymentcryptodetail.CryptoNetworkTypeValidator(v); err != nil {
			return &ValidationError{Name: "crypto_network_type", err: fmt.Errorf(`ent: validator failed for field "PaymentCryptoDetail.crypto_network_type": %w`, err)}
		}
	}
	if _, ok := pcdc.mutation.CryptoWalletName(); !ok {
		return &ValidationError{Name: "crypto_wallet_name", err: errors.New(`ent: missing required field "PaymentCryptoDetail.crypto_wallet_name"`)}
	}
	if v, ok := pcdc.mutation.CryptoWalletName(); ok {
		if err := paymentcryptodetail.CryptoWalletNameValidator(v); err != nil {
			return &ValidationError{Name: "crypto_wallet_name", err: fmt.Errorf(`ent: validator failed for field "PaymentCryptoDetail.crypto_wallet_name": %w`, err)}
		}
	}
	if _, ok := pcdc.mutation.ReceiverAddress(); !ok {
		return &ValidationError{Name: "receiver_address", err: errors.New(`ent: missing required field "PaymentCryptoDetail.receiver_address"`)}
	}
	if v, ok := pcdc.mutation.ReceiverAddress(); ok {
		if err := paymentcryptodetail.ReceiverAddressValidator(v); err != nil {
			return &ValidationError{Name: "receiver_address", err: fmt.Errorf(`ent: validator failed for field "PaymentCryptoDetail.receiver_address": %w`, err)}
		}
	}
	if _, ok := pcdc.mutation.PaymentID(); !ok {
		return &ValidationError{Name: "payment", err: errors.New(`ent: missing required edge "PaymentCryptoDetail.payment"`)}
	}
	return nil
}

func (pcdc *PaymentCryptoDetailCreate) sqlSave(ctx context.Context) (*PaymentCryptoDetail, error) {
	_node, _spec := pcdc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pcdc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	return _node, nil
}

func (pcdc *PaymentCryptoDetailCreate) createSpec() (*PaymentCryptoDetail, *sqlgraph.CreateSpec) {
	var (
		_node = &PaymentCryptoDetail{config: pcdc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: paymentcryptodetail.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: paymentcryptodetail.FieldID,
			},
		}
	)
	_spec.OnConflict = pcdc.conflict
	if id, ok := pcdc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pcdc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: paymentcryptodetail.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := pcdc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: paymentcryptodetail.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := pcdc.mutation.CreatedBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: paymentcryptodetail.FieldCreatedBy,
		})
		_node.CreatedBy = value
	}
	if value, ok := pcdc.mutation.UpdatedBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: paymentcryptodetail.FieldUpdatedBy,
		})
		_node.UpdatedBy = value
	}
	if value, ok := pcdc.mutation.CryptoType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: paymentcryptodetail.FieldCryptoType,
		})
		_node.CryptoType = value
	}
	if value, ok := pcdc.mutation.CryptoNetworkType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: paymentcryptodetail.FieldCryptoNetworkType,
		})
		_node.CryptoNetworkType = value
	}
	if value, ok := pcdc.mutation.CryptoWalletName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: paymentcryptodetail.FieldCryptoWalletName,
		})
		_node.CryptoWalletName = value
	}
	if value, ok := pcdc.mutation.ReceiverAddress(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: paymentcryptodetail.FieldReceiverAddress,
		})
		_node.ReceiverAddress = value
	}
	if value, ok := pcdc.mutation.SenderAddress(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: paymentcryptodetail.FieldSenderAddress,
		})
		_node.SenderAddress = value
	}
	if value, ok := pcdc.mutation.Amount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: paymentcryptodetail.FieldAmount,
		})
		_node.Amount = value
	}
	if value, ok := pcdc.mutation.ReceivedAmount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: paymentcryptodetail.FieldReceivedAmount,
		})
		_node.ReceivedAmount = value
	}
	if value, ok := pcdc.mutation.TxHash(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: paymentcryptodetail.FieldTxHash,
		})
		_node.TxHash = value
	}
	if value, ok := pcdc.mutation.TxID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: paymentcryptodetail.FieldTxID,
		})
		_node.TxID = value
	}
	if value, ok := pcdc.mutation.Fee(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: paymentcryptodetail.FieldFee,
		})
		_node.Fee = value
	}
	if value, ok := pcdc.mutation.ImageURL(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: paymentcryptodetail.FieldImageURL,
		})
		_node.ImageURL = value
	}
	if nodes := pcdc.mutation.PaymentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   paymentcryptodetail.PaymentTable,
			Columns: []string{paymentcryptodetail.PaymentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: payment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.payment_payment_crypto_detail = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PaymentCryptoDetail.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PaymentCryptoDetailUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (pcdc *PaymentCryptoDetailCreate) OnConflict(opts ...sql.ConflictOption) *PaymentCryptoDetailUpsertOne {
	pcdc.conflict = opts
	return &PaymentCryptoDetailUpsertOne{
		create: pcdc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PaymentCryptoDetail.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (pcdc *PaymentCryptoDetailCreate) OnConflictColumns(columns ...string) *PaymentCryptoDetailUpsertOne {
	pcdc.conflict = append(pcdc.conflict, sql.ConflictColumns(columns...))
	return &PaymentCryptoDetailUpsertOne{
		create: pcdc,
	}
}

type (
	// PaymentCryptoDetailUpsertOne is the builder for "upsert"-ing
	//  one PaymentCryptoDetail node.
	PaymentCryptoDetailUpsertOne struct {
		create *PaymentCryptoDetailCreate
	}

	// PaymentCryptoDetailUpsert is the "OnConflict" setter.
	PaymentCryptoDetailUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *PaymentCryptoDetailUpsert) SetCreatedAt(v time.Time) *PaymentCryptoDetailUpsert {
	u.Set(paymentcryptodetail.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *PaymentCryptoDetailUpsert) UpdateCreatedAt() *PaymentCryptoDetailUpsert {
	u.SetExcluded(paymentcryptodetail.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PaymentCryptoDetailUpsert) SetUpdatedAt(v time.Time) *PaymentCryptoDetailUpsert {
	u.Set(paymentcryptodetail.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PaymentCryptoDetailUpsert) UpdateUpdatedAt() *PaymentCryptoDetailUpsert {
	u.SetExcluded(paymentcryptodetail.FieldUpdatedAt)
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *PaymentCryptoDetailUpsert) SetCreatedBy(v string) *PaymentCryptoDetailUpsert {
	u.Set(paymentcryptodetail.FieldCreatedBy, v)
	return u
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *PaymentCryptoDetailUpsert) UpdateCreatedBy() *PaymentCryptoDetailUpsert {
	u.SetExcluded(paymentcryptodetail.FieldCreatedBy)
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *PaymentCryptoDetailUpsert) SetUpdatedBy(v string) *PaymentCryptoDetailUpsert {
	u.Set(paymentcryptodetail.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *PaymentCryptoDetailUpsert) UpdateUpdatedBy() *PaymentCryptoDetailUpsert {
	u.SetExcluded(paymentcryptodetail.FieldUpdatedBy)
	return u
}

// SetCryptoType sets the "crypto_type" field.
func (u *PaymentCryptoDetailUpsert) SetCryptoType(v int32) *PaymentCryptoDetailUpsert {
	u.Set(paymentcryptodetail.FieldCryptoType, v)
	return u
}

// UpdateCryptoType sets the "crypto_type" field to the value that was provided on create.
func (u *PaymentCryptoDetailUpsert) UpdateCryptoType() *PaymentCryptoDetailUpsert {
	u.SetExcluded(paymentcryptodetail.FieldCryptoType)
	return u
}

// AddCryptoType adds v to the "crypto_type" field.
func (u *PaymentCryptoDetailUpsert) AddCryptoType(v int32) *PaymentCryptoDetailUpsert {
	u.Add(paymentcryptodetail.FieldCryptoType, v)
	return u
}

// SetCryptoNetworkType sets the "crypto_network_type" field.
func (u *PaymentCryptoDetailUpsert) SetCryptoNetworkType(v int32) *PaymentCryptoDetailUpsert {
	u.Set(paymentcryptodetail.FieldCryptoNetworkType, v)
	return u
}

// UpdateCryptoNetworkType sets the "crypto_network_type" field to the value that was provided on create.
func (u *PaymentCryptoDetailUpsert) UpdateCryptoNetworkType() *PaymentCryptoDetailUpsert {
	u.SetExcluded(paymentcryptodetail.FieldCryptoNetworkType)
	return u
}

// AddCryptoNetworkType adds v to the "crypto_network_type" field.
func (u *PaymentCryptoDetailUpsert) AddCryptoNetworkType(v int32) *PaymentCryptoDetailUpsert {
	u.Add(paymentcryptodetail.FieldCryptoNetworkType, v)
	return u
}

// SetCryptoWalletName sets the "crypto_wallet_name" field.
func (u *PaymentCryptoDetailUpsert) SetCryptoWalletName(v int32) *PaymentCryptoDetailUpsert {
	u.Set(paymentcryptodetail.FieldCryptoWalletName, v)
	return u
}

// UpdateCryptoWalletName sets the "crypto_wallet_name" field to the value that was provided on create.
func (u *PaymentCryptoDetailUpsert) UpdateCryptoWalletName() *PaymentCryptoDetailUpsert {
	u.SetExcluded(paymentcryptodetail.FieldCryptoWalletName)
	return u
}

// AddCryptoWalletName adds v to the "crypto_wallet_name" field.
func (u *PaymentCryptoDetailUpsert) AddCryptoWalletName(v int32) *PaymentCryptoDetailUpsert {
	u.Add(paymentcryptodetail.FieldCryptoWalletName, v)
	return u
}

// SetReceiverAddress sets the "receiver_address" field.
func (u *PaymentCryptoDetailUpsert) SetReceiverAddress(v string) *PaymentCryptoDetailUpsert {
	u.Set(paymentcryptodetail.FieldReceiverAddress, v)
	return u
}

// UpdateReceiverAddress sets the "receiver_address" field to the value that was provided on create.
func (u *PaymentCryptoDetailUpsert) UpdateReceiverAddress() *PaymentCryptoDetailUpsert {
	u.SetExcluded(paymentcryptodetail.FieldReceiverAddress)
	return u
}

// SetSenderAddress sets the "sender_address" field.
func (u *PaymentCryptoDetailUpsert) SetSenderAddress(v string) *PaymentCryptoDetailUpsert {
	u.Set(paymentcryptodetail.FieldSenderAddress, v)
	return u
}

// UpdateSenderAddress sets the "sender_address" field to the value that was provided on create.
func (u *PaymentCryptoDetailUpsert) UpdateSenderAddress() *PaymentCryptoDetailUpsert {
	u.SetExcluded(paymentcryptodetail.FieldSenderAddress)
	return u
}

// ClearSenderAddress clears the value of the "sender_address" field.
func (u *PaymentCryptoDetailUpsert) ClearSenderAddress() *PaymentCryptoDetailUpsert {
	u.SetNull(paymentcryptodetail.FieldSenderAddress)
	return u
}

// SetAmount sets the "amount" field.
func (u *PaymentCryptoDetailUpsert) SetAmount(v float64) *PaymentCryptoDetailUpsert {
	u.Set(paymentcryptodetail.FieldAmount, v)
	return u
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *PaymentCryptoDetailUpsert) UpdateAmount() *PaymentCryptoDetailUpsert {
	u.SetExcluded(paymentcryptodetail.FieldAmount)
	return u
}

// AddAmount adds v to the "amount" field.
func (u *PaymentCryptoDetailUpsert) AddAmount(v float64) *PaymentCryptoDetailUpsert {
	u.Add(paymentcryptodetail.FieldAmount, v)
	return u
}

// ClearAmount clears the value of the "amount" field.
func (u *PaymentCryptoDetailUpsert) ClearAmount() *PaymentCryptoDetailUpsert {
	u.SetNull(paymentcryptodetail.FieldAmount)
	return u
}

// SetReceivedAmount sets the "received_amount" field.
func (u *PaymentCryptoDetailUpsert) SetReceivedAmount(v float64) *PaymentCryptoDetailUpsert {
	u.Set(paymentcryptodetail.FieldReceivedAmount, v)
	return u
}

// UpdateReceivedAmount sets the "received_amount" field to the value that was provided on create.
func (u *PaymentCryptoDetailUpsert) UpdateReceivedAmount() *PaymentCryptoDetailUpsert {
	u.SetExcluded(paymentcryptodetail.FieldReceivedAmount)
	return u
}

// AddReceivedAmount adds v to the "received_amount" field.
func (u *PaymentCryptoDetailUpsert) AddReceivedAmount(v float64) *PaymentCryptoDetailUpsert {
	u.Add(paymentcryptodetail.FieldReceivedAmount, v)
	return u
}

// ClearReceivedAmount clears the value of the "received_amount" field.
func (u *PaymentCryptoDetailUpsert) ClearReceivedAmount() *PaymentCryptoDetailUpsert {
	u.SetNull(paymentcryptodetail.FieldReceivedAmount)
	return u
}

// SetTxHash sets the "tx_hash" field.
func (u *PaymentCryptoDetailUpsert) SetTxHash(v string) *PaymentCryptoDetailUpsert {
	u.Set(paymentcryptodetail.FieldTxHash, v)
	return u
}

// UpdateTxHash sets the "tx_hash" field to the value that was provided on create.
func (u *PaymentCryptoDetailUpsert) UpdateTxHash() *PaymentCryptoDetailUpsert {
	u.SetExcluded(paymentcryptodetail.FieldTxHash)
	return u
}

// ClearTxHash clears the value of the "tx_hash" field.
func (u *PaymentCryptoDetailUpsert) ClearTxHash() *PaymentCryptoDetailUpsert {
	u.SetNull(paymentcryptodetail.FieldTxHash)
	return u
}

// SetTxID sets the "tx_id" field.
func (u *PaymentCryptoDetailUpsert) SetTxID(v string) *PaymentCryptoDetailUpsert {
	u.Set(paymentcryptodetail.FieldTxID, v)
	return u
}

// UpdateTxID sets the "tx_id" field to the value that was provided on create.
func (u *PaymentCryptoDetailUpsert) UpdateTxID() *PaymentCryptoDetailUpsert {
	u.SetExcluded(paymentcryptodetail.FieldTxID)
	return u
}

// ClearTxID clears the value of the "tx_id" field.
func (u *PaymentCryptoDetailUpsert) ClearTxID() *PaymentCryptoDetailUpsert {
	u.SetNull(paymentcryptodetail.FieldTxID)
	return u
}

// SetFee sets the "fee" field.
func (u *PaymentCryptoDetailUpsert) SetFee(v float64) *PaymentCryptoDetailUpsert {
	u.Set(paymentcryptodetail.FieldFee, v)
	return u
}

// UpdateFee sets the "fee" field to the value that was provided on create.
func (u *PaymentCryptoDetailUpsert) UpdateFee() *PaymentCryptoDetailUpsert {
	u.SetExcluded(paymentcryptodetail.FieldFee)
	return u
}

// AddFee adds v to the "fee" field.
func (u *PaymentCryptoDetailUpsert) AddFee(v float64) *PaymentCryptoDetailUpsert {
	u.Add(paymentcryptodetail.FieldFee, v)
	return u
}

// ClearFee clears the value of the "fee" field.
func (u *PaymentCryptoDetailUpsert) ClearFee() *PaymentCryptoDetailUpsert {
	u.SetNull(paymentcryptodetail.FieldFee)
	return u
}

// SetImageURL sets the "image_url" field.
func (u *PaymentCryptoDetailUpsert) SetImageURL(v string) *PaymentCryptoDetailUpsert {
	u.Set(paymentcryptodetail.FieldImageURL, v)
	return u
}

// UpdateImageURL sets the "image_url" field to the value that was provided on create.
func (u *PaymentCryptoDetailUpsert) UpdateImageURL() *PaymentCryptoDetailUpsert {
	u.SetExcluded(paymentcryptodetail.FieldImageURL)
	return u
}

// ClearImageURL clears the value of the "image_url" field.
func (u *PaymentCryptoDetailUpsert) ClearImageURL() *PaymentCryptoDetailUpsert {
	u.SetNull(paymentcryptodetail.FieldImageURL)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.PaymentCryptoDetail.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(paymentcryptodetail.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *PaymentCryptoDetailUpsertOne) UpdateNewValues() *PaymentCryptoDetailUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(paymentcryptodetail.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.PaymentCryptoDetail.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *PaymentCryptoDetailUpsertOne) Ignore() *PaymentCryptoDetailUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PaymentCryptoDetailUpsertOne) DoNothing() *PaymentCryptoDetailUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PaymentCryptoDetailCreate.OnConflict
// documentation for more info.
func (u *PaymentCryptoDetailUpsertOne) Update(set func(*PaymentCryptoDetailUpsert)) *PaymentCryptoDetailUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PaymentCryptoDetailUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *PaymentCryptoDetailUpsertOne) SetCreatedAt(v time.Time) *PaymentCryptoDetailUpsertOne {
	return u.Update(func(s *PaymentCryptoDetailUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *PaymentCryptoDetailUpsertOne) UpdateCreatedAt() *PaymentCryptoDetailUpsertOne {
	return u.Update(func(s *PaymentCryptoDetailUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PaymentCryptoDetailUpsertOne) SetUpdatedAt(v time.Time) *PaymentCryptoDetailUpsertOne {
	return u.Update(func(s *PaymentCryptoDetailUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PaymentCryptoDetailUpsertOne) UpdateUpdatedAt() *PaymentCryptoDetailUpsertOne {
	return u.Update(func(s *PaymentCryptoDetailUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetCreatedBy sets the "created_by" field.
func (u *PaymentCryptoDetailUpsertOne) SetCreatedBy(v string) *PaymentCryptoDetailUpsertOne {
	return u.Update(func(s *PaymentCryptoDetailUpsert) {
		s.SetCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *PaymentCryptoDetailUpsertOne) UpdateCreatedBy() *PaymentCryptoDetailUpsertOne {
	return u.Update(func(s *PaymentCryptoDetailUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *PaymentCryptoDetailUpsertOne) SetUpdatedBy(v string) *PaymentCryptoDetailUpsertOne {
	return u.Update(func(s *PaymentCryptoDetailUpsert) {
		s.SetUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *PaymentCryptoDetailUpsertOne) UpdateUpdatedBy() *PaymentCryptoDetailUpsertOne {
	return u.Update(func(s *PaymentCryptoDetailUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetCryptoType sets the "crypto_type" field.
func (u *PaymentCryptoDetailUpsertOne) SetCryptoType(v int32) *PaymentCryptoDetailUpsertOne {
	return u.Update(func(s *PaymentCryptoDetailUpsert) {
		s.SetCryptoType(v)
	})
}

// AddCryptoType adds v to the "crypto_type" field.
func (u *PaymentCryptoDetailUpsertOne) AddCryptoType(v int32) *PaymentCryptoDetailUpsertOne {
	return u.Update(func(s *PaymentCryptoDetailUpsert) {
		s.AddCryptoType(v)
	})
}

// UpdateCryptoType sets the "crypto_type" field to the value that was provided on create.
func (u *PaymentCryptoDetailUpsertOne) UpdateCryptoType() *PaymentCryptoDetailUpsertOne {
	return u.Update(func(s *PaymentCryptoDetailUpsert) {
		s.UpdateCryptoType()
	})
}

// SetCryptoNetworkType sets the "crypto_network_type" field.
func (u *PaymentCryptoDetailUpsertOne) SetCryptoNetworkType(v int32) *PaymentCryptoDetailUpsertOne {
	return u.Update(func(s *PaymentCryptoDetailUpsert) {
		s.SetCryptoNetworkType(v)
	})
}

// AddCryptoNetworkType adds v to the "crypto_network_type" field.
func (u *PaymentCryptoDetailUpsertOne) AddCryptoNetworkType(v int32) *PaymentCryptoDetailUpsertOne {
	return u.Update(func(s *PaymentCryptoDetailUpsert) {
		s.AddCryptoNetworkType(v)
	})
}

// UpdateCryptoNetworkType sets the "crypto_network_type" field to the value that was provided on create.
func (u *PaymentCryptoDetailUpsertOne) UpdateCryptoNetworkType() *PaymentCryptoDetailUpsertOne {
	return u.Update(func(s *PaymentCryptoDetailUpsert) {
		s.UpdateCryptoNetworkType()
	})
}

// SetCryptoWalletName sets the "crypto_wallet_name" field.
func (u *PaymentCryptoDetailUpsertOne) SetCryptoWalletName(v int32) *PaymentCryptoDetailUpsertOne {
	return u.Update(func(s *PaymentCryptoDetailUpsert) {
		s.SetCryptoWalletName(v)
	})
}

// AddCryptoWalletName adds v to the "crypto_wallet_name" field.
func (u *PaymentCryptoDetailUpsertOne) AddCryptoWalletName(v int32) *PaymentCryptoDetailUpsertOne {
	return u.Update(func(s *PaymentCryptoDetailUpsert) {
		s.AddCryptoWalletName(v)
	})
}

// UpdateCryptoWalletName sets the "crypto_wallet_name" field to the value that was provided on create.
func (u *PaymentCryptoDetailUpsertOne) UpdateCryptoWalletName() *PaymentCryptoDetailUpsertOne {
	return u.Update(func(s *PaymentCryptoDetailUpsert) {
		s.UpdateCryptoWalletName()
	})
}

// SetReceiverAddress sets the "receiver_address" field.
func (u *PaymentCryptoDetailUpsertOne) SetReceiverAddress(v string) *PaymentCryptoDetailUpsertOne {
	return u.Update(func(s *PaymentCryptoDetailUpsert) {
		s.SetReceiverAddress(v)
	})
}

// UpdateReceiverAddress sets the "receiver_address" field to the value that was provided on create.
func (u *PaymentCryptoDetailUpsertOne) UpdateReceiverAddress() *PaymentCryptoDetailUpsertOne {
	return u.Update(func(s *PaymentCryptoDetailUpsert) {
		s.UpdateReceiverAddress()
	})
}

// SetSenderAddress sets the "sender_address" field.
func (u *PaymentCryptoDetailUpsertOne) SetSenderAddress(v string) *PaymentCryptoDetailUpsertOne {
	return u.Update(func(s *PaymentCryptoDetailUpsert) {
		s.SetSenderAddress(v)
	})
}

// UpdateSenderAddress sets the "sender_address" field to the value that was provided on create.
func (u *PaymentCryptoDetailUpsertOne) UpdateSenderAddress() *PaymentCryptoDetailUpsertOne {
	return u.Update(func(s *PaymentCryptoDetailUpsert) {
		s.UpdateSenderAddress()
	})
}

// ClearSenderAddress clears the value of the "sender_address" field.
func (u *PaymentCryptoDetailUpsertOne) ClearSenderAddress() *PaymentCryptoDetailUpsertOne {
	return u.Update(func(s *PaymentCryptoDetailUpsert) {
		s.ClearSenderAddress()
	})
}

// SetAmount sets the "amount" field.
func (u *PaymentCryptoDetailUpsertOne) SetAmount(v float64) *PaymentCryptoDetailUpsertOne {
	return u.Update(func(s *PaymentCryptoDetailUpsert) {
		s.SetAmount(v)
	})
}

// AddAmount adds v to the "amount" field.
func (u *PaymentCryptoDetailUpsertOne) AddAmount(v float64) *PaymentCryptoDetailUpsertOne {
	return u.Update(func(s *PaymentCryptoDetailUpsert) {
		s.AddAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *PaymentCryptoDetailUpsertOne) UpdateAmount() *PaymentCryptoDetailUpsertOne {
	return u.Update(func(s *PaymentCryptoDetailUpsert) {
		s.UpdateAmount()
	})
}

// ClearAmount clears the value of the "amount" field.
func (u *PaymentCryptoDetailUpsertOne) ClearAmount() *PaymentCryptoDetailUpsertOne {
	return u.Update(func(s *PaymentCryptoDetailUpsert) {
		s.ClearAmount()
	})
}

// SetReceivedAmount sets the "received_amount" field.
func (u *PaymentCryptoDetailUpsertOne) SetReceivedAmount(v float64) *PaymentCryptoDetailUpsertOne {
	return u.Update(func(s *PaymentCryptoDetailUpsert) {
		s.SetReceivedAmount(v)
	})
}

// AddReceivedAmount adds v to the "received_amount" field.
func (u *PaymentCryptoDetailUpsertOne) AddReceivedAmount(v float64) *PaymentCryptoDetailUpsertOne {
	return u.Update(func(s *PaymentCryptoDetailUpsert) {
		s.AddReceivedAmount(v)
	})
}

// UpdateReceivedAmount sets the "received_amount" field to the value that was provided on create.
func (u *PaymentCryptoDetailUpsertOne) UpdateReceivedAmount() *PaymentCryptoDetailUpsertOne {
	return u.Update(func(s *PaymentCryptoDetailUpsert) {
		s.UpdateReceivedAmount()
	})
}

// ClearReceivedAmount clears the value of the "received_amount" field.
func (u *PaymentCryptoDetailUpsertOne) ClearReceivedAmount() *PaymentCryptoDetailUpsertOne {
	return u.Update(func(s *PaymentCryptoDetailUpsert) {
		s.ClearReceivedAmount()
	})
}

// SetTxHash sets the "tx_hash" field.
func (u *PaymentCryptoDetailUpsertOne) SetTxHash(v string) *PaymentCryptoDetailUpsertOne {
	return u.Update(func(s *PaymentCryptoDetailUpsert) {
		s.SetTxHash(v)
	})
}

// UpdateTxHash sets the "tx_hash" field to the value that was provided on create.
func (u *PaymentCryptoDetailUpsertOne) UpdateTxHash() *PaymentCryptoDetailUpsertOne {
	return u.Update(func(s *PaymentCryptoDetailUpsert) {
		s.UpdateTxHash()
	})
}

// ClearTxHash clears the value of the "tx_hash" field.
func (u *PaymentCryptoDetailUpsertOne) ClearTxHash() *PaymentCryptoDetailUpsertOne {
	return u.Update(func(s *PaymentCryptoDetailUpsert) {
		s.ClearTxHash()
	})
}

// SetTxID sets the "tx_id" field.
func (u *PaymentCryptoDetailUpsertOne) SetTxID(v string) *PaymentCryptoDetailUpsertOne {
	return u.Update(func(s *PaymentCryptoDetailUpsert) {
		s.SetTxID(v)
	})
}

// UpdateTxID sets the "tx_id" field to the value that was provided on create.
func (u *PaymentCryptoDetailUpsertOne) UpdateTxID() *PaymentCryptoDetailUpsertOne {
	return u.Update(func(s *PaymentCryptoDetailUpsert) {
		s.UpdateTxID()
	})
}

// ClearTxID clears the value of the "tx_id" field.
func (u *PaymentCryptoDetailUpsertOne) ClearTxID() *PaymentCryptoDetailUpsertOne {
	return u.Update(func(s *PaymentCryptoDetailUpsert) {
		s.ClearTxID()
	})
}

// SetFee sets the "fee" field.
func (u *PaymentCryptoDetailUpsertOne) SetFee(v float64) *PaymentCryptoDetailUpsertOne {
	return u.Update(func(s *PaymentCryptoDetailUpsert) {
		s.SetFee(v)
	})
}

// AddFee adds v to the "fee" field.
func (u *PaymentCryptoDetailUpsertOne) AddFee(v float64) *PaymentCryptoDetailUpsertOne {
	return u.Update(func(s *PaymentCryptoDetailUpsert) {
		s.AddFee(v)
	})
}

// UpdateFee sets the "fee" field to the value that was provided on create.
func (u *PaymentCryptoDetailUpsertOne) UpdateFee() *PaymentCryptoDetailUpsertOne {
	return u.Update(func(s *PaymentCryptoDetailUpsert) {
		s.UpdateFee()
	})
}

// ClearFee clears the value of the "fee" field.
func (u *PaymentCryptoDetailUpsertOne) ClearFee() *PaymentCryptoDetailUpsertOne {
	return u.Update(func(s *PaymentCryptoDetailUpsert) {
		s.ClearFee()
	})
}

// SetImageURL sets the "image_url" field.
func (u *PaymentCryptoDetailUpsertOne) SetImageURL(v string) *PaymentCryptoDetailUpsertOne {
	return u.Update(func(s *PaymentCryptoDetailUpsert) {
		s.SetImageURL(v)
	})
}

// UpdateImageURL sets the "image_url" field to the value that was provided on create.
func (u *PaymentCryptoDetailUpsertOne) UpdateImageURL() *PaymentCryptoDetailUpsertOne {
	return u.Update(func(s *PaymentCryptoDetailUpsert) {
		s.UpdateImageURL()
	})
}

// ClearImageURL clears the value of the "image_url" field.
func (u *PaymentCryptoDetailUpsertOne) ClearImageURL() *PaymentCryptoDetailUpsertOne {
	return u.Update(func(s *PaymentCryptoDetailUpsert) {
		s.ClearImageURL()
	})
}

// Exec executes the query.
func (u *PaymentCryptoDetailUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PaymentCryptoDetailCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PaymentCryptoDetailUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PaymentCryptoDetailUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PaymentCryptoDetailUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PaymentCryptoDetailCreateBulk is the builder for creating many PaymentCryptoDetail entities in bulk.
type PaymentCryptoDetailCreateBulk struct {
	config
	builders []*PaymentCryptoDetailCreate
	conflict []sql.ConflictOption
}

// Save creates the PaymentCryptoDetail entities in the database.
func (pcdcb *PaymentCryptoDetailCreateBulk) Save(ctx context.Context) ([]*PaymentCryptoDetail, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pcdcb.builders))
	nodes := make([]*PaymentCryptoDetail, len(pcdcb.builders))
	mutators := make([]Mutator, len(pcdcb.builders))
	for i := range pcdcb.builders {
		func(i int, root context.Context) {
			builder := pcdcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PaymentCryptoDetailMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcdcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pcdcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcdcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcdcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcdcb *PaymentCryptoDetailCreateBulk) SaveX(ctx context.Context) []*PaymentCryptoDetail {
	v, err := pcdcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcdcb *PaymentCryptoDetailCreateBulk) Exec(ctx context.Context) error {
	_, err := pcdcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcdcb *PaymentCryptoDetailCreateBulk) ExecX(ctx context.Context) {
	if err := pcdcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PaymentCryptoDetail.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PaymentCryptoDetailUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (pcdcb *PaymentCryptoDetailCreateBulk) OnConflict(opts ...sql.ConflictOption) *PaymentCryptoDetailUpsertBulk {
	pcdcb.conflict = opts
	return &PaymentCryptoDetailUpsertBulk{
		create: pcdcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PaymentCryptoDetail.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (pcdcb *PaymentCryptoDetailCreateBulk) OnConflictColumns(columns ...string) *PaymentCryptoDetailUpsertBulk {
	pcdcb.conflict = append(pcdcb.conflict, sql.ConflictColumns(columns...))
	return &PaymentCryptoDetailUpsertBulk{
		create: pcdcb,
	}
}

// PaymentCryptoDetailUpsertBulk is the builder for "upsert"-ing
// a bulk of PaymentCryptoDetail nodes.
type PaymentCryptoDetailUpsertBulk struct {
	create *PaymentCryptoDetailCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.PaymentCryptoDetail.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(paymentcryptodetail.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *PaymentCryptoDetailUpsertBulk) UpdateNewValues() *PaymentCryptoDetailUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(paymentcryptodetail.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PaymentCryptoDetail.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *PaymentCryptoDetailUpsertBulk) Ignore() *PaymentCryptoDetailUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PaymentCryptoDetailUpsertBulk) DoNothing() *PaymentCryptoDetailUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PaymentCryptoDetailCreateBulk.OnConflict
// documentation for more info.
func (u *PaymentCryptoDetailUpsertBulk) Update(set func(*PaymentCryptoDetailUpsert)) *PaymentCryptoDetailUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PaymentCryptoDetailUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *PaymentCryptoDetailUpsertBulk) SetCreatedAt(v time.Time) *PaymentCryptoDetailUpsertBulk {
	return u.Update(func(s *PaymentCryptoDetailUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *PaymentCryptoDetailUpsertBulk) UpdateCreatedAt() *PaymentCryptoDetailUpsertBulk {
	return u.Update(func(s *PaymentCryptoDetailUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PaymentCryptoDetailUpsertBulk) SetUpdatedAt(v time.Time) *PaymentCryptoDetailUpsertBulk {
	return u.Update(func(s *PaymentCryptoDetailUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PaymentCryptoDetailUpsertBulk) UpdateUpdatedAt() *PaymentCryptoDetailUpsertBulk {
	return u.Update(func(s *PaymentCryptoDetailUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetCreatedBy sets the "created_by" field.
func (u *PaymentCryptoDetailUpsertBulk) SetCreatedBy(v string) *PaymentCryptoDetailUpsertBulk {
	return u.Update(func(s *PaymentCryptoDetailUpsert) {
		s.SetCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *PaymentCryptoDetailUpsertBulk) UpdateCreatedBy() *PaymentCryptoDetailUpsertBulk {
	return u.Update(func(s *PaymentCryptoDetailUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *PaymentCryptoDetailUpsertBulk) SetUpdatedBy(v string) *PaymentCryptoDetailUpsertBulk {
	return u.Update(func(s *PaymentCryptoDetailUpsert) {
		s.SetUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *PaymentCryptoDetailUpsertBulk) UpdateUpdatedBy() *PaymentCryptoDetailUpsertBulk {
	return u.Update(func(s *PaymentCryptoDetailUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetCryptoType sets the "crypto_type" field.
func (u *PaymentCryptoDetailUpsertBulk) SetCryptoType(v int32) *PaymentCryptoDetailUpsertBulk {
	return u.Update(func(s *PaymentCryptoDetailUpsert) {
		s.SetCryptoType(v)
	})
}

// AddCryptoType adds v to the "crypto_type" field.
func (u *PaymentCryptoDetailUpsertBulk) AddCryptoType(v int32) *PaymentCryptoDetailUpsertBulk {
	return u.Update(func(s *PaymentCryptoDetailUpsert) {
		s.AddCryptoType(v)
	})
}

// UpdateCryptoType sets the "crypto_type" field to the value that was provided on create.
func (u *PaymentCryptoDetailUpsertBulk) UpdateCryptoType() *PaymentCryptoDetailUpsertBulk {
	return u.Update(func(s *PaymentCryptoDetailUpsert) {
		s.UpdateCryptoType()
	})
}

// SetCryptoNetworkType sets the "crypto_network_type" field.
func (u *PaymentCryptoDetailUpsertBulk) SetCryptoNetworkType(v int32) *PaymentCryptoDetailUpsertBulk {
	return u.Update(func(s *PaymentCryptoDetailUpsert) {
		s.SetCryptoNetworkType(v)
	})
}

// AddCryptoNetworkType adds v to the "crypto_network_type" field.
func (u *PaymentCryptoDetailUpsertBulk) AddCryptoNetworkType(v int32) *PaymentCryptoDetailUpsertBulk {
	return u.Update(func(s *PaymentCryptoDetailUpsert) {
		s.AddCryptoNetworkType(v)
	})
}

// UpdateCryptoNetworkType sets the "crypto_network_type" field to the value that was provided on create.
func (u *PaymentCryptoDetailUpsertBulk) UpdateCryptoNetworkType() *PaymentCryptoDetailUpsertBulk {
	return u.Update(func(s *PaymentCryptoDetailUpsert) {
		s.UpdateCryptoNetworkType()
	})
}

// SetCryptoWalletName sets the "crypto_wallet_name" field.
func (u *PaymentCryptoDetailUpsertBulk) SetCryptoWalletName(v int32) *PaymentCryptoDetailUpsertBulk {
	return u.Update(func(s *PaymentCryptoDetailUpsert) {
		s.SetCryptoWalletName(v)
	})
}

// AddCryptoWalletName adds v to the "crypto_wallet_name" field.
func (u *PaymentCryptoDetailUpsertBulk) AddCryptoWalletName(v int32) *PaymentCryptoDetailUpsertBulk {
	return u.Update(func(s *PaymentCryptoDetailUpsert) {
		s.AddCryptoWalletName(v)
	})
}

// UpdateCryptoWalletName sets the "crypto_wallet_name" field to the value that was provided on create.
func (u *PaymentCryptoDetailUpsertBulk) UpdateCryptoWalletName() *PaymentCryptoDetailUpsertBulk {
	return u.Update(func(s *PaymentCryptoDetailUpsert) {
		s.UpdateCryptoWalletName()
	})
}

// SetReceiverAddress sets the "receiver_address" field.
func (u *PaymentCryptoDetailUpsertBulk) SetReceiverAddress(v string) *PaymentCryptoDetailUpsertBulk {
	return u.Update(func(s *PaymentCryptoDetailUpsert) {
		s.SetReceiverAddress(v)
	})
}

// UpdateReceiverAddress sets the "receiver_address" field to the value that was provided on create.
func (u *PaymentCryptoDetailUpsertBulk) UpdateReceiverAddress() *PaymentCryptoDetailUpsertBulk {
	return u.Update(func(s *PaymentCryptoDetailUpsert) {
		s.UpdateReceiverAddress()
	})
}

// SetSenderAddress sets the "sender_address" field.
func (u *PaymentCryptoDetailUpsertBulk) SetSenderAddress(v string) *PaymentCryptoDetailUpsertBulk {
	return u.Update(func(s *PaymentCryptoDetailUpsert) {
		s.SetSenderAddress(v)
	})
}

// UpdateSenderAddress sets the "sender_address" field to the value that was provided on create.
func (u *PaymentCryptoDetailUpsertBulk) UpdateSenderAddress() *PaymentCryptoDetailUpsertBulk {
	return u.Update(func(s *PaymentCryptoDetailUpsert) {
		s.UpdateSenderAddress()
	})
}

// ClearSenderAddress clears the value of the "sender_address" field.
func (u *PaymentCryptoDetailUpsertBulk) ClearSenderAddress() *PaymentCryptoDetailUpsertBulk {
	return u.Update(func(s *PaymentCryptoDetailUpsert) {
		s.ClearSenderAddress()
	})
}

// SetAmount sets the "amount" field.
func (u *PaymentCryptoDetailUpsertBulk) SetAmount(v float64) *PaymentCryptoDetailUpsertBulk {
	return u.Update(func(s *PaymentCryptoDetailUpsert) {
		s.SetAmount(v)
	})
}

// AddAmount adds v to the "amount" field.
func (u *PaymentCryptoDetailUpsertBulk) AddAmount(v float64) *PaymentCryptoDetailUpsertBulk {
	return u.Update(func(s *PaymentCryptoDetailUpsert) {
		s.AddAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *PaymentCryptoDetailUpsertBulk) UpdateAmount() *PaymentCryptoDetailUpsertBulk {
	return u.Update(func(s *PaymentCryptoDetailUpsert) {
		s.UpdateAmount()
	})
}

// ClearAmount clears the value of the "amount" field.
func (u *PaymentCryptoDetailUpsertBulk) ClearAmount() *PaymentCryptoDetailUpsertBulk {
	return u.Update(func(s *PaymentCryptoDetailUpsert) {
		s.ClearAmount()
	})
}

// SetReceivedAmount sets the "received_amount" field.
func (u *PaymentCryptoDetailUpsertBulk) SetReceivedAmount(v float64) *PaymentCryptoDetailUpsertBulk {
	return u.Update(func(s *PaymentCryptoDetailUpsert) {
		s.SetReceivedAmount(v)
	})
}

// AddReceivedAmount adds v to the "received_amount" field.
func (u *PaymentCryptoDetailUpsertBulk) AddReceivedAmount(v float64) *PaymentCryptoDetailUpsertBulk {
	return u.Update(func(s *PaymentCryptoDetailUpsert) {
		s.AddReceivedAmount(v)
	})
}

// UpdateReceivedAmount sets the "received_amount" field to the value that was provided on create.
func (u *PaymentCryptoDetailUpsertBulk) UpdateReceivedAmount() *PaymentCryptoDetailUpsertBulk {
	return u.Update(func(s *PaymentCryptoDetailUpsert) {
		s.UpdateReceivedAmount()
	})
}

// ClearReceivedAmount clears the value of the "received_amount" field.
func (u *PaymentCryptoDetailUpsertBulk) ClearReceivedAmount() *PaymentCryptoDetailUpsertBulk {
	return u.Update(func(s *PaymentCryptoDetailUpsert) {
		s.ClearReceivedAmount()
	})
}

// SetTxHash sets the "tx_hash" field.
func (u *PaymentCryptoDetailUpsertBulk) SetTxHash(v string) *PaymentCryptoDetailUpsertBulk {
	return u.Update(func(s *PaymentCryptoDetailUpsert) {
		s.SetTxHash(v)
	})
}

// UpdateTxHash sets the "tx_hash" field to the value that was provided on create.
func (u *PaymentCryptoDetailUpsertBulk) UpdateTxHash() *PaymentCryptoDetailUpsertBulk {
	return u.Update(func(s *PaymentCryptoDetailUpsert) {
		s.UpdateTxHash()
	})
}

// ClearTxHash clears the value of the "tx_hash" field.
func (u *PaymentCryptoDetailUpsertBulk) ClearTxHash() *PaymentCryptoDetailUpsertBulk {
	return u.Update(func(s *PaymentCryptoDetailUpsert) {
		s.ClearTxHash()
	})
}

// SetTxID sets the "tx_id" field.
func (u *PaymentCryptoDetailUpsertBulk) SetTxID(v string) *PaymentCryptoDetailUpsertBulk {
	return u.Update(func(s *PaymentCryptoDetailUpsert) {
		s.SetTxID(v)
	})
}

// UpdateTxID sets the "tx_id" field to the value that was provided on create.
func (u *PaymentCryptoDetailUpsertBulk) UpdateTxID() *PaymentCryptoDetailUpsertBulk {
	return u.Update(func(s *PaymentCryptoDetailUpsert) {
		s.UpdateTxID()
	})
}

// ClearTxID clears the value of the "tx_id" field.
func (u *PaymentCryptoDetailUpsertBulk) ClearTxID() *PaymentCryptoDetailUpsertBulk {
	return u.Update(func(s *PaymentCryptoDetailUpsert) {
		s.ClearTxID()
	})
}

// SetFee sets the "fee" field.
func (u *PaymentCryptoDetailUpsertBulk) SetFee(v float64) *PaymentCryptoDetailUpsertBulk {
	return u.Update(func(s *PaymentCryptoDetailUpsert) {
		s.SetFee(v)
	})
}

// AddFee adds v to the "fee" field.
func (u *PaymentCryptoDetailUpsertBulk) AddFee(v float64) *PaymentCryptoDetailUpsertBulk {
	return u.Update(func(s *PaymentCryptoDetailUpsert) {
		s.AddFee(v)
	})
}

// UpdateFee sets the "fee" field to the value that was provided on create.
func (u *PaymentCryptoDetailUpsertBulk) UpdateFee() *PaymentCryptoDetailUpsertBulk {
	return u.Update(func(s *PaymentCryptoDetailUpsert) {
		s.UpdateFee()
	})
}

// ClearFee clears the value of the "fee" field.
func (u *PaymentCryptoDetailUpsertBulk) ClearFee() *PaymentCryptoDetailUpsertBulk {
	return u.Update(func(s *PaymentCryptoDetailUpsert) {
		s.ClearFee()
	})
}

// SetImageURL sets the "image_url" field.
func (u *PaymentCryptoDetailUpsertBulk) SetImageURL(v string) *PaymentCryptoDetailUpsertBulk {
	return u.Update(func(s *PaymentCryptoDetailUpsert) {
		s.SetImageURL(v)
	})
}

// UpdateImageURL sets the "image_url" field to the value that was provided on create.
func (u *PaymentCryptoDetailUpsertBulk) UpdateImageURL() *PaymentCryptoDetailUpsertBulk {
	return u.Update(func(s *PaymentCryptoDetailUpsert) {
		s.UpdateImageURL()
	})
}

// ClearImageURL clears the value of the "image_url" field.
func (u *PaymentCryptoDetailUpsertBulk) ClearImageURL() *PaymentCryptoDetailUpsertBulk {
	return u.Update(func(s *PaymentCryptoDetailUpsert) {
		s.ClearImageURL()
	})
}

// Exec executes the query.
func (u *PaymentCryptoDetailUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PaymentCryptoDetailCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PaymentCryptoDetailCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PaymentCryptoDetailUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
