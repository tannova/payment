// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"gitlab.com/mcuc/monorepo/backend/stark/pkg/ent/systemcryptohotwallet"
)

// SystemCryptoHotWalletCreate is the builder for creating a SystemCryptoHotWallet entity.
type SystemCryptoHotWalletCreate struct {
	config
	mutation *SystemCryptoHotWalletMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (schwc *SystemCryptoHotWalletCreate) SetCreatedAt(t time.Time) *SystemCryptoHotWalletCreate {
	schwc.mutation.SetCreatedAt(t)
	return schwc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (schwc *SystemCryptoHotWalletCreate) SetNillableCreatedAt(t *time.Time) *SystemCryptoHotWalletCreate {
	if t != nil {
		schwc.SetCreatedAt(*t)
	}
	return schwc
}

// SetUpdatedAt sets the "updated_at" field.
func (schwc *SystemCryptoHotWalletCreate) SetUpdatedAt(t time.Time) *SystemCryptoHotWalletCreate {
	schwc.mutation.SetUpdatedAt(t)
	return schwc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (schwc *SystemCryptoHotWalletCreate) SetNillableUpdatedAt(t *time.Time) *SystemCryptoHotWalletCreate {
	if t != nil {
		schwc.SetUpdatedAt(*t)
	}
	return schwc
}

// SetCreatedBy sets the "created_by" field.
func (schwc *SystemCryptoHotWalletCreate) SetCreatedBy(s string) *SystemCryptoHotWalletCreate {
	schwc.mutation.SetCreatedBy(s)
	return schwc
}

// SetUpdatedBy sets the "updated_by" field.
func (schwc *SystemCryptoHotWalletCreate) SetUpdatedBy(s string) *SystemCryptoHotWalletCreate {
	schwc.mutation.SetUpdatedBy(s)
	return schwc
}

// SetMerchantID sets the "merchant_id" field.
func (schwc *SystemCryptoHotWalletCreate) SetMerchantID(i int64) *SystemCryptoHotWalletCreate {
	schwc.mutation.SetMerchantID(i)
	return schwc
}

// SetNillableMerchantID sets the "merchant_id" field if the given value is not nil.
func (schwc *SystemCryptoHotWalletCreate) SetNillableMerchantID(i *int64) *SystemCryptoHotWalletCreate {
	if i != nil {
		schwc.SetMerchantID(*i)
	}
	return schwc
}

// SetCryptoType sets the "crypto_type" field.
func (schwc *SystemCryptoHotWalletCreate) SetCryptoType(i int32) *SystemCryptoHotWalletCreate {
	schwc.mutation.SetCryptoType(i)
	return schwc
}

// SetNillableCryptoType sets the "crypto_type" field if the given value is not nil.
func (schwc *SystemCryptoHotWalletCreate) SetNillableCryptoType(i *int32) *SystemCryptoHotWalletCreate {
	if i != nil {
		schwc.SetCryptoType(*i)
	}
	return schwc
}

// SetCryptoNetworkType sets the "crypto_network_type" field.
func (schwc *SystemCryptoHotWalletCreate) SetCryptoNetworkType(i int32) *SystemCryptoHotWalletCreate {
	schwc.mutation.SetCryptoNetworkType(i)
	return schwc
}

// SetNillableCryptoNetworkType sets the "crypto_network_type" field if the given value is not nil.
func (schwc *SystemCryptoHotWalletCreate) SetNillableCryptoNetworkType(i *int32) *SystemCryptoHotWalletCreate {
	if i != nil {
		schwc.SetCryptoNetworkType(*i)
	}
	return schwc
}

// SetAddress sets the "address" field.
func (schwc *SystemCryptoHotWalletCreate) SetAddress(s string) *SystemCryptoHotWalletCreate {
	schwc.mutation.SetAddress(s)
	return schwc
}

// SetTotalBalance sets the "total_balance" field.
func (schwc *SystemCryptoHotWalletCreate) SetTotalBalance(f float64) *SystemCryptoHotWalletCreate {
	schwc.mutation.SetTotalBalance(f)
	return schwc
}

// SetNillableTotalBalance sets the "total_balance" field if the given value is not nil.
func (schwc *SystemCryptoHotWalletCreate) SetNillableTotalBalance(f *float64) *SystemCryptoHotWalletCreate {
	if f != nil {
		schwc.SetTotalBalance(*f)
	}
	return schwc
}

// SetBalance sets the "balance" field.
func (schwc *SystemCryptoHotWalletCreate) SetBalance(f float64) *SystemCryptoHotWalletCreate {
	schwc.mutation.SetBalance(f)
	return schwc
}

// SetNillableBalance sets the "balance" field if the given value is not nil.
func (schwc *SystemCryptoHotWalletCreate) SetNillableBalance(f *float64) *SystemCryptoHotWalletCreate {
	if f != nil {
		schwc.SetBalance(*f)
	}
	return schwc
}

// SetStatus sets the "status" field.
func (schwc *SystemCryptoHotWalletCreate) SetStatus(i int32) *SystemCryptoHotWalletCreate {
	schwc.mutation.SetStatus(i)
	return schwc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (schwc *SystemCryptoHotWalletCreate) SetNillableStatus(i *int32) *SystemCryptoHotWalletCreate {
	if i != nil {
		schwc.SetStatus(*i)
	}
	return schwc
}

// SetID sets the "id" field.
func (schwc *SystemCryptoHotWalletCreate) SetID(i int64) *SystemCryptoHotWalletCreate {
	schwc.mutation.SetID(i)
	return schwc
}

// Mutation returns the SystemCryptoHotWalletMutation object of the builder.
func (schwc *SystemCryptoHotWalletCreate) Mutation() *SystemCryptoHotWalletMutation {
	return schwc.mutation
}

// Save creates the SystemCryptoHotWallet in the database.
func (schwc *SystemCryptoHotWalletCreate) Save(ctx context.Context) (*SystemCryptoHotWallet, error) {
	var (
		err  error
		node *SystemCryptoHotWallet
	)
	schwc.defaults()
	if len(schwc.hooks) == 0 {
		if err = schwc.check(); err != nil {
			return nil, err
		}
		node, err = schwc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SystemCryptoHotWalletMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = schwc.check(); err != nil {
				return nil, err
			}
			schwc.mutation = mutation
			if node, err = schwc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(schwc.hooks) - 1; i >= 0; i-- {
			if schwc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = schwc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, schwc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (schwc *SystemCryptoHotWalletCreate) SaveX(ctx context.Context) *SystemCryptoHotWallet {
	v, err := schwc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (schwc *SystemCryptoHotWalletCreate) Exec(ctx context.Context) error {
	_, err := schwc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (schwc *SystemCryptoHotWalletCreate) ExecX(ctx context.Context) {
	if err := schwc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (schwc *SystemCryptoHotWalletCreate) defaults() {
	if _, ok := schwc.mutation.CreatedAt(); !ok {
		v := systemcryptohotwallet.DefaultCreatedAt()
		schwc.mutation.SetCreatedAt(v)
	}
	if _, ok := schwc.mutation.UpdatedAt(); !ok {
		v := systemcryptohotwallet.DefaultUpdatedAt()
		schwc.mutation.SetUpdatedAt(v)
	}
	if _, ok := schwc.mutation.MerchantID(); !ok {
		v := systemcryptohotwallet.DefaultMerchantID
		schwc.mutation.SetMerchantID(v)
	}
	if _, ok := schwc.mutation.CryptoType(); !ok {
		v := systemcryptohotwallet.DefaultCryptoType
		schwc.mutation.SetCryptoType(v)
	}
	if _, ok := schwc.mutation.CryptoNetworkType(); !ok {
		v := systemcryptohotwallet.DefaultCryptoNetworkType
		schwc.mutation.SetCryptoNetworkType(v)
	}
	if _, ok := schwc.mutation.TotalBalance(); !ok {
		v := systemcryptohotwallet.DefaultTotalBalance
		schwc.mutation.SetTotalBalance(v)
	}
	if _, ok := schwc.mutation.Balance(); !ok {
		v := systemcryptohotwallet.DefaultBalance
		schwc.mutation.SetBalance(v)
	}
	if _, ok := schwc.mutation.Status(); !ok {
		v := systemcryptohotwallet.DefaultStatus
		schwc.mutation.SetStatus(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (schwc *SystemCryptoHotWalletCreate) check() error {
	if _, ok := schwc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "SystemCryptoHotWallet.created_at"`)}
	}
	if _, ok := schwc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "SystemCryptoHotWallet.updated_at"`)}
	}
	if _, ok := schwc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent: missing required field "SystemCryptoHotWallet.created_by"`)}
	}
	if v, ok := schwc.mutation.CreatedBy(); ok {
		if err := systemcryptohotwallet.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "SystemCryptoHotWallet.created_by": %w`, err)}
		}
	}
	if _, ok := schwc.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`ent: missing required field "SystemCryptoHotWallet.updated_by"`)}
	}
	if v, ok := schwc.mutation.UpdatedBy(); ok {
		if err := systemcryptohotwallet.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "SystemCryptoHotWallet.updated_by": %w`, err)}
		}
	}
	if _, ok := schwc.mutation.MerchantID(); !ok {
		return &ValidationError{Name: "merchant_id", err: errors.New(`ent: missing required field "SystemCryptoHotWallet.merchant_id"`)}
	}
	if v, ok := schwc.mutation.MerchantID(); ok {
		if err := systemcryptohotwallet.MerchantIDValidator(v); err != nil {
			return &ValidationError{Name: "merchant_id", err: fmt.Errorf(`ent: validator failed for field "SystemCryptoHotWallet.merchant_id": %w`, err)}
		}
	}
	if _, ok := schwc.mutation.CryptoType(); !ok {
		return &ValidationError{Name: "crypto_type", err: errors.New(`ent: missing required field "SystemCryptoHotWallet.crypto_type"`)}
	}
	if v, ok := schwc.mutation.CryptoType(); ok {
		if err := systemcryptohotwallet.CryptoTypeValidator(v); err != nil {
			return &ValidationError{Name: "crypto_type", err: fmt.Errorf(`ent: validator failed for field "SystemCryptoHotWallet.crypto_type": %w`, err)}
		}
	}
	if _, ok := schwc.mutation.CryptoNetworkType(); !ok {
		return &ValidationError{Name: "crypto_network_type", err: errors.New(`ent: missing required field "SystemCryptoHotWallet.crypto_network_type"`)}
	}
	if v, ok := schwc.mutation.CryptoNetworkType(); ok {
		if err := systemcryptohotwallet.CryptoNetworkTypeValidator(v); err != nil {
			return &ValidationError{Name: "crypto_network_type", err: fmt.Errorf(`ent: validator failed for field "SystemCryptoHotWallet.crypto_network_type": %w`, err)}
		}
	}
	if _, ok := schwc.mutation.Address(); !ok {
		return &ValidationError{Name: "address", err: errors.New(`ent: missing required field "SystemCryptoHotWallet.address"`)}
	}
	if v, ok := schwc.mutation.Address(); ok {
		if err := systemcryptohotwallet.AddressValidator(v); err != nil {
			return &ValidationError{Name: "address", err: fmt.Errorf(`ent: validator failed for field "SystemCryptoHotWallet.address": %w`, err)}
		}
	}
	if _, ok := schwc.mutation.TotalBalance(); !ok {
		return &ValidationError{Name: "total_balance", err: errors.New(`ent: missing required field "SystemCryptoHotWallet.total_balance"`)}
	}
	if _, ok := schwc.mutation.Balance(); !ok {
		return &ValidationError{Name: "balance", err: errors.New(`ent: missing required field "SystemCryptoHotWallet.balance"`)}
	}
	if _, ok := schwc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "SystemCryptoHotWallet.status"`)}
	}
	if v, ok := schwc.mutation.Status(); ok {
		if err := systemcryptohotwallet.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "SystemCryptoHotWallet.status": %w`, err)}
		}
	}
	return nil
}

func (schwc *SystemCryptoHotWalletCreate) sqlSave(ctx context.Context) (*SystemCryptoHotWallet, error) {
	_node, _spec := schwc.createSpec()
	if err := sqlgraph.CreateNode(ctx, schwc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	return _node, nil
}

func (schwc *SystemCryptoHotWalletCreate) createSpec() (*SystemCryptoHotWallet, *sqlgraph.CreateSpec) {
	var (
		_node = &SystemCryptoHotWallet{config: schwc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: systemcryptohotwallet.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: systemcryptohotwallet.FieldID,
			},
		}
	)
	_spec.OnConflict = schwc.conflict
	if id, ok := schwc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := schwc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: systemcryptohotwallet.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := schwc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: systemcryptohotwallet.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := schwc.mutation.CreatedBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: systemcryptohotwallet.FieldCreatedBy,
		})
		_node.CreatedBy = value
	}
	if value, ok := schwc.mutation.UpdatedBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: systemcryptohotwallet.FieldUpdatedBy,
		})
		_node.UpdatedBy = value
	}
	if value, ok := schwc.mutation.MerchantID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: systemcryptohotwallet.FieldMerchantID,
		})
		_node.MerchantID = value
	}
	if value, ok := schwc.mutation.CryptoType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: systemcryptohotwallet.FieldCryptoType,
		})
		_node.CryptoType = value
	}
	if value, ok := schwc.mutation.CryptoNetworkType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: systemcryptohotwallet.FieldCryptoNetworkType,
		})
		_node.CryptoNetworkType = value
	}
	if value, ok := schwc.mutation.Address(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: systemcryptohotwallet.FieldAddress,
		})
		_node.Address = value
	}
	if value, ok := schwc.mutation.TotalBalance(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: systemcryptohotwallet.FieldTotalBalance,
		})
		_node.TotalBalance = value
	}
	if value, ok := schwc.mutation.Balance(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: systemcryptohotwallet.FieldBalance,
		})
		_node.Balance = value
	}
	if value, ok := schwc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: systemcryptohotwallet.FieldStatus,
		})
		_node.Status = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SystemCryptoHotWallet.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SystemCryptoHotWalletUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (schwc *SystemCryptoHotWalletCreate) OnConflict(opts ...sql.ConflictOption) *SystemCryptoHotWalletUpsertOne {
	schwc.conflict = opts
	return &SystemCryptoHotWalletUpsertOne{
		create: schwc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SystemCryptoHotWallet.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (schwc *SystemCryptoHotWalletCreate) OnConflictColumns(columns ...string) *SystemCryptoHotWalletUpsertOne {
	schwc.conflict = append(schwc.conflict, sql.ConflictColumns(columns...))
	return &SystemCryptoHotWalletUpsertOne{
		create: schwc,
	}
}

type (
	// SystemCryptoHotWalletUpsertOne is the builder for "upsert"-ing
	//  one SystemCryptoHotWallet node.
	SystemCryptoHotWalletUpsertOne struct {
		create *SystemCryptoHotWalletCreate
	}

	// SystemCryptoHotWalletUpsert is the "OnConflict" setter.
	SystemCryptoHotWalletUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *SystemCryptoHotWalletUpsert) SetCreatedAt(v time.Time) *SystemCryptoHotWalletUpsert {
	u.Set(systemcryptohotwallet.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SystemCryptoHotWalletUpsert) UpdateCreatedAt() *SystemCryptoHotWalletUpsert {
	u.SetExcluded(systemcryptohotwallet.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SystemCryptoHotWalletUpsert) SetUpdatedAt(v time.Time) *SystemCryptoHotWalletUpsert {
	u.Set(systemcryptohotwallet.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SystemCryptoHotWalletUpsert) UpdateUpdatedAt() *SystemCryptoHotWalletUpsert {
	u.SetExcluded(systemcryptohotwallet.FieldUpdatedAt)
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *SystemCryptoHotWalletUpsert) SetCreatedBy(v string) *SystemCryptoHotWalletUpsert {
	u.Set(systemcryptohotwallet.FieldCreatedBy, v)
	return u
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *SystemCryptoHotWalletUpsert) UpdateCreatedBy() *SystemCryptoHotWalletUpsert {
	u.SetExcluded(systemcryptohotwallet.FieldCreatedBy)
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *SystemCryptoHotWalletUpsert) SetUpdatedBy(v string) *SystemCryptoHotWalletUpsert {
	u.Set(systemcryptohotwallet.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *SystemCryptoHotWalletUpsert) UpdateUpdatedBy() *SystemCryptoHotWalletUpsert {
	u.SetExcluded(systemcryptohotwallet.FieldUpdatedBy)
	return u
}

// SetMerchantID sets the "merchant_id" field.
func (u *SystemCryptoHotWalletUpsert) SetMerchantID(v int64) *SystemCryptoHotWalletUpsert {
	u.Set(systemcryptohotwallet.FieldMerchantID, v)
	return u
}

// UpdateMerchantID sets the "merchant_id" field to the value that was provided on create.
func (u *SystemCryptoHotWalletUpsert) UpdateMerchantID() *SystemCryptoHotWalletUpsert {
	u.SetExcluded(systemcryptohotwallet.FieldMerchantID)
	return u
}

// AddMerchantID adds v to the "merchant_id" field.
func (u *SystemCryptoHotWalletUpsert) AddMerchantID(v int64) *SystemCryptoHotWalletUpsert {
	u.Add(systemcryptohotwallet.FieldMerchantID, v)
	return u
}

// SetCryptoType sets the "crypto_type" field.
func (u *SystemCryptoHotWalletUpsert) SetCryptoType(v int32) *SystemCryptoHotWalletUpsert {
	u.Set(systemcryptohotwallet.FieldCryptoType, v)
	return u
}

// UpdateCryptoType sets the "crypto_type" field to the value that was provided on create.
func (u *SystemCryptoHotWalletUpsert) UpdateCryptoType() *SystemCryptoHotWalletUpsert {
	u.SetExcluded(systemcryptohotwallet.FieldCryptoType)
	return u
}

// AddCryptoType adds v to the "crypto_type" field.
func (u *SystemCryptoHotWalletUpsert) AddCryptoType(v int32) *SystemCryptoHotWalletUpsert {
	u.Add(systemcryptohotwallet.FieldCryptoType, v)
	return u
}

// SetCryptoNetworkType sets the "crypto_network_type" field.
func (u *SystemCryptoHotWalletUpsert) SetCryptoNetworkType(v int32) *SystemCryptoHotWalletUpsert {
	u.Set(systemcryptohotwallet.FieldCryptoNetworkType, v)
	return u
}

// UpdateCryptoNetworkType sets the "crypto_network_type" field to the value that was provided on create.
func (u *SystemCryptoHotWalletUpsert) UpdateCryptoNetworkType() *SystemCryptoHotWalletUpsert {
	u.SetExcluded(systemcryptohotwallet.FieldCryptoNetworkType)
	return u
}

// AddCryptoNetworkType adds v to the "crypto_network_type" field.
func (u *SystemCryptoHotWalletUpsert) AddCryptoNetworkType(v int32) *SystemCryptoHotWalletUpsert {
	u.Add(systemcryptohotwallet.FieldCryptoNetworkType, v)
	return u
}

// SetAddress sets the "address" field.
func (u *SystemCryptoHotWalletUpsert) SetAddress(v string) *SystemCryptoHotWalletUpsert {
	u.Set(systemcryptohotwallet.FieldAddress, v)
	return u
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *SystemCryptoHotWalletUpsert) UpdateAddress() *SystemCryptoHotWalletUpsert {
	u.SetExcluded(systemcryptohotwallet.FieldAddress)
	return u
}

// SetTotalBalance sets the "total_balance" field.
func (u *SystemCryptoHotWalletUpsert) SetTotalBalance(v float64) *SystemCryptoHotWalletUpsert {
	u.Set(systemcryptohotwallet.FieldTotalBalance, v)
	return u
}

// UpdateTotalBalance sets the "total_balance" field to the value that was provided on create.
func (u *SystemCryptoHotWalletUpsert) UpdateTotalBalance() *SystemCryptoHotWalletUpsert {
	u.SetExcluded(systemcryptohotwallet.FieldTotalBalance)
	return u
}

// AddTotalBalance adds v to the "total_balance" field.
func (u *SystemCryptoHotWalletUpsert) AddTotalBalance(v float64) *SystemCryptoHotWalletUpsert {
	u.Add(systemcryptohotwallet.FieldTotalBalance, v)
	return u
}

// SetBalance sets the "balance" field.
func (u *SystemCryptoHotWalletUpsert) SetBalance(v float64) *SystemCryptoHotWalletUpsert {
	u.Set(systemcryptohotwallet.FieldBalance, v)
	return u
}

// UpdateBalance sets the "balance" field to the value that was provided on create.
func (u *SystemCryptoHotWalletUpsert) UpdateBalance() *SystemCryptoHotWalletUpsert {
	u.SetExcluded(systemcryptohotwallet.FieldBalance)
	return u
}

// AddBalance adds v to the "balance" field.
func (u *SystemCryptoHotWalletUpsert) AddBalance(v float64) *SystemCryptoHotWalletUpsert {
	u.Add(systemcryptohotwallet.FieldBalance, v)
	return u
}

// SetStatus sets the "status" field.
func (u *SystemCryptoHotWalletUpsert) SetStatus(v int32) *SystemCryptoHotWalletUpsert {
	u.Set(systemcryptohotwallet.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *SystemCryptoHotWalletUpsert) UpdateStatus() *SystemCryptoHotWalletUpsert {
	u.SetExcluded(systemcryptohotwallet.FieldStatus)
	return u
}

// AddStatus adds v to the "status" field.
func (u *SystemCryptoHotWalletUpsert) AddStatus(v int32) *SystemCryptoHotWalletUpsert {
	u.Add(systemcryptohotwallet.FieldStatus, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.SystemCryptoHotWallet.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(systemcryptohotwallet.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *SystemCryptoHotWalletUpsertOne) UpdateNewValues() *SystemCryptoHotWalletUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(systemcryptohotwallet.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.SystemCryptoHotWallet.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *SystemCryptoHotWalletUpsertOne) Ignore() *SystemCryptoHotWalletUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SystemCryptoHotWalletUpsertOne) DoNothing() *SystemCryptoHotWalletUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SystemCryptoHotWalletCreate.OnConflict
// documentation for more info.
func (u *SystemCryptoHotWalletUpsertOne) Update(set func(*SystemCryptoHotWalletUpsert)) *SystemCryptoHotWalletUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SystemCryptoHotWalletUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *SystemCryptoHotWalletUpsertOne) SetCreatedAt(v time.Time) *SystemCryptoHotWalletUpsertOne {
	return u.Update(func(s *SystemCryptoHotWalletUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SystemCryptoHotWalletUpsertOne) UpdateCreatedAt() *SystemCryptoHotWalletUpsertOne {
	return u.Update(func(s *SystemCryptoHotWalletUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SystemCryptoHotWalletUpsertOne) SetUpdatedAt(v time.Time) *SystemCryptoHotWalletUpsertOne {
	return u.Update(func(s *SystemCryptoHotWalletUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SystemCryptoHotWalletUpsertOne) UpdateUpdatedAt() *SystemCryptoHotWalletUpsertOne {
	return u.Update(func(s *SystemCryptoHotWalletUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetCreatedBy sets the "created_by" field.
func (u *SystemCryptoHotWalletUpsertOne) SetCreatedBy(v string) *SystemCryptoHotWalletUpsertOne {
	return u.Update(func(s *SystemCryptoHotWalletUpsert) {
		s.SetCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *SystemCryptoHotWalletUpsertOne) UpdateCreatedBy() *SystemCryptoHotWalletUpsertOne {
	return u.Update(func(s *SystemCryptoHotWalletUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *SystemCryptoHotWalletUpsertOne) SetUpdatedBy(v string) *SystemCryptoHotWalletUpsertOne {
	return u.Update(func(s *SystemCryptoHotWalletUpsert) {
		s.SetUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *SystemCryptoHotWalletUpsertOne) UpdateUpdatedBy() *SystemCryptoHotWalletUpsertOne {
	return u.Update(func(s *SystemCryptoHotWalletUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetMerchantID sets the "merchant_id" field.
func (u *SystemCryptoHotWalletUpsertOne) SetMerchantID(v int64) *SystemCryptoHotWalletUpsertOne {
	return u.Update(func(s *SystemCryptoHotWalletUpsert) {
		s.SetMerchantID(v)
	})
}

// AddMerchantID adds v to the "merchant_id" field.
func (u *SystemCryptoHotWalletUpsertOne) AddMerchantID(v int64) *SystemCryptoHotWalletUpsertOne {
	return u.Update(func(s *SystemCryptoHotWalletUpsert) {
		s.AddMerchantID(v)
	})
}

// UpdateMerchantID sets the "merchant_id" field to the value that was provided on create.
func (u *SystemCryptoHotWalletUpsertOne) UpdateMerchantID() *SystemCryptoHotWalletUpsertOne {
	return u.Update(func(s *SystemCryptoHotWalletUpsert) {
		s.UpdateMerchantID()
	})
}

// SetCryptoType sets the "crypto_type" field.
func (u *SystemCryptoHotWalletUpsertOne) SetCryptoType(v int32) *SystemCryptoHotWalletUpsertOne {
	return u.Update(func(s *SystemCryptoHotWalletUpsert) {
		s.SetCryptoType(v)
	})
}

// AddCryptoType adds v to the "crypto_type" field.
func (u *SystemCryptoHotWalletUpsertOne) AddCryptoType(v int32) *SystemCryptoHotWalletUpsertOne {
	return u.Update(func(s *SystemCryptoHotWalletUpsert) {
		s.AddCryptoType(v)
	})
}

// UpdateCryptoType sets the "crypto_type" field to the value that was provided on create.
func (u *SystemCryptoHotWalletUpsertOne) UpdateCryptoType() *SystemCryptoHotWalletUpsertOne {
	return u.Update(func(s *SystemCryptoHotWalletUpsert) {
		s.UpdateCryptoType()
	})
}

// SetCryptoNetworkType sets the "crypto_network_type" field.
func (u *SystemCryptoHotWalletUpsertOne) SetCryptoNetworkType(v int32) *SystemCryptoHotWalletUpsertOne {
	return u.Update(func(s *SystemCryptoHotWalletUpsert) {
		s.SetCryptoNetworkType(v)
	})
}

// AddCryptoNetworkType adds v to the "crypto_network_type" field.
func (u *SystemCryptoHotWalletUpsertOne) AddCryptoNetworkType(v int32) *SystemCryptoHotWalletUpsertOne {
	return u.Update(func(s *SystemCryptoHotWalletUpsert) {
		s.AddCryptoNetworkType(v)
	})
}

// UpdateCryptoNetworkType sets the "crypto_network_type" field to the value that was provided on create.
func (u *SystemCryptoHotWalletUpsertOne) UpdateCryptoNetworkType() *SystemCryptoHotWalletUpsertOne {
	return u.Update(func(s *SystemCryptoHotWalletUpsert) {
		s.UpdateCryptoNetworkType()
	})
}

// SetAddress sets the "address" field.
func (u *SystemCryptoHotWalletUpsertOne) SetAddress(v string) *SystemCryptoHotWalletUpsertOne {
	return u.Update(func(s *SystemCryptoHotWalletUpsert) {
		s.SetAddress(v)
	})
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *SystemCryptoHotWalletUpsertOne) UpdateAddress() *SystemCryptoHotWalletUpsertOne {
	return u.Update(func(s *SystemCryptoHotWalletUpsert) {
		s.UpdateAddress()
	})
}

// SetTotalBalance sets the "total_balance" field.
func (u *SystemCryptoHotWalletUpsertOne) SetTotalBalance(v float64) *SystemCryptoHotWalletUpsertOne {
	return u.Update(func(s *SystemCryptoHotWalletUpsert) {
		s.SetTotalBalance(v)
	})
}

// AddTotalBalance adds v to the "total_balance" field.
func (u *SystemCryptoHotWalletUpsertOne) AddTotalBalance(v float64) *SystemCryptoHotWalletUpsertOne {
	return u.Update(func(s *SystemCryptoHotWalletUpsert) {
		s.AddTotalBalance(v)
	})
}

// UpdateTotalBalance sets the "total_balance" field to the value that was provided on create.
func (u *SystemCryptoHotWalletUpsertOne) UpdateTotalBalance() *SystemCryptoHotWalletUpsertOne {
	return u.Update(func(s *SystemCryptoHotWalletUpsert) {
		s.UpdateTotalBalance()
	})
}

// SetBalance sets the "balance" field.
func (u *SystemCryptoHotWalletUpsertOne) SetBalance(v float64) *SystemCryptoHotWalletUpsertOne {
	return u.Update(func(s *SystemCryptoHotWalletUpsert) {
		s.SetBalance(v)
	})
}

// AddBalance adds v to the "balance" field.
func (u *SystemCryptoHotWalletUpsertOne) AddBalance(v float64) *SystemCryptoHotWalletUpsertOne {
	return u.Update(func(s *SystemCryptoHotWalletUpsert) {
		s.AddBalance(v)
	})
}

// UpdateBalance sets the "balance" field to the value that was provided on create.
func (u *SystemCryptoHotWalletUpsertOne) UpdateBalance() *SystemCryptoHotWalletUpsertOne {
	return u.Update(func(s *SystemCryptoHotWalletUpsert) {
		s.UpdateBalance()
	})
}

// SetStatus sets the "status" field.
func (u *SystemCryptoHotWalletUpsertOne) SetStatus(v int32) *SystemCryptoHotWalletUpsertOne {
	return u.Update(func(s *SystemCryptoHotWalletUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *SystemCryptoHotWalletUpsertOne) AddStatus(v int32) *SystemCryptoHotWalletUpsertOne {
	return u.Update(func(s *SystemCryptoHotWalletUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *SystemCryptoHotWalletUpsertOne) UpdateStatus() *SystemCryptoHotWalletUpsertOne {
	return u.Update(func(s *SystemCryptoHotWalletUpsert) {
		s.UpdateStatus()
	})
}

// Exec executes the query.
func (u *SystemCryptoHotWalletUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SystemCryptoHotWalletCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SystemCryptoHotWalletUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SystemCryptoHotWalletUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SystemCryptoHotWalletUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SystemCryptoHotWalletCreateBulk is the builder for creating many SystemCryptoHotWallet entities in bulk.
type SystemCryptoHotWalletCreateBulk struct {
	config
	builders []*SystemCryptoHotWalletCreate
	conflict []sql.ConflictOption
}

// Save creates the SystemCryptoHotWallet entities in the database.
func (schwcb *SystemCryptoHotWalletCreateBulk) Save(ctx context.Context) ([]*SystemCryptoHotWallet, error) {
	specs := make([]*sqlgraph.CreateSpec, len(schwcb.builders))
	nodes := make([]*SystemCryptoHotWallet, len(schwcb.builders))
	mutators := make([]Mutator, len(schwcb.builders))
	for i := range schwcb.builders {
		func(i int, root context.Context) {
			builder := schwcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SystemCryptoHotWalletMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, schwcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = schwcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, schwcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, schwcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (schwcb *SystemCryptoHotWalletCreateBulk) SaveX(ctx context.Context) []*SystemCryptoHotWallet {
	v, err := schwcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (schwcb *SystemCryptoHotWalletCreateBulk) Exec(ctx context.Context) error {
	_, err := schwcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (schwcb *SystemCryptoHotWalletCreateBulk) ExecX(ctx context.Context) {
	if err := schwcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SystemCryptoHotWallet.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SystemCryptoHotWalletUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (schwcb *SystemCryptoHotWalletCreateBulk) OnConflict(opts ...sql.ConflictOption) *SystemCryptoHotWalletUpsertBulk {
	schwcb.conflict = opts
	return &SystemCryptoHotWalletUpsertBulk{
		create: schwcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SystemCryptoHotWallet.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (schwcb *SystemCryptoHotWalletCreateBulk) OnConflictColumns(columns ...string) *SystemCryptoHotWalletUpsertBulk {
	schwcb.conflict = append(schwcb.conflict, sql.ConflictColumns(columns...))
	return &SystemCryptoHotWalletUpsertBulk{
		create: schwcb,
	}
}

// SystemCryptoHotWalletUpsertBulk is the builder for "upsert"-ing
// a bulk of SystemCryptoHotWallet nodes.
type SystemCryptoHotWalletUpsertBulk struct {
	create *SystemCryptoHotWalletCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.SystemCryptoHotWallet.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(systemcryptohotwallet.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *SystemCryptoHotWalletUpsertBulk) UpdateNewValues() *SystemCryptoHotWalletUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(systemcryptohotwallet.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SystemCryptoHotWallet.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *SystemCryptoHotWalletUpsertBulk) Ignore() *SystemCryptoHotWalletUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SystemCryptoHotWalletUpsertBulk) DoNothing() *SystemCryptoHotWalletUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SystemCryptoHotWalletCreateBulk.OnConflict
// documentation for more info.
func (u *SystemCryptoHotWalletUpsertBulk) Update(set func(*SystemCryptoHotWalletUpsert)) *SystemCryptoHotWalletUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SystemCryptoHotWalletUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *SystemCryptoHotWalletUpsertBulk) SetCreatedAt(v time.Time) *SystemCryptoHotWalletUpsertBulk {
	return u.Update(func(s *SystemCryptoHotWalletUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SystemCryptoHotWalletUpsertBulk) UpdateCreatedAt() *SystemCryptoHotWalletUpsertBulk {
	return u.Update(func(s *SystemCryptoHotWalletUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SystemCryptoHotWalletUpsertBulk) SetUpdatedAt(v time.Time) *SystemCryptoHotWalletUpsertBulk {
	return u.Update(func(s *SystemCryptoHotWalletUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SystemCryptoHotWalletUpsertBulk) UpdateUpdatedAt() *SystemCryptoHotWalletUpsertBulk {
	return u.Update(func(s *SystemCryptoHotWalletUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetCreatedBy sets the "created_by" field.
func (u *SystemCryptoHotWalletUpsertBulk) SetCreatedBy(v string) *SystemCryptoHotWalletUpsertBulk {
	return u.Update(func(s *SystemCryptoHotWalletUpsert) {
		s.SetCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *SystemCryptoHotWalletUpsertBulk) UpdateCreatedBy() *SystemCryptoHotWalletUpsertBulk {
	return u.Update(func(s *SystemCryptoHotWalletUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *SystemCryptoHotWalletUpsertBulk) SetUpdatedBy(v string) *SystemCryptoHotWalletUpsertBulk {
	return u.Update(func(s *SystemCryptoHotWalletUpsert) {
		s.SetUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *SystemCryptoHotWalletUpsertBulk) UpdateUpdatedBy() *SystemCryptoHotWalletUpsertBulk {
	return u.Update(func(s *SystemCryptoHotWalletUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetMerchantID sets the "merchant_id" field.
func (u *SystemCryptoHotWalletUpsertBulk) SetMerchantID(v int64) *SystemCryptoHotWalletUpsertBulk {
	return u.Update(func(s *SystemCryptoHotWalletUpsert) {
		s.SetMerchantID(v)
	})
}

// AddMerchantID adds v to the "merchant_id" field.
func (u *SystemCryptoHotWalletUpsertBulk) AddMerchantID(v int64) *SystemCryptoHotWalletUpsertBulk {
	return u.Update(func(s *SystemCryptoHotWalletUpsert) {
		s.AddMerchantID(v)
	})
}

// UpdateMerchantID sets the "merchant_id" field to the value that was provided on create.
func (u *SystemCryptoHotWalletUpsertBulk) UpdateMerchantID() *SystemCryptoHotWalletUpsertBulk {
	return u.Update(func(s *SystemCryptoHotWalletUpsert) {
		s.UpdateMerchantID()
	})
}

// SetCryptoType sets the "crypto_type" field.
func (u *SystemCryptoHotWalletUpsertBulk) SetCryptoType(v int32) *SystemCryptoHotWalletUpsertBulk {
	return u.Update(func(s *SystemCryptoHotWalletUpsert) {
		s.SetCryptoType(v)
	})
}

// AddCryptoType adds v to the "crypto_type" field.
func (u *SystemCryptoHotWalletUpsertBulk) AddCryptoType(v int32) *SystemCryptoHotWalletUpsertBulk {
	return u.Update(func(s *SystemCryptoHotWalletUpsert) {
		s.AddCryptoType(v)
	})
}

// UpdateCryptoType sets the "crypto_type" field to the value that was provided on create.
func (u *SystemCryptoHotWalletUpsertBulk) UpdateCryptoType() *SystemCryptoHotWalletUpsertBulk {
	return u.Update(func(s *SystemCryptoHotWalletUpsert) {
		s.UpdateCryptoType()
	})
}

// SetCryptoNetworkType sets the "crypto_network_type" field.
func (u *SystemCryptoHotWalletUpsertBulk) SetCryptoNetworkType(v int32) *SystemCryptoHotWalletUpsertBulk {
	return u.Update(func(s *SystemCryptoHotWalletUpsert) {
		s.SetCryptoNetworkType(v)
	})
}

// AddCryptoNetworkType adds v to the "crypto_network_type" field.
func (u *SystemCryptoHotWalletUpsertBulk) AddCryptoNetworkType(v int32) *SystemCryptoHotWalletUpsertBulk {
	return u.Update(func(s *SystemCryptoHotWalletUpsert) {
		s.AddCryptoNetworkType(v)
	})
}

// UpdateCryptoNetworkType sets the "crypto_network_type" field to the value that was provided on create.
func (u *SystemCryptoHotWalletUpsertBulk) UpdateCryptoNetworkType() *SystemCryptoHotWalletUpsertBulk {
	return u.Update(func(s *SystemCryptoHotWalletUpsert) {
		s.UpdateCryptoNetworkType()
	})
}

// SetAddress sets the "address" field.
func (u *SystemCryptoHotWalletUpsertBulk) SetAddress(v string) *SystemCryptoHotWalletUpsertBulk {
	return u.Update(func(s *SystemCryptoHotWalletUpsert) {
		s.SetAddress(v)
	})
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *SystemCryptoHotWalletUpsertBulk) UpdateAddress() *SystemCryptoHotWalletUpsertBulk {
	return u.Update(func(s *SystemCryptoHotWalletUpsert) {
		s.UpdateAddress()
	})
}

// SetTotalBalance sets the "total_balance" field.
func (u *SystemCryptoHotWalletUpsertBulk) SetTotalBalance(v float64) *SystemCryptoHotWalletUpsertBulk {
	return u.Update(func(s *SystemCryptoHotWalletUpsert) {
		s.SetTotalBalance(v)
	})
}

// AddTotalBalance adds v to the "total_balance" field.
func (u *SystemCryptoHotWalletUpsertBulk) AddTotalBalance(v float64) *SystemCryptoHotWalletUpsertBulk {
	return u.Update(func(s *SystemCryptoHotWalletUpsert) {
		s.AddTotalBalance(v)
	})
}

// UpdateTotalBalance sets the "total_balance" field to the value that was provided on create.
func (u *SystemCryptoHotWalletUpsertBulk) UpdateTotalBalance() *SystemCryptoHotWalletUpsertBulk {
	return u.Update(func(s *SystemCryptoHotWalletUpsert) {
		s.UpdateTotalBalance()
	})
}

// SetBalance sets the "balance" field.
func (u *SystemCryptoHotWalletUpsertBulk) SetBalance(v float64) *SystemCryptoHotWalletUpsertBulk {
	return u.Update(func(s *SystemCryptoHotWalletUpsert) {
		s.SetBalance(v)
	})
}

// AddBalance adds v to the "balance" field.
func (u *SystemCryptoHotWalletUpsertBulk) AddBalance(v float64) *SystemCryptoHotWalletUpsertBulk {
	return u.Update(func(s *SystemCryptoHotWalletUpsert) {
		s.AddBalance(v)
	})
}

// UpdateBalance sets the "balance" field to the value that was provided on create.
func (u *SystemCryptoHotWalletUpsertBulk) UpdateBalance() *SystemCryptoHotWalletUpsertBulk {
	return u.Update(func(s *SystemCryptoHotWalletUpsert) {
		s.UpdateBalance()
	})
}

// SetStatus sets the "status" field.
func (u *SystemCryptoHotWalletUpsertBulk) SetStatus(v int32) *SystemCryptoHotWalletUpsertBulk {
	return u.Update(func(s *SystemCryptoHotWalletUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *SystemCryptoHotWalletUpsertBulk) AddStatus(v int32) *SystemCryptoHotWalletUpsertBulk {
	return u.Update(func(s *SystemCryptoHotWalletUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *SystemCryptoHotWalletUpsertBulk) UpdateStatus() *SystemCryptoHotWalletUpsertBulk {
	return u.Update(func(s *SystemCryptoHotWalletUpsert) {
		s.UpdateStatus()
	})
}

// Exec executes the query.
func (u *SystemCryptoHotWalletUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the SystemCryptoHotWalletCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SystemCryptoHotWalletCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SystemCryptoHotWalletUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
