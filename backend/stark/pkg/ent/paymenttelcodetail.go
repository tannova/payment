// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"gitlab.com/mcuc/monorepo/backend/stark/pkg/ent/payment"
	"gitlab.com/mcuc/monorepo/backend/stark/pkg/ent/paymenttelcodetail"
)

// PaymentTelcoDetail is the model entity for the PaymentTelcoDetail schema.
type PaymentTelcoDetail struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// TelcoName holds the value of the "telco_name" field.
	TelcoName int32 `json:"telco_name,omitempty"`
	// SerialNumber holds the value of the "serial_number" field.
	SerialNumber string `json:"serial_number,omitempty"`
	// CardID holds the value of the "card_id" field.
	CardID string `json:"card_id,omitempty"`
	// ChargedAmount holds the value of the "charged_amount" field.
	ChargedAmount uint64 `json:"charged_amount,omitempty"`
	// Amount holds the value of the "amount" field.
	Amount uint64 `json:"amount,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PaymentTelcoDetailQuery when eager-loading is set.
	Edges                        PaymentTelcoDetailEdges `json:"edges"`
	payment_payment_telco_detail *int64
}

// PaymentTelcoDetailEdges holds the relations/edges for other nodes in the graph.
type PaymentTelcoDetailEdges struct {
	// Payment holds the value of the payment edge.
	Payment *Payment `json:"payment,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// PaymentOrErr returns the Payment value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PaymentTelcoDetailEdges) PaymentOrErr() (*Payment, error) {
	if e.loadedTypes[0] {
		if e.Payment == nil {
			// The edge payment was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: payment.Label}
		}
		return e.Payment, nil
	}
	return nil, &NotLoadedError{edge: "payment"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PaymentTelcoDetail) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case paymenttelcodetail.FieldID, paymenttelcodetail.FieldTelcoName, paymenttelcodetail.FieldChargedAmount, paymenttelcodetail.FieldAmount:
			values[i] = new(sql.NullInt64)
		case paymenttelcodetail.FieldCreatedBy, paymenttelcodetail.FieldUpdatedBy, paymenttelcodetail.FieldSerialNumber, paymenttelcodetail.FieldCardID:
			values[i] = new(sql.NullString)
		case paymenttelcodetail.FieldCreatedAt, paymenttelcodetail.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case paymenttelcodetail.ForeignKeys[0]: // payment_payment_telco_detail
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type PaymentTelcoDetail", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PaymentTelcoDetail fields.
func (ptd *PaymentTelcoDetail) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case paymenttelcodetail.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ptd.ID = int64(value.Int64)
		case paymenttelcodetail.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ptd.CreatedAt = value.Time
			}
		case paymenttelcodetail.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ptd.UpdatedAt = value.Time
			}
		case paymenttelcodetail.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				ptd.CreatedBy = value.String
			}
		case paymenttelcodetail.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				ptd.UpdatedBy = value.String
			}
		case paymenttelcodetail.FieldTelcoName:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field telco_name", values[i])
			} else if value.Valid {
				ptd.TelcoName = int32(value.Int64)
			}
		case paymenttelcodetail.FieldSerialNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field serial_number", values[i])
			} else if value.Valid {
				ptd.SerialNumber = value.String
			}
		case paymenttelcodetail.FieldCardID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field card_id", values[i])
			} else if value.Valid {
				ptd.CardID = value.String
			}
		case paymenttelcodetail.FieldChargedAmount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field charged_amount", values[i])
			} else if value.Valid {
				ptd.ChargedAmount = uint64(value.Int64)
			}
		case paymenttelcodetail.FieldAmount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value.Valid {
				ptd.Amount = uint64(value.Int64)
			}
		case paymenttelcodetail.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field payment_payment_telco_detail", value)
			} else if value.Valid {
				ptd.payment_payment_telco_detail = new(int64)
				*ptd.payment_payment_telco_detail = int64(value.Int64)
			}
		}
	}
	return nil
}

// QueryPayment queries the "payment" edge of the PaymentTelcoDetail entity.
func (ptd *PaymentTelcoDetail) QueryPayment() *PaymentQuery {
	return (&PaymentTelcoDetailClient{config: ptd.config}).QueryPayment(ptd)
}

// Update returns a builder for updating this PaymentTelcoDetail.
// Note that you need to call PaymentTelcoDetail.Unwrap() before calling this method if this PaymentTelcoDetail
// was returned from a transaction, and the transaction was committed or rolled back.
func (ptd *PaymentTelcoDetail) Update() *PaymentTelcoDetailUpdateOne {
	return (&PaymentTelcoDetailClient{config: ptd.config}).UpdateOne(ptd)
}

// Unwrap unwraps the PaymentTelcoDetail entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ptd *PaymentTelcoDetail) Unwrap() *PaymentTelcoDetail {
	tx, ok := ptd.config.driver.(*txDriver)
	if !ok {
		panic("ent: PaymentTelcoDetail is not a transactional entity")
	}
	ptd.config.driver = tx.drv
	return ptd
}

// String implements the fmt.Stringer.
func (ptd *PaymentTelcoDetail) String() string {
	var builder strings.Builder
	builder.WriteString("PaymentTelcoDetail(")
	builder.WriteString(fmt.Sprintf("id=%v", ptd.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(ptd.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(ptd.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", created_by=")
	builder.WriteString(ptd.CreatedBy)
	builder.WriteString(", updated_by=")
	builder.WriteString(ptd.UpdatedBy)
	builder.WriteString(", telco_name=")
	builder.WriteString(fmt.Sprintf("%v", ptd.TelcoName))
	builder.WriteString(", serial_number=")
	builder.WriteString(ptd.SerialNumber)
	builder.WriteString(", card_id=")
	builder.WriteString(ptd.CardID)
	builder.WriteString(", charged_amount=")
	builder.WriteString(fmt.Sprintf("%v", ptd.ChargedAmount))
	builder.WriteString(", amount=")
	builder.WriteString(fmt.Sprintf("%v", ptd.Amount))
	builder.WriteByte(')')
	return builder.String()
}

// PaymentTelcoDetails is a parsable slice of PaymentTelcoDetail.
type PaymentTelcoDetails []*PaymentTelcoDetail

func (ptd PaymentTelcoDetails) config(cfg config) {
	for _i := range ptd {
		ptd[_i].config = cfg
	}
}
