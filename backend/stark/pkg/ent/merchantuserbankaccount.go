// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"gitlab.com/mcuc/monorepo/backend/stark/pkg/ent/merchantuserbankaccount"
)

// MerchantUserBankAccount is the model entity for the MerchantUserBankAccount schema.
type MerchantUserBankAccount struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// BankName holds the value of the "bank_name" field.
	BankName int32 `json:"bank_name,omitempty"`
	// AccountNumber holds the value of the "account_number" field.
	AccountNumber string `json:"account_number,omitempty"`
	// AccountName holds the value of the "account_name" field.
	AccountName string `json:"account_name,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MerchantUserBankAccount) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case merchantuserbankaccount.FieldID, merchantuserbankaccount.FieldBankName:
			values[i] = new(sql.NullInt64)
		case merchantuserbankaccount.FieldCreatedBy, merchantuserbankaccount.FieldUpdatedBy, merchantuserbankaccount.FieldAccountNumber, merchantuserbankaccount.FieldAccountName:
			values[i] = new(sql.NullString)
		case merchantuserbankaccount.FieldCreatedAt, merchantuserbankaccount.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type MerchantUserBankAccount", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MerchantUserBankAccount fields.
func (muba *MerchantUserBankAccount) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case merchantuserbankaccount.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			muba.ID = int64(value.Int64)
		case merchantuserbankaccount.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				muba.CreatedAt = value.Time
			}
		case merchantuserbankaccount.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				muba.UpdatedAt = value.Time
			}
		case merchantuserbankaccount.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				muba.CreatedBy = value.String
			}
		case merchantuserbankaccount.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				muba.UpdatedBy = value.String
			}
		case merchantuserbankaccount.FieldBankName:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field bank_name", values[i])
			} else if value.Valid {
				muba.BankName = int32(value.Int64)
			}
		case merchantuserbankaccount.FieldAccountNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field account_number", values[i])
			} else if value.Valid {
				muba.AccountNumber = value.String
			}
		case merchantuserbankaccount.FieldAccountName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field account_name", values[i])
			} else if value.Valid {
				muba.AccountName = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this MerchantUserBankAccount.
// Note that you need to call MerchantUserBankAccount.Unwrap() before calling this method if this MerchantUserBankAccount
// was returned from a transaction, and the transaction was committed or rolled back.
func (muba *MerchantUserBankAccount) Update() *MerchantUserBankAccountUpdateOne {
	return (&MerchantUserBankAccountClient{config: muba.config}).UpdateOne(muba)
}

// Unwrap unwraps the MerchantUserBankAccount entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (muba *MerchantUserBankAccount) Unwrap() *MerchantUserBankAccount {
	tx, ok := muba.config.driver.(*txDriver)
	if !ok {
		panic("ent: MerchantUserBankAccount is not a transactional entity")
	}
	muba.config.driver = tx.drv
	return muba
}

// String implements the fmt.Stringer.
func (muba *MerchantUserBankAccount) String() string {
	var builder strings.Builder
	builder.WriteString("MerchantUserBankAccount(")
	builder.WriteString(fmt.Sprintf("id=%v", muba.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(muba.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(muba.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", created_by=")
	builder.WriteString(muba.CreatedBy)
	builder.WriteString(", updated_by=")
	builder.WriteString(muba.UpdatedBy)
	builder.WriteString(", bank_name=")
	builder.WriteString(fmt.Sprintf("%v", muba.BankName))
	builder.WriteString(", account_number=")
	builder.WriteString(muba.AccountNumber)
	builder.WriteString(", account_name=")
	builder.WriteString(muba.AccountName)
	builder.WriteByte(')')
	return builder.String()
}

// MerchantUserBankAccounts is a parsable slice of MerchantUserBankAccount.
type MerchantUserBankAccounts []*MerchantUserBankAccount

func (muba MerchantUserBankAccounts) config(cfg config) {
	for _i := range muba {
		muba[_i].config = cfg
	}
}
