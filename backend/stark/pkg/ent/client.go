// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"gitlab.com/mcuc/monorepo/backend/stark/pkg/ent/migrate"

	"gitlab.com/mcuc/monorepo/backend/stark/pkg/ent/cryptowallet"
	"gitlab.com/mcuc/monorepo/backend/stark/pkg/ent/merchantuserbankaccount"
	"gitlab.com/mcuc/monorepo/backend/stark/pkg/ent/payment"
	"gitlab.com/mcuc/monorepo/backend/stark/pkg/ent/paymentbankingdetail"
	"gitlab.com/mcuc/monorepo/backend/stark/pkg/ent/paymentcryptodetail"
	"gitlab.com/mcuc/monorepo/backend/stark/pkg/ent/paymentewalletdetail"
	"gitlab.com/mcuc/monorepo/backend/stark/pkg/ent/paymenttelcodetail"
	"gitlab.com/mcuc/monorepo/backend/stark/pkg/ent/revision"
	"gitlab.com/mcuc/monorepo/backend/stark/pkg/ent/setting"
	"gitlab.com/mcuc/monorepo/backend/stark/pkg/ent/systembankaccount"
	"gitlab.com/mcuc/monorepo/backend/stark/pkg/ent/systemcryptohotwallet"
	"gitlab.com/mcuc/monorepo/backend/stark/pkg/ent/systemewallet"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// CryptoWallet is the client for interacting with the CryptoWallet builders.
	CryptoWallet *CryptoWalletClient
	// MerchantUserBankAccount is the client for interacting with the MerchantUserBankAccount builders.
	MerchantUserBankAccount *MerchantUserBankAccountClient
	// Payment is the client for interacting with the Payment builders.
	Payment *PaymentClient
	// PaymentBankingDetail is the client for interacting with the PaymentBankingDetail builders.
	PaymentBankingDetail *PaymentBankingDetailClient
	// PaymentCryptoDetail is the client for interacting with the PaymentCryptoDetail builders.
	PaymentCryptoDetail *PaymentCryptoDetailClient
	// PaymentEWalletDetail is the client for interacting with the PaymentEWalletDetail builders.
	PaymentEWalletDetail *PaymentEWalletDetailClient
	// PaymentTelcoDetail is the client for interacting with the PaymentTelcoDetail builders.
	PaymentTelcoDetail *PaymentTelcoDetailClient
	// Revision is the client for interacting with the Revision builders.
	Revision *RevisionClient
	// Setting is the client for interacting with the Setting builders.
	Setting *SettingClient
	// SystemBankAccount is the client for interacting with the SystemBankAccount builders.
	SystemBankAccount *SystemBankAccountClient
	// SystemCryptoHotWallet is the client for interacting with the SystemCryptoHotWallet builders.
	SystemCryptoHotWallet *SystemCryptoHotWalletClient
	// SystemEWallet is the client for interacting with the SystemEWallet builders.
	SystemEWallet *SystemEWalletClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.CryptoWallet = NewCryptoWalletClient(c.config)
	c.MerchantUserBankAccount = NewMerchantUserBankAccountClient(c.config)
	c.Payment = NewPaymentClient(c.config)
	c.PaymentBankingDetail = NewPaymentBankingDetailClient(c.config)
	c.PaymentCryptoDetail = NewPaymentCryptoDetailClient(c.config)
	c.PaymentEWalletDetail = NewPaymentEWalletDetailClient(c.config)
	c.PaymentTelcoDetail = NewPaymentTelcoDetailClient(c.config)
	c.Revision = NewRevisionClient(c.config)
	c.Setting = NewSettingClient(c.config)
	c.SystemBankAccount = NewSystemBankAccountClient(c.config)
	c.SystemCryptoHotWallet = NewSystemCryptoHotWalletClient(c.config)
	c.SystemEWallet = NewSystemEWalletClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                     ctx,
		config:                  cfg,
		CryptoWallet:            NewCryptoWalletClient(cfg),
		MerchantUserBankAccount: NewMerchantUserBankAccountClient(cfg),
		Payment:                 NewPaymentClient(cfg),
		PaymentBankingDetail:    NewPaymentBankingDetailClient(cfg),
		PaymentCryptoDetail:     NewPaymentCryptoDetailClient(cfg),
		PaymentEWalletDetail:    NewPaymentEWalletDetailClient(cfg),
		PaymentTelcoDetail:      NewPaymentTelcoDetailClient(cfg),
		Revision:                NewRevisionClient(cfg),
		Setting:                 NewSettingClient(cfg),
		SystemBankAccount:       NewSystemBankAccountClient(cfg),
		SystemCryptoHotWallet:   NewSystemCryptoHotWalletClient(cfg),
		SystemEWallet:           NewSystemEWalletClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		config:                  cfg,
		CryptoWallet:            NewCryptoWalletClient(cfg),
		MerchantUserBankAccount: NewMerchantUserBankAccountClient(cfg),
		Payment:                 NewPaymentClient(cfg),
		PaymentBankingDetail:    NewPaymentBankingDetailClient(cfg),
		PaymentCryptoDetail:     NewPaymentCryptoDetailClient(cfg),
		PaymentEWalletDetail:    NewPaymentEWalletDetailClient(cfg),
		PaymentTelcoDetail:      NewPaymentTelcoDetailClient(cfg),
		Revision:                NewRevisionClient(cfg),
		Setting:                 NewSettingClient(cfg),
		SystemBankAccount:       NewSystemBankAccountClient(cfg),
		SystemCryptoHotWallet:   NewSystemCryptoHotWalletClient(cfg),
		SystemEWallet:           NewSystemEWalletClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		CryptoWallet.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.CryptoWallet.Use(hooks...)
	c.MerchantUserBankAccount.Use(hooks...)
	c.Payment.Use(hooks...)
	c.PaymentBankingDetail.Use(hooks...)
	c.PaymentCryptoDetail.Use(hooks...)
	c.PaymentEWalletDetail.Use(hooks...)
	c.PaymentTelcoDetail.Use(hooks...)
	c.Revision.Use(hooks...)
	c.Setting.Use(hooks...)
	c.SystemBankAccount.Use(hooks...)
	c.SystemCryptoHotWallet.Use(hooks...)
	c.SystemEWallet.Use(hooks...)
}

// CryptoWalletClient is a client for the CryptoWallet schema.
type CryptoWalletClient struct {
	config
}

// NewCryptoWalletClient returns a client for the CryptoWallet from the given config.
func NewCryptoWalletClient(c config) *CryptoWalletClient {
	return &CryptoWalletClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `cryptowallet.Hooks(f(g(h())))`.
func (c *CryptoWalletClient) Use(hooks ...Hook) {
	c.hooks.CryptoWallet = append(c.hooks.CryptoWallet, hooks...)
}

// Create returns a create builder for CryptoWallet.
func (c *CryptoWalletClient) Create() *CryptoWalletCreate {
	mutation := newCryptoWalletMutation(c.config, OpCreate)
	return &CryptoWalletCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CryptoWallet entities.
func (c *CryptoWalletClient) CreateBulk(builders ...*CryptoWalletCreate) *CryptoWalletCreateBulk {
	return &CryptoWalletCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CryptoWallet.
func (c *CryptoWalletClient) Update() *CryptoWalletUpdate {
	mutation := newCryptoWalletMutation(c.config, OpUpdate)
	return &CryptoWalletUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CryptoWalletClient) UpdateOne(cw *CryptoWallet) *CryptoWalletUpdateOne {
	mutation := newCryptoWalletMutation(c.config, OpUpdateOne, withCryptoWallet(cw))
	return &CryptoWalletUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CryptoWalletClient) UpdateOneID(id int64) *CryptoWalletUpdateOne {
	mutation := newCryptoWalletMutation(c.config, OpUpdateOne, withCryptoWalletID(id))
	return &CryptoWalletUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CryptoWallet.
func (c *CryptoWalletClient) Delete() *CryptoWalletDelete {
	mutation := newCryptoWalletMutation(c.config, OpDelete)
	return &CryptoWalletDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CryptoWalletClient) DeleteOne(cw *CryptoWallet) *CryptoWalletDeleteOne {
	return c.DeleteOneID(cw.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CryptoWalletClient) DeleteOneID(id int64) *CryptoWalletDeleteOne {
	builder := c.Delete().Where(cryptowallet.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CryptoWalletDeleteOne{builder}
}

// Query returns a query builder for CryptoWallet.
func (c *CryptoWalletClient) Query() *CryptoWalletQuery {
	return &CryptoWalletQuery{
		config: c.config,
	}
}

// Get returns a CryptoWallet entity by its id.
func (c *CryptoWalletClient) Get(ctx context.Context, id int64) (*CryptoWallet, error) {
	return c.Query().Where(cryptowallet.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CryptoWalletClient) GetX(ctx context.Context, id int64) *CryptoWallet {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CryptoWalletClient) Hooks() []Hook {
	return c.hooks.CryptoWallet
}

// MerchantUserBankAccountClient is a client for the MerchantUserBankAccount schema.
type MerchantUserBankAccountClient struct {
	config
}

// NewMerchantUserBankAccountClient returns a client for the MerchantUserBankAccount from the given config.
func NewMerchantUserBankAccountClient(c config) *MerchantUserBankAccountClient {
	return &MerchantUserBankAccountClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `merchantuserbankaccount.Hooks(f(g(h())))`.
func (c *MerchantUserBankAccountClient) Use(hooks ...Hook) {
	c.hooks.MerchantUserBankAccount = append(c.hooks.MerchantUserBankAccount, hooks...)
}

// Create returns a create builder for MerchantUserBankAccount.
func (c *MerchantUserBankAccountClient) Create() *MerchantUserBankAccountCreate {
	mutation := newMerchantUserBankAccountMutation(c.config, OpCreate)
	return &MerchantUserBankAccountCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of MerchantUserBankAccount entities.
func (c *MerchantUserBankAccountClient) CreateBulk(builders ...*MerchantUserBankAccountCreate) *MerchantUserBankAccountCreateBulk {
	return &MerchantUserBankAccountCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for MerchantUserBankAccount.
func (c *MerchantUserBankAccountClient) Update() *MerchantUserBankAccountUpdate {
	mutation := newMerchantUserBankAccountMutation(c.config, OpUpdate)
	return &MerchantUserBankAccountUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MerchantUserBankAccountClient) UpdateOne(muba *MerchantUserBankAccount) *MerchantUserBankAccountUpdateOne {
	mutation := newMerchantUserBankAccountMutation(c.config, OpUpdateOne, withMerchantUserBankAccount(muba))
	return &MerchantUserBankAccountUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MerchantUserBankAccountClient) UpdateOneID(id int64) *MerchantUserBankAccountUpdateOne {
	mutation := newMerchantUserBankAccountMutation(c.config, OpUpdateOne, withMerchantUserBankAccountID(id))
	return &MerchantUserBankAccountUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for MerchantUserBankAccount.
func (c *MerchantUserBankAccountClient) Delete() *MerchantUserBankAccountDelete {
	mutation := newMerchantUserBankAccountMutation(c.config, OpDelete)
	return &MerchantUserBankAccountDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *MerchantUserBankAccountClient) DeleteOne(muba *MerchantUserBankAccount) *MerchantUserBankAccountDeleteOne {
	return c.DeleteOneID(muba.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *MerchantUserBankAccountClient) DeleteOneID(id int64) *MerchantUserBankAccountDeleteOne {
	builder := c.Delete().Where(merchantuserbankaccount.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MerchantUserBankAccountDeleteOne{builder}
}

// Query returns a query builder for MerchantUserBankAccount.
func (c *MerchantUserBankAccountClient) Query() *MerchantUserBankAccountQuery {
	return &MerchantUserBankAccountQuery{
		config: c.config,
	}
}

// Get returns a MerchantUserBankAccount entity by its id.
func (c *MerchantUserBankAccountClient) Get(ctx context.Context, id int64) (*MerchantUserBankAccount, error) {
	return c.Query().Where(merchantuserbankaccount.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MerchantUserBankAccountClient) GetX(ctx context.Context, id int64) *MerchantUserBankAccount {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *MerchantUserBankAccountClient) Hooks() []Hook {
	return c.hooks.MerchantUserBankAccount
}

// PaymentClient is a client for the Payment schema.
type PaymentClient struct {
	config
}

// NewPaymentClient returns a client for the Payment from the given config.
func NewPaymentClient(c config) *PaymentClient {
	return &PaymentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `payment.Hooks(f(g(h())))`.
func (c *PaymentClient) Use(hooks ...Hook) {
	c.hooks.Payment = append(c.hooks.Payment, hooks...)
}

// Create returns a create builder for Payment.
func (c *PaymentClient) Create() *PaymentCreate {
	mutation := newPaymentMutation(c.config, OpCreate)
	return &PaymentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Payment entities.
func (c *PaymentClient) CreateBulk(builders ...*PaymentCreate) *PaymentCreateBulk {
	return &PaymentCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Payment.
func (c *PaymentClient) Update() *PaymentUpdate {
	mutation := newPaymentMutation(c.config, OpUpdate)
	return &PaymentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PaymentClient) UpdateOne(pa *Payment) *PaymentUpdateOne {
	mutation := newPaymentMutation(c.config, OpUpdateOne, withPayment(pa))
	return &PaymentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PaymentClient) UpdateOneID(id int64) *PaymentUpdateOne {
	mutation := newPaymentMutation(c.config, OpUpdateOne, withPaymentID(id))
	return &PaymentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Payment.
func (c *PaymentClient) Delete() *PaymentDelete {
	mutation := newPaymentMutation(c.config, OpDelete)
	return &PaymentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PaymentClient) DeleteOne(pa *Payment) *PaymentDeleteOne {
	return c.DeleteOneID(pa.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PaymentClient) DeleteOneID(id int64) *PaymentDeleteOne {
	builder := c.Delete().Where(payment.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PaymentDeleteOne{builder}
}

// Query returns a query builder for Payment.
func (c *PaymentClient) Query() *PaymentQuery {
	return &PaymentQuery{
		config: c.config,
	}
}

// Get returns a Payment entity by its id.
func (c *PaymentClient) Get(ctx context.Context, id int64) (*Payment, error) {
	return c.Query().Where(payment.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PaymentClient) GetX(ctx context.Context, id int64) *Payment {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPaymentBankingDetail queries the payment_banking_detail edge of a Payment.
func (c *PaymentClient) QueryPaymentBankingDetail(pa *Payment) *PaymentBankingDetailQuery {
	query := &PaymentBankingDetailQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(payment.Table, payment.FieldID, id),
			sqlgraph.To(paymentbankingdetail.Table, paymentbankingdetail.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, payment.PaymentBankingDetailTable, payment.PaymentBankingDetailColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPaymentTelcoDetail queries the payment_telco_detail edge of a Payment.
func (c *PaymentClient) QueryPaymentTelcoDetail(pa *Payment) *PaymentTelcoDetailQuery {
	query := &PaymentTelcoDetailQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(payment.Table, payment.FieldID, id),
			sqlgraph.To(paymenttelcodetail.Table, paymenttelcodetail.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, payment.PaymentTelcoDetailTable, payment.PaymentTelcoDetailColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPaymentEWalletDetail queries the payment_e_wallet_detail edge of a Payment.
func (c *PaymentClient) QueryPaymentEWalletDetail(pa *Payment) *PaymentEWalletDetailQuery {
	query := &PaymentEWalletDetailQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(payment.Table, payment.FieldID, id),
			sqlgraph.To(paymentewalletdetail.Table, paymentewalletdetail.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, payment.PaymentEWalletDetailTable, payment.PaymentEWalletDetailColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPaymentCryptoDetail queries the payment_crypto_detail edge of a Payment.
func (c *PaymentClient) QueryPaymentCryptoDetail(pa *Payment) *PaymentCryptoDetailQuery {
	query := &PaymentCryptoDetailQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(payment.Table, payment.FieldID, id),
			sqlgraph.To(paymentcryptodetail.Table, paymentcryptodetail.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, payment.PaymentCryptoDetailTable, payment.PaymentCryptoDetailColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRevisions queries the revisions edge of a Payment.
func (c *PaymentClient) QueryRevisions(pa *Payment) *RevisionQuery {
	query := &RevisionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(payment.Table, payment.FieldID, id),
			sqlgraph.To(revision.Table, revision.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, payment.RevisionsTable, payment.RevisionsColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PaymentClient) Hooks() []Hook {
	return c.hooks.Payment
}

// PaymentBankingDetailClient is a client for the PaymentBankingDetail schema.
type PaymentBankingDetailClient struct {
	config
}

// NewPaymentBankingDetailClient returns a client for the PaymentBankingDetail from the given config.
func NewPaymentBankingDetailClient(c config) *PaymentBankingDetailClient {
	return &PaymentBankingDetailClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `paymentbankingdetail.Hooks(f(g(h())))`.
func (c *PaymentBankingDetailClient) Use(hooks ...Hook) {
	c.hooks.PaymentBankingDetail = append(c.hooks.PaymentBankingDetail, hooks...)
}

// Create returns a create builder for PaymentBankingDetail.
func (c *PaymentBankingDetailClient) Create() *PaymentBankingDetailCreate {
	mutation := newPaymentBankingDetailMutation(c.config, OpCreate)
	return &PaymentBankingDetailCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PaymentBankingDetail entities.
func (c *PaymentBankingDetailClient) CreateBulk(builders ...*PaymentBankingDetailCreate) *PaymentBankingDetailCreateBulk {
	return &PaymentBankingDetailCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PaymentBankingDetail.
func (c *PaymentBankingDetailClient) Update() *PaymentBankingDetailUpdate {
	mutation := newPaymentBankingDetailMutation(c.config, OpUpdate)
	return &PaymentBankingDetailUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PaymentBankingDetailClient) UpdateOne(pbd *PaymentBankingDetail) *PaymentBankingDetailUpdateOne {
	mutation := newPaymentBankingDetailMutation(c.config, OpUpdateOne, withPaymentBankingDetail(pbd))
	return &PaymentBankingDetailUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PaymentBankingDetailClient) UpdateOneID(id int64) *PaymentBankingDetailUpdateOne {
	mutation := newPaymentBankingDetailMutation(c.config, OpUpdateOne, withPaymentBankingDetailID(id))
	return &PaymentBankingDetailUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PaymentBankingDetail.
func (c *PaymentBankingDetailClient) Delete() *PaymentBankingDetailDelete {
	mutation := newPaymentBankingDetailMutation(c.config, OpDelete)
	return &PaymentBankingDetailDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PaymentBankingDetailClient) DeleteOne(pbd *PaymentBankingDetail) *PaymentBankingDetailDeleteOne {
	return c.DeleteOneID(pbd.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PaymentBankingDetailClient) DeleteOneID(id int64) *PaymentBankingDetailDeleteOne {
	builder := c.Delete().Where(paymentbankingdetail.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PaymentBankingDetailDeleteOne{builder}
}

// Query returns a query builder for PaymentBankingDetail.
func (c *PaymentBankingDetailClient) Query() *PaymentBankingDetailQuery {
	return &PaymentBankingDetailQuery{
		config: c.config,
	}
}

// Get returns a PaymentBankingDetail entity by its id.
func (c *PaymentBankingDetailClient) Get(ctx context.Context, id int64) (*PaymentBankingDetail, error) {
	return c.Query().Where(paymentbankingdetail.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PaymentBankingDetailClient) GetX(ctx context.Context, id int64) *PaymentBankingDetail {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPayment queries the payment edge of a PaymentBankingDetail.
func (c *PaymentBankingDetailClient) QueryPayment(pbd *PaymentBankingDetail) *PaymentQuery {
	query := &PaymentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pbd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(paymentbankingdetail.Table, paymentbankingdetail.FieldID, id),
			sqlgraph.To(payment.Table, payment.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, paymentbankingdetail.PaymentTable, paymentbankingdetail.PaymentColumn),
		)
		fromV = sqlgraph.Neighbors(pbd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PaymentBankingDetailClient) Hooks() []Hook {
	return c.hooks.PaymentBankingDetail
}

// PaymentCryptoDetailClient is a client for the PaymentCryptoDetail schema.
type PaymentCryptoDetailClient struct {
	config
}

// NewPaymentCryptoDetailClient returns a client for the PaymentCryptoDetail from the given config.
func NewPaymentCryptoDetailClient(c config) *PaymentCryptoDetailClient {
	return &PaymentCryptoDetailClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `paymentcryptodetail.Hooks(f(g(h())))`.
func (c *PaymentCryptoDetailClient) Use(hooks ...Hook) {
	c.hooks.PaymentCryptoDetail = append(c.hooks.PaymentCryptoDetail, hooks...)
}

// Create returns a create builder for PaymentCryptoDetail.
func (c *PaymentCryptoDetailClient) Create() *PaymentCryptoDetailCreate {
	mutation := newPaymentCryptoDetailMutation(c.config, OpCreate)
	return &PaymentCryptoDetailCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PaymentCryptoDetail entities.
func (c *PaymentCryptoDetailClient) CreateBulk(builders ...*PaymentCryptoDetailCreate) *PaymentCryptoDetailCreateBulk {
	return &PaymentCryptoDetailCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PaymentCryptoDetail.
func (c *PaymentCryptoDetailClient) Update() *PaymentCryptoDetailUpdate {
	mutation := newPaymentCryptoDetailMutation(c.config, OpUpdate)
	return &PaymentCryptoDetailUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PaymentCryptoDetailClient) UpdateOne(pcd *PaymentCryptoDetail) *PaymentCryptoDetailUpdateOne {
	mutation := newPaymentCryptoDetailMutation(c.config, OpUpdateOne, withPaymentCryptoDetail(pcd))
	return &PaymentCryptoDetailUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PaymentCryptoDetailClient) UpdateOneID(id int64) *PaymentCryptoDetailUpdateOne {
	mutation := newPaymentCryptoDetailMutation(c.config, OpUpdateOne, withPaymentCryptoDetailID(id))
	return &PaymentCryptoDetailUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PaymentCryptoDetail.
func (c *PaymentCryptoDetailClient) Delete() *PaymentCryptoDetailDelete {
	mutation := newPaymentCryptoDetailMutation(c.config, OpDelete)
	return &PaymentCryptoDetailDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PaymentCryptoDetailClient) DeleteOne(pcd *PaymentCryptoDetail) *PaymentCryptoDetailDeleteOne {
	return c.DeleteOneID(pcd.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PaymentCryptoDetailClient) DeleteOneID(id int64) *PaymentCryptoDetailDeleteOne {
	builder := c.Delete().Where(paymentcryptodetail.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PaymentCryptoDetailDeleteOne{builder}
}

// Query returns a query builder for PaymentCryptoDetail.
func (c *PaymentCryptoDetailClient) Query() *PaymentCryptoDetailQuery {
	return &PaymentCryptoDetailQuery{
		config: c.config,
	}
}

// Get returns a PaymentCryptoDetail entity by its id.
func (c *PaymentCryptoDetailClient) Get(ctx context.Context, id int64) (*PaymentCryptoDetail, error) {
	return c.Query().Where(paymentcryptodetail.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PaymentCryptoDetailClient) GetX(ctx context.Context, id int64) *PaymentCryptoDetail {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPayment queries the payment edge of a PaymentCryptoDetail.
func (c *PaymentCryptoDetailClient) QueryPayment(pcd *PaymentCryptoDetail) *PaymentQuery {
	query := &PaymentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pcd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(paymentcryptodetail.Table, paymentcryptodetail.FieldID, id),
			sqlgraph.To(payment.Table, payment.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, paymentcryptodetail.PaymentTable, paymentcryptodetail.PaymentColumn),
		)
		fromV = sqlgraph.Neighbors(pcd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PaymentCryptoDetailClient) Hooks() []Hook {
	return c.hooks.PaymentCryptoDetail
}

// PaymentEWalletDetailClient is a client for the PaymentEWalletDetail schema.
type PaymentEWalletDetailClient struct {
	config
}

// NewPaymentEWalletDetailClient returns a client for the PaymentEWalletDetail from the given config.
func NewPaymentEWalletDetailClient(c config) *PaymentEWalletDetailClient {
	return &PaymentEWalletDetailClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `paymentewalletdetail.Hooks(f(g(h())))`.
func (c *PaymentEWalletDetailClient) Use(hooks ...Hook) {
	c.hooks.PaymentEWalletDetail = append(c.hooks.PaymentEWalletDetail, hooks...)
}

// Create returns a create builder for PaymentEWalletDetail.
func (c *PaymentEWalletDetailClient) Create() *PaymentEWalletDetailCreate {
	mutation := newPaymentEWalletDetailMutation(c.config, OpCreate)
	return &PaymentEWalletDetailCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PaymentEWalletDetail entities.
func (c *PaymentEWalletDetailClient) CreateBulk(builders ...*PaymentEWalletDetailCreate) *PaymentEWalletDetailCreateBulk {
	return &PaymentEWalletDetailCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PaymentEWalletDetail.
func (c *PaymentEWalletDetailClient) Update() *PaymentEWalletDetailUpdate {
	mutation := newPaymentEWalletDetailMutation(c.config, OpUpdate)
	return &PaymentEWalletDetailUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PaymentEWalletDetailClient) UpdateOne(ped *PaymentEWalletDetail) *PaymentEWalletDetailUpdateOne {
	mutation := newPaymentEWalletDetailMutation(c.config, OpUpdateOne, withPaymentEWalletDetail(ped))
	return &PaymentEWalletDetailUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PaymentEWalletDetailClient) UpdateOneID(id int64) *PaymentEWalletDetailUpdateOne {
	mutation := newPaymentEWalletDetailMutation(c.config, OpUpdateOne, withPaymentEWalletDetailID(id))
	return &PaymentEWalletDetailUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PaymentEWalletDetail.
func (c *PaymentEWalletDetailClient) Delete() *PaymentEWalletDetailDelete {
	mutation := newPaymentEWalletDetailMutation(c.config, OpDelete)
	return &PaymentEWalletDetailDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PaymentEWalletDetailClient) DeleteOne(ped *PaymentEWalletDetail) *PaymentEWalletDetailDeleteOne {
	return c.DeleteOneID(ped.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PaymentEWalletDetailClient) DeleteOneID(id int64) *PaymentEWalletDetailDeleteOne {
	builder := c.Delete().Where(paymentewalletdetail.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PaymentEWalletDetailDeleteOne{builder}
}

// Query returns a query builder for PaymentEWalletDetail.
func (c *PaymentEWalletDetailClient) Query() *PaymentEWalletDetailQuery {
	return &PaymentEWalletDetailQuery{
		config: c.config,
	}
}

// Get returns a PaymentEWalletDetail entity by its id.
func (c *PaymentEWalletDetailClient) Get(ctx context.Context, id int64) (*PaymentEWalletDetail, error) {
	return c.Query().Where(paymentewalletdetail.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PaymentEWalletDetailClient) GetX(ctx context.Context, id int64) *PaymentEWalletDetail {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPayment queries the payment edge of a PaymentEWalletDetail.
func (c *PaymentEWalletDetailClient) QueryPayment(ped *PaymentEWalletDetail) *PaymentQuery {
	query := &PaymentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ped.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(paymentewalletdetail.Table, paymentewalletdetail.FieldID, id),
			sqlgraph.To(payment.Table, payment.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, paymentewalletdetail.PaymentTable, paymentewalletdetail.PaymentColumn),
		)
		fromV = sqlgraph.Neighbors(ped.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PaymentEWalletDetailClient) Hooks() []Hook {
	return c.hooks.PaymentEWalletDetail
}

// PaymentTelcoDetailClient is a client for the PaymentTelcoDetail schema.
type PaymentTelcoDetailClient struct {
	config
}

// NewPaymentTelcoDetailClient returns a client for the PaymentTelcoDetail from the given config.
func NewPaymentTelcoDetailClient(c config) *PaymentTelcoDetailClient {
	return &PaymentTelcoDetailClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `paymenttelcodetail.Hooks(f(g(h())))`.
func (c *PaymentTelcoDetailClient) Use(hooks ...Hook) {
	c.hooks.PaymentTelcoDetail = append(c.hooks.PaymentTelcoDetail, hooks...)
}

// Create returns a create builder for PaymentTelcoDetail.
func (c *PaymentTelcoDetailClient) Create() *PaymentTelcoDetailCreate {
	mutation := newPaymentTelcoDetailMutation(c.config, OpCreate)
	return &PaymentTelcoDetailCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PaymentTelcoDetail entities.
func (c *PaymentTelcoDetailClient) CreateBulk(builders ...*PaymentTelcoDetailCreate) *PaymentTelcoDetailCreateBulk {
	return &PaymentTelcoDetailCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PaymentTelcoDetail.
func (c *PaymentTelcoDetailClient) Update() *PaymentTelcoDetailUpdate {
	mutation := newPaymentTelcoDetailMutation(c.config, OpUpdate)
	return &PaymentTelcoDetailUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PaymentTelcoDetailClient) UpdateOne(ptd *PaymentTelcoDetail) *PaymentTelcoDetailUpdateOne {
	mutation := newPaymentTelcoDetailMutation(c.config, OpUpdateOne, withPaymentTelcoDetail(ptd))
	return &PaymentTelcoDetailUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PaymentTelcoDetailClient) UpdateOneID(id int64) *PaymentTelcoDetailUpdateOne {
	mutation := newPaymentTelcoDetailMutation(c.config, OpUpdateOne, withPaymentTelcoDetailID(id))
	return &PaymentTelcoDetailUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PaymentTelcoDetail.
func (c *PaymentTelcoDetailClient) Delete() *PaymentTelcoDetailDelete {
	mutation := newPaymentTelcoDetailMutation(c.config, OpDelete)
	return &PaymentTelcoDetailDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PaymentTelcoDetailClient) DeleteOne(ptd *PaymentTelcoDetail) *PaymentTelcoDetailDeleteOne {
	return c.DeleteOneID(ptd.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PaymentTelcoDetailClient) DeleteOneID(id int64) *PaymentTelcoDetailDeleteOne {
	builder := c.Delete().Where(paymenttelcodetail.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PaymentTelcoDetailDeleteOne{builder}
}

// Query returns a query builder for PaymentTelcoDetail.
func (c *PaymentTelcoDetailClient) Query() *PaymentTelcoDetailQuery {
	return &PaymentTelcoDetailQuery{
		config: c.config,
	}
}

// Get returns a PaymentTelcoDetail entity by its id.
func (c *PaymentTelcoDetailClient) Get(ctx context.Context, id int64) (*PaymentTelcoDetail, error) {
	return c.Query().Where(paymenttelcodetail.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PaymentTelcoDetailClient) GetX(ctx context.Context, id int64) *PaymentTelcoDetail {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPayment queries the payment edge of a PaymentTelcoDetail.
func (c *PaymentTelcoDetailClient) QueryPayment(ptd *PaymentTelcoDetail) *PaymentQuery {
	query := &PaymentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ptd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(paymenttelcodetail.Table, paymenttelcodetail.FieldID, id),
			sqlgraph.To(payment.Table, payment.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, paymenttelcodetail.PaymentTable, paymenttelcodetail.PaymentColumn),
		)
		fromV = sqlgraph.Neighbors(ptd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PaymentTelcoDetailClient) Hooks() []Hook {
	return c.hooks.PaymentTelcoDetail
}

// RevisionClient is a client for the Revision schema.
type RevisionClient struct {
	config
}

// NewRevisionClient returns a client for the Revision from the given config.
func NewRevisionClient(c config) *RevisionClient {
	return &RevisionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `revision.Hooks(f(g(h())))`.
func (c *RevisionClient) Use(hooks ...Hook) {
	c.hooks.Revision = append(c.hooks.Revision, hooks...)
}

// Create returns a create builder for Revision.
func (c *RevisionClient) Create() *RevisionCreate {
	mutation := newRevisionMutation(c.config, OpCreate)
	return &RevisionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Revision entities.
func (c *RevisionClient) CreateBulk(builders ...*RevisionCreate) *RevisionCreateBulk {
	return &RevisionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Revision.
func (c *RevisionClient) Update() *RevisionUpdate {
	mutation := newRevisionMutation(c.config, OpUpdate)
	return &RevisionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RevisionClient) UpdateOne(r *Revision) *RevisionUpdateOne {
	mutation := newRevisionMutation(c.config, OpUpdateOne, withRevision(r))
	return &RevisionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RevisionClient) UpdateOneID(id int64) *RevisionUpdateOne {
	mutation := newRevisionMutation(c.config, OpUpdateOne, withRevisionID(id))
	return &RevisionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Revision.
func (c *RevisionClient) Delete() *RevisionDelete {
	mutation := newRevisionMutation(c.config, OpDelete)
	return &RevisionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *RevisionClient) DeleteOne(r *Revision) *RevisionDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *RevisionClient) DeleteOneID(id int64) *RevisionDeleteOne {
	builder := c.Delete().Where(revision.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RevisionDeleteOne{builder}
}

// Query returns a query builder for Revision.
func (c *RevisionClient) Query() *RevisionQuery {
	return &RevisionQuery{
		config: c.config,
	}
}

// Get returns a Revision entity by its id.
func (c *RevisionClient) Get(ctx context.Context, id int64) (*Revision, error) {
	return c.Query().Where(revision.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RevisionClient) GetX(ctx context.Context, id int64) *Revision {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPayment queries the payment edge of a Revision.
func (c *RevisionClient) QueryPayment(r *Revision) *PaymentQuery {
	query := &PaymentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(revision.Table, revision.FieldID, id),
			sqlgraph.To(payment.Table, payment.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, revision.PaymentTable, revision.PaymentColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RevisionClient) Hooks() []Hook {
	return c.hooks.Revision
}

// SettingClient is a client for the Setting schema.
type SettingClient struct {
	config
}

// NewSettingClient returns a client for the Setting from the given config.
func NewSettingClient(c config) *SettingClient {
	return &SettingClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `setting.Hooks(f(g(h())))`.
func (c *SettingClient) Use(hooks ...Hook) {
	c.hooks.Setting = append(c.hooks.Setting, hooks...)
}

// Create returns a create builder for Setting.
func (c *SettingClient) Create() *SettingCreate {
	mutation := newSettingMutation(c.config, OpCreate)
	return &SettingCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Setting entities.
func (c *SettingClient) CreateBulk(builders ...*SettingCreate) *SettingCreateBulk {
	return &SettingCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Setting.
func (c *SettingClient) Update() *SettingUpdate {
	mutation := newSettingMutation(c.config, OpUpdate)
	return &SettingUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SettingClient) UpdateOne(s *Setting) *SettingUpdateOne {
	mutation := newSettingMutation(c.config, OpUpdateOne, withSetting(s))
	return &SettingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SettingClient) UpdateOneID(id int64) *SettingUpdateOne {
	mutation := newSettingMutation(c.config, OpUpdateOne, withSettingID(id))
	return &SettingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Setting.
func (c *SettingClient) Delete() *SettingDelete {
	mutation := newSettingMutation(c.config, OpDelete)
	return &SettingDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *SettingClient) DeleteOne(s *Setting) *SettingDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *SettingClient) DeleteOneID(id int64) *SettingDeleteOne {
	builder := c.Delete().Where(setting.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SettingDeleteOne{builder}
}

// Query returns a query builder for Setting.
func (c *SettingClient) Query() *SettingQuery {
	return &SettingQuery{
		config: c.config,
	}
}

// Get returns a Setting entity by its id.
func (c *SettingClient) Get(ctx context.Context, id int64) (*Setting, error) {
	return c.Query().Where(setting.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SettingClient) GetX(ctx context.Context, id int64) *Setting {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *SettingClient) Hooks() []Hook {
	return c.hooks.Setting
}

// SystemBankAccountClient is a client for the SystemBankAccount schema.
type SystemBankAccountClient struct {
	config
}

// NewSystemBankAccountClient returns a client for the SystemBankAccount from the given config.
func NewSystemBankAccountClient(c config) *SystemBankAccountClient {
	return &SystemBankAccountClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `systembankaccount.Hooks(f(g(h())))`.
func (c *SystemBankAccountClient) Use(hooks ...Hook) {
	c.hooks.SystemBankAccount = append(c.hooks.SystemBankAccount, hooks...)
}

// Create returns a create builder for SystemBankAccount.
func (c *SystemBankAccountClient) Create() *SystemBankAccountCreate {
	mutation := newSystemBankAccountMutation(c.config, OpCreate)
	return &SystemBankAccountCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SystemBankAccount entities.
func (c *SystemBankAccountClient) CreateBulk(builders ...*SystemBankAccountCreate) *SystemBankAccountCreateBulk {
	return &SystemBankAccountCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SystemBankAccount.
func (c *SystemBankAccountClient) Update() *SystemBankAccountUpdate {
	mutation := newSystemBankAccountMutation(c.config, OpUpdate)
	return &SystemBankAccountUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SystemBankAccountClient) UpdateOne(sba *SystemBankAccount) *SystemBankAccountUpdateOne {
	mutation := newSystemBankAccountMutation(c.config, OpUpdateOne, withSystemBankAccount(sba))
	return &SystemBankAccountUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SystemBankAccountClient) UpdateOneID(id int64) *SystemBankAccountUpdateOne {
	mutation := newSystemBankAccountMutation(c.config, OpUpdateOne, withSystemBankAccountID(id))
	return &SystemBankAccountUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SystemBankAccount.
func (c *SystemBankAccountClient) Delete() *SystemBankAccountDelete {
	mutation := newSystemBankAccountMutation(c.config, OpDelete)
	return &SystemBankAccountDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *SystemBankAccountClient) DeleteOne(sba *SystemBankAccount) *SystemBankAccountDeleteOne {
	return c.DeleteOneID(sba.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *SystemBankAccountClient) DeleteOneID(id int64) *SystemBankAccountDeleteOne {
	builder := c.Delete().Where(systembankaccount.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SystemBankAccountDeleteOne{builder}
}

// Query returns a query builder for SystemBankAccount.
func (c *SystemBankAccountClient) Query() *SystemBankAccountQuery {
	return &SystemBankAccountQuery{
		config: c.config,
	}
}

// Get returns a SystemBankAccount entity by its id.
func (c *SystemBankAccountClient) Get(ctx context.Context, id int64) (*SystemBankAccount, error) {
	return c.Query().Where(systembankaccount.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SystemBankAccountClient) GetX(ctx context.Context, id int64) *SystemBankAccount {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *SystemBankAccountClient) Hooks() []Hook {
	return c.hooks.SystemBankAccount
}

// SystemCryptoHotWalletClient is a client for the SystemCryptoHotWallet schema.
type SystemCryptoHotWalletClient struct {
	config
}

// NewSystemCryptoHotWalletClient returns a client for the SystemCryptoHotWallet from the given config.
func NewSystemCryptoHotWalletClient(c config) *SystemCryptoHotWalletClient {
	return &SystemCryptoHotWalletClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `systemcryptohotwallet.Hooks(f(g(h())))`.
func (c *SystemCryptoHotWalletClient) Use(hooks ...Hook) {
	c.hooks.SystemCryptoHotWallet = append(c.hooks.SystemCryptoHotWallet, hooks...)
}

// Create returns a create builder for SystemCryptoHotWallet.
func (c *SystemCryptoHotWalletClient) Create() *SystemCryptoHotWalletCreate {
	mutation := newSystemCryptoHotWalletMutation(c.config, OpCreate)
	return &SystemCryptoHotWalletCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SystemCryptoHotWallet entities.
func (c *SystemCryptoHotWalletClient) CreateBulk(builders ...*SystemCryptoHotWalletCreate) *SystemCryptoHotWalletCreateBulk {
	return &SystemCryptoHotWalletCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SystemCryptoHotWallet.
func (c *SystemCryptoHotWalletClient) Update() *SystemCryptoHotWalletUpdate {
	mutation := newSystemCryptoHotWalletMutation(c.config, OpUpdate)
	return &SystemCryptoHotWalletUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SystemCryptoHotWalletClient) UpdateOne(schw *SystemCryptoHotWallet) *SystemCryptoHotWalletUpdateOne {
	mutation := newSystemCryptoHotWalletMutation(c.config, OpUpdateOne, withSystemCryptoHotWallet(schw))
	return &SystemCryptoHotWalletUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SystemCryptoHotWalletClient) UpdateOneID(id int64) *SystemCryptoHotWalletUpdateOne {
	mutation := newSystemCryptoHotWalletMutation(c.config, OpUpdateOne, withSystemCryptoHotWalletID(id))
	return &SystemCryptoHotWalletUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SystemCryptoHotWallet.
func (c *SystemCryptoHotWalletClient) Delete() *SystemCryptoHotWalletDelete {
	mutation := newSystemCryptoHotWalletMutation(c.config, OpDelete)
	return &SystemCryptoHotWalletDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *SystemCryptoHotWalletClient) DeleteOne(schw *SystemCryptoHotWallet) *SystemCryptoHotWalletDeleteOne {
	return c.DeleteOneID(schw.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *SystemCryptoHotWalletClient) DeleteOneID(id int64) *SystemCryptoHotWalletDeleteOne {
	builder := c.Delete().Where(systemcryptohotwallet.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SystemCryptoHotWalletDeleteOne{builder}
}

// Query returns a query builder for SystemCryptoHotWallet.
func (c *SystemCryptoHotWalletClient) Query() *SystemCryptoHotWalletQuery {
	return &SystemCryptoHotWalletQuery{
		config: c.config,
	}
}

// Get returns a SystemCryptoHotWallet entity by its id.
func (c *SystemCryptoHotWalletClient) Get(ctx context.Context, id int64) (*SystemCryptoHotWallet, error) {
	return c.Query().Where(systemcryptohotwallet.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SystemCryptoHotWalletClient) GetX(ctx context.Context, id int64) *SystemCryptoHotWallet {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *SystemCryptoHotWalletClient) Hooks() []Hook {
	return c.hooks.SystemCryptoHotWallet
}

// SystemEWalletClient is a client for the SystemEWallet schema.
type SystemEWalletClient struct {
	config
}

// NewSystemEWalletClient returns a client for the SystemEWallet from the given config.
func NewSystemEWalletClient(c config) *SystemEWalletClient {
	return &SystemEWalletClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `systemewallet.Hooks(f(g(h())))`.
func (c *SystemEWalletClient) Use(hooks ...Hook) {
	c.hooks.SystemEWallet = append(c.hooks.SystemEWallet, hooks...)
}

// Create returns a create builder for SystemEWallet.
func (c *SystemEWalletClient) Create() *SystemEWalletCreate {
	mutation := newSystemEWalletMutation(c.config, OpCreate)
	return &SystemEWalletCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SystemEWallet entities.
func (c *SystemEWalletClient) CreateBulk(builders ...*SystemEWalletCreate) *SystemEWalletCreateBulk {
	return &SystemEWalletCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SystemEWallet.
func (c *SystemEWalletClient) Update() *SystemEWalletUpdate {
	mutation := newSystemEWalletMutation(c.config, OpUpdate)
	return &SystemEWalletUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SystemEWalletClient) UpdateOne(se *SystemEWallet) *SystemEWalletUpdateOne {
	mutation := newSystemEWalletMutation(c.config, OpUpdateOne, withSystemEWallet(se))
	return &SystemEWalletUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SystemEWalletClient) UpdateOneID(id int64) *SystemEWalletUpdateOne {
	mutation := newSystemEWalletMutation(c.config, OpUpdateOne, withSystemEWalletID(id))
	return &SystemEWalletUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SystemEWallet.
func (c *SystemEWalletClient) Delete() *SystemEWalletDelete {
	mutation := newSystemEWalletMutation(c.config, OpDelete)
	return &SystemEWalletDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *SystemEWalletClient) DeleteOne(se *SystemEWallet) *SystemEWalletDeleteOne {
	return c.DeleteOneID(se.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *SystemEWalletClient) DeleteOneID(id int64) *SystemEWalletDeleteOne {
	builder := c.Delete().Where(systemewallet.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SystemEWalletDeleteOne{builder}
}

// Query returns a query builder for SystemEWallet.
func (c *SystemEWalletClient) Query() *SystemEWalletQuery {
	return &SystemEWalletQuery{
		config: c.config,
	}
}

// Get returns a SystemEWallet entity by its id.
func (c *SystemEWalletClient) Get(ctx context.Context, id int64) (*SystemEWallet, error) {
	return c.Query().Where(systemewallet.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SystemEWalletClient) GetX(ctx context.Context, id int64) *SystemEWallet {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *SystemEWalletClient) Hooks() []Hook {
	return c.hooks.SystemEWallet
}
