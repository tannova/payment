// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"gitlab.com/mcuc/monorepo/backend/stark/pkg/ent/payment"
	"gitlab.com/mcuc/monorepo/backend/stark/pkg/ent/paymenttelcodetail"
)

// PaymentTelcoDetailCreate is the builder for creating a PaymentTelcoDetail entity.
type PaymentTelcoDetailCreate struct {
	config
	mutation *PaymentTelcoDetailMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (ptdc *PaymentTelcoDetailCreate) SetCreatedAt(t time.Time) *PaymentTelcoDetailCreate {
	ptdc.mutation.SetCreatedAt(t)
	return ptdc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ptdc *PaymentTelcoDetailCreate) SetNillableCreatedAt(t *time.Time) *PaymentTelcoDetailCreate {
	if t != nil {
		ptdc.SetCreatedAt(*t)
	}
	return ptdc
}

// SetUpdatedAt sets the "updated_at" field.
func (ptdc *PaymentTelcoDetailCreate) SetUpdatedAt(t time.Time) *PaymentTelcoDetailCreate {
	ptdc.mutation.SetUpdatedAt(t)
	return ptdc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ptdc *PaymentTelcoDetailCreate) SetNillableUpdatedAt(t *time.Time) *PaymentTelcoDetailCreate {
	if t != nil {
		ptdc.SetUpdatedAt(*t)
	}
	return ptdc
}

// SetCreatedBy sets the "created_by" field.
func (ptdc *PaymentTelcoDetailCreate) SetCreatedBy(s string) *PaymentTelcoDetailCreate {
	ptdc.mutation.SetCreatedBy(s)
	return ptdc
}

// SetUpdatedBy sets the "updated_by" field.
func (ptdc *PaymentTelcoDetailCreate) SetUpdatedBy(s string) *PaymentTelcoDetailCreate {
	ptdc.mutation.SetUpdatedBy(s)
	return ptdc
}

// SetTelcoName sets the "telco_name" field.
func (ptdc *PaymentTelcoDetailCreate) SetTelcoName(i int32) *PaymentTelcoDetailCreate {
	ptdc.mutation.SetTelcoName(i)
	return ptdc
}

// SetNillableTelcoName sets the "telco_name" field if the given value is not nil.
func (ptdc *PaymentTelcoDetailCreate) SetNillableTelcoName(i *int32) *PaymentTelcoDetailCreate {
	if i != nil {
		ptdc.SetTelcoName(*i)
	}
	return ptdc
}

// SetSerialNumber sets the "serial_number" field.
func (ptdc *PaymentTelcoDetailCreate) SetSerialNumber(s string) *PaymentTelcoDetailCreate {
	ptdc.mutation.SetSerialNumber(s)
	return ptdc
}

// SetNillableSerialNumber sets the "serial_number" field if the given value is not nil.
func (ptdc *PaymentTelcoDetailCreate) SetNillableSerialNumber(s *string) *PaymentTelcoDetailCreate {
	if s != nil {
		ptdc.SetSerialNumber(*s)
	}
	return ptdc
}

// SetCardID sets the "card_id" field.
func (ptdc *PaymentTelcoDetailCreate) SetCardID(s string) *PaymentTelcoDetailCreate {
	ptdc.mutation.SetCardID(s)
	return ptdc
}

// SetNillableCardID sets the "card_id" field if the given value is not nil.
func (ptdc *PaymentTelcoDetailCreate) SetNillableCardID(s *string) *PaymentTelcoDetailCreate {
	if s != nil {
		ptdc.SetCardID(*s)
	}
	return ptdc
}

// SetChargedAmount sets the "charged_amount" field.
func (ptdc *PaymentTelcoDetailCreate) SetChargedAmount(u uint64) *PaymentTelcoDetailCreate {
	ptdc.mutation.SetChargedAmount(u)
	return ptdc
}

// SetNillableChargedAmount sets the "charged_amount" field if the given value is not nil.
func (ptdc *PaymentTelcoDetailCreate) SetNillableChargedAmount(u *uint64) *PaymentTelcoDetailCreate {
	if u != nil {
		ptdc.SetChargedAmount(*u)
	}
	return ptdc
}

// SetAmount sets the "amount" field.
func (ptdc *PaymentTelcoDetailCreate) SetAmount(u uint64) *PaymentTelcoDetailCreate {
	ptdc.mutation.SetAmount(u)
	return ptdc
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (ptdc *PaymentTelcoDetailCreate) SetNillableAmount(u *uint64) *PaymentTelcoDetailCreate {
	if u != nil {
		ptdc.SetAmount(*u)
	}
	return ptdc
}

// SetID sets the "id" field.
func (ptdc *PaymentTelcoDetailCreate) SetID(i int64) *PaymentTelcoDetailCreate {
	ptdc.mutation.SetID(i)
	return ptdc
}

// SetPaymentID sets the "payment" edge to the Payment entity by ID.
func (ptdc *PaymentTelcoDetailCreate) SetPaymentID(id int64) *PaymentTelcoDetailCreate {
	ptdc.mutation.SetPaymentID(id)
	return ptdc
}

// SetNillablePaymentID sets the "payment" edge to the Payment entity by ID if the given value is not nil.
func (ptdc *PaymentTelcoDetailCreate) SetNillablePaymentID(id *int64) *PaymentTelcoDetailCreate {
	if id != nil {
		ptdc = ptdc.SetPaymentID(*id)
	}
	return ptdc
}

// SetPayment sets the "payment" edge to the Payment entity.
func (ptdc *PaymentTelcoDetailCreate) SetPayment(p *Payment) *PaymentTelcoDetailCreate {
	return ptdc.SetPaymentID(p.ID)
}

// Mutation returns the PaymentTelcoDetailMutation object of the builder.
func (ptdc *PaymentTelcoDetailCreate) Mutation() *PaymentTelcoDetailMutation {
	return ptdc.mutation
}

// Save creates the PaymentTelcoDetail in the database.
func (ptdc *PaymentTelcoDetailCreate) Save(ctx context.Context) (*PaymentTelcoDetail, error) {
	var (
		err  error
		node *PaymentTelcoDetail
	)
	ptdc.defaults()
	if len(ptdc.hooks) == 0 {
		if err = ptdc.check(); err != nil {
			return nil, err
		}
		node, err = ptdc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PaymentTelcoDetailMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ptdc.check(); err != nil {
				return nil, err
			}
			ptdc.mutation = mutation
			if node, err = ptdc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ptdc.hooks) - 1; i >= 0; i-- {
			if ptdc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ptdc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ptdc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ptdc *PaymentTelcoDetailCreate) SaveX(ctx context.Context) *PaymentTelcoDetail {
	v, err := ptdc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ptdc *PaymentTelcoDetailCreate) Exec(ctx context.Context) error {
	_, err := ptdc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptdc *PaymentTelcoDetailCreate) ExecX(ctx context.Context) {
	if err := ptdc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ptdc *PaymentTelcoDetailCreate) defaults() {
	if _, ok := ptdc.mutation.CreatedAt(); !ok {
		v := paymenttelcodetail.DefaultCreatedAt()
		ptdc.mutation.SetCreatedAt(v)
	}
	if _, ok := ptdc.mutation.UpdatedAt(); !ok {
		v := paymenttelcodetail.DefaultUpdatedAt()
		ptdc.mutation.SetUpdatedAt(v)
	}
	if _, ok := ptdc.mutation.TelcoName(); !ok {
		v := paymenttelcodetail.DefaultTelcoName
		ptdc.mutation.SetTelcoName(v)
	}
	if _, ok := ptdc.mutation.SerialNumber(); !ok {
		v := paymenttelcodetail.DefaultSerialNumber
		ptdc.mutation.SetSerialNumber(v)
	}
	if _, ok := ptdc.mutation.CardID(); !ok {
		v := paymenttelcodetail.DefaultCardID
		ptdc.mutation.SetCardID(v)
	}
	if _, ok := ptdc.mutation.ChargedAmount(); !ok {
		v := paymenttelcodetail.DefaultChargedAmount
		ptdc.mutation.SetChargedAmount(v)
	}
	if _, ok := ptdc.mutation.Amount(); !ok {
		v := paymenttelcodetail.DefaultAmount
		ptdc.mutation.SetAmount(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ptdc *PaymentTelcoDetailCreate) check() error {
	if _, ok := ptdc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "PaymentTelcoDetail.created_at"`)}
	}
	if _, ok := ptdc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "PaymentTelcoDetail.updated_at"`)}
	}
	if _, ok := ptdc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent: missing required field "PaymentTelcoDetail.created_by"`)}
	}
	if v, ok := ptdc.mutation.CreatedBy(); ok {
		if err := paymenttelcodetail.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "PaymentTelcoDetail.created_by": %w`, err)}
		}
	}
	if _, ok := ptdc.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`ent: missing required field "PaymentTelcoDetail.updated_by"`)}
	}
	if v, ok := ptdc.mutation.UpdatedBy(); ok {
		if err := paymenttelcodetail.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "PaymentTelcoDetail.updated_by": %w`, err)}
		}
	}
	if _, ok := ptdc.mutation.TelcoName(); !ok {
		return &ValidationError{Name: "telco_name", err: errors.New(`ent: missing required field "PaymentTelcoDetail.telco_name"`)}
	}
	if v, ok := ptdc.mutation.TelcoName(); ok {
		if err := paymenttelcodetail.TelcoNameValidator(v); err != nil {
			return &ValidationError{Name: "telco_name", err: fmt.Errorf(`ent: validator failed for field "PaymentTelcoDetail.telco_name": %w`, err)}
		}
	}
	if _, ok := ptdc.mutation.SerialNumber(); !ok {
		return &ValidationError{Name: "serial_number", err: errors.New(`ent: missing required field "PaymentTelcoDetail.serial_number"`)}
	}
	if _, ok := ptdc.mutation.CardID(); !ok {
		return &ValidationError{Name: "card_id", err: errors.New(`ent: missing required field "PaymentTelcoDetail.card_id"`)}
	}
	if _, ok := ptdc.mutation.ChargedAmount(); !ok {
		return &ValidationError{Name: "charged_amount", err: errors.New(`ent: missing required field "PaymentTelcoDetail.charged_amount"`)}
	}
	if _, ok := ptdc.mutation.Amount(); !ok {
		return &ValidationError{Name: "amount", err: errors.New(`ent: missing required field "PaymentTelcoDetail.amount"`)}
	}
	return nil
}

func (ptdc *PaymentTelcoDetailCreate) sqlSave(ctx context.Context) (*PaymentTelcoDetail, error) {
	_node, _spec := ptdc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ptdc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	return _node, nil
}

func (ptdc *PaymentTelcoDetailCreate) createSpec() (*PaymentTelcoDetail, *sqlgraph.CreateSpec) {
	var (
		_node = &PaymentTelcoDetail{config: ptdc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: paymenttelcodetail.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: paymenttelcodetail.FieldID,
			},
		}
	)
	_spec.OnConflict = ptdc.conflict
	if id, ok := ptdc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ptdc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: paymenttelcodetail.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := ptdc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: paymenttelcodetail.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := ptdc.mutation.CreatedBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: paymenttelcodetail.FieldCreatedBy,
		})
		_node.CreatedBy = value
	}
	if value, ok := ptdc.mutation.UpdatedBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: paymenttelcodetail.FieldUpdatedBy,
		})
		_node.UpdatedBy = value
	}
	if value, ok := ptdc.mutation.TelcoName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: paymenttelcodetail.FieldTelcoName,
		})
		_node.TelcoName = value
	}
	if value, ok := ptdc.mutation.SerialNumber(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: paymenttelcodetail.FieldSerialNumber,
		})
		_node.SerialNumber = value
	}
	if value, ok := ptdc.mutation.CardID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: paymenttelcodetail.FieldCardID,
		})
		_node.CardID = value
	}
	if value, ok := ptdc.mutation.ChargedAmount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: paymenttelcodetail.FieldChargedAmount,
		})
		_node.ChargedAmount = value
	}
	if value, ok := ptdc.mutation.Amount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: paymenttelcodetail.FieldAmount,
		})
		_node.Amount = value
	}
	if nodes := ptdc.mutation.PaymentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   paymenttelcodetail.PaymentTable,
			Columns: []string{paymenttelcodetail.PaymentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt64,
					Column: payment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.payment_payment_telco_detail = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PaymentTelcoDetail.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PaymentTelcoDetailUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (ptdc *PaymentTelcoDetailCreate) OnConflict(opts ...sql.ConflictOption) *PaymentTelcoDetailUpsertOne {
	ptdc.conflict = opts
	return &PaymentTelcoDetailUpsertOne{
		create: ptdc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PaymentTelcoDetail.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (ptdc *PaymentTelcoDetailCreate) OnConflictColumns(columns ...string) *PaymentTelcoDetailUpsertOne {
	ptdc.conflict = append(ptdc.conflict, sql.ConflictColumns(columns...))
	return &PaymentTelcoDetailUpsertOne{
		create: ptdc,
	}
}

type (
	// PaymentTelcoDetailUpsertOne is the builder for "upsert"-ing
	//  one PaymentTelcoDetail node.
	PaymentTelcoDetailUpsertOne struct {
		create *PaymentTelcoDetailCreate
	}

	// PaymentTelcoDetailUpsert is the "OnConflict" setter.
	PaymentTelcoDetailUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *PaymentTelcoDetailUpsert) SetCreatedAt(v time.Time) *PaymentTelcoDetailUpsert {
	u.Set(paymenttelcodetail.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *PaymentTelcoDetailUpsert) UpdateCreatedAt() *PaymentTelcoDetailUpsert {
	u.SetExcluded(paymenttelcodetail.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PaymentTelcoDetailUpsert) SetUpdatedAt(v time.Time) *PaymentTelcoDetailUpsert {
	u.Set(paymenttelcodetail.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PaymentTelcoDetailUpsert) UpdateUpdatedAt() *PaymentTelcoDetailUpsert {
	u.SetExcluded(paymenttelcodetail.FieldUpdatedAt)
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *PaymentTelcoDetailUpsert) SetCreatedBy(v string) *PaymentTelcoDetailUpsert {
	u.Set(paymenttelcodetail.FieldCreatedBy, v)
	return u
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *PaymentTelcoDetailUpsert) UpdateCreatedBy() *PaymentTelcoDetailUpsert {
	u.SetExcluded(paymenttelcodetail.FieldCreatedBy)
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *PaymentTelcoDetailUpsert) SetUpdatedBy(v string) *PaymentTelcoDetailUpsert {
	u.Set(paymenttelcodetail.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *PaymentTelcoDetailUpsert) UpdateUpdatedBy() *PaymentTelcoDetailUpsert {
	u.SetExcluded(paymenttelcodetail.FieldUpdatedBy)
	return u
}

// SetTelcoName sets the "telco_name" field.
func (u *PaymentTelcoDetailUpsert) SetTelcoName(v int32) *PaymentTelcoDetailUpsert {
	u.Set(paymenttelcodetail.FieldTelcoName, v)
	return u
}

// UpdateTelcoName sets the "telco_name" field to the value that was provided on create.
func (u *PaymentTelcoDetailUpsert) UpdateTelcoName() *PaymentTelcoDetailUpsert {
	u.SetExcluded(paymenttelcodetail.FieldTelcoName)
	return u
}

// AddTelcoName adds v to the "telco_name" field.
func (u *PaymentTelcoDetailUpsert) AddTelcoName(v int32) *PaymentTelcoDetailUpsert {
	u.Add(paymenttelcodetail.FieldTelcoName, v)
	return u
}

// SetSerialNumber sets the "serial_number" field.
func (u *PaymentTelcoDetailUpsert) SetSerialNumber(v string) *PaymentTelcoDetailUpsert {
	u.Set(paymenttelcodetail.FieldSerialNumber, v)
	return u
}

// UpdateSerialNumber sets the "serial_number" field to the value that was provided on create.
func (u *PaymentTelcoDetailUpsert) UpdateSerialNumber() *PaymentTelcoDetailUpsert {
	u.SetExcluded(paymenttelcodetail.FieldSerialNumber)
	return u
}

// SetCardID sets the "card_id" field.
func (u *PaymentTelcoDetailUpsert) SetCardID(v string) *PaymentTelcoDetailUpsert {
	u.Set(paymenttelcodetail.FieldCardID, v)
	return u
}

// UpdateCardID sets the "card_id" field to the value that was provided on create.
func (u *PaymentTelcoDetailUpsert) UpdateCardID() *PaymentTelcoDetailUpsert {
	u.SetExcluded(paymenttelcodetail.FieldCardID)
	return u
}

// SetChargedAmount sets the "charged_amount" field.
func (u *PaymentTelcoDetailUpsert) SetChargedAmount(v uint64) *PaymentTelcoDetailUpsert {
	u.Set(paymenttelcodetail.FieldChargedAmount, v)
	return u
}

// UpdateChargedAmount sets the "charged_amount" field to the value that was provided on create.
func (u *PaymentTelcoDetailUpsert) UpdateChargedAmount() *PaymentTelcoDetailUpsert {
	u.SetExcluded(paymenttelcodetail.FieldChargedAmount)
	return u
}

// AddChargedAmount adds v to the "charged_amount" field.
func (u *PaymentTelcoDetailUpsert) AddChargedAmount(v uint64) *PaymentTelcoDetailUpsert {
	u.Add(paymenttelcodetail.FieldChargedAmount, v)
	return u
}

// SetAmount sets the "amount" field.
func (u *PaymentTelcoDetailUpsert) SetAmount(v uint64) *PaymentTelcoDetailUpsert {
	u.Set(paymenttelcodetail.FieldAmount, v)
	return u
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *PaymentTelcoDetailUpsert) UpdateAmount() *PaymentTelcoDetailUpsert {
	u.SetExcluded(paymenttelcodetail.FieldAmount)
	return u
}

// AddAmount adds v to the "amount" field.
func (u *PaymentTelcoDetailUpsert) AddAmount(v uint64) *PaymentTelcoDetailUpsert {
	u.Add(paymenttelcodetail.FieldAmount, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.PaymentTelcoDetail.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(paymenttelcodetail.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *PaymentTelcoDetailUpsertOne) UpdateNewValues() *PaymentTelcoDetailUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(paymenttelcodetail.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.PaymentTelcoDetail.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *PaymentTelcoDetailUpsertOne) Ignore() *PaymentTelcoDetailUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PaymentTelcoDetailUpsertOne) DoNothing() *PaymentTelcoDetailUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PaymentTelcoDetailCreate.OnConflict
// documentation for more info.
func (u *PaymentTelcoDetailUpsertOne) Update(set func(*PaymentTelcoDetailUpsert)) *PaymentTelcoDetailUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PaymentTelcoDetailUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *PaymentTelcoDetailUpsertOne) SetCreatedAt(v time.Time) *PaymentTelcoDetailUpsertOne {
	return u.Update(func(s *PaymentTelcoDetailUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *PaymentTelcoDetailUpsertOne) UpdateCreatedAt() *PaymentTelcoDetailUpsertOne {
	return u.Update(func(s *PaymentTelcoDetailUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PaymentTelcoDetailUpsertOne) SetUpdatedAt(v time.Time) *PaymentTelcoDetailUpsertOne {
	return u.Update(func(s *PaymentTelcoDetailUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PaymentTelcoDetailUpsertOne) UpdateUpdatedAt() *PaymentTelcoDetailUpsertOne {
	return u.Update(func(s *PaymentTelcoDetailUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetCreatedBy sets the "created_by" field.
func (u *PaymentTelcoDetailUpsertOne) SetCreatedBy(v string) *PaymentTelcoDetailUpsertOne {
	return u.Update(func(s *PaymentTelcoDetailUpsert) {
		s.SetCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *PaymentTelcoDetailUpsertOne) UpdateCreatedBy() *PaymentTelcoDetailUpsertOne {
	return u.Update(func(s *PaymentTelcoDetailUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *PaymentTelcoDetailUpsertOne) SetUpdatedBy(v string) *PaymentTelcoDetailUpsertOne {
	return u.Update(func(s *PaymentTelcoDetailUpsert) {
		s.SetUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *PaymentTelcoDetailUpsertOne) UpdateUpdatedBy() *PaymentTelcoDetailUpsertOne {
	return u.Update(func(s *PaymentTelcoDetailUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetTelcoName sets the "telco_name" field.
func (u *PaymentTelcoDetailUpsertOne) SetTelcoName(v int32) *PaymentTelcoDetailUpsertOne {
	return u.Update(func(s *PaymentTelcoDetailUpsert) {
		s.SetTelcoName(v)
	})
}

// AddTelcoName adds v to the "telco_name" field.
func (u *PaymentTelcoDetailUpsertOne) AddTelcoName(v int32) *PaymentTelcoDetailUpsertOne {
	return u.Update(func(s *PaymentTelcoDetailUpsert) {
		s.AddTelcoName(v)
	})
}

// UpdateTelcoName sets the "telco_name" field to the value that was provided on create.
func (u *PaymentTelcoDetailUpsertOne) UpdateTelcoName() *PaymentTelcoDetailUpsertOne {
	return u.Update(func(s *PaymentTelcoDetailUpsert) {
		s.UpdateTelcoName()
	})
}

// SetSerialNumber sets the "serial_number" field.
func (u *PaymentTelcoDetailUpsertOne) SetSerialNumber(v string) *PaymentTelcoDetailUpsertOne {
	return u.Update(func(s *PaymentTelcoDetailUpsert) {
		s.SetSerialNumber(v)
	})
}

// UpdateSerialNumber sets the "serial_number" field to the value that was provided on create.
func (u *PaymentTelcoDetailUpsertOne) UpdateSerialNumber() *PaymentTelcoDetailUpsertOne {
	return u.Update(func(s *PaymentTelcoDetailUpsert) {
		s.UpdateSerialNumber()
	})
}

// SetCardID sets the "card_id" field.
func (u *PaymentTelcoDetailUpsertOne) SetCardID(v string) *PaymentTelcoDetailUpsertOne {
	return u.Update(func(s *PaymentTelcoDetailUpsert) {
		s.SetCardID(v)
	})
}

// UpdateCardID sets the "card_id" field to the value that was provided on create.
func (u *PaymentTelcoDetailUpsertOne) UpdateCardID() *PaymentTelcoDetailUpsertOne {
	return u.Update(func(s *PaymentTelcoDetailUpsert) {
		s.UpdateCardID()
	})
}

// SetChargedAmount sets the "charged_amount" field.
func (u *PaymentTelcoDetailUpsertOne) SetChargedAmount(v uint64) *PaymentTelcoDetailUpsertOne {
	return u.Update(func(s *PaymentTelcoDetailUpsert) {
		s.SetChargedAmount(v)
	})
}

// AddChargedAmount adds v to the "charged_amount" field.
func (u *PaymentTelcoDetailUpsertOne) AddChargedAmount(v uint64) *PaymentTelcoDetailUpsertOne {
	return u.Update(func(s *PaymentTelcoDetailUpsert) {
		s.AddChargedAmount(v)
	})
}

// UpdateChargedAmount sets the "charged_amount" field to the value that was provided on create.
func (u *PaymentTelcoDetailUpsertOne) UpdateChargedAmount() *PaymentTelcoDetailUpsertOne {
	return u.Update(func(s *PaymentTelcoDetailUpsert) {
		s.UpdateChargedAmount()
	})
}

// SetAmount sets the "amount" field.
func (u *PaymentTelcoDetailUpsertOne) SetAmount(v uint64) *PaymentTelcoDetailUpsertOne {
	return u.Update(func(s *PaymentTelcoDetailUpsert) {
		s.SetAmount(v)
	})
}

// AddAmount adds v to the "amount" field.
func (u *PaymentTelcoDetailUpsertOne) AddAmount(v uint64) *PaymentTelcoDetailUpsertOne {
	return u.Update(func(s *PaymentTelcoDetailUpsert) {
		s.AddAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *PaymentTelcoDetailUpsertOne) UpdateAmount() *PaymentTelcoDetailUpsertOne {
	return u.Update(func(s *PaymentTelcoDetailUpsert) {
		s.UpdateAmount()
	})
}

// Exec executes the query.
func (u *PaymentTelcoDetailUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PaymentTelcoDetailCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PaymentTelcoDetailUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PaymentTelcoDetailUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PaymentTelcoDetailUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PaymentTelcoDetailCreateBulk is the builder for creating many PaymentTelcoDetail entities in bulk.
type PaymentTelcoDetailCreateBulk struct {
	config
	builders []*PaymentTelcoDetailCreate
	conflict []sql.ConflictOption
}

// Save creates the PaymentTelcoDetail entities in the database.
func (ptdcb *PaymentTelcoDetailCreateBulk) Save(ctx context.Context) ([]*PaymentTelcoDetail, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ptdcb.builders))
	nodes := make([]*PaymentTelcoDetail, len(ptdcb.builders))
	mutators := make([]Mutator, len(ptdcb.builders))
	for i := range ptdcb.builders {
		func(i int, root context.Context) {
			builder := ptdcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PaymentTelcoDetailMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ptdcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ptdcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ptdcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ptdcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ptdcb *PaymentTelcoDetailCreateBulk) SaveX(ctx context.Context) []*PaymentTelcoDetail {
	v, err := ptdcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ptdcb *PaymentTelcoDetailCreateBulk) Exec(ctx context.Context) error {
	_, err := ptdcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptdcb *PaymentTelcoDetailCreateBulk) ExecX(ctx context.Context) {
	if err := ptdcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PaymentTelcoDetail.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PaymentTelcoDetailUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (ptdcb *PaymentTelcoDetailCreateBulk) OnConflict(opts ...sql.ConflictOption) *PaymentTelcoDetailUpsertBulk {
	ptdcb.conflict = opts
	return &PaymentTelcoDetailUpsertBulk{
		create: ptdcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PaymentTelcoDetail.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (ptdcb *PaymentTelcoDetailCreateBulk) OnConflictColumns(columns ...string) *PaymentTelcoDetailUpsertBulk {
	ptdcb.conflict = append(ptdcb.conflict, sql.ConflictColumns(columns...))
	return &PaymentTelcoDetailUpsertBulk{
		create: ptdcb,
	}
}

// PaymentTelcoDetailUpsertBulk is the builder for "upsert"-ing
// a bulk of PaymentTelcoDetail nodes.
type PaymentTelcoDetailUpsertBulk struct {
	create *PaymentTelcoDetailCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.PaymentTelcoDetail.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(paymenttelcodetail.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *PaymentTelcoDetailUpsertBulk) UpdateNewValues() *PaymentTelcoDetailUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(paymenttelcodetail.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PaymentTelcoDetail.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *PaymentTelcoDetailUpsertBulk) Ignore() *PaymentTelcoDetailUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PaymentTelcoDetailUpsertBulk) DoNothing() *PaymentTelcoDetailUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PaymentTelcoDetailCreateBulk.OnConflict
// documentation for more info.
func (u *PaymentTelcoDetailUpsertBulk) Update(set func(*PaymentTelcoDetailUpsert)) *PaymentTelcoDetailUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PaymentTelcoDetailUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *PaymentTelcoDetailUpsertBulk) SetCreatedAt(v time.Time) *PaymentTelcoDetailUpsertBulk {
	return u.Update(func(s *PaymentTelcoDetailUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *PaymentTelcoDetailUpsertBulk) UpdateCreatedAt() *PaymentTelcoDetailUpsertBulk {
	return u.Update(func(s *PaymentTelcoDetailUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PaymentTelcoDetailUpsertBulk) SetUpdatedAt(v time.Time) *PaymentTelcoDetailUpsertBulk {
	return u.Update(func(s *PaymentTelcoDetailUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PaymentTelcoDetailUpsertBulk) UpdateUpdatedAt() *PaymentTelcoDetailUpsertBulk {
	return u.Update(func(s *PaymentTelcoDetailUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetCreatedBy sets the "created_by" field.
func (u *PaymentTelcoDetailUpsertBulk) SetCreatedBy(v string) *PaymentTelcoDetailUpsertBulk {
	return u.Update(func(s *PaymentTelcoDetailUpsert) {
		s.SetCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *PaymentTelcoDetailUpsertBulk) UpdateCreatedBy() *PaymentTelcoDetailUpsertBulk {
	return u.Update(func(s *PaymentTelcoDetailUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *PaymentTelcoDetailUpsertBulk) SetUpdatedBy(v string) *PaymentTelcoDetailUpsertBulk {
	return u.Update(func(s *PaymentTelcoDetailUpsert) {
		s.SetUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *PaymentTelcoDetailUpsertBulk) UpdateUpdatedBy() *PaymentTelcoDetailUpsertBulk {
	return u.Update(func(s *PaymentTelcoDetailUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetTelcoName sets the "telco_name" field.
func (u *PaymentTelcoDetailUpsertBulk) SetTelcoName(v int32) *PaymentTelcoDetailUpsertBulk {
	return u.Update(func(s *PaymentTelcoDetailUpsert) {
		s.SetTelcoName(v)
	})
}

// AddTelcoName adds v to the "telco_name" field.
func (u *PaymentTelcoDetailUpsertBulk) AddTelcoName(v int32) *PaymentTelcoDetailUpsertBulk {
	return u.Update(func(s *PaymentTelcoDetailUpsert) {
		s.AddTelcoName(v)
	})
}

// UpdateTelcoName sets the "telco_name" field to the value that was provided on create.
func (u *PaymentTelcoDetailUpsertBulk) UpdateTelcoName() *PaymentTelcoDetailUpsertBulk {
	return u.Update(func(s *PaymentTelcoDetailUpsert) {
		s.UpdateTelcoName()
	})
}

// SetSerialNumber sets the "serial_number" field.
func (u *PaymentTelcoDetailUpsertBulk) SetSerialNumber(v string) *PaymentTelcoDetailUpsertBulk {
	return u.Update(func(s *PaymentTelcoDetailUpsert) {
		s.SetSerialNumber(v)
	})
}

// UpdateSerialNumber sets the "serial_number" field to the value that was provided on create.
func (u *PaymentTelcoDetailUpsertBulk) UpdateSerialNumber() *PaymentTelcoDetailUpsertBulk {
	return u.Update(func(s *PaymentTelcoDetailUpsert) {
		s.UpdateSerialNumber()
	})
}

// SetCardID sets the "card_id" field.
func (u *PaymentTelcoDetailUpsertBulk) SetCardID(v string) *PaymentTelcoDetailUpsertBulk {
	return u.Update(func(s *PaymentTelcoDetailUpsert) {
		s.SetCardID(v)
	})
}

// UpdateCardID sets the "card_id" field to the value that was provided on create.
func (u *PaymentTelcoDetailUpsertBulk) UpdateCardID() *PaymentTelcoDetailUpsertBulk {
	return u.Update(func(s *PaymentTelcoDetailUpsert) {
		s.UpdateCardID()
	})
}

// SetChargedAmount sets the "charged_amount" field.
func (u *PaymentTelcoDetailUpsertBulk) SetChargedAmount(v uint64) *PaymentTelcoDetailUpsertBulk {
	return u.Update(func(s *PaymentTelcoDetailUpsert) {
		s.SetChargedAmount(v)
	})
}

// AddChargedAmount adds v to the "charged_amount" field.
func (u *PaymentTelcoDetailUpsertBulk) AddChargedAmount(v uint64) *PaymentTelcoDetailUpsertBulk {
	return u.Update(func(s *PaymentTelcoDetailUpsert) {
		s.AddChargedAmount(v)
	})
}

// UpdateChargedAmount sets the "charged_amount" field to the value that was provided on create.
func (u *PaymentTelcoDetailUpsertBulk) UpdateChargedAmount() *PaymentTelcoDetailUpsertBulk {
	return u.Update(func(s *PaymentTelcoDetailUpsert) {
		s.UpdateChargedAmount()
	})
}

// SetAmount sets the "amount" field.
func (u *PaymentTelcoDetailUpsertBulk) SetAmount(v uint64) *PaymentTelcoDetailUpsertBulk {
	return u.Update(func(s *PaymentTelcoDetailUpsert) {
		s.SetAmount(v)
	})
}

// AddAmount adds v to the "amount" field.
func (u *PaymentTelcoDetailUpsertBulk) AddAmount(v uint64) *PaymentTelcoDetailUpsertBulk {
	return u.Update(func(s *PaymentTelcoDetailUpsert) {
		s.AddAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *PaymentTelcoDetailUpsertBulk) UpdateAmount() *PaymentTelcoDetailUpsertBulk {
	return u.Update(func(s *PaymentTelcoDetailUpsert) {
		s.UpdateAmount()
	})
}

// Exec executes the query.
func (u *PaymentTelcoDetailUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PaymentTelcoDetailCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PaymentTelcoDetailCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PaymentTelcoDetailUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
