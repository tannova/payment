// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: stark/api/ultron.proto

package stark

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _ultron_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on CreateCryptoWithdrawRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateCryptoWithdrawRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for CryptoWalletName

	// no validation rules for Address

	// no validation rules for CryptoType

	// no validation rules for CryptoNetworkType

	// no validation rules for Amount

	// no validation rules for AmountReference

	// no validation rules for MerchantUserId

	return nil
}

// CreateCryptoWithdrawRequestValidationError is the validation error returned
// by CreateCryptoWithdrawRequest.Validate if the designated constraints
// aren't met.
type CreateCryptoWithdrawRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCryptoWithdrawRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCryptoWithdrawRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCryptoWithdrawRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCryptoWithdrawRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCryptoWithdrawRequestValidationError) ErrorName() string {
	return "CreateCryptoWithdrawRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCryptoWithdrawRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCryptoWithdrawRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCryptoWithdrawRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCryptoWithdrawRequestValidationError{}

// Validate checks the field values on CreateCryptoWithdrawReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateCryptoWithdrawReply) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for PaymentId

	return nil
}

// CreateCryptoWithdrawReplyValidationError is the validation error returned by
// CreateCryptoWithdrawReply.Validate if the designated constraints aren't met.
type CreateCryptoWithdrawReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCryptoWithdrawReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCryptoWithdrawReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCryptoWithdrawReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCryptoWithdrawReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCryptoWithdrawReplyValidationError) ErrorName() string {
	return "CreateCryptoWithdrawReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCryptoWithdrawReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCryptoWithdrawReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCryptoWithdrawReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCryptoWithdrawReplyValidationError{}

// Validate checks the field values on CancelCryptoWithdrawRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CancelCryptoWithdrawRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for PaymentId

	// no validation rules for Note

	return nil
}

// CancelCryptoWithdrawRequestValidationError is the validation error returned
// by CancelCryptoWithdrawRequest.Validate if the designated constraints
// aren't met.
type CancelCryptoWithdrawRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelCryptoWithdrawRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelCryptoWithdrawRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelCryptoWithdrawRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelCryptoWithdrawRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelCryptoWithdrawRequestValidationError) ErrorName() string {
	return "CancelCryptoWithdrawRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CancelCryptoWithdrawRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelCryptoWithdrawRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelCryptoWithdrawRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelCryptoWithdrawRequestValidationError{}

// Validate checks the field values on CancelCryptoWithdrawReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CancelCryptoWithdrawReply) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// CancelCryptoWithdrawReplyValidationError is the validation error returned by
// CancelCryptoWithdrawReply.Validate if the designated constraints aren't met.
type CancelCryptoWithdrawReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelCryptoWithdrawReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelCryptoWithdrawReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelCryptoWithdrawReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelCryptoWithdrawReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelCryptoWithdrawReplyValidationError) ErrorName() string {
	return "CancelCryptoWithdrawReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CancelCryptoWithdrawReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelCryptoWithdrawReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelCryptoWithdrawReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelCryptoWithdrawReplyValidationError{}

// Validate checks the field values on CancelCryptoTopUpRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CancelCryptoTopUpRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for PaymentId

	// no validation rules for Note

	return nil
}

// CancelCryptoTopUpRequestValidationError is the validation error returned by
// CancelCryptoTopUpRequest.Validate if the designated constraints aren't met.
type CancelCryptoTopUpRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelCryptoTopUpRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelCryptoTopUpRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelCryptoTopUpRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelCryptoTopUpRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelCryptoTopUpRequestValidationError) ErrorName() string {
	return "CancelCryptoTopUpRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CancelCryptoTopUpRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelCryptoTopUpRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelCryptoTopUpRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelCryptoTopUpRequestValidationError{}

// Validate checks the field values on CancelCryptoTopUpReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CancelCryptoTopUpReply) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// CancelCryptoTopUpReplyValidationError is the validation error returned by
// CancelCryptoTopUpReply.Validate if the designated constraints aren't met.
type CancelCryptoTopUpReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelCryptoTopUpReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelCryptoTopUpReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelCryptoTopUpReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelCryptoTopUpReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelCryptoTopUpReplyValidationError) ErrorName() string {
	return "CancelCryptoTopUpReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CancelCryptoTopUpReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelCryptoTopUpReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelCryptoTopUpReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelCryptoTopUpReplyValidationError{}

// Validate checks the field values on ApproveCryptoWithdrawRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ApproveCryptoWithdrawRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for PaymentId

	// no validation rules for Note

	return nil
}

// ApproveCryptoWithdrawRequestValidationError is the validation error returned
// by ApproveCryptoWithdrawRequest.Validate if the designated constraints
// aren't met.
type ApproveCryptoWithdrawRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApproveCryptoWithdrawRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApproveCryptoWithdrawRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApproveCryptoWithdrawRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApproveCryptoWithdrawRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApproveCryptoWithdrawRequestValidationError) ErrorName() string {
	return "ApproveCryptoWithdrawRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ApproveCryptoWithdrawRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApproveCryptoWithdrawRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApproveCryptoWithdrawRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApproveCryptoWithdrawRequestValidationError{}

// Validate checks the field values on ApproveCryptoWithdrawReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ApproveCryptoWithdrawReply) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ApproveCryptoWithdrawReplyValidationError is the validation error returned
// by ApproveCryptoWithdrawReply.Validate if the designated constraints aren't met.
type ApproveCryptoWithdrawReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApproveCryptoWithdrawReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApproveCryptoWithdrawReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApproveCryptoWithdrawReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApproveCryptoWithdrawReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApproveCryptoWithdrawReplyValidationError) ErrorName() string {
	return "ApproveCryptoWithdrawReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ApproveCryptoWithdrawReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApproveCryptoWithdrawReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApproveCryptoWithdrawReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApproveCryptoWithdrawReplyValidationError{}

// Validate checks the field values on SubmitCryptoWithdrawRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SubmitCryptoWithdrawRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for PaymentId

	// no validation rules for SenderAddress

	// no validation rules for Amount

	// no validation rules for Fee

	// no validation rules for TxHash

	// no validation rules for ImageUrl

	// no validation rules for Note

	return nil
}

// SubmitCryptoWithdrawRequestValidationError is the validation error returned
// by SubmitCryptoWithdrawRequest.Validate if the designated constraints
// aren't met.
type SubmitCryptoWithdrawRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubmitCryptoWithdrawRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubmitCryptoWithdrawRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubmitCryptoWithdrawRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubmitCryptoWithdrawRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubmitCryptoWithdrawRequestValidationError) ErrorName() string {
	return "SubmitCryptoWithdrawRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SubmitCryptoWithdrawRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubmitCryptoWithdrawRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubmitCryptoWithdrawRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubmitCryptoWithdrawRequestValidationError{}

// Validate checks the field values on SubmitCryptoWithdrawReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SubmitCryptoWithdrawReply) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// SubmitCryptoWithdrawReplyValidationError is the validation error returned by
// SubmitCryptoWithdrawReply.Validate if the designated constraints aren't met.
type SubmitCryptoWithdrawReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubmitCryptoWithdrawReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubmitCryptoWithdrawReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubmitCryptoWithdrawReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubmitCryptoWithdrawReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubmitCryptoWithdrawReplyValidationError) ErrorName() string {
	return "SubmitCryptoWithdrawReplyValidationError"
}

// Error satisfies the builtin error interface
func (e SubmitCryptoWithdrawReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubmitCryptoWithdrawReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubmitCryptoWithdrawReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubmitCryptoWithdrawReplyValidationError{}

// Validate checks the field values on RejectCryptoWithdrawRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RejectCryptoWithdrawRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for PaymentId

	// no validation rules for Note

	// no validation rules for IsMerchantCall

	return nil
}

// RejectCryptoWithdrawRequestValidationError is the validation error returned
// by RejectCryptoWithdrawRequest.Validate if the designated constraints
// aren't met.
type RejectCryptoWithdrawRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RejectCryptoWithdrawRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RejectCryptoWithdrawRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RejectCryptoWithdrawRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RejectCryptoWithdrawRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RejectCryptoWithdrawRequestValidationError) ErrorName() string {
	return "RejectCryptoWithdrawRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RejectCryptoWithdrawRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRejectCryptoWithdrawRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RejectCryptoWithdrawRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RejectCryptoWithdrawRequestValidationError{}

// Validate checks the field values on RejectCryptoWithdrawReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RejectCryptoWithdrawReply) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// RejectCryptoWithdrawReplyValidationError is the validation error returned by
// RejectCryptoWithdrawReply.Validate if the designated constraints aren't met.
type RejectCryptoWithdrawReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RejectCryptoWithdrawReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RejectCryptoWithdrawReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RejectCryptoWithdrawReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RejectCryptoWithdrawReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RejectCryptoWithdrawReplyValidationError) ErrorName() string {
	return "RejectCryptoWithdrawReplyValidationError"
}

// Error satisfies the builtin error interface
func (e RejectCryptoWithdrawReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRejectCryptoWithdrawReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RejectCryptoWithdrawReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RejectCryptoWithdrawReplyValidationError{}

// Validate checks the field values on ApproveCryptoTopUpRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ApproveCryptoTopUpRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for PaymentId

	// no validation rules for Note

	return nil
}

// ApproveCryptoTopUpRequestValidationError is the validation error returned by
// ApproveCryptoTopUpRequest.Validate if the designated constraints aren't met.
type ApproveCryptoTopUpRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApproveCryptoTopUpRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApproveCryptoTopUpRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApproveCryptoTopUpRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApproveCryptoTopUpRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApproveCryptoTopUpRequestValidationError) ErrorName() string {
	return "ApproveCryptoTopUpRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ApproveCryptoTopUpRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApproveCryptoTopUpRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApproveCryptoTopUpRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApproveCryptoTopUpRequestValidationError{}

// Validate checks the field values on ApproveCryptoTopUpReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ApproveCryptoTopUpReply) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ApproveCryptoTopUpReplyValidationError is the validation error returned by
// ApproveCryptoTopUpReply.Validate if the designated constraints aren't met.
type ApproveCryptoTopUpReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApproveCryptoTopUpReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApproveCryptoTopUpReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApproveCryptoTopUpReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApproveCryptoTopUpReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApproveCryptoTopUpReplyValidationError) ErrorName() string {
	return "ApproveCryptoTopUpReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ApproveCryptoTopUpReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApproveCryptoTopUpReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApproveCryptoTopUpReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApproveCryptoTopUpReplyValidationError{}

// Validate checks the field values on RejectCryptoTopUpRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RejectCryptoTopUpRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for PaymentId

	// no validation rules for Note

	// no validation rules for IsMerchantCall

	return nil
}

// RejectCryptoTopUpRequestValidationError is the validation error returned by
// RejectCryptoTopUpRequest.Validate if the designated constraints aren't met.
type RejectCryptoTopUpRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RejectCryptoTopUpRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RejectCryptoTopUpRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RejectCryptoTopUpRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RejectCryptoTopUpRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RejectCryptoTopUpRequestValidationError) ErrorName() string {
	return "RejectCryptoTopUpRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RejectCryptoTopUpRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRejectCryptoTopUpRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RejectCryptoTopUpRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RejectCryptoTopUpRequestValidationError{}

// Validate checks the field values on RejectCryptoTopUpReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RejectCryptoTopUpReply) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// RejectCryptoTopUpReplyValidationError is the validation error returned by
// RejectCryptoTopUpReply.Validate if the designated constraints aren't met.
type RejectCryptoTopUpReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RejectCryptoTopUpReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RejectCryptoTopUpReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RejectCryptoTopUpReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RejectCryptoTopUpReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RejectCryptoTopUpReplyValidationError) ErrorName() string {
	return "RejectCryptoTopUpReplyValidationError"
}

// Error satisfies the builtin error interface
func (e RejectCryptoTopUpReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRejectCryptoTopUpReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RejectCryptoTopUpReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RejectCryptoTopUpReplyValidationError{}

// Validate checks the field values on GetCryptoWalletRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetCryptoWalletRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for CryptoType

	// no validation rules for CryptoNetworkType

	// no validation rules for MerchantUserId

	return nil
}

// GetCryptoWalletRequestValidationError is the validation error returned by
// GetCryptoWalletRequest.Validate if the designated constraints aren't met.
type GetCryptoWalletRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCryptoWalletRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCryptoWalletRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCryptoWalletRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCryptoWalletRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCryptoWalletRequestValidationError) ErrorName() string {
	return "GetCryptoWalletRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCryptoWalletRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCryptoWalletRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCryptoWalletRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCryptoWalletRequestValidationError{}

// Validate checks the field values on GetCryptoWalletReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetCryptoWalletReply) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Address

	return nil
}

// GetCryptoWalletReplyValidationError is the validation error returned by
// GetCryptoWalletReply.Validate if the designated constraints aren't met.
type GetCryptoWalletReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCryptoWalletReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCryptoWalletReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCryptoWalletReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCryptoWalletReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCryptoWalletReplyValidationError) ErrorName() string {
	return "GetCryptoWalletReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetCryptoWalletReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCryptoWalletReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCryptoWalletReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCryptoWalletReplyValidationError{}

// Validate checks the field values on LoadCryptoWalletsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *LoadCryptoWalletsRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for CryptoType

	// no validation rules for CryptoNetworkType

	return nil
}

// LoadCryptoWalletsRequestValidationError is the validation error returned by
// LoadCryptoWalletsRequest.Validate if the designated constraints aren't met.
type LoadCryptoWalletsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoadCryptoWalletsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoadCryptoWalletsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoadCryptoWalletsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoadCryptoWalletsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoadCryptoWalletsRequestValidationError) ErrorName() string {
	return "LoadCryptoWalletsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LoadCryptoWalletsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoadCryptoWalletsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoadCryptoWalletsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoadCryptoWalletsRequestValidationError{}

// Validate checks the field values on LoadCryptoWalletsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *LoadCryptoWalletsReply) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Data

	return nil
}

// LoadCryptoWalletsReplyValidationError is the validation error returned by
// LoadCryptoWalletsReply.Validate if the designated constraints aren't met.
type LoadCryptoWalletsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoadCryptoWalletsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoadCryptoWalletsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoadCryptoWalletsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoadCryptoWalletsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoadCryptoWalletsReplyValidationError) ErrorName() string {
	return "LoadCryptoWalletsReplyValidationError"
}

// Error satisfies the builtin error interface
func (e LoadCryptoWalletsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoadCryptoWalletsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoadCryptoWalletsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoadCryptoWalletsReplyValidationError{}

// Validate checks the field values on ValidateCryptoWalletsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ValidateCryptoWalletsRequest) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetRecords() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ValidateCryptoWalletsRequestValidationError{
					field:  fmt.Sprintf("Records[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ValidateCryptoWalletsRequestValidationError is the validation error returned
// by ValidateCryptoWalletsRequest.Validate if the designated constraints
// aren't met.
type ValidateCryptoWalletsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ValidateCryptoWalletsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ValidateCryptoWalletsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ValidateCryptoWalletsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ValidateCryptoWalletsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ValidateCryptoWalletsRequestValidationError) ErrorName() string {
	return "ValidateCryptoWalletsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ValidateCryptoWalletsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sValidateCryptoWalletsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ValidateCryptoWalletsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ValidateCryptoWalletsRequestValidationError{}

// Validate checks the field values on ValidateCryptoWalletsReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ValidateCryptoWalletsReply) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetValidRecords() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ValidateCryptoWalletsReplyValidationError{
					field:  fmt.Sprintf("ValidRecords[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetDuplicatedRecords() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ValidateCryptoWalletsReplyValidationError{
					field:  fmt.Sprintf("DuplicatedRecords[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ValidateCryptoWalletsReplyValidationError is the validation error returned
// by ValidateCryptoWalletsReply.Validate if the designated constraints aren't met.
type ValidateCryptoWalletsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ValidateCryptoWalletsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ValidateCryptoWalletsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ValidateCryptoWalletsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ValidateCryptoWalletsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ValidateCryptoWalletsReplyValidationError) ErrorName() string {
	return "ValidateCryptoWalletsReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ValidateCryptoWalletsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sValidateCryptoWalletsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ValidateCryptoWalletsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ValidateCryptoWalletsReplyValidationError{}

// Validate checks the field values on ImportCryptoWalletsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ImportCryptoWalletsRequest) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetWallets() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ImportCryptoWalletsRequestValidationError{
					field:  fmt.Sprintf("Wallets[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ImportCryptoWalletsRequestValidationError is the validation error returned
// by ImportCryptoWalletsRequest.Validate if the designated constraints aren't met.
type ImportCryptoWalletsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImportCryptoWalletsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImportCryptoWalletsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImportCryptoWalletsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImportCryptoWalletsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImportCryptoWalletsRequestValidationError) ErrorName() string {
	return "ImportCryptoWalletsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ImportCryptoWalletsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImportCryptoWalletsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImportCryptoWalletsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImportCryptoWalletsRequestValidationError{}

// Validate checks the field values on ImportCryptoWalletsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ImportCryptoWalletsReply) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetWallets() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ImportCryptoWalletsReplyValidationError{
					field:  fmt.Sprintf("Wallets[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ImportCryptoWalletsReplyValidationError is the validation error returned by
// ImportCryptoWalletsReply.Validate if the designated constraints aren't met.
type ImportCryptoWalletsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImportCryptoWalletsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImportCryptoWalletsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImportCryptoWalletsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImportCryptoWalletsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImportCryptoWalletsReplyValidationError) ErrorName() string {
	return "ImportCryptoWalletsReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ImportCryptoWalletsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImportCryptoWalletsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImportCryptoWalletsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImportCryptoWalletsReplyValidationError{}

// Validate checks the field values on ListCryptoWalletsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListCryptoWalletsRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Page

	// no validation rules for Size

	return nil
}

// ListCryptoWalletsRequestValidationError is the validation error returned by
// ListCryptoWalletsRequest.Validate if the designated constraints aren't met.
type ListCryptoWalletsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCryptoWalletsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCryptoWalletsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCryptoWalletsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCryptoWalletsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCryptoWalletsRequestValidationError) ErrorName() string {
	return "ListCryptoWalletsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListCryptoWalletsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCryptoWalletsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCryptoWalletsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCryptoWalletsRequestValidationError{}

// Validate checks the field values on ListCryptoWalletsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListCryptoWalletsReply) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetRecords() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCryptoWalletsReplyValidationError{
					field:  fmt.Sprintf("Records[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	// no validation rules for CurrentPage

	return nil
}

// ListCryptoWalletsReplyValidationError is the validation error returned by
// ListCryptoWalletsReply.Validate if the designated constraints aren't met.
type ListCryptoWalletsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCryptoWalletsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCryptoWalletsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCryptoWalletsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCryptoWalletsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCryptoWalletsReplyValidationError) ErrorName() string {
	return "ListCryptoWalletsReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListCryptoWalletsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCryptoWalletsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCryptoWalletsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCryptoWalletsReplyValidationError{}

// Validate checks the field values on ValidateCryptoHotWalletsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ValidateCryptoHotWalletsRequest) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetRecords() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ValidateCryptoHotWalletsRequestValidationError{
					field:  fmt.Sprintf("Records[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ValidateCryptoHotWalletsRequestValidationError is the validation error
// returned by ValidateCryptoHotWalletsRequest.Validate if the designated
// constraints aren't met.
type ValidateCryptoHotWalletsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ValidateCryptoHotWalletsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ValidateCryptoHotWalletsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ValidateCryptoHotWalletsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ValidateCryptoHotWalletsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ValidateCryptoHotWalletsRequestValidationError) ErrorName() string {
	return "ValidateCryptoHotWalletsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ValidateCryptoHotWalletsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sValidateCryptoHotWalletsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ValidateCryptoHotWalletsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ValidateCryptoHotWalletsRequestValidationError{}

// Validate checks the field values on ValidateCryptoHotWalletsReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ValidateCryptoHotWalletsReply) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetValidRecords() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ValidateCryptoHotWalletsReplyValidationError{
					field:  fmt.Sprintf("ValidRecords[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetDuplicatedRecords() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ValidateCryptoHotWalletsReplyValidationError{
					field:  fmt.Sprintf("DuplicatedRecords[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ValidateCryptoHotWalletsReplyValidationError is the validation error
// returned by ValidateCryptoHotWalletsReply.Validate if the designated
// constraints aren't met.
type ValidateCryptoHotWalletsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ValidateCryptoHotWalletsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ValidateCryptoHotWalletsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ValidateCryptoHotWalletsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ValidateCryptoHotWalletsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ValidateCryptoHotWalletsReplyValidationError) ErrorName() string {
	return "ValidateCryptoHotWalletsReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ValidateCryptoHotWalletsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sValidateCryptoHotWalletsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ValidateCryptoHotWalletsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ValidateCryptoHotWalletsReplyValidationError{}

// Validate checks the field values on ImportCryptoHotWalletsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ImportCryptoHotWalletsRequest) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetRecords() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ImportCryptoHotWalletsRequestValidationError{
					field:  fmt.Sprintf("Records[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ImportCryptoHotWalletsRequestValidationError is the validation error
// returned by ImportCryptoHotWalletsRequest.Validate if the designated
// constraints aren't met.
type ImportCryptoHotWalletsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImportCryptoHotWalletsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImportCryptoHotWalletsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImportCryptoHotWalletsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImportCryptoHotWalletsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImportCryptoHotWalletsRequestValidationError) ErrorName() string {
	return "ImportCryptoHotWalletsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ImportCryptoHotWalletsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImportCryptoHotWalletsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImportCryptoHotWalletsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImportCryptoHotWalletsRequestValidationError{}

// Validate checks the field values on ImportCryptoHotWalletsReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ImportCryptoHotWalletsReply) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetRecords() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ImportCryptoHotWalletsReplyValidationError{
					field:  fmt.Sprintf("Records[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ImportCryptoHotWalletsReplyValidationError is the validation error returned
// by ImportCryptoHotWalletsReply.Validate if the designated constraints
// aren't met.
type ImportCryptoHotWalletsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImportCryptoHotWalletsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImportCryptoHotWalletsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImportCryptoHotWalletsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImportCryptoHotWalletsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImportCryptoHotWalletsReplyValidationError) ErrorName() string {
	return "ImportCryptoHotWalletsReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ImportCryptoHotWalletsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImportCryptoHotWalletsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImportCryptoHotWalletsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImportCryptoHotWalletsReplyValidationError{}

// Validate checks the field values on ListCryptoHotWalletsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListCryptoHotWalletsRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Page

	// no validation rules for Size

	return nil
}

// ListCryptoHotWalletsRequestValidationError is the validation error returned
// by ListCryptoHotWalletsRequest.Validate if the designated constraints
// aren't met.
type ListCryptoHotWalletsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCryptoHotWalletsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCryptoHotWalletsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCryptoHotWalletsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCryptoHotWalletsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCryptoHotWalletsRequestValidationError) ErrorName() string {
	return "ListCryptoHotWalletsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListCryptoHotWalletsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCryptoHotWalletsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCryptoHotWalletsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCryptoHotWalletsRequestValidationError{}

// Validate checks the field values on ListCryptoHotWalletsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListCryptoHotWalletsReply) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetRecords() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCryptoHotWalletsReplyValidationError{
					field:  fmt.Sprintf("Records[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	// no validation rules for CurrentPage

	return nil
}

// ListCryptoHotWalletsReplyValidationError is the validation error returned by
// ListCryptoHotWalletsReply.Validate if the designated constraints aren't met.
type ListCryptoHotWalletsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCryptoHotWalletsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCryptoHotWalletsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCryptoHotWalletsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCryptoHotWalletsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCryptoHotWalletsReplyValidationError) ErrorName() string {
	return "ListCryptoHotWalletsReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListCryptoHotWalletsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCryptoHotWalletsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCryptoHotWalletsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCryptoHotWalletsReplyValidationError{}

// Validate checks the field values on GetSystemCryptoHotWalletsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *GetSystemCryptoHotWalletsRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for CryptoType

	// no validation rules for CryptoNetworkType

	// no validation rules for MerchantId

	// no validation rules for Amount

	return nil
}

// GetSystemCryptoHotWalletsRequestValidationError is the validation error
// returned by GetSystemCryptoHotWalletsRequest.Validate if the designated
// constraints aren't met.
type GetSystemCryptoHotWalletsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSystemCryptoHotWalletsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSystemCryptoHotWalletsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSystemCryptoHotWalletsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSystemCryptoHotWalletsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSystemCryptoHotWalletsRequestValidationError) ErrorName() string {
	return "GetSystemCryptoHotWalletsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSystemCryptoHotWalletsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSystemCryptoHotWalletsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSystemCryptoHotWalletsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSystemCryptoHotWalletsRequestValidationError{}

// Validate checks the field values on GetSystemCryptoHotWalletsReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetSystemCryptoHotWalletsReply) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetRecords() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetSystemCryptoHotWalletsReplyValidationError{
					field:  fmt.Sprintf("Records[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetSystemCryptoHotWalletsReplyValidationError is the validation error
// returned by GetSystemCryptoHotWalletsReply.Validate if the designated
// constraints aren't met.
type GetSystemCryptoHotWalletsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSystemCryptoHotWalletsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSystemCryptoHotWalletsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSystemCryptoHotWalletsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSystemCryptoHotWalletsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSystemCryptoHotWalletsReplyValidationError) ErrorName() string {
	return "GetSystemCryptoHotWalletsReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetSystemCryptoHotWalletsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSystemCryptoHotWalletsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSystemCryptoHotWalletsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSystemCryptoHotWalletsReplyValidationError{}

// Validate checks the field values on SystemCryptoHotWallet with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SystemCryptoHotWallet) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Address

	// no validation rules for MerchantId

	// no validation rules for CryptoType

	// no validation rules for CryptoNetworkType

	// no validation rules for TotalBalance

	// no validation rules for Balance

	// no validation rules for Status

	return nil
}

// SystemCryptoHotWalletValidationError is the validation error returned by
// SystemCryptoHotWallet.Validate if the designated constraints aren't met.
type SystemCryptoHotWalletValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SystemCryptoHotWalletValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SystemCryptoHotWalletValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SystemCryptoHotWalletValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SystemCryptoHotWalletValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SystemCryptoHotWalletValidationError) ErrorName() string {
	return "SystemCryptoHotWalletValidationError"
}

// Error satisfies the builtin error interface
func (e SystemCryptoHotWalletValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSystemCryptoHotWallet.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SystemCryptoHotWalletValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SystemCryptoHotWalletValidationError{}

// Validate checks the field values on CallbackTransactionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CallbackTransactionRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for StoreId

	// no validation rules for AppTransId

	// no validation rules for TransId

	// no validation rules for Sender

	// no validation rules for Recipient

	// no validation rules for Currency

	// no validation rules for TransactionFee

	// no validation rules for TxHash

	// no validation rules for Amount

	// no validation rules for ReceivedAmount

	// no validation rules for Type

	// no validation rules for State

	// no validation rules for Message

	// no validation rules for BcFee

	// no validation rules for BcFeeCurrency

	return nil
}

// CallbackTransactionRequestValidationError is the validation error returned
// by CallbackTransactionRequest.Validate if the designated constraints aren't met.
type CallbackTransactionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CallbackTransactionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CallbackTransactionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CallbackTransactionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CallbackTransactionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CallbackTransactionRequestValidationError) ErrorName() string {
	return "CallbackTransactionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CallbackTransactionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCallbackTransactionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CallbackTransactionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CallbackTransactionRequestValidationError{}

// Validate checks the field values on CallbackTransactionReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CallbackTransactionReply) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// CallbackTransactionReplyValidationError is the validation error returned by
// CallbackTransactionReply.Validate if the designated constraints aren't met.
type CallbackTransactionReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CallbackTransactionReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CallbackTransactionReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CallbackTransactionReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CallbackTransactionReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CallbackTransactionReplyValidationError) ErrorName() string {
	return "CallbackTransactionReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CallbackTransactionReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCallbackTransactionReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CallbackTransactionReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CallbackTransactionReplyValidationError{}

// Validate checks the field values on CryptoWallet with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *CryptoWallet) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Address

	// no validation rules for MerchantId

	// no validation rules for CryptoType

	// no validation rules for CryptoNetworkType

	// no validation rules for Status

	return nil
}

// CryptoWalletValidationError is the validation error returned by
// CryptoWallet.Validate if the designated constraints aren't met.
type CryptoWalletValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CryptoWalletValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CryptoWalletValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CryptoWalletValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CryptoWalletValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CryptoWalletValidationError) ErrorName() string { return "CryptoWalletValidationError" }

// Error satisfies the builtin error interface
func (e CryptoWalletValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCryptoWallet.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CryptoWalletValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CryptoWalletValidationError{}

// Validate checks the field values on CryptoPaymentDetail with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CryptoPaymentDetail) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for CryptoType

	// no validation rules for CryptoNetworkType

	// no validation rules for CryptoWalletName

	// no validation rules for ReceiverAddress

	// no validation rules for SenderAddress

	// no validation rules for Amount

	// no validation rules for ReceivedAmount

	// no validation rules for TxHash

	// no validation rules for Fee

	// no validation rules for ImageUrl

	return nil
}

// CryptoPaymentDetailValidationError is the validation error returned by
// CryptoPaymentDetail.Validate if the designated constraints aren't met.
type CryptoPaymentDetailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CryptoPaymentDetailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CryptoPaymentDetailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CryptoPaymentDetailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CryptoPaymentDetailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CryptoPaymentDetailValidationError) ErrorName() string {
	return "CryptoPaymentDetailValidationError"
}

// Error satisfies the builtin error interface
func (e CryptoPaymentDetailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCryptoPaymentDetail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CryptoPaymentDetailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CryptoPaymentDetailValidationError{}

// Validate checks the field values on UpdateAutoTransferCryptoWithdrawRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *UpdateAutoTransferCryptoWithdrawRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Enabled

	return nil
}

// UpdateAutoTransferCryptoWithdrawRequestValidationError is the validation
// error returned by UpdateAutoTransferCryptoWithdrawRequest.Validate if the
// designated constraints aren't met.
type UpdateAutoTransferCryptoWithdrawRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAutoTransferCryptoWithdrawRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAutoTransferCryptoWithdrawRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAutoTransferCryptoWithdrawRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAutoTransferCryptoWithdrawRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAutoTransferCryptoWithdrawRequestValidationError) ErrorName() string {
	return "UpdateAutoTransferCryptoWithdrawRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAutoTransferCryptoWithdrawRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAutoTransferCryptoWithdrawRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAutoTransferCryptoWithdrawRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAutoTransferCryptoWithdrawRequestValidationError{}

// Validate checks the field values on UpdateAutoTransferCryptoWithdrawReply
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *UpdateAutoTransferCryptoWithdrawReply) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// UpdateAutoTransferCryptoWithdrawReplyValidationError is the validation error
// returned by UpdateAutoTransferCryptoWithdrawReply.Validate if the
// designated constraints aren't met.
type UpdateAutoTransferCryptoWithdrawReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAutoTransferCryptoWithdrawReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAutoTransferCryptoWithdrawReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAutoTransferCryptoWithdrawReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAutoTransferCryptoWithdrawReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAutoTransferCryptoWithdrawReplyValidationError) ErrorName() string {
	return "UpdateAutoTransferCryptoWithdrawReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAutoTransferCryptoWithdrawReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAutoTransferCryptoWithdrawReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAutoTransferCryptoWithdrawReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAutoTransferCryptoWithdrawReplyValidationError{}

// Validate checks the field values on GetCryptoSettingsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetCryptoSettingsRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetCryptoSettingsRequestValidationError is the validation error returned by
// GetCryptoSettingsRequest.Validate if the designated constraints aren't met.
type GetCryptoSettingsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCryptoSettingsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCryptoSettingsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCryptoSettingsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCryptoSettingsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCryptoSettingsRequestValidationError) ErrorName() string {
	return "GetCryptoSettingsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCryptoSettingsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCryptoSettingsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCryptoSettingsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCryptoSettingsRequestValidationError{}

// Validate checks the field values on GetCryptoSettingsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetCryptoSettingsReply) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for AutoTransferWithdrawCrypto

	return nil
}

// GetCryptoSettingsReplyValidationError is the validation error returned by
// GetCryptoSettingsReply.Validate if the designated constraints aren't met.
type GetCryptoSettingsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCryptoSettingsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCryptoSettingsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCryptoSettingsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCryptoSettingsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCryptoSettingsReplyValidationError) ErrorName() string {
	return "GetCryptoSettingsReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetCryptoSettingsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCryptoSettingsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCryptoSettingsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCryptoSettingsReplyValidationError{}
