// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: stark/api/howard.proto

package stark

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _howard_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on StatisticDetail with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *StatisticDetail) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Number

	// no validation rules for Percent

	return nil
}

// StatisticDetailValidationError is the validation error returned by
// StatisticDetail.Validate if the designated constraints aren't met.
type StatisticDetailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StatisticDetailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StatisticDetailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StatisticDetailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StatisticDetailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StatisticDetailValidationError) ErrorName() string { return "StatisticDetailValidationError" }

// Error satisfies the builtin error interface
func (e StatisticDetailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStatisticDetail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StatisticDetailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StatisticDetailValidationError{}

// Validate checks the field values on GetStatisticRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetStatisticRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for PaymentType

	// no validation rules for FilterType

	if val := m.GetTimeZone(); val < -12 || val > 14 {
		return GetStatisticRequestValidationError{
			field:  "TimeZone",
			reason: "value must be inside range [-12, 14]",
		}
	}

	return nil
}

// GetStatisticRequestValidationError is the validation error returned by
// GetStatisticRequest.Validate if the designated constraints aren't met.
type GetStatisticRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStatisticRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStatisticRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStatisticRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStatisticRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStatisticRequestValidationError) ErrorName() string {
	return "GetStatisticRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetStatisticRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStatisticRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStatisticRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStatisticRequestValidationError{}

// Validate checks the field values on GetStatisticReply with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetStatisticReply) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetOrder()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetStatisticReplyValidationError{
				field:  "Order",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetAmount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetStatisticReplyValidationError{
				field:  "Amount",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetStatisticReplyValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetArppu()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetStatisticReplyValidationError{
				field:  "Arppu",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetStatisticReplyValidationError is the validation error returned by
// GetStatisticReply.Validate if the designated constraints aren't met.
type GetStatisticReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStatisticReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStatisticReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStatisticReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStatisticReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStatisticReplyValidationError) ErrorName() string {
	return "GetStatisticReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetStatisticReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStatisticReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStatisticReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStatisticReplyValidationError{}

// Validate checks the field values on GetProcessingPerformanceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetProcessingPerformanceRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetFromDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetProcessingPerformanceRequestValidationError{
				field:  "FromDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetToDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetProcessingPerformanceRequestValidationError{
				field:  "ToDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetMerchantId() <= 0 {
		return GetProcessingPerformanceRequestValidationError{
			field:  "MerchantId",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// GetProcessingPerformanceRequestValidationError is the validation error
// returned by GetProcessingPerformanceRequest.Validate if the designated
// constraints aren't met.
type GetProcessingPerformanceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProcessingPerformanceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProcessingPerformanceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProcessingPerformanceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProcessingPerformanceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProcessingPerformanceRequestValidationError) ErrorName() string {
	return "GetProcessingPerformanceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetProcessingPerformanceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProcessingPerformanceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProcessingPerformanceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProcessingPerformanceRequestValidationError{}

// Validate checks the field values on GetProcessingPerformanceReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetProcessingPerformanceReply) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for MerchantId

	// no validation rules for TotalOrder

	if v, ok := interface{}(m.GetSuccessfully()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetProcessingPerformanceReplyValidationError{
				field:  "Successfully",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetFailed()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetProcessingPerformanceReplyValidationError{
				field:  "Failed",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetWaiting()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetProcessingPerformanceReplyValidationError{
				field:  "Waiting",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetProcessingPerformanceReplyValidationError is the validation error
// returned by GetProcessingPerformanceReply.Validate if the designated
// constraints aren't met.
type GetProcessingPerformanceReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProcessingPerformanceReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProcessingPerformanceReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProcessingPerformanceReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProcessingPerformanceReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProcessingPerformanceReplyValidationError) ErrorName() string {
	return "GetProcessingPerformanceReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetProcessingPerformanceReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProcessingPerformanceReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProcessingPerformanceReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProcessingPerformanceReplyValidationError{}

// Validate checks the field values on TotalAmountMerchant with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *TotalAmountMerchant) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for MerchantId

	// no validation rules for Amount

	return nil
}

// TotalAmountMerchantValidationError is the validation error returned by
// TotalAmountMerchant.Validate if the designated constraints aren't met.
type TotalAmountMerchantValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TotalAmountMerchantValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TotalAmountMerchantValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TotalAmountMerchantValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TotalAmountMerchantValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TotalAmountMerchantValidationError) ErrorName() string {
	return "TotalAmountMerchantValidationError"
}

// Error satisfies the builtin error interface
func (e TotalAmountMerchantValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTotalAmountMerchant.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TotalAmountMerchantValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TotalAmountMerchantValidationError{}

// Validate checks the field values on TotalAmountDetail with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *TotalAmountDetail) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TotalAmountDetailValidationError{
				field:  "Date",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetMerchantAmounts() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TotalAmountDetailValidationError{
					field:  fmt.Sprintf("MerchantAmounts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// TotalAmountDetailValidationError is the validation error returned by
// TotalAmountDetail.Validate if the designated constraints aren't met.
type TotalAmountDetailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TotalAmountDetailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TotalAmountDetailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TotalAmountDetailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TotalAmountDetailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TotalAmountDetailValidationError) ErrorName() string {
	return "TotalAmountDetailValidationError"
}

// Error satisfies the builtin error interface
func (e TotalAmountDetailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTotalAmountDetail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TotalAmountDetailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TotalAmountDetailValidationError{}

// Validate checks the field values on GetTotalAmountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetTotalAmountRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetFromDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTotalAmountRequestValidationError{
				field:  "FromDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetToDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTotalAmountRequestValidationError{
				field:  "ToDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if val := m.GetTimeZone(); val < -12 || val > 14 {
		return GetTotalAmountRequestValidationError{
			field:  "TimeZone",
			reason: "value must be inside range [-12, 14]",
		}
	}

	return nil
}

// GetTotalAmountRequestValidationError is the validation error returned by
// GetTotalAmountRequest.Validate if the designated constraints aren't met.
type GetTotalAmountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTotalAmountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTotalAmountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTotalAmountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTotalAmountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTotalAmountRequestValidationError) ErrorName() string {
	return "GetTotalAmountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTotalAmountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTotalAmountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTotalAmountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTotalAmountRequestValidationError{}

// Validate checks the field values on GetTotalAmountReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetTotalAmountReply) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetDetails() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetTotalAmountReplyValidationError{
					field:  fmt.Sprintf("Details[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetTotalAmountReplyValidationError is the validation error returned by
// GetTotalAmountReply.Validate if the designated constraints aren't met.
type GetTotalAmountReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTotalAmountReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTotalAmountReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTotalAmountReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTotalAmountReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTotalAmountReplyValidationError) ErrorName() string {
	return "GetTotalAmountReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetTotalAmountReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTotalAmountReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTotalAmountReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTotalAmountReplyValidationError{}

// Validate checks the field values on GetReportRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetReportRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetFromDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetReportRequestValidationError{
				field:  "FromDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetToDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetReportRequestValidationError{
				field:  "ToDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetMerchantId() <= 0 {
		return GetReportRequestValidationError{
			field:  "MerchantId",
			reason: "value must be greater than 0",
		}
	}

	if val := m.GetTimeZone(); val < -12 || val > 14 {
		return GetReportRequestValidationError{
			field:  "TimeZone",
			reason: "value must be inside range [-12, 14]",
		}
	}

	return nil
}

// GetReportRequestValidationError is the validation error returned by
// GetReportRequest.Validate if the designated constraints aren't met.
type GetReportRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetReportRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetReportRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetReportRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetReportRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetReportRequestValidationError) ErrorName() string { return "GetReportRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetReportRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetReportRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetReportRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetReportRequestValidationError{}

// Validate checks the field values on Income with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Income) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IncomeValidationError{
				field:  "Date",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Amount

	return nil
}

// IncomeValidationError is the validation error returned by Income.Validate if
// the designated constraints aren't met.
type IncomeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IncomeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IncomeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IncomeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IncomeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IncomeValidationError) ErrorName() string { return "IncomeValidationError" }

// Error satisfies the builtin error interface
func (e IncomeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIncome.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IncomeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IncomeValidationError{}

// Validate checks the field values on TopUpCompletion with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *TopUpCompletion) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Completed

	// no validation rules for Total

	return nil
}

// TopUpCompletionValidationError is the validation error returned by
// TopUpCompletion.Validate if the designated constraints aren't met.
type TopUpCompletionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TopUpCompletionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TopUpCompletionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TopUpCompletionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TopUpCompletionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TopUpCompletionValidationError) ErrorName() string { return "TopUpCompletionValidationError" }

// Error satisfies the builtin error interface
func (e TopUpCompletionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTopUpCompletion.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TopUpCompletionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TopUpCompletionValidationError{}

// Validate checks the field values on WithdrawCompletion with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *WithdrawCompletion) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Completed

	// no validation rules for Total

	return nil
}

// WithdrawCompletionValidationError is the validation error returned by
// WithdrawCompletion.Validate if the designated constraints aren't met.
type WithdrawCompletionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WithdrawCompletionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WithdrawCompletionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WithdrawCompletionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WithdrawCompletionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WithdrawCompletionValidationError) ErrorName() string {
	return "WithdrawCompletionValidationError"
}

// Error satisfies the builtin error interface
func (e WithdrawCompletionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWithdrawCompletion.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WithdrawCompletionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WithdrawCompletionValidationError{}

// Validate checks the field values on AllocationDetail with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *AllocationDetail) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Method

	// no validation rules for Amount

	// no validation rules for Percent

	return nil
}

// AllocationDetailValidationError is the validation error returned by
// AllocationDetail.Validate if the designated constraints aren't met.
type AllocationDetailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AllocationDetailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AllocationDetailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AllocationDetailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AllocationDetailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AllocationDetailValidationError) ErrorName() string { return "AllocationDetailValidationError" }

// Error satisfies the builtin error interface
func (e AllocationDetailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAllocationDetail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AllocationDetailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AllocationDetailValidationError{}

// Validate checks the field values on PaymentMethodRevenue with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *PaymentMethodRevenue) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Method

	// no validation rules for Type

	// no validation rules for Amount

	return nil
}

// PaymentMethodRevenueValidationError is the validation error returned by
// PaymentMethodRevenue.Validate if the designated constraints aren't met.
type PaymentMethodRevenueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PaymentMethodRevenueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PaymentMethodRevenueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PaymentMethodRevenueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PaymentMethodRevenueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PaymentMethodRevenueValidationError) ErrorName() string {
	return "PaymentMethodRevenueValidationError"
}

// Error satisfies the builtin error interface
func (e PaymentMethodRevenueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPaymentMethodRevenue.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PaymentMethodRevenueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PaymentMethodRevenueValidationError{}

// Validate checks the field values on TellerRevenue with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *TellerRevenue) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserId

	// no validation rules for Amount

	return nil
}

// TellerRevenueValidationError is the validation error returned by
// TellerRevenue.Validate if the designated constraints aren't met.
type TellerRevenueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TellerRevenueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TellerRevenueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TellerRevenueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TellerRevenueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TellerRevenueValidationError) ErrorName() string { return "TellerRevenueValidationError" }

// Error satisfies the builtin error interface
func (e TellerRevenueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTellerRevenue.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TellerRevenueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TellerRevenueValidationError{}

// Validate checks the field values on GetIncomeStatementReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetIncomeStatementReply) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetRevenues() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetIncomeStatementReplyValidationError{
					field:  fmt.Sprintf("Revenues[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetProfits() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetIncomeStatementReplyValidationError{
					field:  fmt.Sprintf("Profits[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetIncomeStatementReplyValidationError is the validation error returned by
// GetIncomeStatementReply.Validate if the designated constraints aren't met.
type GetIncomeStatementReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetIncomeStatementReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetIncomeStatementReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetIncomeStatementReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetIncomeStatementReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetIncomeStatementReplyValidationError) ErrorName() string {
	return "GetIncomeStatementReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetIncomeStatementReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetIncomeStatementReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetIncomeStatementReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetIncomeStatementReplyValidationError{}

// Validate checks the field values on GetPaymentTodayReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetPaymentTodayReply) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetTopUpCompletion()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPaymentTodayReplyValidationError{
				field:  "TopUpCompletion",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetWithdrawCompletion()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPaymentTodayReplyValidationError{
				field:  "WithdrawCompletion",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetPaymentTodayReplyValidationError is the validation error returned by
// GetPaymentTodayReply.Validate if the designated constraints aren't met.
type GetPaymentTodayReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPaymentTodayReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPaymentTodayReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPaymentTodayReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPaymentTodayReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPaymentTodayReplyValidationError) ErrorName() string {
	return "GetPaymentTodayReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetPaymentTodayReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPaymentTodayReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPaymentTodayReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPaymentTodayReplyValidationError{}

// Validate checks the field values on GetProfitRateReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetProfitRateReply) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for TotalRevenue

	// no validation rules for TotalProfit

	// no validation rules for ProfitRate

	return nil
}

// GetProfitRateReplyValidationError is the validation error returned by
// GetProfitRateReply.Validate if the designated constraints aren't met.
type GetProfitRateReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProfitRateReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProfitRateReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProfitRateReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProfitRateReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProfitRateReplyValidationError) ErrorName() string {
	return "GetProfitRateReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetProfitRateReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProfitRateReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProfitRateReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProfitRateReplyValidationError{}

// Validate checks the field values on GetAllocationTopUpRateReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetAllocationTopUpRateReply) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for TotalTopup

	for idx, item := range m.GetTopUpAllocationRate() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAllocationTopUpRateReplyValidationError{
					field:  fmt.Sprintf("TopUpAllocationRate[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetAllocationTopUpRateReplyValidationError is the validation error returned
// by GetAllocationTopUpRateReply.Validate if the designated constraints
// aren't met.
type GetAllocationTopUpRateReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllocationTopUpRateReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllocationTopUpRateReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllocationTopUpRateReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllocationTopUpRateReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllocationTopUpRateReplyValidationError) ErrorName() string {
	return "GetAllocationTopUpRateReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllocationTopUpRateReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllocationTopUpRateReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllocationTopUpRateReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllocationTopUpRateReplyValidationError{}

// Validate checks the field values on GetAllocationWithdrawRateReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetAllocationWithdrawRateReply) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for TotalWithdraw

	for idx, item := range m.GetWithdrawAllocationRate() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAllocationWithdrawRateReplyValidationError{
					field:  fmt.Sprintf("WithdrawAllocationRate[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetAllocationWithdrawRateReplyValidationError is the validation error
// returned by GetAllocationWithdrawRateReply.Validate if the designated
// constraints aren't met.
type GetAllocationWithdrawRateReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllocationWithdrawRateReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllocationWithdrawRateReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllocationWithdrawRateReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllocationWithdrawRateReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllocationWithdrawRateReplyValidationError) ErrorName() string {
	return "GetAllocationWithdrawRateReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllocationWithdrawRateReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllocationWithdrawRateReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllocationWithdrawRateReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllocationWithdrawRateReplyValidationError{}

// Validate checks the field values on GetTopPaymentMethodReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetTopPaymentMethodReply) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetTopPaymentMethodRevenue() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetTopPaymentMethodReplyValidationError{
					field:  fmt.Sprintf("TopPaymentMethodRevenue[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetTopPaymentMethodReplyValidationError is the validation error returned by
// GetTopPaymentMethodReply.Validate if the designated constraints aren't met.
type GetTopPaymentMethodReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTopPaymentMethodReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTopPaymentMethodReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTopPaymentMethodReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTopPaymentMethodReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTopPaymentMethodReplyValidationError) ErrorName() string {
	return "GetTopPaymentMethodReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetTopPaymentMethodReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTopPaymentMethodReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTopPaymentMethodReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTopPaymentMethodReplyValidationError{}

// Validate checks the field values on GetTopTellerReply with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetTopTellerReply) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetTopTellerRevenue() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetTopTellerReplyValidationError{
					field:  fmt.Sprintf("TopTellerRevenue[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetTopTellerReplyValidationError is the validation error returned by
// GetTopTellerReply.Validate if the designated constraints aren't met.
type GetTopTellerReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTopTellerReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTopTellerReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTopTellerReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTopTellerReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTopTellerReplyValidationError) ErrorName() string {
	return "GetTopTellerReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetTopTellerReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTopTellerReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTopTellerReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTopTellerReplyValidationError{}

// Validate checks the field values on SaleReportItem with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *SaleReportItem) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Quantity

	// no validation rules for Amount

	// no validation rules for Average

	// no validation rules for Discount

	// no validation rules for Revenue

	switch m.Key.(type) {

	case *SaleReportItem_Date:

		if v, ok := interface{}(m.GetDate()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SaleReportItemValidationError{
					field:  "Date",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SaleReportItem_MerchantId:
		// no validation rules for MerchantId

	case *SaleReportItem_PaymentMethod:
		// no validation rules for PaymentMethod

	case *SaleReportItem_TellerId:
		// no validation rules for TellerId

	}

	return nil
}

// SaleReportItemValidationError is the validation error returned by
// SaleReportItem.Validate if the designated constraints aren't met.
type SaleReportItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SaleReportItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SaleReportItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SaleReportItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SaleReportItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SaleReportItemValidationError) ErrorName() string { return "SaleReportItemValidationError" }

// Error satisfies the builtin error interface
func (e SaleReportItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSaleReportItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SaleReportItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SaleReportItemValidationError{}

// Validate checks the field values on GetSellReportByTimeRangeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetSellReportByTimeRangeRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetFromDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetSellReportByTimeRangeRequestValidationError{
				field:  "FromDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetToDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetSellReportByTimeRangeRequestValidationError{
				field:  "ToDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Currency

	if val := m.GetTimeZone(); val < -12 || val > 14 {
		return GetSellReportByTimeRangeRequestValidationError{
			field:  "TimeZone",
			reason: "value must be inside range [-12, 14]",
		}
	}

	return nil
}

// GetSellReportByTimeRangeRequestValidationError is the validation error
// returned by GetSellReportByTimeRangeRequest.Validate if the designated
// constraints aren't met.
type GetSellReportByTimeRangeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSellReportByTimeRangeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSellReportByTimeRangeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSellReportByTimeRangeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSellReportByTimeRangeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSellReportByTimeRangeRequestValidationError) ErrorName() string {
	return "GetSellReportByTimeRangeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSellReportByTimeRangeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSellReportByTimeRangeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSellReportByTimeRangeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSellReportByTimeRangeRequestValidationError{}

// Validate checks the field values on GetSellReportByTimeRangeReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetSellReportByTimeRangeReply) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetTopUps() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetSellReportByTimeRangeReplyValidationError{
					field:  fmt.Sprintf("TopUps[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetWithdraws() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetSellReportByTimeRangeReplyValidationError{
					field:  fmt.Sprintf("Withdraws[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetSellReportByTimeRangeReplyValidationError is the validation error
// returned by GetSellReportByTimeRangeReply.Validate if the designated
// constraints aren't met.
type GetSellReportByTimeRangeReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSellReportByTimeRangeReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSellReportByTimeRangeReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSellReportByTimeRangeReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSellReportByTimeRangeReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSellReportByTimeRangeReplyValidationError) ErrorName() string {
	return "GetSellReportByTimeRangeReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetSellReportByTimeRangeReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSellReportByTimeRangeReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSellReportByTimeRangeReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSellReportByTimeRangeReplyValidationError{}

// Validate checks the field values on GetSellReportByMerchantRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetSellReportByMerchantRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetFromDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetSellReportByMerchantRequestValidationError{
				field:  "FromDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetToDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetSellReportByMerchantRequestValidationError{
				field:  "ToDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Currency

	return nil
}

// GetSellReportByMerchantRequestValidationError is the validation error
// returned by GetSellReportByMerchantRequest.Validate if the designated
// constraints aren't met.
type GetSellReportByMerchantRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSellReportByMerchantRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSellReportByMerchantRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSellReportByMerchantRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSellReportByMerchantRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSellReportByMerchantRequestValidationError) ErrorName() string {
	return "GetSellReportByMerchantRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSellReportByMerchantRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSellReportByMerchantRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSellReportByMerchantRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSellReportByMerchantRequestValidationError{}

// Validate checks the field values on GetSellReportByMerchantReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetSellReportByMerchantReply) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetTopUps() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetSellReportByMerchantReplyValidationError{
					field:  fmt.Sprintf("TopUps[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetWithdraws() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetSellReportByMerchantReplyValidationError{
					field:  fmt.Sprintf("Withdraws[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetSellReportByMerchantReplyValidationError is the validation error returned
// by GetSellReportByMerchantReply.Validate if the designated constraints
// aren't met.
type GetSellReportByMerchantReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSellReportByMerchantReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSellReportByMerchantReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSellReportByMerchantReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSellReportByMerchantReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSellReportByMerchantReplyValidationError) ErrorName() string {
	return "GetSellReportByMerchantReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetSellReportByMerchantReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSellReportByMerchantReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSellReportByMerchantReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSellReportByMerchantReplyValidationError{}

// Validate checks the field values on GetSellReportByPaymentMethodRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *GetSellReportByPaymentMethodRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetFromDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetSellReportByPaymentMethodRequestValidationError{
				field:  "FromDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetToDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetSellReportByPaymentMethodRequestValidationError{
				field:  "ToDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Currency

	return nil
}

// GetSellReportByPaymentMethodRequestValidationError is the validation error
// returned by GetSellReportByPaymentMethodRequest.Validate if the designated
// constraints aren't met.
type GetSellReportByPaymentMethodRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSellReportByPaymentMethodRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSellReportByPaymentMethodRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSellReportByPaymentMethodRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSellReportByPaymentMethodRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSellReportByPaymentMethodRequestValidationError) ErrorName() string {
	return "GetSellReportByPaymentMethodRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSellReportByPaymentMethodRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSellReportByPaymentMethodRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSellReportByPaymentMethodRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSellReportByPaymentMethodRequestValidationError{}

// Validate checks the field values on GetSellReportByPaymentMethodReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *GetSellReportByPaymentMethodReply) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetTopUps() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetSellReportByPaymentMethodReplyValidationError{
					field:  fmt.Sprintf("TopUps[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetWithdraws() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetSellReportByPaymentMethodReplyValidationError{
					field:  fmt.Sprintf("Withdraws[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetSellReportByPaymentMethodReplyValidationError is the validation error
// returned by GetSellReportByPaymentMethodReply.Validate if the designated
// constraints aren't met.
type GetSellReportByPaymentMethodReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSellReportByPaymentMethodReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSellReportByPaymentMethodReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSellReportByPaymentMethodReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSellReportByPaymentMethodReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSellReportByPaymentMethodReplyValidationError) ErrorName() string {
	return "GetSellReportByPaymentMethodReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetSellReportByPaymentMethodReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSellReportByPaymentMethodReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSellReportByPaymentMethodReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSellReportByPaymentMethodReplyValidationError{}

// Validate checks the field values on GetSellReportByTellerRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetSellReportByTellerRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetFromDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetSellReportByTellerRequestValidationError{
				field:  "FromDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetToDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetSellReportByTellerRequestValidationError{
				field:  "ToDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Currency

	return nil
}

// GetSellReportByTellerRequestValidationError is the validation error returned
// by GetSellReportByTellerRequest.Validate if the designated constraints
// aren't met.
type GetSellReportByTellerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSellReportByTellerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSellReportByTellerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSellReportByTellerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSellReportByTellerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSellReportByTellerRequestValidationError) ErrorName() string {
	return "GetSellReportByTellerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSellReportByTellerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSellReportByTellerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSellReportByTellerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSellReportByTellerRequestValidationError{}

// Validate checks the field values on GetSellReportByTellerReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetSellReportByTellerReply) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetTopUps() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetSellReportByTellerReplyValidationError{
					field:  fmt.Sprintf("TopUps[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetWithdraws() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetSellReportByTellerReplyValidationError{
					field:  fmt.Sprintf("Withdraws[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetSellReportByTellerReplyValidationError is the validation error returned
// by GetSellReportByTellerReply.Validate if the designated constraints aren't met.
type GetSellReportByTellerReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSellReportByTellerReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSellReportByTellerReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSellReportByTellerReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSellReportByTellerReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSellReportByTellerReplyValidationError) ErrorName() string {
	return "GetSellReportByTellerReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetSellReportByTellerReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSellReportByTellerReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSellReportByTellerReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSellReportByTellerReplyValidationError{}
