// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package stark

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// PepperClient is the client API for Pepper service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PepperClient interface {
	// MEX call to request a payment for their user to make payment to pepper
	GetBankPaymentCode(ctx context.Context, in *GetBankPaymentCodeRequest, opts ...grpc.CallOption) (*GetBankPaymentCodeReply, error)
	CreateBankingWithdraw(ctx context.Context, in *CreateBankingWithdrawRequest, opts ...grpc.CallOption) (*CreateBankingWithdrawReply, error)
	CancelBankingWithdraw(ctx context.Context, in *CancelBankingWithdrawRequest, opts ...grpc.CallOption) (*CancelBankingWithdrawReply, error)
	// Teller to manage top-up telco payment
	CreateBankingTopUp(ctx context.Context, in *CreateBankingTopUpRequest, opts ...grpc.CallOption) (*CreateBankingTopUpReply, error)
	ApproveBankingTopUp(ctx context.Context, in *ApproveBankingTopUpRequest, opts ...grpc.CallOption) (*ApproveBankingTopUpReply, error)
	RejectBankingTopUp(ctx context.Context, in *RejectBankingTopUpRequest, opts ...grpc.CallOption) (*RejectBankingTopUpReply, error)
	ListSystemBankAccountByPaymentInfo(ctx context.Context, in *ListSystemBankAccountByPaymentInfoRequest, opts ...grpc.CallOption) (*ListSystemBankAccountByPaymentInfoReply, error)
	// Teller to manage withdraw telco payment
	ApproveBankingWithdraw(ctx context.Context, in *ApproveBankingWithdrawRequest, opts ...grpc.CallOption) (*ApproveBankingWithdrawReply, error)
	RejectBankingWithdraw(ctx context.Context, in *RejectBankingWithdrawRequest, opts ...grpc.CallOption) (*RejectBankingWithdrawReply, error)
	SubmitBankingWithdraw(ctx context.Context, in *SubmitBankingWithdrawRequest, opts ...grpc.CallOption) (*SubmitBankingWithdrawReply, error)
	GetIsMerchantUserBankAccountVerified(ctx context.Context, in *GetIsMerchantUserBankAccountVerifiedRequest, opts ...grpc.CallOption) (*GetIsMerchantUserBankAccountVerifiedReply, error)
	// Teller to manage system bank accounts
	ListSystemBankAccounts(ctx context.Context, in *ListSystemBankAccountsRequest, opts ...grpc.CallOption) (*ListSystemBankAccountsReply, error)
	CreateSystemBankAccount(ctx context.Context, in *CreateSystemBankAccountRequest, opts ...grpc.CallOption) (*CreateSystemBankAccountReply, error)
	VerifyMerchantUserBankAccount(ctx context.Context, in *VerifyMerchantUserBankAccountRequest, opts ...grpc.CallOption) (*VerifyMerchantUserBankAccountReply, error)
	ValidateImportSystemBankAccount(ctx context.Context, in *ValidateImportSystemBankAccountRequest, opts ...grpc.CallOption) (*ValidateImportSystemBankAccountReply, error)
	ImportSystemBankAccount(ctx context.Context, in *ImportSystemBankAccountRequest, opts ...grpc.CallOption) (*ImportSystemBankAccountReply, error)
	UpdateSystemBankAccountStatus(ctx context.Context, in *UpdateSystemBankAccountStatusRequest, opts ...grpc.CallOption) (*UpdateSystemBankAccountStatusReply, error)
}

type pepperClient struct {
	cc grpc.ClientConnInterface
}

func NewPepperClient(cc grpc.ClientConnInterface) PepperClient {
	return &pepperClient{cc}
}

func (c *pepperClient) GetBankPaymentCode(ctx context.Context, in *GetBankPaymentCodeRequest, opts ...grpc.CallOption) (*GetBankPaymentCodeReply, error) {
	out := new(GetBankPaymentCodeReply)
	err := c.cc.Invoke(ctx, "/mcuc.stark.pepper.Pepper/GetBankPaymentCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pepperClient) CreateBankingWithdraw(ctx context.Context, in *CreateBankingWithdrawRequest, opts ...grpc.CallOption) (*CreateBankingWithdrawReply, error) {
	out := new(CreateBankingWithdrawReply)
	err := c.cc.Invoke(ctx, "/mcuc.stark.pepper.Pepper/CreateBankingWithdraw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pepperClient) CancelBankingWithdraw(ctx context.Context, in *CancelBankingWithdrawRequest, opts ...grpc.CallOption) (*CancelBankingWithdrawReply, error) {
	out := new(CancelBankingWithdrawReply)
	err := c.cc.Invoke(ctx, "/mcuc.stark.pepper.Pepper/CancelBankingWithdraw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pepperClient) CreateBankingTopUp(ctx context.Context, in *CreateBankingTopUpRequest, opts ...grpc.CallOption) (*CreateBankingTopUpReply, error) {
	out := new(CreateBankingTopUpReply)
	err := c.cc.Invoke(ctx, "/mcuc.stark.pepper.Pepper/CreateBankingTopUp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pepperClient) ApproveBankingTopUp(ctx context.Context, in *ApproveBankingTopUpRequest, opts ...grpc.CallOption) (*ApproveBankingTopUpReply, error) {
	out := new(ApproveBankingTopUpReply)
	err := c.cc.Invoke(ctx, "/mcuc.stark.pepper.Pepper/ApproveBankingTopUp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pepperClient) RejectBankingTopUp(ctx context.Context, in *RejectBankingTopUpRequest, opts ...grpc.CallOption) (*RejectBankingTopUpReply, error) {
	out := new(RejectBankingTopUpReply)
	err := c.cc.Invoke(ctx, "/mcuc.stark.pepper.Pepper/RejectBankingTopUp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pepperClient) ListSystemBankAccountByPaymentInfo(ctx context.Context, in *ListSystemBankAccountByPaymentInfoRequest, opts ...grpc.CallOption) (*ListSystemBankAccountByPaymentInfoReply, error) {
	out := new(ListSystemBankAccountByPaymentInfoReply)
	err := c.cc.Invoke(ctx, "/mcuc.stark.pepper.Pepper/ListSystemBankAccountByPaymentInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pepperClient) ApproveBankingWithdraw(ctx context.Context, in *ApproveBankingWithdrawRequest, opts ...grpc.CallOption) (*ApproveBankingWithdrawReply, error) {
	out := new(ApproveBankingWithdrawReply)
	err := c.cc.Invoke(ctx, "/mcuc.stark.pepper.Pepper/ApproveBankingWithdraw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pepperClient) RejectBankingWithdraw(ctx context.Context, in *RejectBankingWithdrawRequest, opts ...grpc.CallOption) (*RejectBankingWithdrawReply, error) {
	out := new(RejectBankingWithdrawReply)
	err := c.cc.Invoke(ctx, "/mcuc.stark.pepper.Pepper/RejectBankingWithdraw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pepperClient) SubmitBankingWithdraw(ctx context.Context, in *SubmitBankingWithdrawRequest, opts ...grpc.CallOption) (*SubmitBankingWithdrawReply, error) {
	out := new(SubmitBankingWithdrawReply)
	err := c.cc.Invoke(ctx, "/mcuc.stark.pepper.Pepper/SubmitBankingWithdraw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pepperClient) GetIsMerchantUserBankAccountVerified(ctx context.Context, in *GetIsMerchantUserBankAccountVerifiedRequest, opts ...grpc.CallOption) (*GetIsMerchantUserBankAccountVerifiedReply, error) {
	out := new(GetIsMerchantUserBankAccountVerifiedReply)
	err := c.cc.Invoke(ctx, "/mcuc.stark.pepper.Pepper/GetIsMerchantUserBankAccountVerified", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pepperClient) ListSystemBankAccounts(ctx context.Context, in *ListSystemBankAccountsRequest, opts ...grpc.CallOption) (*ListSystemBankAccountsReply, error) {
	out := new(ListSystemBankAccountsReply)
	err := c.cc.Invoke(ctx, "/mcuc.stark.pepper.Pepper/ListSystemBankAccounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pepperClient) CreateSystemBankAccount(ctx context.Context, in *CreateSystemBankAccountRequest, opts ...grpc.CallOption) (*CreateSystemBankAccountReply, error) {
	out := new(CreateSystemBankAccountReply)
	err := c.cc.Invoke(ctx, "/mcuc.stark.pepper.Pepper/CreateSystemBankAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pepperClient) VerifyMerchantUserBankAccount(ctx context.Context, in *VerifyMerchantUserBankAccountRequest, opts ...grpc.CallOption) (*VerifyMerchantUserBankAccountReply, error) {
	out := new(VerifyMerchantUserBankAccountReply)
	err := c.cc.Invoke(ctx, "/mcuc.stark.pepper.Pepper/VerifyMerchantUserBankAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pepperClient) ValidateImportSystemBankAccount(ctx context.Context, in *ValidateImportSystemBankAccountRequest, opts ...grpc.CallOption) (*ValidateImportSystemBankAccountReply, error) {
	out := new(ValidateImportSystemBankAccountReply)
	err := c.cc.Invoke(ctx, "/mcuc.stark.pepper.Pepper/ValidateImportSystemBankAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pepperClient) ImportSystemBankAccount(ctx context.Context, in *ImportSystemBankAccountRequest, opts ...grpc.CallOption) (*ImportSystemBankAccountReply, error) {
	out := new(ImportSystemBankAccountReply)
	err := c.cc.Invoke(ctx, "/mcuc.stark.pepper.Pepper/ImportSystemBankAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pepperClient) UpdateSystemBankAccountStatus(ctx context.Context, in *UpdateSystemBankAccountStatusRequest, opts ...grpc.CallOption) (*UpdateSystemBankAccountStatusReply, error) {
	out := new(UpdateSystemBankAccountStatusReply)
	err := c.cc.Invoke(ctx, "/mcuc.stark.pepper.Pepper/UpdateSystemBankAccountStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PepperServer is the server API for Pepper service.
// All implementations must embed UnimplementedPepperServer
// for forward compatibility
type PepperServer interface {
	// MEX call to request a payment for their user to make payment to pepper
	GetBankPaymentCode(context.Context, *GetBankPaymentCodeRequest) (*GetBankPaymentCodeReply, error)
	CreateBankingWithdraw(context.Context, *CreateBankingWithdrawRequest) (*CreateBankingWithdrawReply, error)
	CancelBankingWithdraw(context.Context, *CancelBankingWithdrawRequest) (*CancelBankingWithdrawReply, error)
	// Teller to manage top-up telco payment
	CreateBankingTopUp(context.Context, *CreateBankingTopUpRequest) (*CreateBankingTopUpReply, error)
	ApproveBankingTopUp(context.Context, *ApproveBankingTopUpRequest) (*ApproveBankingTopUpReply, error)
	RejectBankingTopUp(context.Context, *RejectBankingTopUpRequest) (*RejectBankingTopUpReply, error)
	ListSystemBankAccountByPaymentInfo(context.Context, *ListSystemBankAccountByPaymentInfoRequest) (*ListSystemBankAccountByPaymentInfoReply, error)
	// Teller to manage withdraw telco payment
	ApproveBankingWithdraw(context.Context, *ApproveBankingWithdrawRequest) (*ApproveBankingWithdrawReply, error)
	RejectBankingWithdraw(context.Context, *RejectBankingWithdrawRequest) (*RejectBankingWithdrawReply, error)
	SubmitBankingWithdraw(context.Context, *SubmitBankingWithdrawRequest) (*SubmitBankingWithdrawReply, error)
	GetIsMerchantUserBankAccountVerified(context.Context, *GetIsMerchantUserBankAccountVerifiedRequest) (*GetIsMerchantUserBankAccountVerifiedReply, error)
	// Teller to manage system bank accounts
	ListSystemBankAccounts(context.Context, *ListSystemBankAccountsRequest) (*ListSystemBankAccountsReply, error)
	CreateSystemBankAccount(context.Context, *CreateSystemBankAccountRequest) (*CreateSystemBankAccountReply, error)
	VerifyMerchantUserBankAccount(context.Context, *VerifyMerchantUserBankAccountRequest) (*VerifyMerchantUserBankAccountReply, error)
	ValidateImportSystemBankAccount(context.Context, *ValidateImportSystemBankAccountRequest) (*ValidateImportSystemBankAccountReply, error)
	ImportSystemBankAccount(context.Context, *ImportSystemBankAccountRequest) (*ImportSystemBankAccountReply, error)
	UpdateSystemBankAccountStatus(context.Context, *UpdateSystemBankAccountStatusRequest) (*UpdateSystemBankAccountStatusReply, error)
	mustEmbedUnimplementedPepperServer()
}

// UnimplementedPepperServer must be embedded to have forward compatible implementations.
type UnimplementedPepperServer struct {
}

func (*UnimplementedPepperServer) GetBankPaymentCode(context.Context, *GetBankPaymentCodeRequest) (*GetBankPaymentCodeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBankPaymentCode not implemented")
}
func (*UnimplementedPepperServer) CreateBankingWithdraw(context.Context, *CreateBankingWithdrawRequest) (*CreateBankingWithdrawReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBankingWithdraw not implemented")
}
func (*UnimplementedPepperServer) CancelBankingWithdraw(context.Context, *CancelBankingWithdrawRequest) (*CancelBankingWithdrawReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelBankingWithdraw not implemented")
}
func (*UnimplementedPepperServer) CreateBankingTopUp(context.Context, *CreateBankingTopUpRequest) (*CreateBankingTopUpReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBankingTopUp not implemented")
}
func (*UnimplementedPepperServer) ApproveBankingTopUp(context.Context, *ApproveBankingTopUpRequest) (*ApproveBankingTopUpReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveBankingTopUp not implemented")
}
func (*UnimplementedPepperServer) RejectBankingTopUp(context.Context, *RejectBankingTopUpRequest) (*RejectBankingTopUpReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RejectBankingTopUp not implemented")
}
func (*UnimplementedPepperServer) ListSystemBankAccountByPaymentInfo(context.Context, *ListSystemBankAccountByPaymentInfoRequest) (*ListSystemBankAccountByPaymentInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSystemBankAccountByPaymentInfo not implemented")
}
func (*UnimplementedPepperServer) ApproveBankingWithdraw(context.Context, *ApproveBankingWithdrawRequest) (*ApproveBankingWithdrawReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveBankingWithdraw not implemented")
}
func (*UnimplementedPepperServer) RejectBankingWithdraw(context.Context, *RejectBankingWithdrawRequest) (*RejectBankingWithdrawReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RejectBankingWithdraw not implemented")
}
func (*UnimplementedPepperServer) SubmitBankingWithdraw(context.Context, *SubmitBankingWithdrawRequest) (*SubmitBankingWithdrawReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitBankingWithdraw not implemented")
}
func (*UnimplementedPepperServer) GetIsMerchantUserBankAccountVerified(context.Context, *GetIsMerchantUserBankAccountVerifiedRequest) (*GetIsMerchantUserBankAccountVerifiedReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIsMerchantUserBankAccountVerified not implemented")
}
func (*UnimplementedPepperServer) ListSystemBankAccounts(context.Context, *ListSystemBankAccountsRequest) (*ListSystemBankAccountsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSystemBankAccounts not implemented")
}
func (*UnimplementedPepperServer) CreateSystemBankAccount(context.Context, *CreateSystemBankAccountRequest) (*CreateSystemBankAccountReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSystemBankAccount not implemented")
}
func (*UnimplementedPepperServer) VerifyMerchantUserBankAccount(context.Context, *VerifyMerchantUserBankAccountRequest) (*VerifyMerchantUserBankAccountReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyMerchantUserBankAccount not implemented")
}
func (*UnimplementedPepperServer) ValidateImportSystemBankAccount(context.Context, *ValidateImportSystemBankAccountRequest) (*ValidateImportSystemBankAccountReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateImportSystemBankAccount not implemented")
}
func (*UnimplementedPepperServer) ImportSystemBankAccount(context.Context, *ImportSystemBankAccountRequest) (*ImportSystemBankAccountReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportSystemBankAccount not implemented")
}
func (*UnimplementedPepperServer) UpdateSystemBankAccountStatus(context.Context, *UpdateSystemBankAccountStatusRequest) (*UpdateSystemBankAccountStatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSystemBankAccountStatus not implemented")
}
func (*UnimplementedPepperServer) mustEmbedUnimplementedPepperServer() {}

func RegisterPepperServer(s *grpc.Server, srv PepperServer) {
	s.RegisterService(&_Pepper_serviceDesc, srv)
}

func _Pepper_GetBankPaymentCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBankPaymentCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PepperServer).GetBankPaymentCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mcuc.stark.pepper.Pepper/GetBankPaymentCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PepperServer).GetBankPaymentCode(ctx, req.(*GetBankPaymentCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pepper_CreateBankingWithdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBankingWithdrawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PepperServer).CreateBankingWithdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mcuc.stark.pepper.Pepper/CreateBankingWithdraw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PepperServer).CreateBankingWithdraw(ctx, req.(*CreateBankingWithdrawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pepper_CancelBankingWithdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelBankingWithdrawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PepperServer).CancelBankingWithdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mcuc.stark.pepper.Pepper/CancelBankingWithdraw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PepperServer).CancelBankingWithdraw(ctx, req.(*CancelBankingWithdrawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pepper_CreateBankingTopUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBankingTopUpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PepperServer).CreateBankingTopUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mcuc.stark.pepper.Pepper/CreateBankingTopUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PepperServer).CreateBankingTopUp(ctx, req.(*CreateBankingTopUpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pepper_ApproveBankingTopUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveBankingTopUpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PepperServer).ApproveBankingTopUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mcuc.stark.pepper.Pepper/ApproveBankingTopUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PepperServer).ApproveBankingTopUp(ctx, req.(*ApproveBankingTopUpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pepper_RejectBankingTopUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RejectBankingTopUpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PepperServer).RejectBankingTopUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mcuc.stark.pepper.Pepper/RejectBankingTopUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PepperServer).RejectBankingTopUp(ctx, req.(*RejectBankingTopUpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pepper_ListSystemBankAccountByPaymentInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSystemBankAccountByPaymentInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PepperServer).ListSystemBankAccountByPaymentInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mcuc.stark.pepper.Pepper/ListSystemBankAccountByPaymentInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PepperServer).ListSystemBankAccountByPaymentInfo(ctx, req.(*ListSystemBankAccountByPaymentInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pepper_ApproveBankingWithdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveBankingWithdrawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PepperServer).ApproveBankingWithdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mcuc.stark.pepper.Pepper/ApproveBankingWithdraw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PepperServer).ApproveBankingWithdraw(ctx, req.(*ApproveBankingWithdrawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pepper_RejectBankingWithdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RejectBankingWithdrawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PepperServer).RejectBankingWithdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mcuc.stark.pepper.Pepper/RejectBankingWithdraw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PepperServer).RejectBankingWithdraw(ctx, req.(*RejectBankingWithdrawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pepper_SubmitBankingWithdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitBankingWithdrawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PepperServer).SubmitBankingWithdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mcuc.stark.pepper.Pepper/SubmitBankingWithdraw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PepperServer).SubmitBankingWithdraw(ctx, req.(*SubmitBankingWithdrawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pepper_GetIsMerchantUserBankAccountVerified_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIsMerchantUserBankAccountVerifiedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PepperServer).GetIsMerchantUserBankAccountVerified(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mcuc.stark.pepper.Pepper/GetIsMerchantUserBankAccountVerified",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PepperServer).GetIsMerchantUserBankAccountVerified(ctx, req.(*GetIsMerchantUserBankAccountVerifiedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pepper_ListSystemBankAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSystemBankAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PepperServer).ListSystemBankAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mcuc.stark.pepper.Pepper/ListSystemBankAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PepperServer).ListSystemBankAccounts(ctx, req.(*ListSystemBankAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pepper_CreateSystemBankAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSystemBankAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PepperServer).CreateSystemBankAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mcuc.stark.pepper.Pepper/CreateSystemBankAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PepperServer).CreateSystemBankAccount(ctx, req.(*CreateSystemBankAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pepper_VerifyMerchantUserBankAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyMerchantUserBankAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PepperServer).VerifyMerchantUserBankAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mcuc.stark.pepper.Pepper/VerifyMerchantUserBankAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PepperServer).VerifyMerchantUserBankAccount(ctx, req.(*VerifyMerchantUserBankAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pepper_ValidateImportSystemBankAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateImportSystemBankAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PepperServer).ValidateImportSystemBankAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mcuc.stark.pepper.Pepper/ValidateImportSystemBankAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PepperServer).ValidateImportSystemBankAccount(ctx, req.(*ValidateImportSystemBankAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pepper_ImportSystemBankAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportSystemBankAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PepperServer).ImportSystemBankAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mcuc.stark.pepper.Pepper/ImportSystemBankAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PepperServer).ImportSystemBankAccount(ctx, req.(*ImportSystemBankAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pepper_UpdateSystemBankAccountStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSystemBankAccountStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PepperServer).UpdateSystemBankAccountStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mcuc.stark.pepper.Pepper/UpdateSystemBankAccountStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PepperServer).UpdateSystemBankAccountStatus(ctx, req.(*UpdateSystemBankAccountStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Pepper_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mcuc.stark.pepper.Pepper",
	HandlerType: (*PepperServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBankPaymentCode",
			Handler:    _Pepper_GetBankPaymentCode_Handler,
		},
		{
			MethodName: "CreateBankingWithdraw",
			Handler:    _Pepper_CreateBankingWithdraw_Handler,
		},
		{
			MethodName: "CancelBankingWithdraw",
			Handler:    _Pepper_CancelBankingWithdraw_Handler,
		},
		{
			MethodName: "CreateBankingTopUp",
			Handler:    _Pepper_CreateBankingTopUp_Handler,
		},
		{
			MethodName: "ApproveBankingTopUp",
			Handler:    _Pepper_ApproveBankingTopUp_Handler,
		},
		{
			MethodName: "RejectBankingTopUp",
			Handler:    _Pepper_RejectBankingTopUp_Handler,
		},
		{
			MethodName: "ListSystemBankAccountByPaymentInfo",
			Handler:    _Pepper_ListSystemBankAccountByPaymentInfo_Handler,
		},
		{
			MethodName: "ApproveBankingWithdraw",
			Handler:    _Pepper_ApproveBankingWithdraw_Handler,
		},
		{
			MethodName: "RejectBankingWithdraw",
			Handler:    _Pepper_RejectBankingWithdraw_Handler,
		},
		{
			MethodName: "SubmitBankingWithdraw",
			Handler:    _Pepper_SubmitBankingWithdraw_Handler,
		},
		{
			MethodName: "GetIsMerchantUserBankAccountVerified",
			Handler:    _Pepper_GetIsMerchantUserBankAccountVerified_Handler,
		},
		{
			MethodName: "ListSystemBankAccounts",
			Handler:    _Pepper_ListSystemBankAccounts_Handler,
		},
		{
			MethodName: "CreateSystemBankAccount",
			Handler:    _Pepper_CreateSystemBankAccount_Handler,
		},
		{
			MethodName: "VerifyMerchantUserBankAccount",
			Handler:    _Pepper_VerifyMerchantUserBankAccount_Handler,
		},
		{
			MethodName: "ValidateImportSystemBankAccount",
			Handler:    _Pepper_ValidateImportSystemBankAccount_Handler,
		},
		{
			MethodName: "ImportSystemBankAccount",
			Handler:    _Pepper_ImportSystemBankAccount_Handler,
		},
		{
			MethodName: "UpdateSystemBankAccountStatus",
			Handler:    _Pepper_UpdateSystemBankAccountStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stark/api/pepper.proto",
}
