// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.12.4
// source: stark/api/tony.proto

package stark

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type EWalletName int32

const (
	EWalletName_EWALLET_NAME_UNSPECIFIED EWalletName = 0
	EWalletName_MOMO                     EWalletName = 1
	EWalletName_ZALOPAY                  EWalletName = 2
)

// Enum value maps for EWalletName.
var (
	EWalletName_name = map[int32]string{
		0: "EWALLET_NAME_UNSPECIFIED",
		1: "MOMO",
		2: "ZALOPAY",
	}
	EWalletName_value = map[string]int32{
		"EWALLET_NAME_UNSPECIFIED": 0,
		"MOMO":                     1,
		"ZALOPAY":                  2,
	}
)

func (x EWalletName) Enum() *EWalletName {
	p := new(EWalletName)
	*p = x
	return p
}

func (x EWalletName) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EWalletName) Descriptor() protoreflect.EnumDescriptor {
	return file_stark_api_tony_proto_enumTypes[0].Descriptor()
}

func (EWalletName) Type() protoreflect.EnumType {
	return &file_stark_api_tony_proto_enumTypes[0]
}

func (x EWalletName) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EWalletName.Descriptor instead.
func (EWalletName) EnumDescriptor() ([]byte, []int) {
	return file_stark_api_tony_proto_rawDescGZIP(), []int{0}
}

type EWalletStatus int32

const (
	EWalletStatus_EWALLET_STATUS_UNSPECIFIED EWalletStatus = 0
	EWalletStatus_EWALLET_ACTIVE             EWalletStatus = 1
	EWalletStatus_EWALLET_IN_ACTIVE          EWalletStatus = 2
)

// Enum value maps for EWalletStatus.
var (
	EWalletStatus_name = map[int32]string{
		0: "EWALLET_STATUS_UNSPECIFIED",
		1: "EWALLET_ACTIVE",
		2: "EWALLET_IN_ACTIVE",
	}
	EWalletStatus_value = map[string]int32{
		"EWALLET_STATUS_UNSPECIFIED": 0,
		"EWALLET_ACTIVE":             1,
		"EWALLET_IN_ACTIVE":          2,
	}
)

func (x EWalletStatus) Enum() *EWalletStatus {
	p := new(EWalletStatus)
	*p = x
	return p
}

func (x EWalletStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EWalletStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_stark_api_tony_proto_enumTypes[1].Descriptor()
}

func (EWalletStatus) Type() protoreflect.EnumType {
	return &file_stark_api_tony_proto_enumTypes[1]
}

func (x EWalletStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EWalletStatus.Descriptor instead.
func (EWalletStatus) EnumDescriptor() ([]byte, []int) {
	return file_stark_api_tony_proto_rawDescGZIP(), []int{1}
}

type GetEWalletPaymentCodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EWalletName    EWalletName `protobuf:"varint,1,opt,name=e_wallet_name,json=eWalletName,proto3,enum=mcuc.stark.tony.EWalletName" json:"e_wallet_name,omitempty"`
	MerchantUserId int64       `protobuf:"varint,2,opt,name=merchant_user_id,json=merchantUserId,proto3" json:"merchant_user_id,omitempty"`
}

func (x *GetEWalletPaymentCodeRequest) Reset() {
	*x = GetEWalletPaymentCodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_tony_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEWalletPaymentCodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEWalletPaymentCodeRequest) ProtoMessage() {}

func (x *GetEWalletPaymentCodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_tony_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEWalletPaymentCodeRequest.ProtoReflect.Descriptor instead.
func (*GetEWalletPaymentCodeRequest) Descriptor() ([]byte, []int) {
	return file_stark_api_tony_proto_rawDescGZIP(), []int{0}
}

func (x *GetEWalletPaymentCodeRequest) GetEWalletName() EWalletName {
	if x != nil {
		return x.EWalletName
	}
	return EWalletName_EWALLET_NAME_UNSPECIFIED
}

func (x *GetEWalletPaymentCodeRequest) GetMerchantUserId() int64 {
	if x != nil {
		return x.MerchantUserId
	}
	return 0
}

type GetEWalletPaymentCodeReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code               string      `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	EWalletName        EWalletName `protobuf:"varint,2,opt,name=e_wallet_name,json=eWalletName,proto3,enum=mcuc.stark.tony.EWalletName" json:"e_wallet_name,omitempty"`
	AccountPhoneNumber string      `protobuf:"bytes,3,opt,name=account_phone_number,json=accountPhoneNumber,proto3" json:"account_phone_number,omitempty"`
	AccountName        string      `protobuf:"bytes,4,opt,name=account_name,json=accountName,proto3" json:"account_name,omitempty"`
}

func (x *GetEWalletPaymentCodeReply) Reset() {
	*x = GetEWalletPaymentCodeReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_tony_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEWalletPaymentCodeReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEWalletPaymentCodeReply) ProtoMessage() {}

func (x *GetEWalletPaymentCodeReply) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_tony_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEWalletPaymentCodeReply.ProtoReflect.Descriptor instead.
func (*GetEWalletPaymentCodeReply) Descriptor() ([]byte, []int) {
	return file_stark_api_tony_proto_rawDescGZIP(), []int{1}
}

func (x *GetEWalletPaymentCodeReply) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *GetEWalletPaymentCodeReply) GetEWalletName() EWalletName {
	if x != nil {
		return x.EWalletName
	}
	return EWalletName_EWALLET_NAME_UNSPECIFIED
}

func (x *GetEWalletPaymentCodeReply) GetAccountPhoneNumber() string {
	if x != nil {
		return x.AccountPhoneNumber
	}
	return ""
}

func (x *GetEWalletPaymentCodeReply) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

type CancelEWalletTopUpRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PaymentId int64  `protobuf:"varint,1,opt,name=payment_id,json=paymentId,proto3" json:"payment_id,omitempty"`
	Note      string `protobuf:"bytes,2,opt,name=note,proto3" json:"note,omitempty"`
}

func (x *CancelEWalletTopUpRequest) Reset() {
	*x = CancelEWalletTopUpRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_tony_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelEWalletTopUpRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelEWalletTopUpRequest) ProtoMessage() {}

func (x *CancelEWalletTopUpRequest) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_tony_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelEWalletTopUpRequest.ProtoReflect.Descriptor instead.
func (*CancelEWalletTopUpRequest) Descriptor() ([]byte, []int) {
	return file_stark_api_tony_proto_rawDescGZIP(), []int{2}
}

func (x *CancelEWalletTopUpRequest) GetPaymentId() int64 {
	if x != nil {
		return x.PaymentId
	}
	return 0
}

func (x *CancelEWalletTopUpRequest) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

type CancelEWalletTopUpReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CancelEWalletTopUpReply) Reset() {
	*x = CancelEWalletTopUpReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_tony_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelEWalletTopUpReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelEWalletTopUpReply) ProtoMessage() {}

func (x *CancelEWalletTopUpReply) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_tony_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelEWalletTopUpReply.ProtoReflect.Descriptor instead.
func (*CancelEWalletTopUpReply) Descriptor() ([]byte, []int) {
	return file_stark_api_tony_proto_rawDescGZIP(), []int{3}
}

type CreateEWalletTopUpRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amount                         uint64 `protobuf:"varint,1,opt,name=amount,proto3" json:"amount,omitempty"`
	PaymentCode                    string `protobuf:"bytes,2,opt,name=payment_code,json=paymentCode,proto3" json:"payment_code,omitempty"`
	MerchantUserAccountPhoneNumber string `protobuf:"bytes,3,opt,name=merchant_user_account_phone_number,json=merchantUserAccountPhoneNumber,proto3" json:"merchant_user_account_phone_number,omitempty"`
	MerchantUserAccountName        string `protobuf:"bytes,4,opt,name=merchant_user_account_name,json=merchantUserAccountName,proto3" json:"merchant_user_account_name,omitempty"`
	SystemAccountPhoneNumber       string `protobuf:"bytes,5,opt,name=system_account_phone_number,json=systemAccountPhoneNumber,proto3" json:"system_account_phone_number,omitempty"`
	SystemAccountName              string `protobuf:"bytes,6,opt,name=system_account_name,json=systemAccountName,proto3" json:"system_account_name,omitempty"`
	Note                           string `protobuf:"bytes,7,opt,name=note,proto3" json:"note,omitempty"`
}

func (x *CreateEWalletTopUpRequest) Reset() {
	*x = CreateEWalletTopUpRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_tony_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateEWalletTopUpRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateEWalletTopUpRequest) ProtoMessage() {}

func (x *CreateEWalletTopUpRequest) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_tony_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateEWalletTopUpRequest.ProtoReflect.Descriptor instead.
func (*CreateEWalletTopUpRequest) Descriptor() ([]byte, []int) {
	return file_stark_api_tony_proto_rawDescGZIP(), []int{4}
}

func (x *CreateEWalletTopUpRequest) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *CreateEWalletTopUpRequest) GetPaymentCode() string {
	if x != nil {
		return x.PaymentCode
	}
	return ""
}

func (x *CreateEWalletTopUpRequest) GetMerchantUserAccountPhoneNumber() string {
	if x != nil {
		return x.MerchantUserAccountPhoneNumber
	}
	return ""
}

func (x *CreateEWalletTopUpRequest) GetMerchantUserAccountName() string {
	if x != nil {
		return x.MerchantUserAccountName
	}
	return ""
}

func (x *CreateEWalletTopUpRequest) GetSystemAccountPhoneNumber() string {
	if x != nil {
		return x.SystemAccountPhoneNumber
	}
	return ""
}

func (x *CreateEWalletTopUpRequest) GetSystemAccountName() string {
	if x != nil {
		return x.SystemAccountName
	}
	return ""
}

func (x *CreateEWalletTopUpRequest) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

type CreateEWalletTopUpReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PaymentId int64 `protobuf:"varint,1,opt,name=payment_id,json=paymentId,proto3" json:"payment_id,omitempty"`
}

func (x *CreateEWalletTopUpReply) Reset() {
	*x = CreateEWalletTopUpReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_tony_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateEWalletTopUpReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateEWalletTopUpReply) ProtoMessage() {}

func (x *CreateEWalletTopUpReply) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_tony_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateEWalletTopUpReply.ProtoReflect.Descriptor instead.
func (*CreateEWalletTopUpReply) Descriptor() ([]byte, []int) {
	return file_stark_api_tony_proto_rawDescGZIP(), []int{5}
}

func (x *CreateEWalletTopUpReply) GetPaymentId() int64 {
	if x != nil {
		return x.PaymentId
	}
	return 0
}

type ApproveEWalletTopUpRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PaymentId int64  `protobuf:"varint,1,opt,name=payment_id,json=paymentId,proto3" json:"payment_id,omitempty"`
	ImageUrl  string `protobuf:"bytes,2,opt,name=image_url,json=imageUrl,proto3" json:"image_url,omitempty"`
	TxId      string `protobuf:"bytes,3,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	Note      string `protobuf:"bytes,4,opt,name=note,proto3" json:"note,omitempty"`
}

func (x *ApproveEWalletTopUpRequest) Reset() {
	*x = ApproveEWalletTopUpRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_tony_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApproveEWalletTopUpRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApproveEWalletTopUpRequest) ProtoMessage() {}

func (x *ApproveEWalletTopUpRequest) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_tony_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApproveEWalletTopUpRequest.ProtoReflect.Descriptor instead.
func (*ApproveEWalletTopUpRequest) Descriptor() ([]byte, []int) {
	return file_stark_api_tony_proto_rawDescGZIP(), []int{6}
}

func (x *ApproveEWalletTopUpRequest) GetPaymentId() int64 {
	if x != nil {
		return x.PaymentId
	}
	return 0
}

func (x *ApproveEWalletTopUpRequest) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *ApproveEWalletTopUpRequest) GetTxId() string {
	if x != nil {
		return x.TxId
	}
	return ""
}

func (x *ApproveEWalletTopUpRequest) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

type ApproveEWalletTopUpReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PaymentId int64 `protobuf:"varint,1,opt,name=payment_id,json=paymentId,proto3" json:"payment_id,omitempty"`
}

func (x *ApproveEWalletTopUpReply) Reset() {
	*x = ApproveEWalletTopUpReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_tony_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApproveEWalletTopUpReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApproveEWalletTopUpReply) ProtoMessage() {}

func (x *ApproveEWalletTopUpReply) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_tony_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApproveEWalletTopUpReply.ProtoReflect.Descriptor instead.
func (*ApproveEWalletTopUpReply) Descriptor() ([]byte, []int) {
	return file_stark_api_tony_proto_rawDescGZIP(), []int{7}
}

func (x *ApproveEWalletTopUpReply) GetPaymentId() int64 {
	if x != nil {
		return x.PaymentId
	}
	return 0
}

type RejectEWalletTopUpRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PaymentId      int64  `protobuf:"varint,1,opt,name=payment_id,json=paymentId,proto3" json:"payment_id,omitempty"`
	Note           string `protobuf:"bytes,2,opt,name=note,proto3" json:"note,omitempty"`
	IsMerchantCall bool   `protobuf:"varint,3,opt,name=is_merchant_call,json=isMerchantCall,proto3" json:"is_merchant_call,omitempty"`
}

func (x *RejectEWalletTopUpRequest) Reset() {
	*x = RejectEWalletTopUpRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_tony_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RejectEWalletTopUpRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RejectEWalletTopUpRequest) ProtoMessage() {}

func (x *RejectEWalletTopUpRequest) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_tony_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RejectEWalletTopUpRequest.ProtoReflect.Descriptor instead.
func (*RejectEWalletTopUpRequest) Descriptor() ([]byte, []int) {
	return file_stark_api_tony_proto_rawDescGZIP(), []int{8}
}

func (x *RejectEWalletTopUpRequest) GetPaymentId() int64 {
	if x != nil {
		return x.PaymentId
	}
	return 0
}

func (x *RejectEWalletTopUpRequest) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *RejectEWalletTopUpRequest) GetIsMerchantCall() bool {
	if x != nil {
		return x.IsMerchantCall
	}
	return false
}

type RejectEWalletTopUpReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RejectEWalletTopUpReply) Reset() {
	*x = RejectEWalletTopUpReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_tony_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RejectEWalletTopUpReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RejectEWalletTopUpReply) ProtoMessage() {}

func (x *RejectEWalletTopUpReply) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_tony_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RejectEWalletTopUpReply.ProtoReflect.Descriptor instead.
func (*RejectEWalletTopUpReply) Descriptor() ([]byte, []int) {
	return file_stark_api_tony_proto_rawDescGZIP(), []int{9}
}

type CreateSystemEWalletRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId          int64       `protobuf:"varint,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	AccountWalletName  EWalletName `protobuf:"varint,2,opt,name=account_wallet_name,json=accountWalletName,proto3,enum=mcuc.stark.tony.EWalletName" json:"account_wallet_name,omitempty"`
	AccountPhoneNumber string      `protobuf:"bytes,3,opt,name=account_phone_number,json=accountPhoneNumber,proto3" json:"account_phone_number,omitempty"`
	AccountName        string      `protobuf:"bytes,4,opt,name=account_name,json=accountName,proto3" json:"account_name,omitempty"`
	Balance            uint64      `protobuf:"varint,5,opt,name=balance,proto3" json:"balance,omitempty"`
	DailyBalance       uint64      `protobuf:"varint,6,opt,name=daily_balance,json=dailyBalance,proto3" json:"daily_balance,omitempty"`
	DailyBalanceLimit  uint64      `protobuf:"varint,7,opt,name=daily_balance_limit,json=dailyBalanceLimit,proto3" json:"daily_balance_limit,omitempty"`
	DailyUsedAmount    int64       `protobuf:"varint,8,opt,name=daily_used_amount,json=dailyUsedAmount,proto3" json:"daily_used_amount,omitempty"`
	MerchantId         int64       `protobuf:"varint,9,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty"`
	ErrorCode          string      `protobuf:"bytes,10,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (x *CreateSystemEWalletRequest) Reset() {
	*x = CreateSystemEWalletRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_tony_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSystemEWalletRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSystemEWalletRequest) ProtoMessage() {}

func (x *CreateSystemEWalletRequest) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_tony_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSystemEWalletRequest.ProtoReflect.Descriptor instead.
func (*CreateSystemEWalletRequest) Descriptor() ([]byte, []int) {
	return file_stark_api_tony_proto_rawDescGZIP(), []int{10}
}

func (x *CreateSystemEWalletRequest) GetAccountId() int64 {
	if x != nil {
		return x.AccountId
	}
	return 0
}

func (x *CreateSystemEWalletRequest) GetAccountWalletName() EWalletName {
	if x != nil {
		return x.AccountWalletName
	}
	return EWalletName_EWALLET_NAME_UNSPECIFIED
}

func (x *CreateSystemEWalletRequest) GetAccountPhoneNumber() string {
	if x != nil {
		return x.AccountPhoneNumber
	}
	return ""
}

func (x *CreateSystemEWalletRequest) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

func (x *CreateSystemEWalletRequest) GetBalance() uint64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *CreateSystemEWalletRequest) GetDailyBalance() uint64 {
	if x != nil {
		return x.DailyBalance
	}
	return 0
}

func (x *CreateSystemEWalletRequest) GetDailyBalanceLimit() uint64 {
	if x != nil {
		return x.DailyBalanceLimit
	}
	return 0
}

func (x *CreateSystemEWalletRequest) GetDailyUsedAmount() int64 {
	if x != nil {
		return x.DailyUsedAmount
	}
	return 0
}

func (x *CreateSystemEWalletRequest) GetMerchantId() int64 {
	if x != nil {
		return x.MerchantId
	}
	return 0
}

func (x *CreateSystemEWalletRequest) GetErrorCode() string {
	if x != nil {
		return x.ErrorCode
	}
	return ""
}

type CreateSystemEWalletReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateSystemEWalletReply) Reset() {
	*x = CreateSystemEWalletReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_tony_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSystemEWalletReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSystemEWalletReply) ProtoMessage() {}

func (x *CreateSystemEWalletReply) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_tony_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSystemEWalletReply.ProtoReflect.Descriptor instead.
func (*CreateSystemEWalletReply) Descriptor() ([]byte, []int) {
	return file_stark_api_tony_proto_rawDescGZIP(), []int{11}
}

type UpdateSystemEWalletStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     int64         `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Status EWalletStatus `protobuf:"varint,2,opt,name=status,proto3,enum=mcuc.stark.tony.EWalletStatus" json:"status,omitempty"`
}

func (x *UpdateSystemEWalletStatusRequest) Reset() {
	*x = UpdateSystemEWalletStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_tony_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSystemEWalletStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSystemEWalletStatusRequest) ProtoMessage() {}

func (x *UpdateSystemEWalletStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_tony_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSystemEWalletStatusRequest.ProtoReflect.Descriptor instead.
func (*UpdateSystemEWalletStatusRequest) Descriptor() ([]byte, []int) {
	return file_stark_api_tony_proto_rawDescGZIP(), []int{12}
}

func (x *UpdateSystemEWalletStatusRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateSystemEWalletStatusRequest) GetStatus() EWalletStatus {
	if x != nil {
		return x.Status
	}
	return EWalletStatus_EWALLET_STATUS_UNSPECIFIED
}

type UpdateSystemEWalletStatusReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EWallet *SystemEWallet `protobuf:"bytes,1,opt,name=e_wallet,json=eWallet,proto3" json:"e_wallet,omitempty"`
}

func (x *UpdateSystemEWalletStatusReply) Reset() {
	*x = UpdateSystemEWalletStatusReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_tony_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSystemEWalletStatusReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSystemEWalletStatusReply) ProtoMessage() {}

func (x *UpdateSystemEWalletStatusReply) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_tony_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSystemEWalletStatusReply.ProtoReflect.Descriptor instead.
func (*UpdateSystemEWalletStatusReply) Descriptor() ([]byte, []int) {
	return file_stark_api_tony_proto_rawDescGZIP(), []int{13}
}

func (x *UpdateSystemEWalletStatusReply) GetEWallet() *SystemEWallet {
	if x != nil {
		return x.EWallet
	}
	return nil
}

type ListSystemEWalletsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page         uint32          `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Size         uint32          `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	Ids          []int64         `protobuf:"varint,3,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	MerchantIds  []int64         `protobuf:"varint,4,rep,packed,name=merchant_ids,json=merchantIds,proto3" json:"merchant_ids,omitempty"`
	Statuses     []EWalletStatus `protobuf:"varint,5,rep,packed,name=statuses,proto3,enum=mcuc.stark.tony.EWalletStatus" json:"statuses,omitempty"`
	EWalletNames []EWalletName   `protobuf:"varint,6,rep,packed,name=e_wallet_names,json=eWalletNames,proto3,enum=mcuc.stark.tony.EWalletName" json:"e_wallet_names,omitempty"`
}

func (x *ListSystemEWalletsRequest) Reset() {
	*x = ListSystemEWalletsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_tony_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSystemEWalletsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSystemEWalletsRequest) ProtoMessage() {}

func (x *ListSystemEWalletsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_tony_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSystemEWalletsRequest.ProtoReflect.Descriptor instead.
func (*ListSystemEWalletsRequest) Descriptor() ([]byte, []int) {
	return file_stark_api_tony_proto_rawDescGZIP(), []int{14}
}

func (x *ListSystemEWalletsRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListSystemEWalletsRequest) GetSize() uint32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *ListSystemEWalletsRequest) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *ListSystemEWalletsRequest) GetMerchantIds() []int64 {
	if x != nil {
		return x.MerchantIds
	}
	return nil
}

func (x *ListSystemEWalletsRequest) GetStatuses() []EWalletStatus {
	if x != nil {
		return x.Statuses
	}
	return nil
}

func (x *ListSystemEWalletsRequest) GetEWalletNames() []EWalletName {
	if x != nil {
		return x.EWalletNames
	}
	return nil
}

type ListSystemEWalletsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Records     []*SystemEWallet `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
	Total       uint64           `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	CurrentPage uint32           `protobuf:"varint,3,opt,name=current_page,json=currentPage,proto3" json:"current_page,omitempty"`
}

func (x *ListSystemEWalletsReply) Reset() {
	*x = ListSystemEWalletsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_tony_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSystemEWalletsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSystemEWalletsReply) ProtoMessage() {}

func (x *ListSystemEWalletsReply) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_tony_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSystemEWalletsReply.ProtoReflect.Descriptor instead.
func (*ListSystemEWalletsReply) Descriptor() ([]byte, []int) {
	return file_stark_api_tony_proto_rawDescGZIP(), []int{15}
}

func (x *ListSystemEWalletsReply) GetRecords() []*SystemEWallet {
	if x != nil {
		return x.Records
	}
	return nil
}

func (x *ListSystemEWalletsReply) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListSystemEWalletsReply) GetCurrentPage() uint32 {
	if x != nil {
		return x.CurrentPage
	}
	return 0
}

type ValidateSystemEWalletsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Records []*CreateSystemEWalletRequest `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
}

func (x *ValidateSystemEWalletsRequest) Reset() {
	*x = ValidateSystemEWalletsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_tony_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateSystemEWalletsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateSystemEWalletsRequest) ProtoMessage() {}

func (x *ValidateSystemEWalletsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_tony_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateSystemEWalletsRequest.ProtoReflect.Descriptor instead.
func (*ValidateSystemEWalletsRequest) Descriptor() ([]byte, []int) {
	return file_stark_api_tony_proto_rawDescGZIP(), []int{16}
}

func (x *ValidateSystemEWalletsRequest) GetRecords() []*CreateSystemEWalletRequest {
	if x != nil {
		return x.Records
	}
	return nil
}

type ValidateSystemEWalletsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ValidRecords        []*CreateSystemEWalletRequest `protobuf:"bytes,1,rep,name=valid_records,json=validRecords,proto3" json:"valid_records,omitempty"`
	DuplicatedRecords   []*CreateSystemEWalletRequest `protobuf:"bytes,2,rep,name=duplicated_records,json=duplicatedRecords,proto3" json:"duplicated_records,omitempty"`
	InvalidRecords      []*CreateSystemEWalletRequest `protobuf:"bytes,3,rep,name=invalid_records,json=invalidRecords,proto3" json:"invalid_records,omitempty"`
	DuplicatedIdRecords []*CreateSystemEWalletRequest `protobuf:"bytes,4,rep,name=duplicated_id_records,json=duplicatedIdRecords,proto3" json:"duplicated_id_records,omitempty"`
}

func (x *ValidateSystemEWalletsReply) Reset() {
	*x = ValidateSystemEWalletsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_tony_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateSystemEWalletsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateSystemEWalletsReply) ProtoMessage() {}

func (x *ValidateSystemEWalletsReply) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_tony_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateSystemEWalletsReply.ProtoReflect.Descriptor instead.
func (*ValidateSystemEWalletsReply) Descriptor() ([]byte, []int) {
	return file_stark_api_tony_proto_rawDescGZIP(), []int{17}
}

func (x *ValidateSystemEWalletsReply) GetValidRecords() []*CreateSystemEWalletRequest {
	if x != nil {
		return x.ValidRecords
	}
	return nil
}

func (x *ValidateSystemEWalletsReply) GetDuplicatedRecords() []*CreateSystemEWalletRequest {
	if x != nil {
		return x.DuplicatedRecords
	}
	return nil
}

func (x *ValidateSystemEWalletsReply) GetInvalidRecords() []*CreateSystemEWalletRequest {
	if x != nil {
		return x.InvalidRecords
	}
	return nil
}

func (x *ValidateSystemEWalletsReply) GetDuplicatedIdRecords() []*CreateSystemEWalletRequest {
	if x != nil {
		return x.DuplicatedIdRecords
	}
	return nil
}

type ImportSystemEWalletsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Records []*CreateSystemEWalletRequest `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
}

func (x *ImportSystemEWalletsRequest) Reset() {
	*x = ImportSystemEWalletsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_tony_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportSystemEWalletsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportSystemEWalletsRequest) ProtoMessage() {}

func (x *ImportSystemEWalletsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_tony_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportSystemEWalletsRequest.ProtoReflect.Descriptor instead.
func (*ImportSystemEWalletsRequest) Descriptor() ([]byte, []int) {
	return file_stark_api_tony_proto_rawDescGZIP(), []int{18}
}

func (x *ImportSystemEWalletsRequest) GetRecords() []*CreateSystemEWalletRequest {
	if x != nil {
		return x.Records
	}
	return nil
}

type ImportSystemEWalletsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ImportSystemEWalletsReply) Reset() {
	*x = ImportSystemEWalletsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_tony_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportSystemEWalletsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportSystemEWalletsReply) ProtoMessage() {}

func (x *ImportSystemEWalletsReply) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_tony_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportSystemEWalletsReply.ProtoReflect.Descriptor instead.
func (*ImportSystemEWalletsReply) Descriptor() ([]byte, []int) {
	return file_stark_api_tony_proto_rawDescGZIP(), []int{19}
}

type GetSystemEWalletsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EWalletName EWalletName `protobuf:"varint,1,opt,name=e_wallet_name,json=eWalletName,proto3,enum=mcuc.stark.tony.EWalletName" json:"e_wallet_name,omitempty"`
	MerchantId  int64       `protobuf:"varint,2,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty"`
}

func (x *GetSystemEWalletsRequest) Reset() {
	*x = GetSystemEWalletsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_tony_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSystemEWalletsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSystemEWalletsRequest) ProtoMessage() {}

func (x *GetSystemEWalletsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_tony_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSystemEWalletsRequest.ProtoReflect.Descriptor instead.
func (*GetSystemEWalletsRequest) Descriptor() ([]byte, []int) {
	return file_stark_api_tony_proto_rawDescGZIP(), []int{20}
}

func (x *GetSystemEWalletsRequest) GetEWalletName() EWalletName {
	if x != nil {
		return x.EWalletName
	}
	return EWalletName_EWALLET_NAME_UNSPECIFIED
}

func (x *GetSystemEWalletsRequest) GetMerchantId() int64 {
	if x != nil {
		return x.MerchantId
	}
	return 0
}

type GetSystemEWalletsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SystemEWallets []*SystemEWallet `protobuf:"bytes,1,rep,name=system_e_wallets,json=systemEWallets,proto3" json:"system_e_wallets,omitempty"`
}

func (x *GetSystemEWalletsReply) Reset() {
	*x = GetSystemEWalletsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_tony_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSystemEWalletsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSystemEWalletsReply) ProtoMessage() {}

func (x *GetSystemEWalletsReply) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_tony_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSystemEWalletsReply.ProtoReflect.Descriptor instead.
func (*GetSystemEWalletsReply) Descriptor() ([]byte, []int) {
	return file_stark_api_tony_proto_rawDescGZIP(), []int{21}
}

func (x *GetSystemEWalletsReply) GetSystemEWallets() []*SystemEWallet {
	if x != nil {
		return x.SystemEWallets
	}
	return nil
}

type EWalletPaymentDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PaymentCode                    string      `protobuf:"bytes,1,opt,name=payment_code,json=paymentCode,proto3" json:"payment_code,omitempty"`
	EWalletName                    EWalletName `protobuf:"varint,2,opt,name=e_wallet_name,json=eWalletName,proto3,enum=mcuc.stark.tony.EWalletName" json:"e_wallet_name,omitempty"`
	MerchantUserAccountPhoneNumber string      `protobuf:"bytes,3,opt,name=merchant_user_account_phone_number,json=merchantUserAccountPhoneNumber,proto3" json:"merchant_user_account_phone_number,omitempty"`
	MerchantUserAccountName        string      `protobuf:"bytes,4,opt,name=merchant_user_account_name,json=merchantUserAccountName,proto3" json:"merchant_user_account_name,omitempty"`
	SystemAccountPhoneNumber       string      `protobuf:"bytes,5,opt,name=system_account_phone_number,json=systemAccountPhoneNumber,proto3" json:"system_account_phone_number,omitempty"`
	SystemAccountName              string      `protobuf:"bytes,6,opt,name=system_account_name,json=systemAccountName,proto3" json:"system_account_name,omitempty"`
	Amount                         uint64      `protobuf:"varint,7,opt,name=amount,proto3" json:"amount,omitempty"`
	Fee                            uint64      `protobuf:"varint,8,opt,name=fee,proto3" json:"fee,omitempty"`
	MerchantUserId                 int64       `protobuf:"varint,9,opt,name=merchant_user_id,json=merchantUserId,proto3" json:"merchant_user_id,omitempty"`
}

func (x *EWalletPaymentDetail) Reset() {
	*x = EWalletPaymentDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_tony_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EWalletPaymentDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EWalletPaymentDetail) ProtoMessage() {}

func (x *EWalletPaymentDetail) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_tony_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EWalletPaymentDetail.ProtoReflect.Descriptor instead.
func (*EWalletPaymentDetail) Descriptor() ([]byte, []int) {
	return file_stark_api_tony_proto_rawDescGZIP(), []int{22}
}

func (x *EWalletPaymentDetail) GetPaymentCode() string {
	if x != nil {
		return x.PaymentCode
	}
	return ""
}

func (x *EWalletPaymentDetail) GetEWalletName() EWalletName {
	if x != nil {
		return x.EWalletName
	}
	return EWalletName_EWALLET_NAME_UNSPECIFIED
}

func (x *EWalletPaymentDetail) GetMerchantUserAccountPhoneNumber() string {
	if x != nil {
		return x.MerchantUserAccountPhoneNumber
	}
	return ""
}

func (x *EWalletPaymentDetail) GetMerchantUserAccountName() string {
	if x != nil {
		return x.MerchantUserAccountName
	}
	return ""
}

func (x *EWalletPaymentDetail) GetSystemAccountPhoneNumber() string {
	if x != nil {
		return x.SystemAccountPhoneNumber
	}
	return ""
}

func (x *EWalletPaymentDetail) GetSystemAccountName() string {
	if x != nil {
		return x.SystemAccountName
	}
	return ""
}

func (x *EWalletPaymentDetail) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *EWalletPaymentDetail) GetFee() uint64 {
	if x != nil {
		return x.Fee
	}
	return 0
}

func (x *EWalletPaymentDetail) GetMerchantUserId() int64 {
	if x != nil {
		return x.MerchantUserId
	}
	return 0
}

type SystemEWallet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 int64                `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt          *timestamp.Timestamp `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt          *timestamp.Timestamp `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	CreatedBy          string               `protobuf:"bytes,4,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	UpdatedBy          string               `protobuf:"bytes,5,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
	EWalletName        EWalletName          `protobuf:"varint,6,opt,name=e_wallet_name,json=eWalletName,proto3,enum=mcuc.stark.tony.EWalletName" json:"e_wallet_name,omitempty"`
	Status             EWalletStatus        `protobuf:"varint,7,opt,name=status,proto3,enum=mcuc.stark.tony.EWalletStatus" json:"status,omitempty"`
	MerchantId         int64                `protobuf:"varint,8,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty"`
	AccountPhoneNumber string               `protobuf:"bytes,9,opt,name=account_phone_number,json=accountPhoneNumber,proto3" json:"account_phone_number,omitempty"`
	AccountName        string               `protobuf:"bytes,10,opt,name=account_name,json=accountName,proto3" json:"account_name,omitempty"`
	Balance            uint64               `protobuf:"varint,11,opt,name=balance,proto3" json:"balance,omitempty"`
	DailyBalance       uint64               `protobuf:"varint,12,opt,name=daily_balance,json=dailyBalance,proto3" json:"daily_balance,omitempty"`
	DailyBalanceLimit  uint64               `protobuf:"varint,13,opt,name=daily_balance_limit,json=dailyBalanceLimit,proto3" json:"daily_balance_limit,omitempty"`
	DailyUsedAmount    int64                `protobuf:"varint,14,opt,name=daily_used_amount,json=dailyUsedAmount,proto3" json:"daily_used_amount,omitempty"`
}

func (x *SystemEWallet) Reset() {
	*x = SystemEWallet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_tony_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemEWallet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemEWallet) ProtoMessage() {}

func (x *SystemEWallet) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_tony_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemEWallet.ProtoReflect.Descriptor instead.
func (*SystemEWallet) Descriptor() ([]byte, []int) {
	return file_stark_api_tony_proto_rawDescGZIP(), []int{23}
}

func (x *SystemEWallet) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SystemEWallet) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *SystemEWallet) GetUpdatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *SystemEWallet) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *SystemEWallet) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *SystemEWallet) GetEWalletName() EWalletName {
	if x != nil {
		return x.EWalletName
	}
	return EWalletName_EWALLET_NAME_UNSPECIFIED
}

func (x *SystemEWallet) GetStatus() EWalletStatus {
	if x != nil {
		return x.Status
	}
	return EWalletStatus_EWALLET_STATUS_UNSPECIFIED
}

func (x *SystemEWallet) GetMerchantId() int64 {
	if x != nil {
		return x.MerchantId
	}
	return 0
}

func (x *SystemEWallet) GetAccountPhoneNumber() string {
	if x != nil {
		return x.AccountPhoneNumber
	}
	return ""
}

func (x *SystemEWallet) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

func (x *SystemEWallet) GetBalance() uint64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *SystemEWallet) GetDailyBalance() uint64 {
	if x != nil {
		return x.DailyBalance
	}
	return 0
}

func (x *SystemEWallet) GetDailyBalanceLimit() uint64 {
	if x != nil {
		return x.DailyBalanceLimit
	}
	return 0
}

func (x *SystemEWallet) GetDailyUsedAmount() int64 {
	if x != nil {
		return x.DailyUsedAmount
	}
	return 0
}

var File_stark_api_tony_proto protoreflect.FileDescriptor

var file_stark_api_tony_proto_rawDesc = []byte{
	0x0a, 0x14, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x6f, 0x6e, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61,
	0x72, 0x6b, 0x2e, 0x74, 0x6f, 0x6e, 0x79, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x8a, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x45, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x40, 0x0a, 0x0d, 0x65, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x6d, 0x63, 0x75, 0x63,
	0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x74, 0x6f, 0x6e, 0x79, 0x2e, 0x45, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0b, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e,
	0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xc7,
	0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x45, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x40, 0x0a, 0x0d, 0x65, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e,
	0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x74, 0x6f, 0x6e, 0x79, 0x2e, 0x45, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0b, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x4e, 0x0a, 0x19, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x45, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x55, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x22, 0x19, 0x0a, 0x17, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x45, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x55, 0x70, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0xeb, 0x02, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x55, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1f, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x32, 0x02, 0x20, 0x00, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4a, 0x0a, 0x22, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x1e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x3b, 0x0a, 0x1a, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3d,
	0x0a, 0x1b, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x18, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2e, 0x0a,
	0x13, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74,
	0x65, 0x22, 0x38, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x54, 0x6f, 0x70, 0x55, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x81, 0x01, 0x0a, 0x1a,
	0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x45, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x6f,
	0x70, 0x55, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x13, 0x0a, 0x05, 0x74, 0x78, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x78, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x6f, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x22,
	0x39, 0x0a, 0x18, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x45, 0x57, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x54, 0x6f, 0x70, 0x55, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x78, 0x0a, 0x19, 0x52, 0x65,
	0x6a, 0x65, 0x63, 0x74, 0x45, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x55, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x73,
	0x5f, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x43, 0x61, 0x6c, 0x6c, 0x22, 0x19, 0x0a, 0x17, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x55, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0xc2, 0x03, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x45, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x4c, 0x0a,
	0x13, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x6d, 0x63, 0x75,
	0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x74, 0x6f, 0x6e, 0x79, 0x2e, 0x45, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x11, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x21, 0x0a,
	0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x61,
	0x69, 0x6c, 0x79, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0c, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x2e, 0x0a, 0x13, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x64, 0x61,
	0x69, 0x6c, 0x79, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x2a, 0x0a, 0x11, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x64, 0x61, 0x69, 0x6c,
	0x79, 0x55, 0x73, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0b, 0x6d,
	0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x22, 0x02, 0x20, 0x00, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x22, 0x1a, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x45, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x73, 0x0a, 0x20, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x45, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x22, 0x02, 0x20, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x36, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e,
	0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x74, 0x6f, 0x6e, 0x79, 0x2e,
	0x45, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x5b, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x45, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x39, 0x0a, 0x08, 0x65, 0x5f, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x63, 0x75, 0x63,
	0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x74, 0x6f, 0x6e, 0x79, 0x2e, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x45, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x07, 0x65, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x22, 0xf8, 0x01, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x45, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x3a, 0x0a,
	0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0e, 0x32,
	0x1e, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x74, 0x6f, 0x6e,
	0x79, 0x2e, 0x45, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x0e, 0x65, 0x5f, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0e, 0x32, 0x1c, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x74,
	0x6f, 0x6e, 0x79, 0x2e, 0x45, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x52,
	0x0c, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x8c, 0x01,
	0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x45, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x38, 0x0a, 0x07, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x63, 0x75,
	0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x74, 0x6f, 0x6e, 0x79, 0x2e, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x45, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x67, 0x65, 0x22, 0x66, 0x0a, 0x1d,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x45, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x45, 0x0a,
	0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x74, 0x6f, 0x6e, 0x79,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x45, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x22, 0x82, 0x03, 0x0a, 0x1b, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x45, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x50, 0x0a, 0x0d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6d, 0x63,
	0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x74, 0x6f, 0x6e, 0x79, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x45, 0x57, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0c, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x5a, 0x0a, 0x12, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e,
	0x74, 0x6f, 0x6e, 0x79, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x45, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x11, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x12, 0x54, 0x0a, 0x0f, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6d, 0x63,
	0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x74, 0x6f, 0x6e, 0x79, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x45, 0x57, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0e, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x5f, 0x0a, 0x15, 0x64, 0x75, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73,
	0x74, 0x61, 0x72, 0x6b, 0x2e, 0x74, 0x6f, 0x6e, 0x79, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x45, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x13, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x49, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0x64, 0x0a, 0x1b, 0x49, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x45, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6d, 0x63, 0x75, 0x63,
	0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x74, 0x6f, 0x6e, 0x79, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x45, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22,
	0x1b, 0x0a, 0x19, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x45,
	0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x7d, 0x0a, 0x18,
	0x47, 0x65, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x45, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x0d, 0x65, 0x5f, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1c, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x74, 0x6f, 0x6e,
	0x79, 0x2e, 0x45, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0b, 0x65,
	0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x62, 0x0a, 0x16, 0x47,
	0x65, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x45, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x48, 0x0a, 0x10, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f,
	0x65, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x74, 0x6f, 0x6e,
	0x79, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x45, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52,
	0x0e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x45, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x22,
	0xc7, 0x03, 0x0a, 0x14, 0x45, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x40, 0x0a, 0x0d, 0x65,
	0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e,
	0x74, 0x6f, 0x6e, 0x79, 0x2e, 0x45, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x52, 0x0b, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4a, 0x0a,
	0x22, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1e, 0x6d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x68,
	0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x1a, 0x6d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x6d,
	0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x1b, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x66, 0x65, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x66, 0x65, 0x65, 0x12,
	0x28, 0x0a, 0x10, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xde, 0x04, 0x0a, 0x0d, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x45, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79,
	0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12,
	0x40, 0x0a, 0x0d, 0x65, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74,
	0x61, 0x72, 0x6b, 0x2e, 0x74, 0x6f, 0x6e, 0x79, 0x2e, 0x45, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0b, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x36, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1e, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x74,
	0x6f, 0x6e, 0x79, 0x2e, 0x45, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x61, 0x69,
	0x6c, 0x79, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0c, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2e,
	0x0a, 0x13, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x64, 0x61, 0x69,
	0x6c, 0x79, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x2a,
	0x0a, 0x11, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x64, 0x61, 0x69, 0x6c, 0x79,
	0x55, 0x73, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x2a, 0x42, 0x0a, 0x0b, 0x45, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x57, 0x41,
	0x4c, 0x4c, 0x45, 0x54, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4d, 0x4f, 0x4d, 0x4f, 0x10,
	0x01, 0x12, 0x0b, 0x0a, 0x07, 0x5a, 0x41, 0x4c, 0x4f, 0x50, 0x41, 0x59, 0x10, 0x02, 0x2a, 0x5a,
	0x0a, 0x0d, 0x45, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1e, 0x0a, 0x1a, 0x45, 0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x12, 0x0a, 0x0e, 0x45, 0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x45, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x5f, 0x49,
	0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x32, 0xdd, 0x09, 0x0a, 0x04, 0x54,
	0x6f, 0x6e, 0x79, 0x12, 0x73, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x45, 0x57, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2d, 0x2e, 0x6d,
	0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x74, 0x6f, 0x6e, 0x79, 0x2e, 0x47,
	0x65, 0x74, 0x45, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6d, 0x63,
	0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x74, 0x6f, 0x6e, 0x79, 0x2e, 0x47, 0x65,
	0x74, 0x45, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x6a, 0x0a, 0x12, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x45, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x55, 0x70, 0x12, 0x2a,
	0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x74, 0x6f, 0x6e, 0x79,
	0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x45, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x6f,
	0x70, 0x55, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6d, 0x63, 0x75,
	0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x74, 0x6f, 0x6e, 0x79, 0x2e, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x45, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x55, 0x70, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x6a, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x55, 0x70, 0x12, 0x2a, 0x2e, 0x6d, 0x63, 0x75,
	0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x74, 0x6f, 0x6e, 0x79, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x45, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x55, 0x70, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74,
	0x61, 0x72, 0x6b, 0x2e, 0x74, 0x6f, 0x6e, 0x79, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45,
	0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x55, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x6d, 0x0a, 0x13, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x45, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x54, 0x6f, 0x70, 0x55, 0x70, 0x12, 0x2b, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73,
	0x74, 0x61, 0x72, 0x6b, 0x2e, 0x74, 0x6f, 0x6e, 0x79, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x65, 0x45, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x55, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72,
	0x6b, 0x2e, 0x74, 0x6f, 0x6e, 0x79, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x45, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x55, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x6a, 0x0a, 0x12, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x54, 0x6f, 0x70, 0x55, 0x70, 0x12, 0x2a, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61,
	0x72, 0x6b, 0x2e, 0x74, 0x6f, 0x6e, 0x79, 0x2e, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x55, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x28, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x74,
	0x6f, 0x6e, 0x79, 0x2e, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x57, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x54, 0x6f, 0x70, 0x55, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x67, 0x0a, 0x11, 0x47,
	0x65, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x45, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73,
	0x12, 0x29, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x74, 0x6f,
	0x6e, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x45, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6d, 0x63,
	0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x74, 0x6f, 0x6e, 0x79, 0x2e, 0x47, 0x65,
	0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x45, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x6d, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x45, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x2b, 0x2e, 0x6d, 0x63,
	0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x74, 0x6f, 0x6e, 0x79, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x45, 0x57, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e,
	0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x74, 0x6f, 0x6e, 0x79, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x45, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x7f, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x45, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x31, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x74, 0x6f,
	0x6e, 0x79, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x45,
	0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b,
	0x2e, 0x74, 0x6f, 0x6e, 0x79, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x45, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x6a, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x45, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x12, 0x2a, 0x2e, 0x6d, 0x63, 0x75,
	0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x74, 0x6f, 0x6e, 0x79, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x45, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74,
	0x61, 0x72, 0x6b, 0x2e, 0x74, 0x6f, 0x6e, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x45, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x76, 0x0a, 0x16, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x45, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x12, 0x2e, 0x2e, 0x6d, 0x63, 0x75,
	0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x74, 0x6f, 0x6e, 0x79, 0x2e, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x45, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6d, 0x63, 0x75,
	0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x74, 0x6f, 0x6e, 0x79, 0x2e, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x45, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x70, 0x0a, 0x14, 0x49, 0x6d, 0x70, 0x6f,
	0x72, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x45, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73,
	0x12, 0x2c, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x74, 0x6f,
	0x6e, 0x79, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x45,
	0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a,
	0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x74, 0x6f, 0x6e, 0x79,
	0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x45, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x42, 0x36, 0x5a, 0x34, 0x67, 0x69,
	0x74, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x63, 0x75, 0x63, 0x2f, 0x6d, 0x6f,
	0x6e, 0x6f, 0x72, 0x65, 0x70, 0x6f, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x73,
	0x74, 0x61, 0x72, 0x6b, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x3b, 0x73, 0x74, 0x61,
	0x72, 0x6b, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_stark_api_tony_proto_rawDescOnce sync.Once
	file_stark_api_tony_proto_rawDescData = file_stark_api_tony_proto_rawDesc
)

func file_stark_api_tony_proto_rawDescGZIP() []byte {
	file_stark_api_tony_proto_rawDescOnce.Do(func() {
		file_stark_api_tony_proto_rawDescData = protoimpl.X.CompressGZIP(file_stark_api_tony_proto_rawDescData)
	})
	return file_stark_api_tony_proto_rawDescData
}

var file_stark_api_tony_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_stark_api_tony_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_stark_api_tony_proto_goTypes = []interface{}{
	(EWalletName)(0),                         // 0: mcuc.stark.tony.EWalletName
	(EWalletStatus)(0),                       // 1: mcuc.stark.tony.EWalletStatus
	(*GetEWalletPaymentCodeRequest)(nil),     // 2: mcuc.stark.tony.GetEWalletPaymentCodeRequest
	(*GetEWalletPaymentCodeReply)(nil),       // 3: mcuc.stark.tony.GetEWalletPaymentCodeReply
	(*CancelEWalletTopUpRequest)(nil),        // 4: mcuc.stark.tony.CancelEWalletTopUpRequest
	(*CancelEWalletTopUpReply)(nil),          // 5: mcuc.stark.tony.CancelEWalletTopUpReply
	(*CreateEWalletTopUpRequest)(nil),        // 6: mcuc.stark.tony.CreateEWalletTopUpRequest
	(*CreateEWalletTopUpReply)(nil),          // 7: mcuc.stark.tony.CreateEWalletTopUpReply
	(*ApproveEWalletTopUpRequest)(nil),       // 8: mcuc.stark.tony.ApproveEWalletTopUpRequest
	(*ApproveEWalletTopUpReply)(nil),         // 9: mcuc.stark.tony.ApproveEWalletTopUpReply
	(*RejectEWalletTopUpRequest)(nil),        // 10: mcuc.stark.tony.RejectEWalletTopUpRequest
	(*RejectEWalletTopUpReply)(nil),          // 11: mcuc.stark.tony.RejectEWalletTopUpReply
	(*CreateSystemEWalletRequest)(nil),       // 12: mcuc.stark.tony.CreateSystemEWalletRequest
	(*CreateSystemEWalletReply)(nil),         // 13: mcuc.stark.tony.CreateSystemEWalletReply
	(*UpdateSystemEWalletStatusRequest)(nil), // 14: mcuc.stark.tony.UpdateSystemEWalletStatusRequest
	(*UpdateSystemEWalletStatusReply)(nil),   // 15: mcuc.stark.tony.UpdateSystemEWalletStatusReply
	(*ListSystemEWalletsRequest)(nil),        // 16: mcuc.stark.tony.ListSystemEWalletsRequest
	(*ListSystemEWalletsReply)(nil),          // 17: mcuc.stark.tony.ListSystemEWalletsReply
	(*ValidateSystemEWalletsRequest)(nil),    // 18: mcuc.stark.tony.ValidateSystemEWalletsRequest
	(*ValidateSystemEWalletsReply)(nil),      // 19: mcuc.stark.tony.ValidateSystemEWalletsReply
	(*ImportSystemEWalletsRequest)(nil),      // 20: mcuc.stark.tony.ImportSystemEWalletsRequest
	(*ImportSystemEWalletsReply)(nil),        // 21: mcuc.stark.tony.ImportSystemEWalletsReply
	(*GetSystemEWalletsRequest)(nil),         // 22: mcuc.stark.tony.GetSystemEWalletsRequest
	(*GetSystemEWalletsReply)(nil),           // 23: mcuc.stark.tony.GetSystemEWalletsReply
	(*EWalletPaymentDetail)(nil),             // 24: mcuc.stark.tony.EWalletPaymentDetail
	(*SystemEWallet)(nil),                    // 25: mcuc.stark.tony.SystemEWallet
	(*timestamp.Timestamp)(nil),              // 26: google.protobuf.Timestamp
}
var file_stark_api_tony_proto_depIdxs = []int32{
	0,  // 0: mcuc.stark.tony.GetEWalletPaymentCodeRequest.e_wallet_name:type_name -> mcuc.stark.tony.EWalletName
	0,  // 1: mcuc.stark.tony.GetEWalletPaymentCodeReply.e_wallet_name:type_name -> mcuc.stark.tony.EWalletName
	0,  // 2: mcuc.stark.tony.CreateSystemEWalletRequest.account_wallet_name:type_name -> mcuc.stark.tony.EWalletName
	1,  // 3: mcuc.stark.tony.UpdateSystemEWalletStatusRequest.status:type_name -> mcuc.stark.tony.EWalletStatus
	25, // 4: mcuc.stark.tony.UpdateSystemEWalletStatusReply.e_wallet:type_name -> mcuc.stark.tony.SystemEWallet
	1,  // 5: mcuc.stark.tony.ListSystemEWalletsRequest.statuses:type_name -> mcuc.stark.tony.EWalletStatus
	0,  // 6: mcuc.stark.tony.ListSystemEWalletsRequest.e_wallet_names:type_name -> mcuc.stark.tony.EWalletName
	25, // 7: mcuc.stark.tony.ListSystemEWalletsReply.records:type_name -> mcuc.stark.tony.SystemEWallet
	12, // 8: mcuc.stark.tony.ValidateSystemEWalletsRequest.records:type_name -> mcuc.stark.tony.CreateSystemEWalletRequest
	12, // 9: mcuc.stark.tony.ValidateSystemEWalletsReply.valid_records:type_name -> mcuc.stark.tony.CreateSystemEWalletRequest
	12, // 10: mcuc.stark.tony.ValidateSystemEWalletsReply.duplicated_records:type_name -> mcuc.stark.tony.CreateSystemEWalletRequest
	12, // 11: mcuc.stark.tony.ValidateSystemEWalletsReply.invalid_records:type_name -> mcuc.stark.tony.CreateSystemEWalletRequest
	12, // 12: mcuc.stark.tony.ValidateSystemEWalletsReply.duplicated_id_records:type_name -> mcuc.stark.tony.CreateSystemEWalletRequest
	12, // 13: mcuc.stark.tony.ImportSystemEWalletsRequest.records:type_name -> mcuc.stark.tony.CreateSystemEWalletRequest
	0,  // 14: mcuc.stark.tony.GetSystemEWalletsRequest.e_wallet_name:type_name -> mcuc.stark.tony.EWalletName
	25, // 15: mcuc.stark.tony.GetSystemEWalletsReply.system_e_wallets:type_name -> mcuc.stark.tony.SystemEWallet
	0,  // 16: mcuc.stark.tony.EWalletPaymentDetail.e_wallet_name:type_name -> mcuc.stark.tony.EWalletName
	26, // 17: mcuc.stark.tony.SystemEWallet.created_at:type_name -> google.protobuf.Timestamp
	26, // 18: mcuc.stark.tony.SystemEWallet.updated_at:type_name -> google.protobuf.Timestamp
	0,  // 19: mcuc.stark.tony.SystemEWallet.e_wallet_name:type_name -> mcuc.stark.tony.EWalletName
	1,  // 20: mcuc.stark.tony.SystemEWallet.status:type_name -> mcuc.stark.tony.EWalletStatus
	2,  // 21: mcuc.stark.tony.Tony.GetEWalletPaymentCode:input_type -> mcuc.stark.tony.GetEWalletPaymentCodeRequest
	4,  // 22: mcuc.stark.tony.Tony.CancelEWalletTopUp:input_type -> mcuc.stark.tony.CancelEWalletTopUpRequest
	6,  // 23: mcuc.stark.tony.Tony.CreateEWalletTopUp:input_type -> mcuc.stark.tony.CreateEWalletTopUpRequest
	8,  // 24: mcuc.stark.tony.Tony.ApproveEWalletTopUp:input_type -> mcuc.stark.tony.ApproveEWalletTopUpRequest
	10, // 25: mcuc.stark.tony.Tony.RejectEWalletTopUp:input_type -> mcuc.stark.tony.RejectEWalletTopUpRequest
	22, // 26: mcuc.stark.tony.Tony.GetSystemEWallets:input_type -> mcuc.stark.tony.GetSystemEWalletsRequest
	12, // 27: mcuc.stark.tony.Tony.CreateSystemEWallet:input_type -> mcuc.stark.tony.CreateSystemEWalletRequest
	14, // 28: mcuc.stark.tony.Tony.UpdateSystemEWalletStatus:input_type -> mcuc.stark.tony.UpdateSystemEWalletStatusRequest
	16, // 29: mcuc.stark.tony.Tony.ListSystemEWallets:input_type -> mcuc.stark.tony.ListSystemEWalletsRequest
	18, // 30: mcuc.stark.tony.Tony.ValidateSystemEWallets:input_type -> mcuc.stark.tony.ValidateSystemEWalletsRequest
	20, // 31: mcuc.stark.tony.Tony.ImportSystemEWallets:input_type -> mcuc.stark.tony.ImportSystemEWalletsRequest
	3,  // 32: mcuc.stark.tony.Tony.GetEWalletPaymentCode:output_type -> mcuc.stark.tony.GetEWalletPaymentCodeReply
	5,  // 33: mcuc.stark.tony.Tony.CancelEWalletTopUp:output_type -> mcuc.stark.tony.CancelEWalletTopUpReply
	7,  // 34: mcuc.stark.tony.Tony.CreateEWalletTopUp:output_type -> mcuc.stark.tony.CreateEWalletTopUpReply
	9,  // 35: mcuc.stark.tony.Tony.ApproveEWalletTopUp:output_type -> mcuc.stark.tony.ApproveEWalletTopUpReply
	11, // 36: mcuc.stark.tony.Tony.RejectEWalletTopUp:output_type -> mcuc.stark.tony.RejectEWalletTopUpReply
	23, // 37: mcuc.stark.tony.Tony.GetSystemEWallets:output_type -> mcuc.stark.tony.GetSystemEWalletsReply
	13, // 38: mcuc.stark.tony.Tony.CreateSystemEWallet:output_type -> mcuc.stark.tony.CreateSystemEWalletReply
	15, // 39: mcuc.stark.tony.Tony.UpdateSystemEWalletStatus:output_type -> mcuc.stark.tony.UpdateSystemEWalletStatusReply
	17, // 40: mcuc.stark.tony.Tony.ListSystemEWallets:output_type -> mcuc.stark.tony.ListSystemEWalletsReply
	19, // 41: mcuc.stark.tony.Tony.ValidateSystemEWallets:output_type -> mcuc.stark.tony.ValidateSystemEWalletsReply
	21, // 42: mcuc.stark.tony.Tony.ImportSystemEWallets:output_type -> mcuc.stark.tony.ImportSystemEWalletsReply
	32, // [32:43] is the sub-list for method output_type
	21, // [21:32] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_stark_api_tony_proto_init() }
func file_stark_api_tony_proto_init() {
	if File_stark_api_tony_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_stark_api_tony_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEWalletPaymentCodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_tony_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEWalletPaymentCodeReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_tony_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelEWalletTopUpRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_tony_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelEWalletTopUpReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_tony_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateEWalletTopUpRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_tony_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateEWalletTopUpReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_tony_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApproveEWalletTopUpRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_tony_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApproveEWalletTopUpReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_tony_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RejectEWalletTopUpRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_tony_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RejectEWalletTopUpReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_tony_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSystemEWalletRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_tony_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSystemEWalletReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_tony_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSystemEWalletStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_tony_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSystemEWalletStatusReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_tony_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSystemEWalletsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_tony_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSystemEWalletsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_tony_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateSystemEWalletsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_tony_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateSystemEWalletsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_tony_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportSystemEWalletsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_tony_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportSystemEWalletsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_tony_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSystemEWalletsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_tony_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSystemEWalletsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_tony_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EWalletPaymentDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_tony_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemEWallet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_stark_api_tony_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_stark_api_tony_proto_goTypes,
		DependencyIndexes: file_stark_api_tony_proto_depIdxs,
		EnumInfos:         file_stark_api_tony_proto_enumTypes,
		MessageInfos:      file_stark_api_tony_proto_msgTypes,
	}.Build()
	File_stark_api_tony_proto = out.File
	file_stark_api_tony_proto_rawDesc = nil
	file_stark_api_tony_proto_goTypes = nil
	file_stark_api_tony_proto_depIdxs = nil
}
