// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.12.4
// source: stark/api/pepper.proto

package stark

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type BankName int32

const (
	BankName_BANK_UNSPECIFIED BankName = 0
	BankName_VIETCOMBANK      BankName = 1 // Vietcombank
	BankName_SACOMBANK        BankName = 2 // Sacomank
	BankName_ACB              BankName = 3 // ACB
	BankName_VIETINBANK       BankName = 4 // Vietinbank
	BankName_BIDV             BankName = 5 // BIDV
)

// Enum value maps for BankName.
var (
	BankName_name = map[int32]string{
		0: "BANK_UNSPECIFIED",
		1: "VIETCOMBANK",
		2: "SACOMBANK",
		3: "ACB",
		4: "VIETINBANK",
		5: "BIDV",
	}
	BankName_value = map[string]int32{
		"BANK_UNSPECIFIED": 0,
		"VIETCOMBANK":      1,
		"SACOMBANK":        2,
		"ACB":              3,
		"VIETINBANK":       4,
		"BIDV":             5,
	}
)

func (x BankName) Enum() *BankName {
	p := new(BankName)
	*p = x
	return p
}

func (x BankName) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BankName) Descriptor() protoreflect.EnumDescriptor {
	return file_stark_api_pepper_proto_enumTypes[0].Descriptor()
}

func (BankName) Type() protoreflect.EnumType {
	return &file_stark_api_pepper_proto_enumTypes[0]
}

func (x BankName) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BankName.Descriptor instead.
func (BankName) EnumDescriptor() ([]byte, []int) {
	return file_stark_api_pepper_proto_rawDescGZIP(), []int{0}
}

type BankStatus int32

const (
	BankStatus_BANK_STATUS_UNSPECIFIED BankStatus = 0
	BankStatus_BANK_STATUS_ACTIVE      BankStatus = 1
	BankStatus_BANK_STATUS_IN_ACTIVE   BankStatus = 2
)

// Enum value maps for BankStatus.
var (
	BankStatus_name = map[int32]string{
		0: "BANK_STATUS_UNSPECIFIED",
		1: "BANK_STATUS_ACTIVE",
		2: "BANK_STATUS_IN_ACTIVE",
	}
	BankStatus_value = map[string]int32{
		"BANK_STATUS_UNSPECIFIED": 0,
		"BANK_STATUS_ACTIVE":      1,
		"BANK_STATUS_IN_ACTIVE":   2,
	}
)

func (x BankStatus) Enum() *BankStatus {
	p := new(BankStatus)
	*p = x
	return p
}

func (x BankStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BankStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_stark_api_pepper_proto_enumTypes[1].Descriptor()
}

func (BankStatus) Type() protoreflect.EnumType {
	return &file_stark_api_pepper_proto_enumTypes[1]
}

func (x BankStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BankStatus.Descriptor instead.
func (BankStatus) EnumDescriptor() ([]byte, []int) {
	return file_stark_api_pepper_proto_rawDescGZIP(), []int{1}
}

type GetBankPaymentCodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BankName       BankName `protobuf:"varint,1,opt,name=bank_name,json=bankName,proto3,enum=mcuc.stark.pepper.BankName" json:"bank_name,omitempty"`
	MerchantUserId int64    `protobuf:"varint,2,opt,name=merchant_user_id,json=merchantUserId,proto3" json:"merchant_user_id,omitempty"`
}

func (x *GetBankPaymentCodeRequest) Reset() {
	*x = GetBankPaymentCodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_pepper_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBankPaymentCodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBankPaymentCodeRequest) ProtoMessage() {}

func (x *GetBankPaymentCodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_pepper_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBankPaymentCodeRequest.ProtoReflect.Descriptor instead.
func (*GetBankPaymentCodeRequest) Descriptor() ([]byte, []int) {
	return file_stark_api_pepper_proto_rawDescGZIP(), []int{0}
}

func (x *GetBankPaymentCodeRequest) GetBankName() BankName {
	if x != nil {
		return x.BankName
	}
	return BankName_BANK_UNSPECIFIED
}

func (x *GetBankPaymentCodeRequest) GetMerchantUserId() int64 {
	if x != nil {
		return x.MerchantUserId
	}
	return 0
}

type GetBankPaymentCodeReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code          string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	AccountNumber string `protobuf:"bytes,2,opt,name=account_number,json=accountNumber,proto3" json:"account_number,omitempty"`
	AccountName   string `protobuf:"bytes,3,opt,name=account_name,json=accountName,proto3" json:"account_name,omitempty"`
	Branch        string `protobuf:"bytes,4,opt,name=branch,proto3" json:"branch,omitempty"`
}

func (x *GetBankPaymentCodeReply) Reset() {
	*x = GetBankPaymentCodeReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_pepper_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBankPaymentCodeReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBankPaymentCodeReply) ProtoMessage() {}

func (x *GetBankPaymentCodeReply) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_pepper_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBankPaymentCodeReply.ProtoReflect.Descriptor instead.
func (*GetBankPaymentCodeReply) Descriptor() ([]byte, []int) {
	return file_stark_api_pepper_proto_rawDescGZIP(), []int{1}
}

func (x *GetBankPaymentCodeReply) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *GetBankPaymentCodeReply) GetAccountNumber() string {
	if x != nil {
		return x.AccountNumber
	}
	return ""
}

func (x *GetBankPaymentCodeReply) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

func (x *GetBankPaymentCodeReply) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

type CreateBankingWithdrawRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amount                    uint64   `protobuf:"varint,1,opt,name=amount,proto3" json:"amount,omitempty"`
	MerchantUserId            int64    `protobuf:"varint,2,opt,name=merchant_user_id,json=merchantUserId,proto3" json:"merchant_user_id,omitempty"`
	MerchantUserAccountNumber string   `protobuf:"bytes,3,opt,name=merchant_user_account_number,json=merchantUserAccountNumber,proto3" json:"merchant_user_account_number,omitempty"`
	MerchantUserAccountName   string   `protobuf:"bytes,4,opt,name=merchant_user_account_name,json=merchantUserAccountName,proto3" json:"merchant_user_account_name,omitempty"`
	BankName                  BankName `protobuf:"varint,5,opt,name=bank_name,json=bankName,proto3,enum=mcuc.stark.pepper.BankName" json:"bank_name,omitempty"`
}

func (x *CreateBankingWithdrawRequest) Reset() {
	*x = CreateBankingWithdrawRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_pepper_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBankingWithdrawRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBankingWithdrawRequest) ProtoMessage() {}

func (x *CreateBankingWithdrawRequest) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_pepper_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBankingWithdrawRequest.ProtoReflect.Descriptor instead.
func (*CreateBankingWithdrawRequest) Descriptor() ([]byte, []int) {
	return file_stark_api_pepper_proto_rawDescGZIP(), []int{2}
}

func (x *CreateBankingWithdrawRequest) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *CreateBankingWithdrawRequest) GetMerchantUserId() int64 {
	if x != nil {
		return x.MerchantUserId
	}
	return 0
}

func (x *CreateBankingWithdrawRequest) GetMerchantUserAccountNumber() string {
	if x != nil {
		return x.MerchantUserAccountNumber
	}
	return ""
}

func (x *CreateBankingWithdrawRequest) GetMerchantUserAccountName() string {
	if x != nil {
		return x.MerchantUserAccountName
	}
	return ""
}

func (x *CreateBankingWithdrawRequest) GetBankName() BankName {
	if x != nil {
		return x.BankName
	}
	return BankName_BANK_UNSPECIFIED
}

type CreateBankingWithdrawReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PaymentId int64 `protobuf:"varint,1,opt,name=payment_id,json=paymentId,proto3" json:"payment_id,omitempty"`
}

func (x *CreateBankingWithdrawReply) Reset() {
	*x = CreateBankingWithdrawReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_pepper_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBankingWithdrawReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBankingWithdrawReply) ProtoMessage() {}

func (x *CreateBankingWithdrawReply) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_pepper_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBankingWithdrawReply.ProtoReflect.Descriptor instead.
func (*CreateBankingWithdrawReply) Descriptor() ([]byte, []int) {
	return file_stark_api_pepper_proto_rawDescGZIP(), []int{3}
}

func (x *CreateBankingWithdrawReply) GetPaymentId() int64 {
	if x != nil {
		return x.PaymentId
	}
	return 0
}

type CreateBankingTopUpRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amount                    uint64 `protobuf:"varint,1,opt,name=amount,proto3" json:"amount,omitempty"`
	PaymentCode               string `protobuf:"bytes,2,opt,name=payment_code,json=paymentCode,proto3" json:"payment_code,omitempty"`
	MerchantUserAccountNumber string `protobuf:"bytes,3,opt,name=merchant_user_account_number,json=merchantUserAccountNumber,proto3" json:"merchant_user_account_number,omitempty"`
	MerchantUserAccountName   string `protobuf:"bytes,4,opt,name=merchant_user_account_name,json=merchantUserAccountName,proto3" json:"merchant_user_account_name,omitempty"`
	SystemAccountNumber       string `protobuf:"bytes,5,opt,name=system_account_number,json=systemAccountNumber,proto3" json:"system_account_number,omitempty"`
	SystemAccountName         string `protobuf:"bytes,6,opt,name=system_account_name,json=systemAccountName,proto3" json:"system_account_name,omitempty"`
	Note                      string `protobuf:"bytes,7,opt,name=note,proto3" json:"note,omitempty"`
}

func (x *CreateBankingTopUpRequest) Reset() {
	*x = CreateBankingTopUpRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_pepper_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBankingTopUpRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBankingTopUpRequest) ProtoMessage() {}

func (x *CreateBankingTopUpRequest) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_pepper_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBankingTopUpRequest.ProtoReflect.Descriptor instead.
func (*CreateBankingTopUpRequest) Descriptor() ([]byte, []int) {
	return file_stark_api_pepper_proto_rawDescGZIP(), []int{4}
}

func (x *CreateBankingTopUpRequest) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *CreateBankingTopUpRequest) GetPaymentCode() string {
	if x != nil {
		return x.PaymentCode
	}
	return ""
}

func (x *CreateBankingTopUpRequest) GetMerchantUserAccountNumber() string {
	if x != nil {
		return x.MerchantUserAccountNumber
	}
	return ""
}

func (x *CreateBankingTopUpRequest) GetMerchantUserAccountName() string {
	if x != nil {
		return x.MerchantUserAccountName
	}
	return ""
}

func (x *CreateBankingTopUpRequest) GetSystemAccountNumber() string {
	if x != nil {
		return x.SystemAccountNumber
	}
	return ""
}

func (x *CreateBankingTopUpRequest) GetSystemAccountName() string {
	if x != nil {
		return x.SystemAccountName
	}
	return ""
}

func (x *CreateBankingTopUpRequest) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

type CreateBankingTopUpReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateBankingTopUpReply) Reset() {
	*x = CreateBankingTopUpReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_pepper_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBankingTopUpReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBankingTopUpReply) ProtoMessage() {}

func (x *CreateBankingTopUpReply) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_pepper_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBankingTopUpReply.ProtoReflect.Descriptor instead.
func (*CreateBankingTopUpReply) Descriptor() ([]byte, []int) {
	return file_stark_api_pepper_proto_rawDescGZIP(), []int{5}
}

type ApproveBankingTopUpRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PaymentId int64  `protobuf:"varint,1,opt,name=payment_id,json=paymentId,proto3" json:"payment_id,omitempty"`
	ImageUrl  string `protobuf:"bytes,2,opt,name=image_url,json=imageUrl,proto3" json:"image_url,omitempty"`
	TxId      string `protobuf:"bytes,3,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	Note      string `protobuf:"bytes,4,opt,name=note,proto3" json:"note,omitempty"`
}

func (x *ApproveBankingTopUpRequest) Reset() {
	*x = ApproveBankingTopUpRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_pepper_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApproveBankingTopUpRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApproveBankingTopUpRequest) ProtoMessage() {}

func (x *ApproveBankingTopUpRequest) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_pepper_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApproveBankingTopUpRequest.ProtoReflect.Descriptor instead.
func (*ApproveBankingTopUpRequest) Descriptor() ([]byte, []int) {
	return file_stark_api_pepper_proto_rawDescGZIP(), []int{6}
}

func (x *ApproveBankingTopUpRequest) GetPaymentId() int64 {
	if x != nil {
		return x.PaymentId
	}
	return 0
}

func (x *ApproveBankingTopUpRequest) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *ApproveBankingTopUpRequest) GetTxId() string {
	if x != nil {
		return x.TxId
	}
	return ""
}

func (x *ApproveBankingTopUpRequest) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

type ApproveBankingTopUpReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ApproveBankingTopUpReply) Reset() {
	*x = ApproveBankingTopUpReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_pepper_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApproveBankingTopUpReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApproveBankingTopUpReply) ProtoMessage() {}

func (x *ApproveBankingTopUpReply) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_pepper_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApproveBankingTopUpReply.ProtoReflect.Descriptor instead.
func (*ApproveBankingTopUpReply) Descriptor() ([]byte, []int) {
	return file_stark_api_pepper_proto_rawDescGZIP(), []int{7}
}

type RejectBankingTopUpRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PaymentId      int64  `protobuf:"varint,1,opt,name=payment_id,json=paymentId,proto3" json:"payment_id,omitempty"`
	Note           string `protobuf:"bytes,2,opt,name=note,proto3" json:"note,omitempty"`
	IsMerchantCall bool   `protobuf:"varint,3,opt,name=is_merchant_call,json=isMerchantCall,proto3" json:"is_merchant_call,omitempty"`
}

func (x *RejectBankingTopUpRequest) Reset() {
	*x = RejectBankingTopUpRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_pepper_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RejectBankingTopUpRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RejectBankingTopUpRequest) ProtoMessage() {}

func (x *RejectBankingTopUpRequest) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_pepper_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RejectBankingTopUpRequest.ProtoReflect.Descriptor instead.
func (*RejectBankingTopUpRequest) Descriptor() ([]byte, []int) {
	return file_stark_api_pepper_proto_rawDescGZIP(), []int{8}
}

func (x *RejectBankingTopUpRequest) GetPaymentId() int64 {
	if x != nil {
		return x.PaymentId
	}
	return 0
}

func (x *RejectBankingTopUpRequest) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *RejectBankingTopUpRequest) GetIsMerchantCall() bool {
	if x != nil {
		return x.IsMerchantCall
	}
	return false
}

type RejectBankingTopUpReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RejectBankingTopUpReply) Reset() {
	*x = RejectBankingTopUpReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_pepper_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RejectBankingTopUpReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RejectBankingTopUpReply) ProtoMessage() {}

func (x *RejectBankingTopUpReply) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_pepper_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RejectBankingTopUpReply.ProtoReflect.Descriptor instead.
func (*RejectBankingTopUpReply) Descriptor() ([]byte, []int) {
	return file_stark_api_pepper_proto_rawDescGZIP(), []int{9}
}

type ApproveBankingWithdrawRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PaymentId int64  `protobuf:"varint,1,opt,name=payment_id,json=paymentId,proto3" json:"payment_id,omitempty"`
	Note      string `protobuf:"bytes,4,opt,name=note,proto3" json:"note,omitempty"`
}

func (x *ApproveBankingWithdrawRequest) Reset() {
	*x = ApproveBankingWithdrawRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_pepper_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApproveBankingWithdrawRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApproveBankingWithdrawRequest) ProtoMessage() {}

func (x *ApproveBankingWithdrawRequest) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_pepper_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApproveBankingWithdrawRequest.ProtoReflect.Descriptor instead.
func (*ApproveBankingWithdrawRequest) Descriptor() ([]byte, []int) {
	return file_stark_api_pepper_proto_rawDescGZIP(), []int{10}
}

func (x *ApproveBankingWithdrawRequest) GetPaymentId() int64 {
	if x != nil {
		return x.PaymentId
	}
	return 0
}

func (x *ApproveBankingWithdrawRequest) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

type ApproveBankingWithdrawReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ApproveBankingWithdrawReply) Reset() {
	*x = ApproveBankingWithdrawReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_pepper_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApproveBankingWithdrawReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApproveBankingWithdrawReply) ProtoMessage() {}

func (x *ApproveBankingWithdrawReply) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_pepper_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApproveBankingWithdrawReply.ProtoReflect.Descriptor instead.
func (*ApproveBankingWithdrawReply) Descriptor() ([]byte, []int) {
	return file_stark_api_pepper_proto_rawDescGZIP(), []int{11}
}

type SubmitBankingWithdrawRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PaymentId     int64    `protobuf:"varint,1,opt,name=payment_id,json=paymentId,proto3" json:"payment_id,omitempty"`
	BankName      BankName `protobuf:"varint,2,opt,name=bank_name,json=bankName,proto3,enum=mcuc.stark.pepper.BankName" json:"bank_name,omitempty"`
	AccountNumber string   `protobuf:"bytes,3,opt,name=account_number,json=accountNumber,proto3" json:"account_number,omitempty"`
	AccountName   string   `protobuf:"bytes,4,opt,name=account_name,json=accountName,proto3" json:"account_name,omitempty"`
	Amount        uint64   `protobuf:"varint,5,opt,name=amount,proto3" json:"amount,omitempty"`
	Fee           uint64   `protobuf:"varint,6,opt,name=fee,proto3" json:"fee,omitempty"`
	ImageUrl      string   `protobuf:"bytes,7,opt,name=image_url,json=imageUrl,proto3" json:"image_url,omitempty"`
	TxId          string   `protobuf:"bytes,8,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	Note          string   `protobuf:"bytes,9,opt,name=note,proto3" json:"note,omitempty"`
}

func (x *SubmitBankingWithdrawRequest) Reset() {
	*x = SubmitBankingWithdrawRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_pepper_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitBankingWithdrawRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitBankingWithdrawRequest) ProtoMessage() {}

func (x *SubmitBankingWithdrawRequest) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_pepper_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitBankingWithdrawRequest.ProtoReflect.Descriptor instead.
func (*SubmitBankingWithdrawRequest) Descriptor() ([]byte, []int) {
	return file_stark_api_pepper_proto_rawDescGZIP(), []int{12}
}

func (x *SubmitBankingWithdrawRequest) GetPaymentId() int64 {
	if x != nil {
		return x.PaymentId
	}
	return 0
}

func (x *SubmitBankingWithdrawRequest) GetBankName() BankName {
	if x != nil {
		return x.BankName
	}
	return BankName_BANK_UNSPECIFIED
}

func (x *SubmitBankingWithdrawRequest) GetAccountNumber() string {
	if x != nil {
		return x.AccountNumber
	}
	return ""
}

func (x *SubmitBankingWithdrawRequest) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

func (x *SubmitBankingWithdrawRequest) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *SubmitBankingWithdrawRequest) GetFee() uint64 {
	if x != nil {
		return x.Fee
	}
	return 0
}

func (x *SubmitBankingWithdrawRequest) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *SubmitBankingWithdrawRequest) GetTxId() string {
	if x != nil {
		return x.TxId
	}
	return ""
}

func (x *SubmitBankingWithdrawRequest) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

type SubmitBankingWithdrawReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SubmitBankingWithdrawReply) Reset() {
	*x = SubmitBankingWithdrawReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_pepper_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitBankingWithdrawReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitBankingWithdrawReply) ProtoMessage() {}

func (x *SubmitBankingWithdrawReply) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_pepper_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitBankingWithdrawReply.ProtoReflect.Descriptor instead.
func (*SubmitBankingWithdrawReply) Descriptor() ([]byte, []int) {
	return file_stark_api_pepper_proto_rawDescGZIP(), []int{13}
}

type GetIsMerchantUserBankAccountVerifiedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountNumber string `protobuf:"bytes,1,opt,name=account_number,json=accountNumber,proto3" json:"account_number,omitempty"`
	AccountName   string `protobuf:"bytes,2,opt,name=account_name,json=accountName,proto3" json:"account_name,omitempty"`
}

func (x *GetIsMerchantUserBankAccountVerifiedRequest) Reset() {
	*x = GetIsMerchantUserBankAccountVerifiedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_pepper_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIsMerchantUserBankAccountVerifiedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIsMerchantUserBankAccountVerifiedRequest) ProtoMessage() {}

func (x *GetIsMerchantUserBankAccountVerifiedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_pepper_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIsMerchantUserBankAccountVerifiedRequest.ProtoReflect.Descriptor instead.
func (*GetIsMerchantUserBankAccountVerifiedRequest) Descriptor() ([]byte, []int) {
	return file_stark_api_pepper_proto_rawDescGZIP(), []int{14}
}

func (x *GetIsMerchantUserBankAccountVerifiedRequest) GetAccountNumber() string {
	if x != nil {
		return x.AccountNumber
	}
	return ""
}

func (x *GetIsMerchantUserBankAccountVerifiedRequest) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

type GetIsMerchantUserBankAccountVerifiedReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Verified bool `protobuf:"varint,1,opt,name=verified,proto3" json:"verified,omitempty"`
}

func (x *GetIsMerchantUserBankAccountVerifiedReply) Reset() {
	*x = GetIsMerchantUserBankAccountVerifiedReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_pepper_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIsMerchantUserBankAccountVerifiedReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIsMerchantUserBankAccountVerifiedReply) ProtoMessage() {}

func (x *GetIsMerchantUserBankAccountVerifiedReply) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_pepper_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIsMerchantUserBankAccountVerifiedReply.ProtoReflect.Descriptor instead.
func (*GetIsMerchantUserBankAccountVerifiedReply) Descriptor() ([]byte, []int) {
	return file_stark_api_pepper_proto_rawDescGZIP(), []int{15}
}

func (x *GetIsMerchantUserBankAccountVerifiedReply) GetVerified() bool {
	if x != nil {
		return x.Verified
	}
	return false
}

type RejectBankingWithdrawRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PaymentId      int64  `protobuf:"varint,1,opt,name=payment_id,json=paymentId,proto3" json:"payment_id,omitempty"`
	Note           string `protobuf:"bytes,2,opt,name=note,proto3" json:"note,omitempty"`
	IsMerchantCall bool   `protobuf:"varint,3,opt,name=is_merchant_call,json=isMerchantCall,proto3" json:"is_merchant_call,omitempty"`
}

func (x *RejectBankingWithdrawRequest) Reset() {
	*x = RejectBankingWithdrawRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_pepper_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RejectBankingWithdrawRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RejectBankingWithdrawRequest) ProtoMessage() {}

func (x *RejectBankingWithdrawRequest) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_pepper_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RejectBankingWithdrawRequest.ProtoReflect.Descriptor instead.
func (*RejectBankingWithdrawRequest) Descriptor() ([]byte, []int) {
	return file_stark_api_pepper_proto_rawDescGZIP(), []int{16}
}

func (x *RejectBankingWithdrawRequest) GetPaymentId() int64 {
	if x != nil {
		return x.PaymentId
	}
	return 0
}

func (x *RejectBankingWithdrawRequest) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *RejectBankingWithdrawRequest) GetIsMerchantCall() bool {
	if x != nil {
		return x.IsMerchantCall
	}
	return false
}

type RejectBankingWithdrawReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RejectBankingWithdrawReply) Reset() {
	*x = RejectBankingWithdrawReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_pepper_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RejectBankingWithdrawReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RejectBankingWithdrawReply) ProtoMessage() {}

func (x *RejectBankingWithdrawReply) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_pepper_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RejectBankingWithdrawReply.ProtoReflect.Descriptor instead.
func (*RejectBankingWithdrawReply) Descriptor() ([]byte, []int) {
	return file_stark_api_pepper_proto_rawDescGZIP(), []int{17}
}

type CancelBankingWithdrawRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PaymentId int64 `protobuf:"varint,1,opt,name=payment_id,json=paymentId,proto3" json:"payment_id,omitempty"`
}

func (x *CancelBankingWithdrawRequest) Reset() {
	*x = CancelBankingWithdrawRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_pepper_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelBankingWithdrawRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelBankingWithdrawRequest) ProtoMessage() {}

func (x *CancelBankingWithdrawRequest) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_pepper_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelBankingWithdrawRequest.ProtoReflect.Descriptor instead.
func (*CancelBankingWithdrawRequest) Descriptor() ([]byte, []int) {
	return file_stark_api_pepper_proto_rawDescGZIP(), []int{18}
}

func (x *CancelBankingWithdrawRequest) GetPaymentId() int64 {
	if x != nil {
		return x.PaymentId
	}
	return 0
}

type CancelBankingWithdrawReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CancelBankingWithdrawReply) Reset() {
	*x = CancelBankingWithdrawReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_pepper_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelBankingWithdrawReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelBankingWithdrawReply) ProtoMessage() {}

func (x *CancelBankingWithdrawReply) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_pepper_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelBankingWithdrawReply.ProtoReflect.Descriptor instead.
func (*CancelBankingWithdrawReply) Descriptor() ([]byte, []int) {
	return file_stark_api_pepper_proto_rawDescGZIP(), []int{19}
}

type ListSystemBankAccountsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MerchantIds []int64      `protobuf:"varint,1,rep,packed,name=merchant_ids,json=merchantIds,proto3" json:"merchant_ids,omitempty"`
	Statues     []BankStatus `protobuf:"varint,2,rep,packed,name=statues,proto3,enum=mcuc.stark.pepper.BankStatus" json:"statues,omitempty"`
	BankNames   []BankName   `protobuf:"varint,3,rep,packed,name=bank_names,json=bankNames,proto3,enum=mcuc.stark.pepper.BankName" json:"bank_names,omitempty"`
	Ids         []int64      `protobuf:"varint,4,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	Page        uint32       `protobuf:"varint,10,opt,name=page,proto3" json:"page,omitempty"`
	Size        uint32       `protobuf:"varint,11,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *ListSystemBankAccountsRequest) Reset() {
	*x = ListSystemBankAccountsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_pepper_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSystemBankAccountsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSystemBankAccountsRequest) ProtoMessage() {}

func (x *ListSystemBankAccountsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_pepper_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSystemBankAccountsRequest.ProtoReflect.Descriptor instead.
func (*ListSystemBankAccountsRequest) Descriptor() ([]byte, []int) {
	return file_stark_api_pepper_proto_rawDescGZIP(), []int{20}
}

func (x *ListSystemBankAccountsRequest) GetMerchantIds() []int64 {
	if x != nil {
		return x.MerchantIds
	}
	return nil
}

func (x *ListSystemBankAccountsRequest) GetStatues() []BankStatus {
	if x != nil {
		return x.Statues
	}
	return nil
}

func (x *ListSystemBankAccountsRequest) GetBankNames() []BankName {
	if x != nil {
		return x.BankNames
	}
	return nil
}

func (x *ListSystemBankAccountsRequest) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *ListSystemBankAccountsRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListSystemBankAccountsRequest) GetSize() uint32 {
	if x != nil {
		return x.Size
	}
	return 0
}

type ListSystemBankAccountsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total       int64         `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	CurrentPage uint32        `protobuf:"varint,2,opt,name=current_page,json=currentPage,proto3" json:"current_page,omitempty"`
	Records     []*SystemBank `protobuf:"bytes,3,rep,name=records,proto3" json:"records,omitempty"`
}

func (x *ListSystemBankAccountsReply) Reset() {
	*x = ListSystemBankAccountsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_pepper_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSystemBankAccountsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSystemBankAccountsReply) ProtoMessage() {}

func (x *ListSystemBankAccountsReply) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_pepper_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSystemBankAccountsReply.ProtoReflect.Descriptor instead.
func (*ListSystemBankAccountsReply) Descriptor() ([]byte, []int) {
	return file_stark_api_pepper_proto_rawDescGZIP(), []int{21}
}

func (x *ListSystemBankAccountsReply) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListSystemBankAccountsReply) GetCurrentPage() uint32 {
	if x != nil {
		return x.CurrentPage
	}
	return 0
}

func (x *ListSystemBankAccountsReply) GetRecords() []*SystemBank {
	if x != nil {
		return x.Records
	}
	return nil
}

type CreateSystemBankAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId         int64  `protobuf:"varint,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	BankName          string `protobuf:"bytes,2,opt,name=bank_name,json=bankName,proto3" json:"bank_name,omitempty"`
	MerchantId        int64  `protobuf:"varint,3,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty"`
	AccountNumber     string `protobuf:"bytes,4,opt,name=account_number,json=accountNumber,proto3" json:"account_number,omitempty"`
	AccountName       string `protobuf:"bytes,5,opt,name=account_name,json=accountName,proto3" json:"account_name,omitempty"`
	Branch            string `protobuf:"bytes,6,opt,name=branch,proto3" json:"branch,omitempty"`
	Balance           uint64 `protobuf:"varint,7,opt,name=balance,proto3" json:"balance,omitempty"`
	DailyBalanceLimit uint64 `protobuf:"varint,8,opt,name=daily_balance_limit,json=dailyBalanceLimit,proto3" json:"daily_balance_limit,omitempty"`
	ErrorCode         string `protobuf:"bytes,9,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (x *CreateSystemBankAccountRequest) Reset() {
	*x = CreateSystemBankAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_pepper_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSystemBankAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSystemBankAccountRequest) ProtoMessage() {}

func (x *CreateSystemBankAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_pepper_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSystemBankAccountRequest.ProtoReflect.Descriptor instead.
func (*CreateSystemBankAccountRequest) Descriptor() ([]byte, []int) {
	return file_stark_api_pepper_proto_rawDescGZIP(), []int{22}
}

func (x *CreateSystemBankAccountRequest) GetAccountId() int64 {
	if x != nil {
		return x.AccountId
	}
	return 0
}

func (x *CreateSystemBankAccountRequest) GetBankName() string {
	if x != nil {
		return x.BankName
	}
	return ""
}

func (x *CreateSystemBankAccountRequest) GetMerchantId() int64 {
	if x != nil {
		return x.MerchantId
	}
	return 0
}

func (x *CreateSystemBankAccountRequest) GetAccountNumber() string {
	if x != nil {
		return x.AccountNumber
	}
	return ""
}

func (x *CreateSystemBankAccountRequest) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

func (x *CreateSystemBankAccountRequest) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

func (x *CreateSystemBankAccountRequest) GetBalance() uint64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *CreateSystemBankAccountRequest) GetDailyBalanceLimit() uint64 {
	if x != nil {
		return x.DailyBalanceLimit
	}
	return 0
}

func (x *CreateSystemBankAccountRequest) GetErrorCode() string {
	if x != nil {
		return x.ErrorCode
	}
	return ""
}

type CreateSystemBankAccountReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateSystemBankAccountReply) Reset() {
	*x = CreateSystemBankAccountReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_pepper_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSystemBankAccountReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSystemBankAccountReply) ProtoMessage() {}

func (x *CreateSystemBankAccountReply) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_pepper_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSystemBankAccountReply.ProtoReflect.Descriptor instead.
func (*CreateSystemBankAccountReply) Descriptor() ([]byte, []int) {
	return file_stark_api_pepper_proto_rawDescGZIP(), []int{23}
}

type VerifyMerchantUserBankAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BankName      BankName `protobuf:"varint,1,opt,name=bank_name,json=bankName,proto3,enum=mcuc.stark.pepper.BankName" json:"bank_name,omitempty"`
	AccountNumber string   `protobuf:"bytes,2,opt,name=account_number,json=accountNumber,proto3" json:"account_number,omitempty"`
	AccountName   string   `protobuf:"bytes,3,opt,name=account_name,json=accountName,proto3" json:"account_name,omitempty"`
}

func (x *VerifyMerchantUserBankAccountRequest) Reset() {
	*x = VerifyMerchantUserBankAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_pepper_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyMerchantUserBankAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyMerchantUserBankAccountRequest) ProtoMessage() {}

func (x *VerifyMerchantUserBankAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_pepper_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyMerchantUserBankAccountRequest.ProtoReflect.Descriptor instead.
func (*VerifyMerchantUserBankAccountRequest) Descriptor() ([]byte, []int) {
	return file_stark_api_pepper_proto_rawDescGZIP(), []int{24}
}

func (x *VerifyMerchantUserBankAccountRequest) GetBankName() BankName {
	if x != nil {
		return x.BankName
	}
	return BankName_BANK_UNSPECIFIED
}

func (x *VerifyMerchantUserBankAccountRequest) GetAccountNumber() string {
	if x != nil {
		return x.AccountNumber
	}
	return ""
}

func (x *VerifyMerchantUserBankAccountRequest) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

type VerifyMerchantUserBankAccountReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *VerifyMerchantUserBankAccountReply) Reset() {
	*x = VerifyMerchantUserBankAccountReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_pepper_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyMerchantUserBankAccountReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyMerchantUserBankAccountReply) ProtoMessage() {}

func (x *VerifyMerchantUserBankAccountReply) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_pepper_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyMerchantUserBankAccountReply.ProtoReflect.Descriptor instead.
func (*VerifyMerchantUserBankAccountReply) Descriptor() ([]byte, []int) {
	return file_stark_api_pepper_proto_rawDescGZIP(), []int{25}
}

type ImportSystemBankAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Records []*CreateSystemBankAccountRequest `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
}

func (x *ImportSystemBankAccountRequest) Reset() {
	*x = ImportSystemBankAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_pepper_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportSystemBankAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportSystemBankAccountRequest) ProtoMessage() {}

func (x *ImportSystemBankAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_pepper_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportSystemBankAccountRequest.ProtoReflect.Descriptor instead.
func (*ImportSystemBankAccountRequest) Descriptor() ([]byte, []int) {
	return file_stark_api_pepper_proto_rawDescGZIP(), []int{26}
}

func (x *ImportSystemBankAccountRequest) GetRecords() []*CreateSystemBankAccountRequest {
	if x != nil {
		return x.Records
	}
	return nil
}

type ImportSystemBankAccountReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ImportSystemBankAccountReply) Reset() {
	*x = ImportSystemBankAccountReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_pepper_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportSystemBankAccountReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportSystemBankAccountReply) ProtoMessage() {}

func (x *ImportSystemBankAccountReply) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_pepper_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportSystemBankAccountReply.ProtoReflect.Descriptor instead.
func (*ImportSystemBankAccountReply) Descriptor() ([]byte, []int) {
	return file_stark_api_pepper_proto_rawDescGZIP(), []int{27}
}

type ValidateImportSystemBankAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Records []*CreateSystemBankAccountRequest `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
}

func (x *ValidateImportSystemBankAccountRequest) Reset() {
	*x = ValidateImportSystemBankAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_pepper_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateImportSystemBankAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateImportSystemBankAccountRequest) ProtoMessage() {}

func (x *ValidateImportSystemBankAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_pepper_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateImportSystemBankAccountRequest.ProtoReflect.Descriptor instead.
func (*ValidateImportSystemBankAccountRequest) Descriptor() ([]byte, []int) {
	return file_stark_api_pepper_proto_rawDescGZIP(), []int{28}
}

func (x *ValidateImportSystemBankAccountRequest) GetRecords() []*CreateSystemBankAccountRequest {
	if x != nil {
		return x.Records
	}
	return nil
}

type ValidateImportSystemBankAccountReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DuplicatedRecords          []*CreateSystemBankAccountRequest `protobuf:"bytes,1,rep,name=duplicated_records,json=duplicatedRecords,proto3" json:"duplicated_records,omitempty"`
	ValidRecords               []*CreateSystemBankAccountRequest `protobuf:"bytes,2,rep,name=valid_records,json=validRecords,proto3" json:"valid_records,omitempty"`
	DuplicatedAccountIdRecords []*CreateSystemBankAccountRequest `protobuf:"bytes,3,rep,name=duplicated_account_id_records,json=duplicatedAccountIdRecords,proto3" json:"duplicated_account_id_records,omitempty"`
	InvalidRecords             []*CreateSystemBankAccountRequest `protobuf:"bytes,4,rep,name=invalid_records,json=invalidRecords,proto3" json:"invalid_records,omitempty"`
}

func (x *ValidateImportSystemBankAccountReply) Reset() {
	*x = ValidateImportSystemBankAccountReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_pepper_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateImportSystemBankAccountReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateImportSystemBankAccountReply) ProtoMessage() {}

func (x *ValidateImportSystemBankAccountReply) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_pepper_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateImportSystemBankAccountReply.ProtoReflect.Descriptor instead.
func (*ValidateImportSystemBankAccountReply) Descriptor() ([]byte, []int) {
	return file_stark_api_pepper_proto_rawDescGZIP(), []int{29}
}

func (x *ValidateImportSystemBankAccountReply) GetDuplicatedRecords() []*CreateSystemBankAccountRequest {
	if x != nil {
		return x.DuplicatedRecords
	}
	return nil
}

func (x *ValidateImportSystemBankAccountReply) GetValidRecords() []*CreateSystemBankAccountRequest {
	if x != nil {
		return x.ValidRecords
	}
	return nil
}

func (x *ValidateImportSystemBankAccountReply) GetDuplicatedAccountIdRecords() []*CreateSystemBankAccountRequest {
	if x != nil {
		return x.DuplicatedAccountIdRecords
	}
	return nil
}

func (x *ValidateImportSystemBankAccountReply) GetInvalidRecords() []*CreateSystemBankAccountRequest {
	if x != nil {
		return x.InvalidRecords
	}
	return nil
}

type UpdateSystemBankAccountStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     int64      `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Status BankStatus `protobuf:"varint,2,opt,name=status,proto3,enum=mcuc.stark.pepper.BankStatus" json:"status,omitempty"`
}

func (x *UpdateSystemBankAccountStatusRequest) Reset() {
	*x = UpdateSystemBankAccountStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_pepper_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSystemBankAccountStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSystemBankAccountStatusRequest) ProtoMessage() {}

func (x *UpdateSystemBankAccountStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_pepper_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSystemBankAccountStatusRequest.ProtoReflect.Descriptor instead.
func (*UpdateSystemBankAccountStatusRequest) Descriptor() ([]byte, []int) {
	return file_stark_api_pepper_proto_rawDescGZIP(), []int{30}
}

func (x *UpdateSystemBankAccountStatusRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateSystemBankAccountStatusRequest) GetStatus() BankStatus {
	if x != nil {
		return x.Status
	}
	return BankStatus_BANK_STATUS_UNSPECIFIED
}

type UpdateSystemBankAccountStatusReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateSystemBankAccountStatusReply) Reset() {
	*x = UpdateSystemBankAccountStatusReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_pepper_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSystemBankAccountStatusReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSystemBankAccountStatusReply) ProtoMessage() {}

func (x *UpdateSystemBankAccountStatusReply) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_pepper_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSystemBankAccountStatusReply.ProtoReflect.Descriptor instead.
func (*UpdateSystemBankAccountStatusReply) Descriptor() ([]byte, []int) {
	return file_stark_api_pepper_proto_rawDescGZIP(), []int{31}
}

type ListSystemBankAccountByPaymentInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MerchantId int64    `protobuf:"varint,1,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty"`
	BankName   BankName `protobuf:"varint,2,opt,name=bank_name,json=bankName,proto3,enum=mcuc.stark.pepper.BankName" json:"bank_name,omitempty"`
}

func (x *ListSystemBankAccountByPaymentInfoRequest) Reset() {
	*x = ListSystemBankAccountByPaymentInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_pepper_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSystemBankAccountByPaymentInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSystemBankAccountByPaymentInfoRequest) ProtoMessage() {}

func (x *ListSystemBankAccountByPaymentInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_pepper_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSystemBankAccountByPaymentInfoRequest.ProtoReflect.Descriptor instead.
func (*ListSystemBankAccountByPaymentInfoRequest) Descriptor() ([]byte, []int) {
	return file_stark_api_pepper_proto_rawDescGZIP(), []int{32}
}

func (x *ListSystemBankAccountByPaymentInfoRequest) GetMerchantId() int64 {
	if x != nil {
		return x.MerchantId
	}
	return 0
}

func (x *ListSystemBankAccountByPaymentInfoRequest) GetBankName() BankName {
	if x != nil {
		return x.BankName
	}
	return BankName_BANK_UNSPECIFIED
}

type ListSystemBankAccountByPaymentInfoReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Records []*SystemBank `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
}

func (x *ListSystemBankAccountByPaymentInfoReply) Reset() {
	*x = ListSystemBankAccountByPaymentInfoReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_pepper_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSystemBankAccountByPaymentInfoReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSystemBankAccountByPaymentInfoReply) ProtoMessage() {}

func (x *ListSystemBankAccountByPaymentInfoReply) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_pepper_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSystemBankAccountByPaymentInfoReply.ProtoReflect.Descriptor instead.
func (*ListSystemBankAccountByPaymentInfoReply) Descriptor() ([]byte, []int) {
	return file_stark_api_pepper_proto_rawDescGZIP(), []int{33}
}

func (x *ListSystemBankAccountByPaymentInfoReply) GetRecords() []*SystemBank {
	if x != nil {
		return x.Records
	}
	return nil
}

type SystemBank struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                int64      `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	BankName          BankName   `protobuf:"varint,4,opt,name=bank_name,json=bankName,proto3,enum=mcuc.stark.pepper.BankName" json:"bank_name,omitempty"`
	Status            BankStatus `protobuf:"varint,5,opt,name=status,proto3,enum=mcuc.stark.pepper.BankStatus" json:"status,omitempty"`
	MerchantId        int64      `protobuf:"varint,6,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty"`
	AccountNumber     string     `protobuf:"bytes,7,opt,name=account_number,json=accountNumber,proto3" json:"account_number,omitempty"`
	AccountName       string     `protobuf:"bytes,8,opt,name=account_name,json=accountName,proto3" json:"account_name,omitempty"`
	Branch            string     `protobuf:"bytes,9,opt,name=branch,proto3" json:"branch,omitempty"`
	Balance           uint64     `protobuf:"varint,10,opt,name=balance,proto3" json:"balance,omitempty"`
	DailyBalanceLimit uint64     `protobuf:"varint,11,opt,name=daily_balance_limit,json=dailyBalanceLimit,proto3" json:"daily_balance_limit,omitempty"`
	DailyUsedAmount   int64      `protobuf:"varint,12,opt,name=daily_used_amount,json=dailyUsedAmount,proto3" json:"daily_used_amount,omitempty"`
	DailyBalance      uint64     `protobuf:"varint,13,opt,name=daily_balance,json=dailyBalance,proto3" json:"daily_balance,omitempty"`
}

func (x *SystemBank) Reset() {
	*x = SystemBank{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_pepper_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemBank) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemBank) ProtoMessage() {}

func (x *SystemBank) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_pepper_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemBank.ProtoReflect.Descriptor instead.
func (*SystemBank) Descriptor() ([]byte, []int) {
	return file_stark_api_pepper_proto_rawDescGZIP(), []int{34}
}

func (x *SystemBank) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SystemBank) GetBankName() BankName {
	if x != nil {
		return x.BankName
	}
	return BankName_BANK_UNSPECIFIED
}

func (x *SystemBank) GetStatus() BankStatus {
	if x != nil {
		return x.Status
	}
	return BankStatus_BANK_STATUS_UNSPECIFIED
}

func (x *SystemBank) GetMerchantId() int64 {
	if x != nil {
		return x.MerchantId
	}
	return 0
}

func (x *SystemBank) GetAccountNumber() string {
	if x != nil {
		return x.AccountNumber
	}
	return ""
}

func (x *SystemBank) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

func (x *SystemBank) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

func (x *SystemBank) GetBalance() uint64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *SystemBank) GetDailyBalanceLimit() uint64 {
	if x != nil {
		return x.DailyBalanceLimit
	}
	return 0
}

func (x *SystemBank) GetDailyUsedAmount() int64 {
	if x != nil {
		return x.DailyUsedAmount
	}
	return 0
}

func (x *SystemBank) GetDailyBalance() uint64 {
	if x != nil {
		return x.DailyBalance
	}
	return 0
}

type ConductBankPayment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BankName      BankName `protobuf:"varint,1,opt,name=bank_name,json=bankName,proto3,enum=mcuc.stark.pepper.BankName" json:"bank_name,omitempty"`
	AccountNumber string   `protobuf:"bytes,2,opt,name=account_number,json=accountNumber,proto3" json:"account_number,omitempty"`
	AccountName   string   `protobuf:"bytes,3,opt,name=account_name,json=accountName,proto3" json:"account_name,omitempty"`
	Amount        uint64   `protobuf:"varint,4,opt,name=amount,proto3" json:"amount,omitempty"`
	Fee           uint64   `protobuf:"varint,5,opt,name=fee,proto3" json:"fee,omitempty"`
}

func (x *ConductBankPayment) Reset() {
	*x = ConductBankPayment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_pepper_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConductBankPayment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConductBankPayment) ProtoMessage() {}

func (x *ConductBankPayment) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_pepper_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConductBankPayment.ProtoReflect.Descriptor instead.
func (*ConductBankPayment) Descriptor() ([]byte, []int) {
	return file_stark_api_pepper_proto_rawDescGZIP(), []int{35}
}

func (x *ConductBankPayment) GetBankName() BankName {
	if x != nil {
		return x.BankName
	}
	return BankName_BANK_UNSPECIFIED
}

func (x *ConductBankPayment) GetAccountNumber() string {
	if x != nil {
		return x.AccountNumber
	}
	return ""
}

func (x *ConductBankPayment) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

func (x *ConductBankPayment) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *ConductBankPayment) GetFee() uint64 {
	if x != nil {
		return x.Fee
	}
	return 0
}

type BankingPaymentDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                        int64                `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	MerchantUserBankName      BankName             `protobuf:"varint,2,opt,name=merchant_user_bank_name,json=merchantUserBankName,proto3,enum=mcuc.stark.pepper.BankName" json:"merchant_user_bank_name,omitempty"`
	MerchantUserAccountNumber string               `protobuf:"bytes,3,opt,name=merchant_user_account_number,json=merchantUserAccountNumber,proto3" json:"merchant_user_account_number,omitempty"`
	MerchantUserAccountName   string               `protobuf:"bytes,4,opt,name=merchant_user_account_name,json=merchantUserAccountName,proto3" json:"merchant_user_account_name,omitempty"`
	SystemBankName            BankName             `protobuf:"varint,5,opt,name=system_bank_name,json=systemBankName,proto3,enum=mcuc.stark.pepper.BankName" json:"system_bank_name,omitempty"`
	SystemAccountNumber       string               `protobuf:"bytes,6,opt,name=system_account_number,json=systemAccountNumber,proto3" json:"system_account_number,omitempty"`
	SystemAccountName         string               `protobuf:"bytes,7,opt,name=system_account_name,json=systemAccountName,proto3" json:"system_account_name,omitempty"`
	Amount                    uint64               `protobuf:"varint,8,opt,name=amount,proto3" json:"amount,omitempty"`
	ImageUrl                  string               `protobuf:"bytes,9,opt,name=image_url,json=imageUrl,proto3" json:"image_url,omitempty"`
	TxId                      string               `protobuf:"bytes,10,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	PaymentCode               string               `protobuf:"bytes,11,opt,name=payment_code,json=paymentCode,proto3" json:"payment_code,omitempty"`
	Fee                       uint64               `protobuf:"varint,12,opt,name=fee,proto3" json:"fee,omitempty"`
	MerchantUserId            int64                `protobuf:"varint,13,opt,name=merchant_user_id,json=merchantUserId,proto3" json:"merchant_user_id,omitempty"`
	CreatedAt                 *timestamp.Timestamp `protobuf:"bytes,20,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt                 *timestamp.Timestamp `protobuf:"bytes,30,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *BankingPaymentDetail) Reset() {
	*x = BankingPaymentDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_pepper_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BankingPaymentDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BankingPaymentDetail) ProtoMessage() {}

func (x *BankingPaymentDetail) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_pepper_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BankingPaymentDetail.ProtoReflect.Descriptor instead.
func (*BankingPaymentDetail) Descriptor() ([]byte, []int) {
	return file_stark_api_pepper_proto_rawDescGZIP(), []int{36}
}

func (x *BankingPaymentDetail) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *BankingPaymentDetail) GetMerchantUserBankName() BankName {
	if x != nil {
		return x.MerchantUserBankName
	}
	return BankName_BANK_UNSPECIFIED
}

func (x *BankingPaymentDetail) GetMerchantUserAccountNumber() string {
	if x != nil {
		return x.MerchantUserAccountNumber
	}
	return ""
}

func (x *BankingPaymentDetail) GetMerchantUserAccountName() string {
	if x != nil {
		return x.MerchantUserAccountName
	}
	return ""
}

func (x *BankingPaymentDetail) GetSystemBankName() BankName {
	if x != nil {
		return x.SystemBankName
	}
	return BankName_BANK_UNSPECIFIED
}

func (x *BankingPaymentDetail) GetSystemAccountNumber() string {
	if x != nil {
		return x.SystemAccountNumber
	}
	return ""
}

func (x *BankingPaymentDetail) GetSystemAccountName() string {
	if x != nil {
		return x.SystemAccountName
	}
	return ""
}

func (x *BankingPaymentDetail) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *BankingPaymentDetail) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *BankingPaymentDetail) GetTxId() string {
	if x != nil {
		return x.TxId
	}
	return ""
}

func (x *BankingPaymentDetail) GetPaymentCode() string {
	if x != nil {
		return x.PaymentCode
	}
	return ""
}

func (x *BankingPaymentDetail) GetFee() uint64 {
	if x != nil {
		return x.Fee
	}
	return 0
}

func (x *BankingPaymentDetail) GetMerchantUserId() int64 {
	if x != nil {
		return x.MerchantUserId
	}
	return 0
}

func (x *BankingPaymentDetail) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *BankingPaymentDetail) GetUpdatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

var File_stark_api_pepper_proto protoreflect.FileDescriptor

var file_stark_api_pepper_proto_rawDesc = []byte{
	0x0a, 0x16, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x65, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73,
	0x74, 0x61, 0x72, 0x6b, 0x2e, 0x70, 0x65, 0x70, 0x70, 0x65, 0x72, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x7f, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6e, 0x6b,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61,
	0x72, 0x6b, 0x2e, 0x70, 0x65, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x4e, 0x61,
	0x6d, 0x65, 0x52, 0x08, 0x62, 0x61, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10,
	0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x8f, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x42, 0x61,
	0x6e, 0x6b, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x21, 0x0a,
	0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x22, 0xa1, 0x02, 0x0a, 0x1c, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x42, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x32, 0x02,
	0x20, 0x00, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x1c, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x6d, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x1a, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x6d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61,
	0x72, 0x6b, 0x2e, 0x70, 0x65, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x4e, 0x61,
	0x6d, 0x65, 0x52, 0x08, 0x62, 0x61, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x3b, 0x0a, 0x1a,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x57, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xd5, 0x02, 0x0a, 0x19, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x42, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x70, 0x55, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x32, 0x02, 0x20, 0x00,
	0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3f, 0x0a, 0x1c, 0x6d,
	0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x19, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x1a,
	0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x17, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2e, 0x0a,
	0x13, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74,
	0x65, 0x22, 0x19, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x61, 0x6e, 0x6b, 0x69,
	0x6e, 0x67, 0x54, 0x6f, 0x70, 0x55, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x81, 0x01, 0x0a,
	0x1a, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x42, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x54,
	0x6f, 0x70, 0x55, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x13, 0x0a, 0x05, 0x74, 0x78, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x78, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x6f, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65,
	0x22, 0x1a, 0x0a, 0x18, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x42, 0x61, 0x6e, 0x6b, 0x69,
	0x6e, 0x67, 0x54, 0x6f, 0x70, 0x55, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x78, 0x0a, 0x19,
	0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x70,
	0x55, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x10,
	0x69, 0x73, 0x5f, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x63, 0x61, 0x6c, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61,
	0x6e, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x22, 0x19, 0x0a, 0x17, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74,
	0x42, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x70, 0x55, 0x70, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x52, 0x0a, 0x1d, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x42, 0x61, 0x6e, 0x6b,
	0x69, 0x6e, 0x67, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x6f, 0x74, 0x65, 0x22, 0x1d, 0x0a, 0x1b, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65,
	0x42, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0xb1, 0x02, 0x0a, 0x1c, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x42,
	0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73,
	0x74, 0x61, 0x72, 0x6b, 0x2e, 0x70, 0x65, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x61, 0x6e, 0x6b,
	0x4e, 0x61, 0x6d, 0x65, 0x52, 0x08, 0x62, 0x61, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25,
	0x0a, 0x0e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x66,
	0x65, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12,
	0x13, 0x0a, 0x05, 0x74, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x78, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x22, 0x1c, 0x0a, 0x1a, 0x53, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x42, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x77, 0x0a, 0x2b, 0x47, 0x65, 0x74, 0x49, 0x73, 0x4d,
	0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x6e, 0x6b, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0x47, 0x0a, 0x29, 0x47, 0x65, 0x74, 0x49, 0x73, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1a, 0x0a, 0x08,
	0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x22, 0x7b, 0x0a, 0x1c, 0x52, 0x65, 0x6a, 0x65,
	0x63, 0x74, 0x42, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x69,
	0x73, 0x5f, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x43, 0x61, 0x6c, 0x6c, 0x22, 0x1c, 0x0a, 0x1a, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x42,
	0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x3d, 0x0a, 0x1c, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x42, 0x61, 0x6e,
	0x6b, 0x69, 0x6e, 0x67, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x22, 0x1c, 0x0a, 0x1a, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x42, 0x61, 0x6e, 0x6b,
	0x69, 0x6e, 0x67, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x83, 0x02, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x42,
	0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61,
	0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x37, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x74, 0x75, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74,
	0x61, 0x72, 0x6b, 0x2e, 0x70, 0x65, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x07, 0x73, 0x74, 0x61, 0x74, 0x75, 0x65, 0x73, 0x12, 0x3a,
	0x0a, 0x0a, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e,
	0x70, 0x65, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x52,
	0x09, 0x62, 0x61, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x1b, 0x0a, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x2a,
	0x02, 0x20, 0x00, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x20, 0x00,
	0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x8f, 0x01, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x21, 0x0a, 0x0c,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x67, 0x65, 0x12,
	0x37, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x70, 0x65,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x42, 0x61, 0x6e, 0x6b, 0x52,
	0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0xd1, 0x02, 0x0a, 0x1e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61,
	0x6e, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62,
	0x61, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x22, 0x02, 0x20, 0x00, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x62,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2e, 0x0a,
	0x13, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x64, 0x61, 0x69, 0x6c,
	0x79, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x1e, 0x0a, 0x1c,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x42, 0x61, 0x6e, 0x6b,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0xcb, 0x01, 0x0a,
	0x24, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e,
	0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x70, 0x65, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x61, 0x6e,
	0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x08, 0x62, 0x61, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x35, 0x0a, 0x0e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0xfa, 0x42, 0x0b, 0x72, 0x09, 0x10, 0x08,
	0x32, 0x05, 0x5b, 0x30, 0x2d, 0x39, 0x5d, 0x52, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xfa, 0x42,
	0x0c, 0x72, 0x0a, 0x32, 0x08, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x5d, 0x52, 0x0b, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x24, 0x0a, 0x22, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x79, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x6d, 0x0a, 0x1e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x4b, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b,
	0x2e, 0x70, 0x65, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22,
	0x1e, 0x0a, 0x1c, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x42,
	0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x75, 0x0a, 0x26, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x07, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6d, 0x63, 0x75,
	0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x70, 0x65, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x42, 0x61, 0x6e, 0x6b, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0xb2, 0x03, 0x0a, 0x24, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x42,
	0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x60, 0x0a, 0x12, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6d, 0x63,
	0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x70, 0x65, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x42, 0x61, 0x6e, 0x6b,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x11,
	0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x12, 0x56, 0x0a, 0x0d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e,
	0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x70, 0x65, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0c, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x74, 0x0a, 0x1d, 0x64, 0x75, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x31, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x70, 0x65,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x1a, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12,
	0x5a, 0x0a, 0x0f, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e,
	0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x70, 0x65, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0e, 0x69, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0x76, 0x0a, 0x24, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x42, 0x61, 0x6e, 0x6b, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x22, 0x02, 0x20, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x35, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6d,
	0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x70, 0x65, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x24, 0x0a, 0x22, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x86, 0x01, 0x0a, 0x29, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x42, 0x79, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x62, 0x61, 0x6e, 0x6b,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6d, 0x63,
	0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x70, 0x65, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x42, 0x61, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x08, 0x62, 0x61, 0x6e, 0x6b, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0x62, 0x0a, 0x27, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x37, 0x0a,
	0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x70, 0x65, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x42, 0x61, 0x6e, 0x6b, 0x52, 0x07, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0xab, 0x03, 0x0a, 0x0a, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x42, 0x61, 0x6e, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e,
	0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x70, 0x65, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x61, 0x6e,
	0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x08, 0x62, 0x61, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x35, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1d, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x70, 0x65, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x21,
	0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x11, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x75, 0x73, 0x65,
	0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f,
	0x64, 0x61, 0x69, 0x6c, 0x79, 0x55, 0x73, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x23, 0x0a, 0x0d, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x22, 0xc2, 0x01, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x64, 0x75, 0x63, 0x74,
	0x42, 0x61, 0x6e, 0x6b, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x62,
	0x61, 0x6e, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b,
	0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x70, 0x65, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x08, 0x62, 0x61, 0x6e,
	0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x66, 0x65, 0x65, 0x22, 0xc2, 0x05, 0x0a, 0x14, 0x42, 0x61,
	0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x52, 0x0a, 0x17, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b,
	0x2e, 0x70, 0x65, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65,
	0x52, 0x14, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61,
	0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x1c, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61,
	0x6e, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x6d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x1a, 0x6d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x6d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x45, 0x0a, 0x10, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x62,
	0x61, 0x6e, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b,
	0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x70, 0x65, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0e, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x42, 0x61, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x2e, 0x0a, 0x13, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x55, 0x72, 0x6c, 0x12, 0x13, 0x0a, 0x05, 0x74, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x78, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x66, 0x65, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x66, 0x65, 0x65, 0x12, 0x28,
	0x0a, 0x10, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61,
	0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x2a, 0x63,
	0x0a, 0x08, 0x42, 0x61, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x42, 0x41,
	0x4e, 0x4b, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x0f, 0x0a, 0x0b, 0x56, 0x49, 0x45, 0x54, 0x43, 0x4f, 0x4d, 0x42, 0x41, 0x4e, 0x4b, 0x10,
	0x01, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x41, 0x43, 0x4f, 0x4d, 0x42, 0x41, 0x4e, 0x4b, 0x10, 0x02,
	0x12, 0x07, 0x0a, 0x03, 0x41, 0x43, 0x42, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x56, 0x49, 0x45,
	0x54, 0x49, 0x4e, 0x42, 0x41, 0x4e, 0x4b, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x49, 0x44,
	0x56, 0x10, 0x05, 0x2a, 0x5c, 0x0a, 0x0a, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1b, 0x0a, 0x17, 0x42, 0x41, 0x4e, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16,
	0x0a, 0x12, 0x42, 0x41, 0x4e, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x42, 0x41, 0x4e, 0x4b, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10,
	0x02, 0x32, 0xa9, 0x11, 0x0a, 0x06, 0x50, 0x65, 0x70, 0x70, 0x65, 0x72, 0x12, 0x6e, 0x0a, 0x12,
	0x47, 0x65, 0x74, 0x42, 0x61, 0x6e, 0x6b, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x2c, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e,
	0x70, 0x65, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6e, 0x6b, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2a, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x70, 0x65,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6e, 0x6b, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x77, 0x0a, 0x15,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x57, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x12, 0x2f, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61,
	0x72, 0x6b, 0x2e, 0x70, 0x65, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x42, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74,
	0x61, 0x72, 0x6b, 0x2e, 0x70, 0x65, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x42, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x77, 0x0a, 0x15, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x42,
	0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x12, 0x2f,
	0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x70, 0x65, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x42, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67,
	0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2d, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x70, 0x65, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x42, 0x61, 0x6e, 0x6b, 0x69, 0x6e,
	0x67, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x6e,
	0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x54,
	0x6f, 0x70, 0x55, 0x70, 0x12, 0x2c, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72,
	0x6b, 0x2e, 0x70, 0x65, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42,
	0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x70, 0x55, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e,
	0x70, 0x65, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x61, 0x6e,
	0x6b, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x70, 0x55, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x71,
	0x0a, 0x13, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x42, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67,
	0x54, 0x6f, 0x70, 0x55, 0x70, 0x12, 0x2d, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61,
	0x72, 0x6b, 0x2e, 0x70, 0x65, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x65, 0x42, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x70, 0x55, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72,
	0x6b, 0x2e, 0x70, 0x65, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65,
	0x42, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x70, 0x55, 0x70, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x6e, 0x0a, 0x12, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x61, 0x6e, 0x6b, 0x69,
	0x6e, 0x67, 0x54, 0x6f, 0x70, 0x55, 0x70, 0x12, 0x2c, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73,
	0x74, 0x61, 0x72, 0x6b, 0x2e, 0x70, 0x65, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x6a, 0x65,
	0x63, 0x74, 0x42, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x70, 0x55, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61,
	0x72, 0x6b, 0x2e, 0x70, 0x65, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74,
	0x42, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x70, 0x55, 0x70, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x9e, 0x01, 0x0a, 0x22, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3c, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e,
	0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x70, 0x65, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x42, 0x79, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74,
	0x61, 0x72, 0x6b, 0x2e, 0x70, 0x65, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x79, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x7a, 0x0a, 0x16, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x42, 0x61, 0x6e,
	0x6b, 0x69, 0x6e, 0x67, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x12, 0x30, 0x2e, 0x6d,
	0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x70, 0x65, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x42, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x57,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e,
	0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x70, 0x65, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x42, 0x61, 0x6e, 0x6b, 0x69, 0x6e,
	0x67, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x77,
	0x0a, 0x15, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x57,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x12, 0x2f, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73,
	0x74, 0x61, 0x72, 0x6b, 0x2e, 0x70, 0x65, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x6a, 0x65,
	0x63, 0x74, 0x42, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e,
	0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x70, 0x65, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x6a,
	0x65, 0x63, 0x74, 0x42, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x77, 0x0a, 0x15, 0x53, 0x75, 0x62, 0x6d, 0x69,
	0x74, 0x42, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x12, 0x2f, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x70, 0x65,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x42, 0x61, 0x6e, 0x6b, 0x69,
	0x6e, 0x67, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2d, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x70,
	0x65, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x42, 0x61, 0x6e, 0x6b,
	0x69, 0x6e, 0x67, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0xa4, 0x01, 0x0a, 0x24, 0x47, 0x65, 0x74, 0x49, 0x73, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61,
	0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x3e, 0x2e, 0x6d, 0x63, 0x75, 0x63,
	0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x70, 0x65, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x47, 0x65,
	0x74, 0x49, 0x73, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42,
	0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x6d, 0x63, 0x75, 0x63,
	0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x70, 0x65, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x47, 0x65,
	0x74, 0x49, 0x73, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42,
	0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x7a, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x12, 0x30, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x70,
	0x65, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b,
	0x2e, 0x70, 0x65, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x7d, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x31,
	0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x70, 0x65, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x42,
	0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2f, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x70,
	0x65, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x8f, 0x01, 0x0a, 0x1d, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x4d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x37, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72,
	0x6b, 0x2e, 0x70, 0x65, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x4d,
	0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x6e, 0x6b, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e,
	0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x70, 0x65, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x95, 0x01, 0x0a, 0x1f, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x42, 0x61, 0x6e,
	0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x39, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e,
	0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x70, 0x65, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b,
	0x2e, 0x70, 0x65, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x42, 0x61, 0x6e, 0x6b,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x7d, 0x0a, 0x17,
	0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x42, 0x61, 0x6e, 0x6b,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x31, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73,
	0x74, 0x61, 0x72, 0x6b, 0x2e, 0x70, 0x65, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x49, 0x6d, 0x70, 0x6f,
	0x72, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6d, 0x63, 0x75,
	0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x70, 0x65, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x49,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x42, 0x61, 0x6e, 0x6b, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x8f, 0x01, 0x0a, 0x1d,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x42, 0x61, 0x6e, 0x6b,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x37, 0x2e,
	0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x70, 0x65, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x42, 0x61,
	0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74,
	0x61, 0x72, 0x6b, 0x2e, 0x70, 0x65, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x42, 0x36, 0x5a,
	0x34, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x63, 0x75, 0x63,
	0x2f, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x65, 0x70, 0x6f, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x2f, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x3b,
	0x73, 0x74, 0x61, 0x72, 0x6b, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_stark_api_pepper_proto_rawDescOnce sync.Once
	file_stark_api_pepper_proto_rawDescData = file_stark_api_pepper_proto_rawDesc
)

func file_stark_api_pepper_proto_rawDescGZIP() []byte {
	file_stark_api_pepper_proto_rawDescOnce.Do(func() {
		file_stark_api_pepper_proto_rawDescData = protoimpl.X.CompressGZIP(file_stark_api_pepper_proto_rawDescData)
	})
	return file_stark_api_pepper_proto_rawDescData
}

var file_stark_api_pepper_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_stark_api_pepper_proto_msgTypes = make([]protoimpl.MessageInfo, 37)
var file_stark_api_pepper_proto_goTypes = []interface{}{
	(BankName)(0),                                       // 0: mcuc.stark.pepper.BankName
	(BankStatus)(0),                                     // 1: mcuc.stark.pepper.BankStatus
	(*GetBankPaymentCodeRequest)(nil),                   // 2: mcuc.stark.pepper.GetBankPaymentCodeRequest
	(*GetBankPaymentCodeReply)(nil),                     // 3: mcuc.stark.pepper.GetBankPaymentCodeReply
	(*CreateBankingWithdrawRequest)(nil),                // 4: mcuc.stark.pepper.CreateBankingWithdrawRequest
	(*CreateBankingWithdrawReply)(nil),                  // 5: mcuc.stark.pepper.CreateBankingWithdrawReply
	(*CreateBankingTopUpRequest)(nil),                   // 6: mcuc.stark.pepper.CreateBankingTopUpRequest
	(*CreateBankingTopUpReply)(nil),                     // 7: mcuc.stark.pepper.CreateBankingTopUpReply
	(*ApproveBankingTopUpRequest)(nil),                  // 8: mcuc.stark.pepper.ApproveBankingTopUpRequest
	(*ApproveBankingTopUpReply)(nil),                    // 9: mcuc.stark.pepper.ApproveBankingTopUpReply
	(*RejectBankingTopUpRequest)(nil),                   // 10: mcuc.stark.pepper.RejectBankingTopUpRequest
	(*RejectBankingTopUpReply)(nil),                     // 11: mcuc.stark.pepper.RejectBankingTopUpReply
	(*ApproveBankingWithdrawRequest)(nil),               // 12: mcuc.stark.pepper.ApproveBankingWithdrawRequest
	(*ApproveBankingWithdrawReply)(nil),                 // 13: mcuc.stark.pepper.ApproveBankingWithdrawReply
	(*SubmitBankingWithdrawRequest)(nil),                // 14: mcuc.stark.pepper.SubmitBankingWithdrawRequest
	(*SubmitBankingWithdrawReply)(nil),                  // 15: mcuc.stark.pepper.SubmitBankingWithdrawReply
	(*GetIsMerchantUserBankAccountVerifiedRequest)(nil), // 16: mcuc.stark.pepper.GetIsMerchantUserBankAccountVerifiedRequest
	(*GetIsMerchantUserBankAccountVerifiedReply)(nil),   // 17: mcuc.stark.pepper.GetIsMerchantUserBankAccountVerifiedReply
	(*RejectBankingWithdrawRequest)(nil),                // 18: mcuc.stark.pepper.RejectBankingWithdrawRequest
	(*RejectBankingWithdrawReply)(nil),                  // 19: mcuc.stark.pepper.RejectBankingWithdrawReply
	(*CancelBankingWithdrawRequest)(nil),                // 20: mcuc.stark.pepper.CancelBankingWithdrawRequest
	(*CancelBankingWithdrawReply)(nil),                  // 21: mcuc.stark.pepper.CancelBankingWithdrawReply
	(*ListSystemBankAccountsRequest)(nil),               // 22: mcuc.stark.pepper.ListSystemBankAccountsRequest
	(*ListSystemBankAccountsReply)(nil),                 // 23: mcuc.stark.pepper.ListSystemBankAccountsReply
	(*CreateSystemBankAccountRequest)(nil),              // 24: mcuc.stark.pepper.CreateSystemBankAccountRequest
	(*CreateSystemBankAccountReply)(nil),                // 25: mcuc.stark.pepper.CreateSystemBankAccountReply
	(*VerifyMerchantUserBankAccountRequest)(nil),        // 26: mcuc.stark.pepper.VerifyMerchantUserBankAccountRequest
	(*VerifyMerchantUserBankAccountReply)(nil),          // 27: mcuc.stark.pepper.VerifyMerchantUserBankAccountReply
	(*ImportSystemBankAccountRequest)(nil),              // 28: mcuc.stark.pepper.ImportSystemBankAccountRequest
	(*ImportSystemBankAccountReply)(nil),                // 29: mcuc.stark.pepper.ImportSystemBankAccountReply
	(*ValidateImportSystemBankAccountRequest)(nil),      // 30: mcuc.stark.pepper.ValidateImportSystemBankAccountRequest
	(*ValidateImportSystemBankAccountReply)(nil),        // 31: mcuc.stark.pepper.ValidateImportSystemBankAccountReply
	(*UpdateSystemBankAccountStatusRequest)(nil),        // 32: mcuc.stark.pepper.UpdateSystemBankAccountStatusRequest
	(*UpdateSystemBankAccountStatusReply)(nil),          // 33: mcuc.stark.pepper.UpdateSystemBankAccountStatusReply
	(*ListSystemBankAccountByPaymentInfoRequest)(nil),   // 34: mcuc.stark.pepper.ListSystemBankAccountByPaymentInfoRequest
	(*ListSystemBankAccountByPaymentInfoReply)(nil),     // 35: mcuc.stark.pepper.ListSystemBankAccountByPaymentInfoReply
	(*SystemBank)(nil),                                  // 36: mcuc.stark.pepper.SystemBank
	(*ConductBankPayment)(nil),                          // 37: mcuc.stark.pepper.ConductBankPayment
	(*BankingPaymentDetail)(nil),                        // 38: mcuc.stark.pepper.BankingPaymentDetail
	(*timestamp.Timestamp)(nil),                         // 39: google.protobuf.Timestamp
}
var file_stark_api_pepper_proto_depIdxs = []int32{
	0,  // 0: mcuc.stark.pepper.GetBankPaymentCodeRequest.bank_name:type_name -> mcuc.stark.pepper.BankName
	0,  // 1: mcuc.stark.pepper.CreateBankingWithdrawRequest.bank_name:type_name -> mcuc.stark.pepper.BankName
	0,  // 2: mcuc.stark.pepper.SubmitBankingWithdrawRequest.bank_name:type_name -> mcuc.stark.pepper.BankName
	1,  // 3: mcuc.stark.pepper.ListSystemBankAccountsRequest.statues:type_name -> mcuc.stark.pepper.BankStatus
	0,  // 4: mcuc.stark.pepper.ListSystemBankAccountsRequest.bank_names:type_name -> mcuc.stark.pepper.BankName
	36, // 5: mcuc.stark.pepper.ListSystemBankAccountsReply.records:type_name -> mcuc.stark.pepper.SystemBank
	0,  // 6: mcuc.stark.pepper.VerifyMerchantUserBankAccountRequest.bank_name:type_name -> mcuc.stark.pepper.BankName
	24, // 7: mcuc.stark.pepper.ImportSystemBankAccountRequest.records:type_name -> mcuc.stark.pepper.CreateSystemBankAccountRequest
	24, // 8: mcuc.stark.pepper.ValidateImportSystemBankAccountRequest.records:type_name -> mcuc.stark.pepper.CreateSystemBankAccountRequest
	24, // 9: mcuc.stark.pepper.ValidateImportSystemBankAccountReply.duplicated_records:type_name -> mcuc.stark.pepper.CreateSystemBankAccountRequest
	24, // 10: mcuc.stark.pepper.ValidateImportSystemBankAccountReply.valid_records:type_name -> mcuc.stark.pepper.CreateSystemBankAccountRequest
	24, // 11: mcuc.stark.pepper.ValidateImportSystemBankAccountReply.duplicated_account_id_records:type_name -> mcuc.stark.pepper.CreateSystemBankAccountRequest
	24, // 12: mcuc.stark.pepper.ValidateImportSystemBankAccountReply.invalid_records:type_name -> mcuc.stark.pepper.CreateSystemBankAccountRequest
	1,  // 13: mcuc.stark.pepper.UpdateSystemBankAccountStatusRequest.status:type_name -> mcuc.stark.pepper.BankStatus
	0,  // 14: mcuc.stark.pepper.ListSystemBankAccountByPaymentInfoRequest.bank_name:type_name -> mcuc.stark.pepper.BankName
	36, // 15: mcuc.stark.pepper.ListSystemBankAccountByPaymentInfoReply.records:type_name -> mcuc.stark.pepper.SystemBank
	0,  // 16: mcuc.stark.pepper.SystemBank.bank_name:type_name -> mcuc.stark.pepper.BankName
	1,  // 17: mcuc.stark.pepper.SystemBank.status:type_name -> mcuc.stark.pepper.BankStatus
	0,  // 18: mcuc.stark.pepper.ConductBankPayment.bank_name:type_name -> mcuc.stark.pepper.BankName
	0,  // 19: mcuc.stark.pepper.BankingPaymentDetail.merchant_user_bank_name:type_name -> mcuc.stark.pepper.BankName
	0,  // 20: mcuc.stark.pepper.BankingPaymentDetail.system_bank_name:type_name -> mcuc.stark.pepper.BankName
	39, // 21: mcuc.stark.pepper.BankingPaymentDetail.created_at:type_name -> google.protobuf.Timestamp
	39, // 22: mcuc.stark.pepper.BankingPaymentDetail.updated_at:type_name -> google.protobuf.Timestamp
	2,  // 23: mcuc.stark.pepper.Pepper.GetBankPaymentCode:input_type -> mcuc.stark.pepper.GetBankPaymentCodeRequest
	4,  // 24: mcuc.stark.pepper.Pepper.CreateBankingWithdraw:input_type -> mcuc.stark.pepper.CreateBankingWithdrawRequest
	20, // 25: mcuc.stark.pepper.Pepper.CancelBankingWithdraw:input_type -> mcuc.stark.pepper.CancelBankingWithdrawRequest
	6,  // 26: mcuc.stark.pepper.Pepper.CreateBankingTopUp:input_type -> mcuc.stark.pepper.CreateBankingTopUpRequest
	8,  // 27: mcuc.stark.pepper.Pepper.ApproveBankingTopUp:input_type -> mcuc.stark.pepper.ApproveBankingTopUpRequest
	10, // 28: mcuc.stark.pepper.Pepper.RejectBankingTopUp:input_type -> mcuc.stark.pepper.RejectBankingTopUpRequest
	34, // 29: mcuc.stark.pepper.Pepper.ListSystemBankAccountByPaymentInfo:input_type -> mcuc.stark.pepper.ListSystemBankAccountByPaymentInfoRequest
	12, // 30: mcuc.stark.pepper.Pepper.ApproveBankingWithdraw:input_type -> mcuc.stark.pepper.ApproveBankingWithdrawRequest
	18, // 31: mcuc.stark.pepper.Pepper.RejectBankingWithdraw:input_type -> mcuc.stark.pepper.RejectBankingWithdrawRequest
	14, // 32: mcuc.stark.pepper.Pepper.SubmitBankingWithdraw:input_type -> mcuc.stark.pepper.SubmitBankingWithdrawRequest
	16, // 33: mcuc.stark.pepper.Pepper.GetIsMerchantUserBankAccountVerified:input_type -> mcuc.stark.pepper.GetIsMerchantUserBankAccountVerifiedRequest
	22, // 34: mcuc.stark.pepper.Pepper.ListSystemBankAccounts:input_type -> mcuc.stark.pepper.ListSystemBankAccountsRequest
	24, // 35: mcuc.stark.pepper.Pepper.CreateSystemBankAccount:input_type -> mcuc.stark.pepper.CreateSystemBankAccountRequest
	26, // 36: mcuc.stark.pepper.Pepper.VerifyMerchantUserBankAccount:input_type -> mcuc.stark.pepper.VerifyMerchantUserBankAccountRequest
	30, // 37: mcuc.stark.pepper.Pepper.ValidateImportSystemBankAccount:input_type -> mcuc.stark.pepper.ValidateImportSystemBankAccountRequest
	28, // 38: mcuc.stark.pepper.Pepper.ImportSystemBankAccount:input_type -> mcuc.stark.pepper.ImportSystemBankAccountRequest
	32, // 39: mcuc.stark.pepper.Pepper.UpdateSystemBankAccountStatus:input_type -> mcuc.stark.pepper.UpdateSystemBankAccountStatusRequest
	3,  // 40: mcuc.stark.pepper.Pepper.GetBankPaymentCode:output_type -> mcuc.stark.pepper.GetBankPaymentCodeReply
	5,  // 41: mcuc.stark.pepper.Pepper.CreateBankingWithdraw:output_type -> mcuc.stark.pepper.CreateBankingWithdrawReply
	21, // 42: mcuc.stark.pepper.Pepper.CancelBankingWithdraw:output_type -> mcuc.stark.pepper.CancelBankingWithdrawReply
	7,  // 43: mcuc.stark.pepper.Pepper.CreateBankingTopUp:output_type -> mcuc.stark.pepper.CreateBankingTopUpReply
	9,  // 44: mcuc.stark.pepper.Pepper.ApproveBankingTopUp:output_type -> mcuc.stark.pepper.ApproveBankingTopUpReply
	11, // 45: mcuc.stark.pepper.Pepper.RejectBankingTopUp:output_type -> mcuc.stark.pepper.RejectBankingTopUpReply
	35, // 46: mcuc.stark.pepper.Pepper.ListSystemBankAccountByPaymentInfo:output_type -> mcuc.stark.pepper.ListSystemBankAccountByPaymentInfoReply
	13, // 47: mcuc.stark.pepper.Pepper.ApproveBankingWithdraw:output_type -> mcuc.stark.pepper.ApproveBankingWithdrawReply
	19, // 48: mcuc.stark.pepper.Pepper.RejectBankingWithdraw:output_type -> mcuc.stark.pepper.RejectBankingWithdrawReply
	15, // 49: mcuc.stark.pepper.Pepper.SubmitBankingWithdraw:output_type -> mcuc.stark.pepper.SubmitBankingWithdrawReply
	17, // 50: mcuc.stark.pepper.Pepper.GetIsMerchantUserBankAccountVerified:output_type -> mcuc.stark.pepper.GetIsMerchantUserBankAccountVerifiedReply
	23, // 51: mcuc.stark.pepper.Pepper.ListSystemBankAccounts:output_type -> mcuc.stark.pepper.ListSystemBankAccountsReply
	25, // 52: mcuc.stark.pepper.Pepper.CreateSystemBankAccount:output_type -> mcuc.stark.pepper.CreateSystemBankAccountReply
	27, // 53: mcuc.stark.pepper.Pepper.VerifyMerchantUserBankAccount:output_type -> mcuc.stark.pepper.VerifyMerchantUserBankAccountReply
	31, // 54: mcuc.stark.pepper.Pepper.ValidateImportSystemBankAccount:output_type -> mcuc.stark.pepper.ValidateImportSystemBankAccountReply
	29, // 55: mcuc.stark.pepper.Pepper.ImportSystemBankAccount:output_type -> mcuc.stark.pepper.ImportSystemBankAccountReply
	33, // 56: mcuc.stark.pepper.Pepper.UpdateSystemBankAccountStatus:output_type -> mcuc.stark.pepper.UpdateSystemBankAccountStatusReply
	40, // [40:57] is the sub-list for method output_type
	23, // [23:40] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_stark_api_pepper_proto_init() }
func file_stark_api_pepper_proto_init() {
	if File_stark_api_pepper_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_stark_api_pepper_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBankPaymentCodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_pepper_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBankPaymentCodeReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_pepper_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBankingWithdrawRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_pepper_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBankingWithdrawReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_pepper_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBankingTopUpRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_pepper_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBankingTopUpReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_pepper_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApproveBankingTopUpRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_pepper_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApproveBankingTopUpReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_pepper_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RejectBankingTopUpRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_pepper_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RejectBankingTopUpReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_pepper_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApproveBankingWithdrawRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_pepper_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApproveBankingWithdrawReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_pepper_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitBankingWithdrawRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_pepper_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitBankingWithdrawReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_pepper_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIsMerchantUserBankAccountVerifiedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_pepper_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIsMerchantUserBankAccountVerifiedReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_pepper_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RejectBankingWithdrawRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_pepper_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RejectBankingWithdrawReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_pepper_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelBankingWithdrawRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_pepper_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelBankingWithdrawReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_pepper_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSystemBankAccountsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_pepper_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSystemBankAccountsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_pepper_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSystemBankAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_pepper_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSystemBankAccountReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_pepper_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyMerchantUserBankAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_pepper_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyMerchantUserBankAccountReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_pepper_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportSystemBankAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_pepper_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportSystemBankAccountReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_pepper_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateImportSystemBankAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_pepper_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateImportSystemBankAccountReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_pepper_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSystemBankAccountStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_pepper_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSystemBankAccountStatusReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_pepper_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSystemBankAccountByPaymentInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_pepper_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSystemBankAccountByPaymentInfoReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_pepper_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemBank); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_pepper_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConductBankPayment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_pepper_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BankingPaymentDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_stark_api_pepper_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   37,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_stark_api_pepper_proto_goTypes,
		DependencyIndexes: file_stark_api_pepper_proto_depIdxs,
		EnumInfos:         file_stark_api_pepper_proto_enumTypes,
		MessageInfos:      file_stark_api_pepper_proto_msgTypes,
	}.Build()
	File_stark_api_pepper_proto = out.File
	file_stark_api_pepper_proto_rawDesc = nil
	file_stark_api_pepper_proto_goTypes = nil
	file_stark_api_pepper_proto_depIdxs = nil
}
