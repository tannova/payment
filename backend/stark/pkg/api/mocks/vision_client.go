// Code generated by mockery v2.3.0. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	stark "gitlab.com/mcuc/monorepo/backend/stark/pkg/api"
)

// VisionClient is an autogenerated mock type for the VisionClient type
type VisionClient struct {
	mock.Mock
}

// GetPaymentDetail provides a mock function with given fields: ctx, in, opts
func (_m *VisionClient) GetPaymentDetail(ctx context.Context, in *stark.GetPaymentDetailRequest, opts ...grpc.CallOption) (*stark.GetPaymentDetailReply, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *stark.GetPaymentDetailReply
	if rf, ok := ret.Get(0).(func(context.Context, *stark.GetPaymentDetailRequest, ...grpc.CallOption) *stark.GetPaymentDetailReply); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*stark.GetPaymentDetailReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *stark.GetPaymentDetailRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPaymentInfoByPaymentCode provides a mock function with given fields: ctx, in, opts
func (_m *VisionClient) GetPaymentInfoByPaymentCode(ctx context.Context, in *stark.GetPaymentInfoByPaymentCodeRequest, opts ...grpc.CallOption) (*stark.GetPaymentInfoByPaymentCodeReply, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *stark.GetPaymentInfoByPaymentCodeReply
	if rf, ok := ret.Get(0).(func(context.Context, *stark.GetPaymentInfoByPaymentCodeRequest, ...grpc.CallOption) *stark.GetPaymentInfoByPaymentCodeReply); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*stark.GetPaymentInfoByPaymentCodeReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *stark.GetPaymentInfoByPaymentCodeRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPayments provides a mock function with given fields: ctx, in, opts
func (_m *VisionClient) ListPayments(ctx context.Context, in *stark.ListPaymentsRequest, opts ...grpc.CallOption) (*stark.ListPaymentsReply, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *stark.ListPaymentsReply
	if rf, ok := ret.Get(0).(func(context.Context, *stark.ListPaymentsRequest, ...grpc.CallOption) *stark.ListPaymentsReply); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*stark.ListPaymentsReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *stark.ListPaymentsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
