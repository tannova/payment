// Code generated by mockery v2.3.0. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	stark "gitlab.com/mcuc/monorepo/backend/stark/pkg/api"
)

// TonyClient is an autogenerated mock type for the TonyClient type
type TonyClient struct {
	mock.Mock
}

// ApproveEWalletTopUp provides a mock function with given fields: ctx, in, opts
func (_m *TonyClient) ApproveEWalletTopUp(ctx context.Context, in *stark.ApproveEWalletTopUpRequest, opts ...grpc.CallOption) (*stark.ApproveEWalletTopUpReply, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *stark.ApproveEWalletTopUpReply
	if rf, ok := ret.Get(0).(func(context.Context, *stark.ApproveEWalletTopUpRequest, ...grpc.CallOption) *stark.ApproveEWalletTopUpReply); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*stark.ApproveEWalletTopUpReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *stark.ApproveEWalletTopUpRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CancelEWalletTopUp provides a mock function with given fields: ctx, in, opts
func (_m *TonyClient) CancelEWalletTopUp(ctx context.Context, in *stark.CancelEWalletTopUpRequest, opts ...grpc.CallOption) (*stark.CancelEWalletTopUpReply, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *stark.CancelEWalletTopUpReply
	if rf, ok := ret.Get(0).(func(context.Context, *stark.CancelEWalletTopUpRequest, ...grpc.CallOption) *stark.CancelEWalletTopUpReply); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*stark.CancelEWalletTopUpReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *stark.CancelEWalletTopUpRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateEWalletTopUp provides a mock function with given fields: ctx, in, opts
func (_m *TonyClient) CreateEWalletTopUp(ctx context.Context, in *stark.CreateEWalletTopUpRequest, opts ...grpc.CallOption) (*stark.CreateEWalletTopUpReply, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *stark.CreateEWalletTopUpReply
	if rf, ok := ret.Get(0).(func(context.Context, *stark.CreateEWalletTopUpRequest, ...grpc.CallOption) *stark.CreateEWalletTopUpReply); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*stark.CreateEWalletTopUpReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *stark.CreateEWalletTopUpRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSystemEWallet provides a mock function with given fields: ctx, in, opts
func (_m *TonyClient) CreateSystemEWallet(ctx context.Context, in *stark.CreateSystemEWalletRequest, opts ...grpc.CallOption) (*stark.CreateSystemEWalletReply, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *stark.CreateSystemEWalletReply
	if rf, ok := ret.Get(0).(func(context.Context, *stark.CreateSystemEWalletRequest, ...grpc.CallOption) *stark.CreateSystemEWalletReply); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*stark.CreateSystemEWalletReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *stark.CreateSystemEWalletRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEWalletPaymentCode provides a mock function with given fields: ctx, in, opts
func (_m *TonyClient) GetEWalletPaymentCode(ctx context.Context, in *stark.GetEWalletPaymentCodeRequest, opts ...grpc.CallOption) (*stark.GetEWalletPaymentCodeReply, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *stark.GetEWalletPaymentCodeReply
	if rf, ok := ret.Get(0).(func(context.Context, *stark.GetEWalletPaymentCodeRequest, ...grpc.CallOption) *stark.GetEWalletPaymentCodeReply); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*stark.GetEWalletPaymentCodeReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *stark.GetEWalletPaymentCodeRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSystemEWallets provides a mock function with given fields: ctx, in, opts
func (_m *TonyClient) GetSystemEWallets(ctx context.Context, in *stark.GetSystemEWalletsRequest, opts ...grpc.CallOption) (*stark.GetSystemEWalletsReply, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *stark.GetSystemEWalletsReply
	if rf, ok := ret.Get(0).(func(context.Context, *stark.GetSystemEWalletsRequest, ...grpc.CallOption) *stark.GetSystemEWalletsReply); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*stark.GetSystemEWalletsReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *stark.GetSystemEWalletsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ImportSystemEWallets provides a mock function with given fields: ctx, in, opts
func (_m *TonyClient) ImportSystemEWallets(ctx context.Context, in *stark.ImportSystemEWalletsRequest, opts ...grpc.CallOption) (*stark.ImportSystemEWalletsReply, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *stark.ImportSystemEWalletsReply
	if rf, ok := ret.Get(0).(func(context.Context, *stark.ImportSystemEWalletsRequest, ...grpc.CallOption) *stark.ImportSystemEWalletsReply); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*stark.ImportSystemEWalletsReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *stark.ImportSystemEWalletsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSystemEWallets provides a mock function with given fields: ctx, in, opts
func (_m *TonyClient) ListSystemEWallets(ctx context.Context, in *stark.ListSystemEWalletsRequest, opts ...grpc.CallOption) (*stark.ListSystemEWalletsReply, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *stark.ListSystemEWalletsReply
	if rf, ok := ret.Get(0).(func(context.Context, *stark.ListSystemEWalletsRequest, ...grpc.CallOption) *stark.ListSystemEWalletsReply); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*stark.ListSystemEWalletsReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *stark.ListSystemEWalletsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RejectEWalletTopUp provides a mock function with given fields: ctx, in, opts
func (_m *TonyClient) RejectEWalletTopUp(ctx context.Context, in *stark.RejectEWalletTopUpRequest, opts ...grpc.CallOption) (*stark.RejectEWalletTopUpReply, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *stark.RejectEWalletTopUpReply
	if rf, ok := ret.Get(0).(func(context.Context, *stark.RejectEWalletTopUpRequest, ...grpc.CallOption) *stark.RejectEWalletTopUpReply); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*stark.RejectEWalletTopUpReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *stark.RejectEWalletTopUpRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSystemEWalletStatus provides a mock function with given fields: ctx, in, opts
func (_m *TonyClient) UpdateSystemEWalletStatus(ctx context.Context, in *stark.UpdateSystemEWalletStatusRequest, opts ...grpc.CallOption) (*stark.UpdateSystemEWalletStatusReply, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *stark.UpdateSystemEWalletStatusReply
	if rf, ok := ret.Get(0).(func(context.Context, *stark.UpdateSystemEWalletStatusRequest, ...grpc.CallOption) *stark.UpdateSystemEWalletStatusReply); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*stark.UpdateSystemEWalletStatusReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *stark.UpdateSystemEWalletStatusRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidateSystemEWallets provides a mock function with given fields: ctx, in, opts
func (_m *TonyClient) ValidateSystemEWallets(ctx context.Context, in *stark.ValidateSystemEWalletsRequest, opts ...grpc.CallOption) (*stark.ValidateSystemEWalletsReply, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *stark.ValidateSystemEWalletsReply
	if rf, ok := ret.Get(0).(func(context.Context, *stark.ValidateSystemEWalletsRequest, ...grpc.CallOption) *stark.ValidateSystemEWalletsReply); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*stark.ValidateSystemEWalletsReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *stark.ValidateSystemEWalletsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
