// Code generated by mockery v2.3.0. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	stark "gitlab.com/mcuc/monorepo/backend/stark/pkg/api"
)

// MorganClient is an autogenerated mock type for the MorganClient type
type MorganClient struct {
	mock.Mock
}

// ApproveTelcoTopUp provides a mock function with given fields: ctx, in, opts
func (_m *MorganClient) ApproveTelcoTopUp(ctx context.Context, in *stark.ApproveTelcoTopUpRequest, opts ...grpc.CallOption) (*stark.ApproveTelcoTopUpReply, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *stark.ApproveTelcoTopUpReply
	if rf, ok := ret.Get(0).(func(context.Context, *stark.ApproveTelcoTopUpRequest, ...grpc.CallOption) *stark.ApproveTelcoTopUpReply); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*stark.ApproveTelcoTopUpReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *stark.ApproveTelcoTopUpRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ApproveTelcoWithdraw provides a mock function with given fields: ctx, in, opts
func (_m *MorganClient) ApproveTelcoWithdraw(ctx context.Context, in *stark.ApproveTelcoWithdrawRequest, opts ...grpc.CallOption) (*stark.ApproveTelcoWithdrawReply, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *stark.ApproveTelcoWithdrawReply
	if rf, ok := ret.Get(0).(func(context.Context, *stark.ApproveTelcoWithdrawRequest, ...grpc.CallOption) *stark.ApproveTelcoWithdrawReply); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*stark.ApproveTelcoWithdrawReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *stark.ApproveTelcoWithdrawRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CancelTelcoWithdraw provides a mock function with given fields: ctx, in, opts
func (_m *MorganClient) CancelTelcoWithdraw(ctx context.Context, in *stark.CancelTelcoWithdrawRequest, opts ...grpc.CallOption) (*stark.CancelTelcoWithdrawReply, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *stark.CancelTelcoWithdrawReply
	if rf, ok := ret.Get(0).(func(context.Context, *stark.CancelTelcoWithdrawRequest, ...grpc.CallOption) *stark.CancelTelcoWithdrawReply); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*stark.CancelTelcoWithdrawReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *stark.CancelTelcoWithdrawRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CompleteTelcoTopUp provides a mock function with given fields: ctx, in, opts
func (_m *MorganClient) CompleteTelcoTopUp(ctx context.Context, in *stark.CompleteTelcoTopUpRequest, opts ...grpc.CallOption) (*stark.CompleteTelcoTopUpReply, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *stark.CompleteTelcoTopUpReply
	if rf, ok := ret.Get(0).(func(context.Context, *stark.CompleteTelcoTopUpRequest, ...grpc.CallOption) *stark.CompleteTelcoTopUpReply); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*stark.CompleteTelcoTopUpReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *stark.CompleteTelcoTopUpRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTelcoTopUp provides a mock function with given fields: ctx, in, opts
func (_m *MorganClient) CreateTelcoTopUp(ctx context.Context, in *stark.CreateTelcoTopUpRequest, opts ...grpc.CallOption) (*stark.CreateTelcoTopUpReply, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *stark.CreateTelcoTopUpReply
	if rf, ok := ret.Get(0).(func(context.Context, *stark.CreateTelcoTopUpRequest, ...grpc.CallOption) *stark.CreateTelcoTopUpReply); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*stark.CreateTelcoTopUpReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *stark.CreateTelcoTopUpRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTelcoWithdraw provides a mock function with given fields: ctx, in, opts
func (_m *MorganClient) CreateTelcoWithdraw(ctx context.Context, in *stark.CreateTelcoWithdrawRequest, opts ...grpc.CallOption) (*stark.CreateTelcoWithdrawReply, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *stark.CreateTelcoWithdrawReply
	if rf, ok := ret.Get(0).(func(context.Context, *stark.CreateTelcoWithdrawRequest, ...grpc.CallOption) *stark.CreateTelcoWithdrawReply); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*stark.CreateTelcoWithdrawReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *stark.CreateTelcoWithdrawRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSettings provides a mock function with given fields: ctx, in, opts
func (_m *MorganClient) GetSettings(ctx context.Context, in *stark.GetSettingsRequest, opts ...grpc.CallOption) (*stark.GetSettingsReply, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *stark.GetSettingsReply
	if rf, ok := ret.Get(0).(func(context.Context, *stark.GetSettingsRequest, ...grpc.CallOption) *stark.GetSettingsReply); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*stark.GetSettingsReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *stark.GetSettingsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RejectTelcoTopUp provides a mock function with given fields: ctx, in, opts
func (_m *MorganClient) RejectTelcoTopUp(ctx context.Context, in *stark.RejectTelcoTopUpRequest, opts ...grpc.CallOption) (*stark.RejectTelcoTopUpReply, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *stark.RejectTelcoTopUpReply
	if rf, ok := ret.Get(0).(func(context.Context, *stark.RejectTelcoTopUpRequest, ...grpc.CallOption) *stark.RejectTelcoTopUpReply); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*stark.RejectTelcoTopUpReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *stark.RejectTelcoTopUpRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RejectTelcoWithdraw provides a mock function with given fields: ctx, in, opts
func (_m *MorganClient) RejectTelcoWithdraw(ctx context.Context, in *stark.RejectTelcoWithdrawRequest, opts ...grpc.CallOption) (*stark.RejectTelcoWithdrawReply, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *stark.RejectTelcoWithdrawReply
	if rf, ok := ret.Get(0).(func(context.Context, *stark.RejectTelcoWithdrawRequest, ...grpc.CallOption) *stark.RejectTelcoWithdrawReply); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*stark.RejectTelcoWithdrawReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *stark.RejectTelcoWithdrawRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateChargeCardProvidersSetting provides a mock function with given fields: ctx, in, opts
func (_m *MorganClient) UpdateChargeCardProvidersSetting(ctx context.Context, in *stark.UpdateChargeCardProvidersSettingRequest, opts ...grpc.CallOption) (*stark.UpdateChargeCardProvidersSettingReply, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *stark.UpdateChargeCardProvidersSettingReply
	if rf, ok := ret.Get(0).(func(context.Context, *stark.UpdateChargeCardProvidersSettingRequest, ...grpc.CallOption) *stark.UpdateChargeCardProvidersSettingReply); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*stark.UpdateChargeCardProvidersSettingReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *stark.UpdateChargeCardProvidersSettingRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateGetCardProvidersSetting provides a mock function with given fields: ctx, in, opts
func (_m *MorganClient) UpdateGetCardProvidersSetting(ctx context.Context, in *stark.UpdateGetCardProvidersSettingRequest, opts ...grpc.CallOption) (*stark.UpdateGetCardProvidersSettingReply, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *stark.UpdateGetCardProvidersSettingReply
	if rf, ok := ret.Get(0).(func(context.Context, *stark.UpdateGetCardProvidersSettingRequest, ...grpc.CallOption) *stark.UpdateGetCardProvidersSettingReply); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*stark.UpdateGetCardProvidersSettingReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *stark.UpdateGetCardProvidersSettingRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTopUpAutoApprovalSetting provides a mock function with given fields: ctx, in, opts
func (_m *MorganClient) UpdateTopUpAutoApprovalSetting(ctx context.Context, in *stark.UpdateTopUpAutoApprovalSettingRequest, opts ...grpc.CallOption) (*stark.UpdateTopUpAutoApprovalSettingReply, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *stark.UpdateTopUpAutoApprovalSettingReply
	if rf, ok := ret.Get(0).(func(context.Context, *stark.UpdateTopUpAutoApprovalSettingRequest, ...grpc.CallOption) *stark.UpdateTopUpAutoApprovalSettingReply); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*stark.UpdateTopUpAutoApprovalSettingReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *stark.UpdateTopUpAutoApprovalSettingRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUsingThirdPartySetting provides a mock function with given fields: ctx, in, opts
func (_m *MorganClient) UpdateUsingThirdPartySetting(ctx context.Context, in *stark.UpdateUsingThirdPartySettingRequest, opts ...grpc.CallOption) (*stark.UpdateUsingThirdPartySettingReply, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *stark.UpdateUsingThirdPartySettingReply
	if rf, ok := ret.Get(0).(func(context.Context, *stark.UpdateUsingThirdPartySettingRequest, ...grpc.CallOption) *stark.UpdateUsingThirdPartySettingReply); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*stark.UpdateUsingThirdPartySettingReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *stark.UpdateUsingThirdPartySettingRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
