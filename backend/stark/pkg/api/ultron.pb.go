// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.12.4
// source: stark/api/ultron.proto

package stark

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type CryptoType int32

const (
	CryptoType_CRYPTO_TYPE_UNSPECIFIED CryptoType = 0
	CryptoType_USDT                    CryptoType = 1
)

// Enum value maps for CryptoType.
var (
	CryptoType_name = map[int32]string{
		0: "CRYPTO_TYPE_UNSPECIFIED",
		1: "USDT",
	}
	CryptoType_value = map[string]int32{
		"CRYPTO_TYPE_UNSPECIFIED": 0,
		"USDT":                    1,
	}
)

func (x CryptoType) Enum() *CryptoType {
	p := new(CryptoType)
	*p = x
	return p
}

func (x CryptoType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CryptoType) Descriptor() protoreflect.EnumDescriptor {
	return file_stark_api_ultron_proto_enumTypes[0].Descriptor()
}

func (CryptoType) Type() protoreflect.EnumType {
	return &file_stark_api_ultron_proto_enumTypes[0]
}

func (x CryptoType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CryptoType.Descriptor instead.
func (CryptoType) EnumDescriptor() ([]byte, []int) {
	return file_stark_api_ultron_proto_rawDescGZIP(), []int{0}
}

type CryptoNetworkType int32

const (
	CryptoNetworkType_CRYPTO_NETWORK_TYPE_UNSPECIFIED CryptoNetworkType = 0
	CryptoNetworkType_ERC20                           CryptoNetworkType = 1
	CryptoNetworkType_BEP20                           CryptoNetworkType = 2
	CryptoNetworkType_TRC20                           CryptoNetworkType = 3
)

// Enum value maps for CryptoNetworkType.
var (
	CryptoNetworkType_name = map[int32]string{
		0: "CRYPTO_NETWORK_TYPE_UNSPECIFIED",
		1: "ERC20",
		2: "BEP20",
		3: "TRC20",
	}
	CryptoNetworkType_value = map[string]int32{
		"CRYPTO_NETWORK_TYPE_UNSPECIFIED": 0,
		"ERC20":                           1,
		"BEP20":                           2,
		"TRC20":                           3,
	}
)

func (x CryptoNetworkType) Enum() *CryptoNetworkType {
	p := new(CryptoNetworkType)
	*p = x
	return p
}

func (x CryptoNetworkType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CryptoNetworkType) Descriptor() protoreflect.EnumDescriptor {
	return file_stark_api_ultron_proto_enumTypes[1].Descriptor()
}

func (CryptoNetworkType) Type() protoreflect.EnumType {
	return &file_stark_api_ultron_proto_enumTypes[1]
}

func (x CryptoNetworkType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CryptoNetworkType.Descriptor instead.
func (CryptoNetworkType) EnumDescriptor() ([]byte, []int) {
	return file_stark_api_ultron_proto_rawDescGZIP(), []int{1}
}

type CryptoWalletStatus int32

const (
	CryptoWalletStatus_CRYPTO_NETWORK_STATUS_UNSPECIFIED CryptoWalletStatus = 0
	CryptoWalletStatus_AVAILABLE                         CryptoWalletStatus = 1
	CryptoWalletStatus_USED                              CryptoWalletStatus = 2
	CryptoWalletStatus_BANNED                            CryptoWalletStatus = 3
)

// Enum value maps for CryptoWalletStatus.
var (
	CryptoWalletStatus_name = map[int32]string{
		0: "CRYPTO_NETWORK_STATUS_UNSPECIFIED",
		1: "AVAILABLE",
		2: "USED",
		3: "BANNED",
	}
	CryptoWalletStatus_value = map[string]int32{
		"CRYPTO_NETWORK_STATUS_UNSPECIFIED": 0,
		"AVAILABLE":                         1,
		"USED":                              2,
		"BANNED":                            3,
	}
)

func (x CryptoWalletStatus) Enum() *CryptoWalletStatus {
	p := new(CryptoWalletStatus)
	*p = x
	return p
}

func (x CryptoWalletStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CryptoWalletStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_stark_api_ultron_proto_enumTypes[2].Descriptor()
}

func (CryptoWalletStatus) Type() protoreflect.EnumType {
	return &file_stark_api_ultron_proto_enumTypes[2]
}

func (x CryptoWalletStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CryptoWalletStatus.Descriptor instead.
func (CryptoWalletStatus) EnumDescriptor() ([]byte, []int) {
	return file_stark_api_ultron_proto_rawDescGZIP(), []int{2}
}

type CryptoHotWalletStatus int32

const (
	CryptoHotWalletStatus_CRYPTO_HOT_WALLET_STATUS_UNSPECIFIED CryptoHotWalletStatus = 0
	CryptoHotWalletStatus_CRYPTO_HOT_WALLET_STATUS_ACTIVE      CryptoHotWalletStatus = 1
	CryptoHotWalletStatus_CRYPTO_HOT_WALLET_STATUS_IN_ACTIVE   CryptoHotWalletStatus = 2
)

// Enum value maps for CryptoHotWalletStatus.
var (
	CryptoHotWalletStatus_name = map[int32]string{
		0: "CRYPTO_HOT_WALLET_STATUS_UNSPECIFIED",
		1: "CRYPTO_HOT_WALLET_STATUS_ACTIVE",
		2: "CRYPTO_HOT_WALLET_STATUS_IN_ACTIVE",
	}
	CryptoHotWalletStatus_value = map[string]int32{
		"CRYPTO_HOT_WALLET_STATUS_UNSPECIFIED": 0,
		"CRYPTO_HOT_WALLET_STATUS_ACTIVE":      1,
		"CRYPTO_HOT_WALLET_STATUS_IN_ACTIVE":   2,
	}
)

func (x CryptoHotWalletStatus) Enum() *CryptoHotWalletStatus {
	p := new(CryptoHotWalletStatus)
	*p = x
	return p
}

func (x CryptoHotWalletStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CryptoHotWalletStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_stark_api_ultron_proto_enumTypes[3].Descriptor()
}

func (CryptoHotWalletStatus) Type() protoreflect.EnumType {
	return &file_stark_api_ultron_proto_enumTypes[3]
}

func (x CryptoHotWalletStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CryptoHotWalletStatus.Descriptor instead.
func (CryptoHotWalletStatus) EnumDescriptor() ([]byte, []int) {
	return file_stark_api_ultron_proto_rawDescGZIP(), []int{3}
}

type CryptoWalletName int32

const (
	CryptoWalletName_CRYPTO_WALLET_NAME_UNSPECIFIED CryptoWalletName = 0
	CryptoWalletName_UMO                            CryptoWalletName = 1
)

// Enum value maps for CryptoWalletName.
var (
	CryptoWalletName_name = map[int32]string{
		0: "CRYPTO_WALLET_NAME_UNSPECIFIED",
		1: "UMO",
	}
	CryptoWalletName_value = map[string]int32{
		"CRYPTO_WALLET_NAME_UNSPECIFIED": 0,
		"UMO":                            1,
	}
)

func (x CryptoWalletName) Enum() *CryptoWalletName {
	p := new(CryptoWalletName)
	*p = x
	return p
}

func (x CryptoWalletName) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CryptoWalletName) Descriptor() protoreflect.EnumDescriptor {
	return file_stark_api_ultron_proto_enumTypes[4].Descriptor()
}

func (CryptoWalletName) Type() protoreflect.EnumType {
	return &file_stark_api_ultron_proto_enumTypes[4]
}

func (x CryptoWalletName) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CryptoWalletName.Descriptor instead.
func (CryptoWalletName) EnumDescriptor() ([]byte, []int) {
	return file_stark_api_ultron_proto_rawDescGZIP(), []int{4}
}

type CreateCryptoWithdrawRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CryptoWalletName  CryptoWalletName  `protobuf:"varint,1,opt,name=crypto_wallet_name,json=cryptoWalletName,proto3,enum=mcuc.stark.ultron.CryptoWalletName" json:"crypto_wallet_name,omitempty"`
	Address           string            `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	CryptoType        CryptoType        `protobuf:"varint,3,opt,name=crypto_type,json=cryptoType,proto3,enum=mcuc.stark.ultron.CryptoType" json:"crypto_type,omitempty"`
	CryptoNetworkType CryptoNetworkType `protobuf:"varint,4,opt,name=crypto_network_type,json=cryptoNetworkType,proto3,enum=mcuc.stark.ultron.CryptoNetworkType" json:"crypto_network_type,omitempty"`
	// USDT
	Amount float64 `protobuf:"fixed64,5,opt,name=amount,proto3" json:"amount,omitempty"`
	// Only for reference to validate
	AmountReference uint64 `protobuf:"varint,6,opt,name=amount_reference,json=amountReference,proto3" json:"amount_reference,omitempty"`
	MerchantUserId  int64  `protobuf:"varint,7,opt,name=merchant_user_id,json=merchantUserId,proto3" json:"merchant_user_id,omitempty"`
}

func (x *CreateCryptoWithdrawRequest) Reset() {
	*x = CreateCryptoWithdrawRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_ultron_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCryptoWithdrawRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCryptoWithdrawRequest) ProtoMessage() {}

func (x *CreateCryptoWithdrawRequest) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_ultron_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCryptoWithdrawRequest.ProtoReflect.Descriptor instead.
func (*CreateCryptoWithdrawRequest) Descriptor() ([]byte, []int) {
	return file_stark_api_ultron_proto_rawDescGZIP(), []int{0}
}

func (x *CreateCryptoWithdrawRequest) GetCryptoWalletName() CryptoWalletName {
	if x != nil {
		return x.CryptoWalletName
	}
	return CryptoWalletName_CRYPTO_WALLET_NAME_UNSPECIFIED
}

func (x *CreateCryptoWithdrawRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *CreateCryptoWithdrawRequest) GetCryptoType() CryptoType {
	if x != nil {
		return x.CryptoType
	}
	return CryptoType_CRYPTO_TYPE_UNSPECIFIED
}

func (x *CreateCryptoWithdrawRequest) GetCryptoNetworkType() CryptoNetworkType {
	if x != nil {
		return x.CryptoNetworkType
	}
	return CryptoNetworkType_CRYPTO_NETWORK_TYPE_UNSPECIFIED
}

func (x *CreateCryptoWithdrawRequest) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *CreateCryptoWithdrawRequest) GetAmountReference() uint64 {
	if x != nil {
		return x.AmountReference
	}
	return 0
}

func (x *CreateCryptoWithdrawRequest) GetMerchantUserId() int64 {
	if x != nil {
		return x.MerchantUserId
	}
	return 0
}

type CreateCryptoWithdrawReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PaymentId int64 `protobuf:"varint,1,opt,name=payment_id,json=paymentId,proto3" json:"payment_id,omitempty"`
}

func (x *CreateCryptoWithdrawReply) Reset() {
	*x = CreateCryptoWithdrawReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_ultron_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCryptoWithdrawReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCryptoWithdrawReply) ProtoMessage() {}

func (x *CreateCryptoWithdrawReply) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_ultron_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCryptoWithdrawReply.ProtoReflect.Descriptor instead.
func (*CreateCryptoWithdrawReply) Descriptor() ([]byte, []int) {
	return file_stark_api_ultron_proto_rawDescGZIP(), []int{1}
}

func (x *CreateCryptoWithdrawReply) GetPaymentId() int64 {
	if x != nil {
		return x.PaymentId
	}
	return 0
}

type CancelCryptoWithdrawRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PaymentId int64  `protobuf:"varint,1,opt,name=payment_id,json=paymentId,proto3" json:"payment_id,omitempty"`
	Note      string `protobuf:"bytes,2,opt,name=note,proto3" json:"note,omitempty"`
}

func (x *CancelCryptoWithdrawRequest) Reset() {
	*x = CancelCryptoWithdrawRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_ultron_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelCryptoWithdrawRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelCryptoWithdrawRequest) ProtoMessage() {}

func (x *CancelCryptoWithdrawRequest) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_ultron_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelCryptoWithdrawRequest.ProtoReflect.Descriptor instead.
func (*CancelCryptoWithdrawRequest) Descriptor() ([]byte, []int) {
	return file_stark_api_ultron_proto_rawDescGZIP(), []int{2}
}

func (x *CancelCryptoWithdrawRequest) GetPaymentId() int64 {
	if x != nil {
		return x.PaymentId
	}
	return 0
}

func (x *CancelCryptoWithdrawRequest) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

type CancelCryptoWithdrawReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CancelCryptoWithdrawReply) Reset() {
	*x = CancelCryptoWithdrawReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_ultron_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelCryptoWithdrawReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelCryptoWithdrawReply) ProtoMessage() {}

func (x *CancelCryptoWithdrawReply) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_ultron_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelCryptoWithdrawReply.ProtoReflect.Descriptor instead.
func (*CancelCryptoWithdrawReply) Descriptor() ([]byte, []int) {
	return file_stark_api_ultron_proto_rawDescGZIP(), []int{3}
}

type CancelCryptoTopUpRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PaymentId int64  `protobuf:"varint,1,opt,name=payment_id,json=paymentId,proto3" json:"payment_id,omitempty"`
	Note      string `protobuf:"bytes,2,opt,name=note,proto3" json:"note,omitempty"`
}

func (x *CancelCryptoTopUpRequest) Reset() {
	*x = CancelCryptoTopUpRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_ultron_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelCryptoTopUpRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelCryptoTopUpRequest) ProtoMessage() {}

func (x *CancelCryptoTopUpRequest) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_ultron_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelCryptoTopUpRequest.ProtoReflect.Descriptor instead.
func (*CancelCryptoTopUpRequest) Descriptor() ([]byte, []int) {
	return file_stark_api_ultron_proto_rawDescGZIP(), []int{4}
}

func (x *CancelCryptoTopUpRequest) GetPaymentId() int64 {
	if x != nil {
		return x.PaymentId
	}
	return 0
}

func (x *CancelCryptoTopUpRequest) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

type CancelCryptoTopUpReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CancelCryptoTopUpReply) Reset() {
	*x = CancelCryptoTopUpReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_ultron_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelCryptoTopUpReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelCryptoTopUpReply) ProtoMessage() {}

func (x *CancelCryptoTopUpReply) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_ultron_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelCryptoTopUpReply.ProtoReflect.Descriptor instead.
func (*CancelCryptoTopUpReply) Descriptor() ([]byte, []int) {
	return file_stark_api_ultron_proto_rawDescGZIP(), []int{5}
}

type ApproveCryptoWithdrawRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PaymentId int64  `protobuf:"varint,1,opt,name=payment_id,json=paymentId,proto3" json:"payment_id,omitempty"`
	Note      string `protobuf:"bytes,2,opt,name=note,proto3" json:"note,omitempty"`
}

func (x *ApproveCryptoWithdrawRequest) Reset() {
	*x = ApproveCryptoWithdrawRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_ultron_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApproveCryptoWithdrawRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApproveCryptoWithdrawRequest) ProtoMessage() {}

func (x *ApproveCryptoWithdrawRequest) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_ultron_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApproveCryptoWithdrawRequest.ProtoReflect.Descriptor instead.
func (*ApproveCryptoWithdrawRequest) Descriptor() ([]byte, []int) {
	return file_stark_api_ultron_proto_rawDescGZIP(), []int{6}
}

func (x *ApproveCryptoWithdrawRequest) GetPaymentId() int64 {
	if x != nil {
		return x.PaymentId
	}
	return 0
}

func (x *ApproveCryptoWithdrawRequest) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

type ApproveCryptoWithdrawReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ApproveCryptoWithdrawReply) Reset() {
	*x = ApproveCryptoWithdrawReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_ultron_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApproveCryptoWithdrawReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApproveCryptoWithdrawReply) ProtoMessage() {}

func (x *ApproveCryptoWithdrawReply) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_ultron_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApproveCryptoWithdrawReply.ProtoReflect.Descriptor instead.
func (*ApproveCryptoWithdrawReply) Descriptor() ([]byte, []int) {
	return file_stark_api_ultron_proto_rawDescGZIP(), []int{7}
}

type SubmitCryptoWithdrawRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PaymentId     int64   `protobuf:"varint,1,opt,name=payment_id,json=paymentId,proto3" json:"payment_id,omitempty"`
	SenderAddress string  `protobuf:"bytes,2,opt,name=sender_address,json=senderAddress,proto3" json:"sender_address,omitempty"`
	Amount        float64 `protobuf:"fixed64,3,opt,name=amount,proto3" json:"amount,omitempty"`
	Fee           float64 `protobuf:"fixed64,4,opt,name=fee,proto3" json:"fee,omitempty"`
	TxHash        string  `protobuf:"bytes,5,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	ImageUrl      string  `protobuf:"bytes,6,opt,name=image_url,json=imageUrl,proto3" json:"image_url,omitempty"`
	Note          string  `protobuf:"bytes,7,opt,name=note,proto3" json:"note,omitempty"`
}

func (x *SubmitCryptoWithdrawRequest) Reset() {
	*x = SubmitCryptoWithdrawRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_ultron_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitCryptoWithdrawRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitCryptoWithdrawRequest) ProtoMessage() {}

func (x *SubmitCryptoWithdrawRequest) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_ultron_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitCryptoWithdrawRequest.ProtoReflect.Descriptor instead.
func (*SubmitCryptoWithdrawRequest) Descriptor() ([]byte, []int) {
	return file_stark_api_ultron_proto_rawDescGZIP(), []int{8}
}

func (x *SubmitCryptoWithdrawRequest) GetPaymentId() int64 {
	if x != nil {
		return x.PaymentId
	}
	return 0
}

func (x *SubmitCryptoWithdrawRequest) GetSenderAddress() string {
	if x != nil {
		return x.SenderAddress
	}
	return ""
}

func (x *SubmitCryptoWithdrawRequest) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *SubmitCryptoWithdrawRequest) GetFee() float64 {
	if x != nil {
		return x.Fee
	}
	return 0
}

func (x *SubmitCryptoWithdrawRequest) GetTxHash() string {
	if x != nil {
		return x.TxHash
	}
	return ""
}

func (x *SubmitCryptoWithdrawRequest) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *SubmitCryptoWithdrawRequest) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

type SubmitCryptoWithdrawReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SubmitCryptoWithdrawReply) Reset() {
	*x = SubmitCryptoWithdrawReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_ultron_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitCryptoWithdrawReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitCryptoWithdrawReply) ProtoMessage() {}

func (x *SubmitCryptoWithdrawReply) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_ultron_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitCryptoWithdrawReply.ProtoReflect.Descriptor instead.
func (*SubmitCryptoWithdrawReply) Descriptor() ([]byte, []int) {
	return file_stark_api_ultron_proto_rawDescGZIP(), []int{9}
}

type RejectCryptoWithdrawRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PaymentId      int64  `protobuf:"varint,1,opt,name=payment_id,json=paymentId,proto3" json:"payment_id,omitempty"`
	Note           string `protobuf:"bytes,2,opt,name=note,proto3" json:"note,omitempty"`
	IsMerchantCall bool   `protobuf:"varint,3,opt,name=is_merchant_call,json=isMerchantCall,proto3" json:"is_merchant_call,omitempty"`
}

func (x *RejectCryptoWithdrawRequest) Reset() {
	*x = RejectCryptoWithdrawRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_ultron_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RejectCryptoWithdrawRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RejectCryptoWithdrawRequest) ProtoMessage() {}

func (x *RejectCryptoWithdrawRequest) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_ultron_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RejectCryptoWithdrawRequest.ProtoReflect.Descriptor instead.
func (*RejectCryptoWithdrawRequest) Descriptor() ([]byte, []int) {
	return file_stark_api_ultron_proto_rawDescGZIP(), []int{10}
}

func (x *RejectCryptoWithdrawRequest) GetPaymentId() int64 {
	if x != nil {
		return x.PaymentId
	}
	return 0
}

func (x *RejectCryptoWithdrawRequest) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *RejectCryptoWithdrawRequest) GetIsMerchantCall() bool {
	if x != nil {
		return x.IsMerchantCall
	}
	return false
}

type RejectCryptoWithdrawReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RejectCryptoWithdrawReply) Reset() {
	*x = RejectCryptoWithdrawReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_ultron_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RejectCryptoWithdrawReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RejectCryptoWithdrawReply) ProtoMessage() {}

func (x *RejectCryptoWithdrawReply) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_ultron_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RejectCryptoWithdrawReply.ProtoReflect.Descriptor instead.
func (*RejectCryptoWithdrawReply) Descriptor() ([]byte, []int) {
	return file_stark_api_ultron_proto_rawDescGZIP(), []int{11}
}

type ApproveCryptoTopUpRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PaymentId int64  `protobuf:"varint,1,opt,name=payment_id,json=paymentId,proto3" json:"payment_id,omitempty"`
	Note      string `protobuf:"bytes,2,opt,name=note,proto3" json:"note,omitempty"`
}

func (x *ApproveCryptoTopUpRequest) Reset() {
	*x = ApproveCryptoTopUpRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_ultron_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApproveCryptoTopUpRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApproveCryptoTopUpRequest) ProtoMessage() {}

func (x *ApproveCryptoTopUpRequest) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_ultron_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApproveCryptoTopUpRequest.ProtoReflect.Descriptor instead.
func (*ApproveCryptoTopUpRequest) Descriptor() ([]byte, []int) {
	return file_stark_api_ultron_proto_rawDescGZIP(), []int{12}
}

func (x *ApproveCryptoTopUpRequest) GetPaymentId() int64 {
	if x != nil {
		return x.PaymentId
	}
	return 0
}

func (x *ApproveCryptoTopUpRequest) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

type ApproveCryptoTopUpReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ApproveCryptoTopUpReply) Reset() {
	*x = ApproveCryptoTopUpReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_ultron_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApproveCryptoTopUpReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApproveCryptoTopUpReply) ProtoMessage() {}

func (x *ApproveCryptoTopUpReply) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_ultron_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApproveCryptoTopUpReply.ProtoReflect.Descriptor instead.
func (*ApproveCryptoTopUpReply) Descriptor() ([]byte, []int) {
	return file_stark_api_ultron_proto_rawDescGZIP(), []int{13}
}

type RejectCryptoTopUpRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PaymentId      int64  `protobuf:"varint,1,opt,name=payment_id,json=paymentId,proto3" json:"payment_id,omitempty"`
	Note           string `protobuf:"bytes,2,opt,name=note,proto3" json:"note,omitempty"`
	IsMerchantCall bool   `protobuf:"varint,3,opt,name=is_merchant_call,json=isMerchantCall,proto3" json:"is_merchant_call,omitempty"`
}

func (x *RejectCryptoTopUpRequest) Reset() {
	*x = RejectCryptoTopUpRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_ultron_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RejectCryptoTopUpRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RejectCryptoTopUpRequest) ProtoMessage() {}

func (x *RejectCryptoTopUpRequest) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_ultron_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RejectCryptoTopUpRequest.ProtoReflect.Descriptor instead.
func (*RejectCryptoTopUpRequest) Descriptor() ([]byte, []int) {
	return file_stark_api_ultron_proto_rawDescGZIP(), []int{14}
}

func (x *RejectCryptoTopUpRequest) GetPaymentId() int64 {
	if x != nil {
		return x.PaymentId
	}
	return 0
}

func (x *RejectCryptoTopUpRequest) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *RejectCryptoTopUpRequest) GetIsMerchantCall() bool {
	if x != nil {
		return x.IsMerchantCall
	}
	return false
}

type RejectCryptoTopUpReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RejectCryptoTopUpReply) Reset() {
	*x = RejectCryptoTopUpReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_ultron_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RejectCryptoTopUpReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RejectCryptoTopUpReply) ProtoMessage() {}

func (x *RejectCryptoTopUpReply) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_ultron_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RejectCryptoTopUpReply.ProtoReflect.Descriptor instead.
func (*RejectCryptoTopUpReply) Descriptor() ([]byte, []int) {
	return file_stark_api_ultron_proto_rawDescGZIP(), []int{15}
}

type GetCryptoWalletRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CryptoType        CryptoType        `protobuf:"varint,1,opt,name=crypto_type,json=cryptoType,proto3,enum=mcuc.stark.ultron.CryptoType" json:"crypto_type,omitempty"`
	CryptoNetworkType CryptoNetworkType `protobuf:"varint,2,opt,name=crypto_network_type,json=cryptoNetworkType,proto3,enum=mcuc.stark.ultron.CryptoNetworkType" json:"crypto_network_type,omitempty"`
	MerchantUserId    int64             `protobuf:"varint,3,opt,name=merchant_user_id,json=merchantUserId,proto3" json:"merchant_user_id,omitempty"`
}

func (x *GetCryptoWalletRequest) Reset() {
	*x = GetCryptoWalletRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_ultron_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCryptoWalletRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCryptoWalletRequest) ProtoMessage() {}

func (x *GetCryptoWalletRequest) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_ultron_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCryptoWalletRequest.ProtoReflect.Descriptor instead.
func (*GetCryptoWalletRequest) Descriptor() ([]byte, []int) {
	return file_stark_api_ultron_proto_rawDescGZIP(), []int{16}
}

func (x *GetCryptoWalletRequest) GetCryptoType() CryptoType {
	if x != nil {
		return x.CryptoType
	}
	return CryptoType_CRYPTO_TYPE_UNSPECIFIED
}

func (x *GetCryptoWalletRequest) GetCryptoNetworkType() CryptoNetworkType {
	if x != nil {
		return x.CryptoNetworkType
	}
	return CryptoNetworkType_CRYPTO_NETWORK_TYPE_UNSPECIFIED
}

func (x *GetCryptoWalletRequest) GetMerchantUserId() int64 {
	if x != nil {
		return x.MerchantUserId
	}
	return 0
}

type GetCryptoWalletReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *GetCryptoWalletReply) Reset() {
	*x = GetCryptoWalletReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_ultron_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCryptoWalletReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCryptoWalletReply) ProtoMessage() {}

func (x *GetCryptoWalletReply) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_ultron_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCryptoWalletReply.ProtoReflect.Descriptor instead.
func (*GetCryptoWalletReply) Descriptor() ([]byte, []int) {
	return file_stark_api_ultron_proto_rawDescGZIP(), []int{17}
}

func (x *GetCryptoWalletReply) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type LoadCryptoWalletsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CryptoType        CryptoType        `protobuf:"varint,1,opt,name=crypto_type,json=cryptoType,proto3,enum=mcuc.stark.ultron.CryptoType" json:"crypto_type,omitempty"`
	CryptoNetworkType CryptoNetworkType `protobuf:"varint,2,opt,name=crypto_network_type,json=cryptoNetworkType,proto3,enum=mcuc.stark.ultron.CryptoNetworkType" json:"crypto_network_type,omitempty"`
}

func (x *LoadCryptoWalletsRequest) Reset() {
	*x = LoadCryptoWalletsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_ultron_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadCryptoWalletsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadCryptoWalletsRequest) ProtoMessage() {}

func (x *LoadCryptoWalletsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_ultron_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadCryptoWalletsRequest.ProtoReflect.Descriptor instead.
func (*LoadCryptoWalletsRequest) Descriptor() ([]byte, []int) {
	return file_stark_api_ultron_proto_rawDescGZIP(), []int{18}
}

func (x *LoadCryptoWalletsRequest) GetCryptoType() CryptoType {
	if x != nil {
		return x.CryptoType
	}
	return CryptoType_CRYPTO_TYPE_UNSPECIFIED
}

func (x *LoadCryptoWalletsRequest) GetCryptoNetworkType() CryptoNetworkType {
	if x != nil {
		return x.CryptoNetworkType
	}
	return CryptoNetworkType_CRYPTO_NETWORK_TYPE_UNSPECIFIED
}

type LoadCryptoWalletsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *LoadCryptoWalletsReply) Reset() {
	*x = LoadCryptoWalletsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_ultron_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadCryptoWalletsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadCryptoWalletsReply) ProtoMessage() {}

func (x *LoadCryptoWalletsReply) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_ultron_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadCryptoWalletsReply.ProtoReflect.Descriptor instead.
func (*LoadCryptoWalletsReply) Descriptor() ([]byte, []int) {
	return file_stark_api_ultron_proto_rawDescGZIP(), []int{19}
}

func (x *LoadCryptoWalletsReply) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type ValidateCryptoWalletsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Records []*CryptoWallet `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
}

func (x *ValidateCryptoWalletsRequest) Reset() {
	*x = ValidateCryptoWalletsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_ultron_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateCryptoWalletsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateCryptoWalletsRequest) ProtoMessage() {}

func (x *ValidateCryptoWalletsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_ultron_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateCryptoWalletsRequest.ProtoReflect.Descriptor instead.
func (*ValidateCryptoWalletsRequest) Descriptor() ([]byte, []int) {
	return file_stark_api_ultron_proto_rawDescGZIP(), []int{20}
}

func (x *ValidateCryptoWalletsRequest) GetRecords() []*CryptoWallet {
	if x != nil {
		return x.Records
	}
	return nil
}

type ValidateCryptoWalletsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ValidRecords      []*CryptoWallet `protobuf:"bytes,1,rep,name=valid_records,json=validRecords,proto3" json:"valid_records,omitempty"`
	DuplicatedRecords []*CryptoWallet `protobuf:"bytes,2,rep,name=duplicated_records,json=duplicatedRecords,proto3" json:"duplicated_records,omitempty"`
}

func (x *ValidateCryptoWalletsReply) Reset() {
	*x = ValidateCryptoWalletsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_ultron_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateCryptoWalletsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateCryptoWalletsReply) ProtoMessage() {}

func (x *ValidateCryptoWalletsReply) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_ultron_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateCryptoWalletsReply.ProtoReflect.Descriptor instead.
func (*ValidateCryptoWalletsReply) Descriptor() ([]byte, []int) {
	return file_stark_api_ultron_proto_rawDescGZIP(), []int{21}
}

func (x *ValidateCryptoWalletsReply) GetValidRecords() []*CryptoWallet {
	if x != nil {
		return x.ValidRecords
	}
	return nil
}

func (x *ValidateCryptoWalletsReply) GetDuplicatedRecords() []*CryptoWallet {
	if x != nil {
		return x.DuplicatedRecords
	}
	return nil
}

type ImportCryptoWalletsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Wallets []*CryptoWallet `protobuf:"bytes,1,rep,name=wallets,proto3" json:"wallets,omitempty"`
}

func (x *ImportCryptoWalletsRequest) Reset() {
	*x = ImportCryptoWalletsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_ultron_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportCryptoWalletsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportCryptoWalletsRequest) ProtoMessage() {}

func (x *ImportCryptoWalletsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_ultron_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportCryptoWalletsRequest.ProtoReflect.Descriptor instead.
func (*ImportCryptoWalletsRequest) Descriptor() ([]byte, []int) {
	return file_stark_api_ultron_proto_rawDescGZIP(), []int{22}
}

func (x *ImportCryptoWalletsRequest) GetWallets() []*CryptoWallet {
	if x != nil {
		return x.Wallets
	}
	return nil
}

type ImportCryptoWalletsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Wallets []*CryptoWallet `protobuf:"bytes,1,rep,name=wallets,proto3" json:"wallets,omitempty"`
}

func (x *ImportCryptoWalletsReply) Reset() {
	*x = ImportCryptoWalletsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_ultron_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportCryptoWalletsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportCryptoWalletsReply) ProtoMessage() {}

func (x *ImportCryptoWalletsReply) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_ultron_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportCryptoWalletsReply.ProtoReflect.Descriptor instead.
func (*ImportCryptoWalletsReply) Descriptor() ([]byte, []int) {
	return file_stark_api_ultron_proto_rawDescGZIP(), []int{23}
}

func (x *ImportCryptoWalletsReply) GetWallets() []*CryptoWallet {
	if x != nil {
		return x.Wallets
	}
	return nil
}

type ListCryptoWalletsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page               uint32               `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Size               uint32               `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	Addresses          []string             `protobuf:"bytes,3,rep,name=addresses,proto3" json:"addresses,omitempty"`
	CryptoTypes        []CryptoType         `protobuf:"varint,4,rep,packed,name=crypto_types,json=cryptoTypes,proto3,enum=mcuc.stark.ultron.CryptoType" json:"crypto_types,omitempty"`
	CryptoNetworkTypes []CryptoNetworkType  `protobuf:"varint,5,rep,packed,name=crypto_network_types,json=cryptoNetworkTypes,proto3,enum=mcuc.stark.ultron.CryptoNetworkType" json:"crypto_network_types,omitempty"`
	Statuses           []CryptoWalletStatus `protobuf:"varint,6,rep,packed,name=statuses,proto3,enum=mcuc.stark.ultron.CryptoWalletStatus" json:"statuses,omitempty"`
	MerchantIds        []int64              `protobuf:"varint,7,rep,packed,name=merchant_ids,json=merchantIds,proto3" json:"merchant_ids,omitempty"`
}

func (x *ListCryptoWalletsRequest) Reset() {
	*x = ListCryptoWalletsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_ultron_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCryptoWalletsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCryptoWalletsRequest) ProtoMessage() {}

func (x *ListCryptoWalletsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_ultron_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCryptoWalletsRequest.ProtoReflect.Descriptor instead.
func (*ListCryptoWalletsRequest) Descriptor() ([]byte, []int) {
	return file_stark_api_ultron_proto_rawDescGZIP(), []int{24}
}

func (x *ListCryptoWalletsRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListCryptoWalletsRequest) GetSize() uint32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *ListCryptoWalletsRequest) GetAddresses() []string {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *ListCryptoWalletsRequest) GetCryptoTypes() []CryptoType {
	if x != nil {
		return x.CryptoTypes
	}
	return nil
}

func (x *ListCryptoWalletsRequest) GetCryptoNetworkTypes() []CryptoNetworkType {
	if x != nil {
		return x.CryptoNetworkTypes
	}
	return nil
}

func (x *ListCryptoWalletsRequest) GetStatuses() []CryptoWalletStatus {
	if x != nil {
		return x.Statuses
	}
	return nil
}

func (x *ListCryptoWalletsRequest) GetMerchantIds() []int64 {
	if x != nil {
		return x.MerchantIds
	}
	return nil
}

type ListCryptoWalletsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Records     []*CryptoWallet `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
	Total       uint64          `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	CurrentPage uint32          `protobuf:"varint,3,opt,name=current_page,json=currentPage,proto3" json:"current_page,omitempty"`
}

func (x *ListCryptoWalletsReply) Reset() {
	*x = ListCryptoWalletsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_ultron_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCryptoWalletsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCryptoWalletsReply) ProtoMessage() {}

func (x *ListCryptoWalletsReply) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_ultron_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCryptoWalletsReply.ProtoReflect.Descriptor instead.
func (*ListCryptoWalletsReply) Descriptor() ([]byte, []int) {
	return file_stark_api_ultron_proto_rawDescGZIP(), []int{25}
}

func (x *ListCryptoWalletsReply) GetRecords() []*CryptoWallet {
	if x != nil {
		return x.Records
	}
	return nil
}

func (x *ListCryptoWalletsReply) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListCryptoWalletsReply) GetCurrentPage() uint32 {
	if x != nil {
		return x.CurrentPage
	}
	return 0
}

type ValidateCryptoHotWalletsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Records []*SystemCryptoHotWallet `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
}

func (x *ValidateCryptoHotWalletsRequest) Reset() {
	*x = ValidateCryptoHotWalletsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_ultron_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateCryptoHotWalletsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateCryptoHotWalletsRequest) ProtoMessage() {}

func (x *ValidateCryptoHotWalletsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_ultron_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateCryptoHotWalletsRequest.ProtoReflect.Descriptor instead.
func (*ValidateCryptoHotWalletsRequest) Descriptor() ([]byte, []int) {
	return file_stark_api_ultron_proto_rawDescGZIP(), []int{26}
}

func (x *ValidateCryptoHotWalletsRequest) GetRecords() []*SystemCryptoHotWallet {
	if x != nil {
		return x.Records
	}
	return nil
}

type ValidateCryptoHotWalletsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ValidRecords      []*SystemCryptoHotWallet `protobuf:"bytes,1,rep,name=valid_records,json=validRecords,proto3" json:"valid_records,omitempty"`
	DuplicatedRecords []*SystemCryptoHotWallet `protobuf:"bytes,2,rep,name=duplicated_records,json=duplicatedRecords,proto3" json:"duplicated_records,omitempty"`
}

func (x *ValidateCryptoHotWalletsReply) Reset() {
	*x = ValidateCryptoHotWalletsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_ultron_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateCryptoHotWalletsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateCryptoHotWalletsReply) ProtoMessage() {}

func (x *ValidateCryptoHotWalletsReply) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_ultron_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateCryptoHotWalletsReply.ProtoReflect.Descriptor instead.
func (*ValidateCryptoHotWalletsReply) Descriptor() ([]byte, []int) {
	return file_stark_api_ultron_proto_rawDescGZIP(), []int{27}
}

func (x *ValidateCryptoHotWalletsReply) GetValidRecords() []*SystemCryptoHotWallet {
	if x != nil {
		return x.ValidRecords
	}
	return nil
}

func (x *ValidateCryptoHotWalletsReply) GetDuplicatedRecords() []*SystemCryptoHotWallet {
	if x != nil {
		return x.DuplicatedRecords
	}
	return nil
}

type ImportCryptoHotWalletsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Records []*SystemCryptoHotWallet `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
}

func (x *ImportCryptoHotWalletsRequest) Reset() {
	*x = ImportCryptoHotWalletsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_ultron_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportCryptoHotWalletsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportCryptoHotWalletsRequest) ProtoMessage() {}

func (x *ImportCryptoHotWalletsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_ultron_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportCryptoHotWalletsRequest.ProtoReflect.Descriptor instead.
func (*ImportCryptoHotWalletsRequest) Descriptor() ([]byte, []int) {
	return file_stark_api_ultron_proto_rawDescGZIP(), []int{28}
}

func (x *ImportCryptoHotWalletsRequest) GetRecords() []*SystemCryptoHotWallet {
	if x != nil {
		return x.Records
	}
	return nil
}

type ImportCryptoHotWalletsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Records []*SystemCryptoHotWallet `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
}

func (x *ImportCryptoHotWalletsReply) Reset() {
	*x = ImportCryptoHotWalletsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_ultron_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportCryptoHotWalletsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportCryptoHotWalletsReply) ProtoMessage() {}

func (x *ImportCryptoHotWalletsReply) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_ultron_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportCryptoHotWalletsReply.ProtoReflect.Descriptor instead.
func (*ImportCryptoHotWalletsReply) Descriptor() ([]byte, []int) {
	return file_stark_api_ultron_proto_rawDescGZIP(), []int{29}
}

func (x *ImportCryptoHotWalletsReply) GetRecords() []*SystemCryptoHotWallet {
	if x != nil {
		return x.Records
	}
	return nil
}

type ListCryptoHotWalletsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page               uint32               `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Size               uint32               `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	Addresses          []string             `protobuf:"bytes,3,rep,name=addresses,proto3" json:"addresses,omitempty"`
	CryptoTypes        []CryptoType         `protobuf:"varint,4,rep,packed,name=crypto_types,json=cryptoTypes,proto3,enum=mcuc.stark.ultron.CryptoType" json:"crypto_types,omitempty"`
	CryptoNetworkTypes []CryptoNetworkType  `protobuf:"varint,5,rep,packed,name=crypto_network_types,json=cryptoNetworkTypes,proto3,enum=mcuc.stark.ultron.CryptoNetworkType" json:"crypto_network_types,omitempty"`
	Statuses           []CryptoWalletStatus `protobuf:"varint,6,rep,packed,name=statuses,proto3,enum=mcuc.stark.ultron.CryptoWalletStatus" json:"statuses,omitempty"`
	MerchantIds        []int64              `protobuf:"varint,7,rep,packed,name=merchant_ids,json=merchantIds,proto3" json:"merchant_ids,omitempty"`
}

func (x *ListCryptoHotWalletsRequest) Reset() {
	*x = ListCryptoHotWalletsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_ultron_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCryptoHotWalletsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCryptoHotWalletsRequest) ProtoMessage() {}

func (x *ListCryptoHotWalletsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_ultron_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCryptoHotWalletsRequest.ProtoReflect.Descriptor instead.
func (*ListCryptoHotWalletsRequest) Descriptor() ([]byte, []int) {
	return file_stark_api_ultron_proto_rawDescGZIP(), []int{30}
}

func (x *ListCryptoHotWalletsRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListCryptoHotWalletsRequest) GetSize() uint32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *ListCryptoHotWalletsRequest) GetAddresses() []string {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *ListCryptoHotWalletsRequest) GetCryptoTypes() []CryptoType {
	if x != nil {
		return x.CryptoTypes
	}
	return nil
}

func (x *ListCryptoHotWalletsRequest) GetCryptoNetworkTypes() []CryptoNetworkType {
	if x != nil {
		return x.CryptoNetworkTypes
	}
	return nil
}

func (x *ListCryptoHotWalletsRequest) GetStatuses() []CryptoWalletStatus {
	if x != nil {
		return x.Statuses
	}
	return nil
}

func (x *ListCryptoHotWalletsRequest) GetMerchantIds() []int64 {
	if x != nil {
		return x.MerchantIds
	}
	return nil
}

type ListCryptoHotWalletsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Records     []*SystemCryptoHotWallet `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
	Total       uint64                   `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	CurrentPage uint32                   `protobuf:"varint,3,opt,name=current_page,json=currentPage,proto3" json:"current_page,omitempty"`
}

func (x *ListCryptoHotWalletsReply) Reset() {
	*x = ListCryptoHotWalletsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_ultron_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCryptoHotWalletsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCryptoHotWalletsReply) ProtoMessage() {}

func (x *ListCryptoHotWalletsReply) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_ultron_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCryptoHotWalletsReply.ProtoReflect.Descriptor instead.
func (*ListCryptoHotWalletsReply) Descriptor() ([]byte, []int) {
	return file_stark_api_ultron_proto_rawDescGZIP(), []int{31}
}

func (x *ListCryptoHotWalletsReply) GetRecords() []*SystemCryptoHotWallet {
	if x != nil {
		return x.Records
	}
	return nil
}

func (x *ListCryptoHotWalletsReply) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListCryptoHotWalletsReply) GetCurrentPage() uint32 {
	if x != nil {
		return x.CurrentPage
	}
	return 0
}

type GetSystemCryptoHotWalletsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CryptoType        CryptoType        `protobuf:"varint,1,opt,name=crypto_type,json=cryptoType,proto3,enum=mcuc.stark.ultron.CryptoType" json:"crypto_type,omitempty"`
	CryptoNetworkType CryptoNetworkType `protobuf:"varint,2,opt,name=crypto_network_type,json=cryptoNetworkType,proto3,enum=mcuc.stark.ultron.CryptoNetworkType" json:"crypto_network_type,omitempty"`
	MerchantId        int64             `protobuf:"varint,3,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty"`
	Amount            float64           `protobuf:"fixed64,4,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *GetSystemCryptoHotWalletsRequest) Reset() {
	*x = GetSystemCryptoHotWalletsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_ultron_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSystemCryptoHotWalletsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSystemCryptoHotWalletsRequest) ProtoMessage() {}

func (x *GetSystemCryptoHotWalletsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_ultron_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSystemCryptoHotWalletsRequest.ProtoReflect.Descriptor instead.
func (*GetSystemCryptoHotWalletsRequest) Descriptor() ([]byte, []int) {
	return file_stark_api_ultron_proto_rawDescGZIP(), []int{32}
}

func (x *GetSystemCryptoHotWalletsRequest) GetCryptoType() CryptoType {
	if x != nil {
		return x.CryptoType
	}
	return CryptoType_CRYPTO_TYPE_UNSPECIFIED
}

func (x *GetSystemCryptoHotWalletsRequest) GetCryptoNetworkType() CryptoNetworkType {
	if x != nil {
		return x.CryptoNetworkType
	}
	return CryptoNetworkType_CRYPTO_NETWORK_TYPE_UNSPECIFIED
}

func (x *GetSystemCryptoHotWalletsRequest) GetMerchantId() int64 {
	if x != nil {
		return x.MerchantId
	}
	return 0
}

func (x *GetSystemCryptoHotWalletsRequest) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type GetSystemCryptoHotWalletsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Records []*SystemCryptoHotWallet `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
}

func (x *GetSystemCryptoHotWalletsReply) Reset() {
	*x = GetSystemCryptoHotWalletsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_ultron_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSystemCryptoHotWalletsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSystemCryptoHotWalletsReply) ProtoMessage() {}

func (x *GetSystemCryptoHotWalletsReply) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_ultron_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSystemCryptoHotWalletsReply.ProtoReflect.Descriptor instead.
func (*GetSystemCryptoHotWalletsReply) Descriptor() ([]byte, []int) {
	return file_stark_api_ultron_proto_rawDescGZIP(), []int{33}
}

func (x *GetSystemCryptoHotWalletsReply) GetRecords() []*SystemCryptoHotWallet {
	if x != nil {
		return x.Records
	}
	return nil
}

type SystemCryptoHotWallet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                int64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Address           string                `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	MerchantId        int64                 `protobuf:"varint,3,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty"`
	CryptoType        CryptoType            `protobuf:"varint,4,opt,name=crypto_type,json=cryptoType,proto3,enum=mcuc.stark.ultron.CryptoType" json:"crypto_type,omitempty"`
	CryptoNetworkType CryptoNetworkType     `protobuf:"varint,5,opt,name=crypto_network_type,json=cryptoNetworkType,proto3,enum=mcuc.stark.ultron.CryptoNetworkType" json:"crypto_network_type,omitempty"`
	TotalBalance      float64               `protobuf:"fixed64,6,opt,name=total_balance,json=totalBalance,proto3" json:"total_balance,omitempty"`
	Balance           float64               `protobuf:"fixed64,7,opt,name=balance,proto3" json:"balance,omitempty"`
	Status            CryptoHotWalletStatus `protobuf:"varint,8,opt,name=status,proto3,enum=mcuc.stark.ultron.CryptoHotWalletStatus" json:"status,omitempty"`
}

func (x *SystemCryptoHotWallet) Reset() {
	*x = SystemCryptoHotWallet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_ultron_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemCryptoHotWallet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemCryptoHotWallet) ProtoMessage() {}

func (x *SystemCryptoHotWallet) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_ultron_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemCryptoHotWallet.ProtoReflect.Descriptor instead.
func (*SystemCryptoHotWallet) Descriptor() ([]byte, []int) {
	return file_stark_api_ultron_proto_rawDescGZIP(), []int{34}
}

func (x *SystemCryptoHotWallet) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SystemCryptoHotWallet) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *SystemCryptoHotWallet) GetMerchantId() int64 {
	if x != nil {
		return x.MerchantId
	}
	return 0
}

func (x *SystemCryptoHotWallet) GetCryptoType() CryptoType {
	if x != nil {
		return x.CryptoType
	}
	return CryptoType_CRYPTO_TYPE_UNSPECIFIED
}

func (x *SystemCryptoHotWallet) GetCryptoNetworkType() CryptoNetworkType {
	if x != nil {
		return x.CryptoNetworkType
	}
	return CryptoNetworkType_CRYPTO_NETWORK_TYPE_UNSPECIFIED
}

func (x *SystemCryptoHotWallet) GetTotalBalance() float64 {
	if x != nil {
		return x.TotalBalance
	}
	return 0
}

func (x *SystemCryptoHotWallet) GetBalance() float64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *SystemCryptoHotWallet) GetStatus() CryptoHotWalletStatus {
	if x != nil {
		return x.Status
	}
	return CryptoHotWalletStatus_CRYPTO_HOT_WALLET_STATUS_UNSPECIFIED
}

type CallbackTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StoreId        string  `protobuf:"bytes,1,opt,name=store_id,json=storeId,proto3" json:"store_id,omitempty"`
	AppTransId     string  `protobuf:"bytes,2,opt,name=app_trans_id,json=appTransId,proto3" json:"app_trans_id,omitempty"`
	TransId        string  `protobuf:"bytes,3,opt,name=trans_id,json=transId,proto3" json:"trans_id,omitempty"`
	Sender         string  `protobuf:"bytes,4,opt,name=sender,proto3" json:"sender,omitempty"`
	Recipient      string  `protobuf:"bytes,5,opt,name=recipient,proto3" json:"recipient,omitempty"`
	Currency       string  `protobuf:"bytes,6,opt,name=currency,proto3" json:"currency,omitempty"`
	TransactionFee float64 `protobuf:"fixed64,7,opt,name=transaction_fee,json=transactionFee,proto3" json:"transaction_fee,omitempty"`
	TxHash         string  `protobuf:"bytes,8,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	Amount         float64 `protobuf:"fixed64,9,opt,name=amount,proto3" json:"amount,omitempty"`
	ReceivedAmount float64 `protobuf:"fixed64,10,opt,name=received_amount,json=receivedAmount,proto3" json:"received_amount,omitempty"`
	Type           string  `protobuf:"bytes,11,opt,name=type,proto3" json:"type,omitempty"`
	State          string  `protobuf:"bytes,12,opt,name=state,proto3" json:"state,omitempty"`
	Message        string  `protobuf:"bytes,13,opt,name=message,proto3" json:"message,omitempty"`
	BcFee          float64 `protobuf:"fixed64,14,opt,name=bc_fee,json=bcFee,proto3" json:"bc_fee,omitempty"`
	BcFeeCurrency  string  `protobuf:"bytes,15,opt,name=bc_fee_currency,json=bcFeeCurrency,proto3" json:"bc_fee_currency,omitempty"`
}

func (x *CallbackTransactionRequest) Reset() {
	*x = CallbackTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_ultron_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallbackTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallbackTransactionRequest) ProtoMessage() {}

func (x *CallbackTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_ultron_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallbackTransactionRequest.ProtoReflect.Descriptor instead.
func (*CallbackTransactionRequest) Descriptor() ([]byte, []int) {
	return file_stark_api_ultron_proto_rawDescGZIP(), []int{35}
}

func (x *CallbackTransactionRequest) GetStoreId() string {
	if x != nil {
		return x.StoreId
	}
	return ""
}

func (x *CallbackTransactionRequest) GetAppTransId() string {
	if x != nil {
		return x.AppTransId
	}
	return ""
}

func (x *CallbackTransactionRequest) GetTransId() string {
	if x != nil {
		return x.TransId
	}
	return ""
}

func (x *CallbackTransactionRequest) GetSender() string {
	if x != nil {
		return x.Sender
	}
	return ""
}

func (x *CallbackTransactionRequest) GetRecipient() string {
	if x != nil {
		return x.Recipient
	}
	return ""
}

func (x *CallbackTransactionRequest) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *CallbackTransactionRequest) GetTransactionFee() float64 {
	if x != nil {
		return x.TransactionFee
	}
	return 0
}

func (x *CallbackTransactionRequest) GetTxHash() string {
	if x != nil {
		return x.TxHash
	}
	return ""
}

func (x *CallbackTransactionRequest) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *CallbackTransactionRequest) GetReceivedAmount() float64 {
	if x != nil {
		return x.ReceivedAmount
	}
	return 0
}

func (x *CallbackTransactionRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CallbackTransactionRequest) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *CallbackTransactionRequest) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CallbackTransactionRequest) GetBcFee() float64 {
	if x != nil {
		return x.BcFee
	}
	return 0
}

func (x *CallbackTransactionRequest) GetBcFeeCurrency() string {
	if x != nil {
		return x.BcFeeCurrency
	}
	return ""
}

type CallbackTransactionReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CallbackTransactionReply) Reset() {
	*x = CallbackTransactionReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_ultron_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallbackTransactionReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallbackTransactionReply) ProtoMessage() {}

func (x *CallbackTransactionReply) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_ultron_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallbackTransactionReply.ProtoReflect.Descriptor instead.
func (*CallbackTransactionReply) Descriptor() ([]byte, []int) {
	return file_stark_api_ultron_proto_rawDescGZIP(), []int{36}
}

type CryptoWallet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                int64              `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Address           string             `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	MerchantId        int64              `protobuf:"varint,3,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty"`
	CryptoType        CryptoType         `protobuf:"varint,4,opt,name=crypto_type,json=cryptoType,proto3,enum=mcuc.stark.ultron.CryptoType" json:"crypto_type,omitempty"`
	CryptoNetworkType CryptoNetworkType  `protobuf:"varint,5,opt,name=crypto_network_type,json=cryptoNetworkType,proto3,enum=mcuc.stark.ultron.CryptoNetworkType" json:"crypto_network_type,omitempty"`
	Status            CryptoWalletStatus `protobuf:"varint,6,opt,name=status,proto3,enum=mcuc.stark.ultron.CryptoWalletStatus" json:"status,omitempty"`
}

func (x *CryptoWallet) Reset() {
	*x = CryptoWallet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_ultron_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CryptoWallet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CryptoWallet) ProtoMessage() {}

func (x *CryptoWallet) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_ultron_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CryptoWallet.ProtoReflect.Descriptor instead.
func (*CryptoWallet) Descriptor() ([]byte, []int) {
	return file_stark_api_ultron_proto_rawDescGZIP(), []int{37}
}

func (x *CryptoWallet) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CryptoWallet) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *CryptoWallet) GetMerchantId() int64 {
	if x != nil {
		return x.MerchantId
	}
	return 0
}

func (x *CryptoWallet) GetCryptoType() CryptoType {
	if x != nil {
		return x.CryptoType
	}
	return CryptoType_CRYPTO_TYPE_UNSPECIFIED
}

func (x *CryptoWallet) GetCryptoNetworkType() CryptoNetworkType {
	if x != nil {
		return x.CryptoNetworkType
	}
	return CryptoNetworkType_CRYPTO_NETWORK_TYPE_UNSPECIFIED
}

func (x *CryptoWallet) GetStatus() CryptoWalletStatus {
	if x != nil {
		return x.Status
	}
	return CryptoWalletStatus_CRYPTO_NETWORK_STATUS_UNSPECIFIED
}

type CryptoPaymentDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CryptoType        CryptoType        `protobuf:"varint,1,opt,name=crypto_type,json=cryptoType,proto3,enum=mcuc.stark.ultron.CryptoType" json:"crypto_type,omitempty"`
	CryptoNetworkType CryptoNetworkType `protobuf:"varint,2,opt,name=crypto_network_type,json=cryptoNetworkType,proto3,enum=mcuc.stark.ultron.CryptoNetworkType" json:"crypto_network_type,omitempty"`
	CryptoWalletName  CryptoWalletName  `protobuf:"varint,3,opt,name=crypto_wallet_name,json=cryptoWalletName,proto3,enum=mcuc.stark.ultron.CryptoWalletName" json:"crypto_wallet_name,omitempty"`
	ReceiverAddress   string            `protobuf:"bytes,4,opt,name=receiver_address,json=receiverAddress,proto3" json:"receiver_address,omitempty"`
	SenderAddress     string            `protobuf:"bytes,5,opt,name=sender_address,json=senderAddress,proto3" json:"sender_address,omitempty"`
	Amount            float64           `protobuf:"fixed64,6,opt,name=amount,proto3" json:"amount,omitempty"`
	ReceivedAmount    float64           `protobuf:"fixed64,7,opt,name=received_amount,json=receivedAmount,proto3" json:"received_amount,omitempty"`
	TxHash            string            `protobuf:"bytes,8,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	Fee               float64           `protobuf:"fixed64,9,opt,name=fee,proto3" json:"fee,omitempty"`
	ImageUrl          string            `protobuf:"bytes,10,opt,name=image_url,json=imageUrl,proto3" json:"image_url,omitempty"`
}

func (x *CryptoPaymentDetail) Reset() {
	*x = CryptoPaymentDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_ultron_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CryptoPaymentDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CryptoPaymentDetail) ProtoMessage() {}

func (x *CryptoPaymentDetail) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_ultron_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CryptoPaymentDetail.ProtoReflect.Descriptor instead.
func (*CryptoPaymentDetail) Descriptor() ([]byte, []int) {
	return file_stark_api_ultron_proto_rawDescGZIP(), []int{38}
}

func (x *CryptoPaymentDetail) GetCryptoType() CryptoType {
	if x != nil {
		return x.CryptoType
	}
	return CryptoType_CRYPTO_TYPE_UNSPECIFIED
}

func (x *CryptoPaymentDetail) GetCryptoNetworkType() CryptoNetworkType {
	if x != nil {
		return x.CryptoNetworkType
	}
	return CryptoNetworkType_CRYPTO_NETWORK_TYPE_UNSPECIFIED
}

func (x *CryptoPaymentDetail) GetCryptoWalletName() CryptoWalletName {
	if x != nil {
		return x.CryptoWalletName
	}
	return CryptoWalletName_CRYPTO_WALLET_NAME_UNSPECIFIED
}

func (x *CryptoPaymentDetail) GetReceiverAddress() string {
	if x != nil {
		return x.ReceiverAddress
	}
	return ""
}

func (x *CryptoPaymentDetail) GetSenderAddress() string {
	if x != nil {
		return x.SenderAddress
	}
	return ""
}

func (x *CryptoPaymentDetail) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *CryptoPaymentDetail) GetReceivedAmount() float64 {
	if x != nil {
		return x.ReceivedAmount
	}
	return 0
}

func (x *CryptoPaymentDetail) GetTxHash() string {
	if x != nil {
		return x.TxHash
	}
	return ""
}

func (x *CryptoPaymentDetail) GetFee() float64 {
	if x != nil {
		return x.Fee
	}
	return 0
}

func (x *CryptoPaymentDetail) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

type UpdateAutoTransferCryptoWithdrawRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *UpdateAutoTransferCryptoWithdrawRequest) Reset() {
	*x = UpdateAutoTransferCryptoWithdrawRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_ultron_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAutoTransferCryptoWithdrawRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAutoTransferCryptoWithdrawRequest) ProtoMessage() {}

func (x *UpdateAutoTransferCryptoWithdrawRequest) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_ultron_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAutoTransferCryptoWithdrawRequest.ProtoReflect.Descriptor instead.
func (*UpdateAutoTransferCryptoWithdrawRequest) Descriptor() ([]byte, []int) {
	return file_stark_api_ultron_proto_rawDescGZIP(), []int{39}
}

func (x *UpdateAutoTransferCryptoWithdrawRequest) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

type UpdateAutoTransferCryptoWithdrawReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateAutoTransferCryptoWithdrawReply) Reset() {
	*x = UpdateAutoTransferCryptoWithdrawReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_ultron_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAutoTransferCryptoWithdrawReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAutoTransferCryptoWithdrawReply) ProtoMessage() {}

func (x *UpdateAutoTransferCryptoWithdrawReply) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_ultron_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAutoTransferCryptoWithdrawReply.ProtoReflect.Descriptor instead.
func (*UpdateAutoTransferCryptoWithdrawReply) Descriptor() ([]byte, []int) {
	return file_stark_api_ultron_proto_rawDescGZIP(), []int{40}
}

type GetCryptoSettingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetCryptoSettingsRequest) Reset() {
	*x = GetCryptoSettingsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_ultron_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCryptoSettingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCryptoSettingsRequest) ProtoMessage() {}

func (x *GetCryptoSettingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_ultron_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCryptoSettingsRequest.ProtoReflect.Descriptor instead.
func (*GetCryptoSettingsRequest) Descriptor() ([]byte, []int) {
	return file_stark_api_ultron_proto_rawDescGZIP(), []int{41}
}

type GetCryptoSettingsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AutoTransferWithdrawCrypto bool `protobuf:"varint,1,opt,name=auto_transfer_withdraw_crypto,json=autoTransferWithdrawCrypto,proto3" json:"auto_transfer_withdraw_crypto,omitempty"`
}

func (x *GetCryptoSettingsReply) Reset() {
	*x = GetCryptoSettingsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_ultron_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCryptoSettingsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCryptoSettingsReply) ProtoMessage() {}

func (x *GetCryptoSettingsReply) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_ultron_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCryptoSettingsReply.ProtoReflect.Descriptor instead.
func (*GetCryptoSettingsReply) Descriptor() ([]byte, []int) {
	return file_stark_api_ultron_proto_rawDescGZIP(), []int{42}
}

func (x *GetCryptoSettingsReply) GetAutoTransferWithdrawCrypto() bool {
	if x != nil {
		return x.AutoTransferWithdrawCrypto
	}
	return false
}

var File_stark_api_ultron_proto protoreflect.FileDescriptor

var file_stark_api_ultron_proto_rawDesc = []byte{
	0x0a, 0x16, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x75, 0x6c, 0x74, 0x72,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73,
	0x74, 0x61, 0x72, 0x6b, 0x2e, 0x75, 0x6c, 0x74, 0x72, 0x6f, 0x6e, 0x22, 0x8d, 0x03, 0x0a, 0x1b,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x57, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x51, 0x0a, 0x12, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73,
	0x74, 0x61, 0x72, 0x6b, 0x2e, 0x75, 0x6c, 0x74, 0x72, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x79, 0x70,
	0x74, 0x6f, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x10, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x6f, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3e, 0x0a, 0x0b, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x6f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e,
	0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x75, 0x6c, 0x74, 0x72, 0x6f,
	0x6e, 0x2e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x12, 0x54, 0x0a, 0x13, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x6f, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61,
	0x72, 0x6b, 0x2e, 0x75, 0x6c, 0x74, 0x72, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x11, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x6f, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x3a, 0x0a, 0x19, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x57, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x50, 0x0a, 0x1b, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x22, 0x1b, 0x0a, 0x19, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x4d, 0x0a, 0x18, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x54, 0x6f, 0x70, 0x55, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x6f, 0x74, 0x65, 0x22, 0x18, 0x0a, 0x16, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x43,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x54, 0x6f, 0x70, 0x55, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x51, 0x0a, 0x1c, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f,
	0x74, 0x65, 0x22, 0x1c, 0x0a, 0x1a, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x43, 0x72, 0x79,
	0x70, 0x74, 0x6f, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0xd7, 0x01, 0x0a, 0x1b, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x43, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x25, 0x0a, 0x0e, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x66, 0x65, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x74, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x22, 0x1b, 0x0a, 0x19, 0x53, 0x75,
	0x62, 0x6d, 0x69, 0x74, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x7a, 0x0a, 0x1b, 0x52, 0x65, 0x6a, 0x65, 0x63,
	0x74, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x73, 0x5f,
	0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x43,
	0x61, 0x6c, 0x6c, 0x22, 0x1b, 0x0a, 0x19, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x72, 0x79,
	0x70, 0x74, 0x6f, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x4e, 0x0a, 0x19, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x43, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x54, 0x6f, 0x70, 0x55, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x6f, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65,
	0x22, 0x19, 0x0a, 0x17, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x43, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x54, 0x6f, 0x70, 0x55, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x77, 0x0a, 0x18, 0x52,
	0x65, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x54, 0x6f, 0x70, 0x55, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x73,
	0x5f, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x43, 0x61, 0x6c, 0x6c, 0x22, 0x18, 0x0a, 0x16, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x72,
	0x79, 0x70, 0x74, 0x6f, 0x54, 0x6f, 0x70, 0x55, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0xd8,
	0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x0b, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x6f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d,
	0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x75, 0x6c, 0x74, 0x72,
	0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x12, 0x54, 0x0a, 0x13, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x6f, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74,
	0x61, 0x72, 0x6b, 0x2e, 0x75, 0x6c, 0x74, 0x72, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x11, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x6f, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x28, 0x0a, 0x10, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x30, 0x0a, 0x14, 0x47, 0x65, 0x74,
	0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xb0, 0x01, 0x0a, 0x18,
	0x4c, 0x6f, 0x61, 0x64, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x0b, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x6f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e,
	0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x75, 0x6c, 0x74, 0x72, 0x6f,
	0x6e, 0x2e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x12, 0x54, 0x0a, 0x13, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x6f, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61,
	0x72, 0x6b, 0x2e, 0x75, 0x6c, 0x74, 0x72, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x11, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x6f, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x22, 0x2c,
	0x0a, 0x16, 0x4c, 0x6f, 0x61, 0x64, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x59, 0x0a, 0x1c,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x07,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x75, 0x6c, 0x74, 0x72, 0x6f,
	0x6e, 0x2e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x07,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0xb2, 0x01, 0x0a, 0x1a, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x44, 0x0a, 0x0d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x75, 0x6c, 0x74, 0x72, 0x6f,
	0x6e, 0x2e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x0c,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x4e, 0x0a, 0x12,
	0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e,
	0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x75, 0x6c, 0x74, 0x72, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x79,
	0x70, 0x74, 0x6f, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x11, 0x64, 0x75, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0x57, 0x0a, 0x1a,
	0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x07, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x63,
	0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x75, 0x6c, 0x74, 0x72, 0x6f, 0x6e, 0x2e,
	0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x07, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x73, 0x22, 0x55, 0x0a, 0x18, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x43,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x39, 0x0a, 0x07, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e,
	0x75, 0x6c, 0x74, 0x72, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x52, 0x07, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x22, 0xe0, 0x02, 0x0a,
	0x18, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x57, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12,
	0x40, 0x0a, 0x0c, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61,
	0x72, 0x6b, 0x2e, 0x75, 0x6c, 0x74, 0x72, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x12, 0x56, 0x0a, 0x14, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x5f, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0e, 0x32,
	0x24, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x75, 0x6c, 0x74,
	0x72, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x12, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x08, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6d, 0x63,
	0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x75, 0x6c, 0x74, 0x72, 0x6f, 0x6e, 0x2e,
	0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c,
	0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x22,
	0x8c, 0x01, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x39, 0x0a, 0x07, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x63,
	0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x75, 0x6c, 0x74, 0x72, 0x6f, 0x6e, 0x2e,
	0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x07, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x67, 0x65, 0x22, 0x65,
	0x0a, 0x1f, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x48, 0x6f, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x42, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e,
	0x75, 0x6c, 0x74, 0x72, 0x6f, 0x6e, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x72, 0x79,
	0x70, 0x74, 0x6f, 0x48, 0x6f, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x07, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0xc7, 0x01, 0x0a, 0x1d, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x48, 0x6f, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x4d, 0x0a, 0x0d, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x75, 0x6c, 0x74, 0x72,
	0x6f, 0x6e, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x48,
	0x6f, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x0c, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x57, 0x0a, 0x12, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e,
	0x75, 0x6c, 0x74, 0x72, 0x6f, 0x6e, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x72, 0x79,
	0x70, 0x74, 0x6f, 0x48, 0x6f, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x11, 0x64, 0x75,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22,
	0x63, 0x0a, 0x1d, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x48,
	0x6f, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x42, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x75,
	0x6c, 0x74, 0x72, 0x6f, 0x6e, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x72, 0x79, 0x70,
	0x74, 0x6f, 0x48, 0x6f, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x07, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x22, 0x61, 0x0a, 0x1b, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x72,
	0x79, 0x70, 0x74, 0x6f, 0x48, 0x6f, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x42, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72,
	0x6b, 0x2e, 0x75, 0x6c, 0x74, 0x72, 0x6f, 0x6e, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x48, 0x6f, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x07,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0xe3, 0x02, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x48, 0x6f, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x40, 0x0a,
	0x0c, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b,
	0x2e, 0x75, 0x6c, 0x74, 0x72, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0b, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12,
	0x56, 0x0a, 0x14, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x24, 0x2e,
	0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x75, 0x6c, 0x74, 0x72, 0x6f,
	0x6e, 0x2e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x12, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6d, 0x63, 0x75, 0x63,
	0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x75, 0x6c, 0x74, 0x72, 0x6f, 0x6e, 0x2e, 0x43, 0x72,
	0x79, 0x70, 0x74, 0x6f, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x22, 0x98, 0x01,
	0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x48, 0x6f, 0x74, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x42, 0x0a, 0x07, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6d,
	0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x75, 0x6c, 0x74, 0x72, 0x6f, 0x6e,
	0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x48, 0x6f, 0x74,
	0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x67, 0x65, 0x22, 0xf1, 0x01, 0x0a, 0x20, 0x47, 0x65, 0x74,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x48, 0x6f, 0x74, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a,
	0x0b, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e,
	0x75, 0x6c, 0x74, 0x72, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0a, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x12, 0x54, 0x0a,
	0x13, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6d, 0x63, 0x75,
	0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x75, 0x6c, 0x74, 0x72, 0x6f, 0x6e, 0x2e, 0x43,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x11, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x64, 0x0a, 0x1e,
	0x47, 0x65, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x48,
	0x6f, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x42,
	0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x75, 0x6c, 0x74,
	0x72, 0x6f, 0x6e, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x48, 0x6f, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x22, 0xf9, 0x02, 0x0a, 0x15, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x72, 0x79,
	0x70, 0x74, 0x6f, 0x48, 0x6f, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x0b, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6d,
	0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x75, 0x6c, 0x74, 0x72, 0x6f, 0x6e,
	0x2e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x12, 0x54, 0x0a, 0x13, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72,
	0x6b, 0x2e, 0x75, 0x6c, 0x74, 0x72, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x11, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x6f, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x40, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x6d,
	0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x75, 0x6c, 0x74, 0x72, 0x6f, 0x6e,
	0x2e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x48, 0x6f, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xcc,
	0x03, 0x0a, 0x1a, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a,
	0x08, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x5f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x61, 0x70, 0x70, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x1c, 0x0a,
	0x09, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x74, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x15,
	0x0a, 0x06, 0x62, 0x63, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05,
	0x62, 0x63, 0x46, 0x65, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x62, 0x63, 0x5f, 0x66, 0x65, 0x65, 0x5f,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x62, 0x63, 0x46, 0x65, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22, 0x1a, 0x0a,
	0x18, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0xae, 0x02, 0x0a, 0x0c, 0x43, 0x72,
	0x79, 0x70, 0x74, 0x6f, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x0b, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6d, 0x63, 0x75,
	0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x75, 0x6c, 0x74, 0x72, 0x6f, 0x6e, 0x2e, 0x43,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x54, 0x79, 0x70, 0x65, 0x12, 0x54, 0x0a, 0x13, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x5f,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e,
	0x75, 0x6c, 0x74, 0x72, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x11, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6d, 0x63,
	0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x75, 0x6c, 0x74, 0x72, 0x6f, 0x6e, 0x2e,
	0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xd9, 0x03, 0x0a, 0x13, 0x43,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x12, 0x3e, 0x0a, 0x0b, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73,
	0x74, 0x61, 0x72, 0x6b, 0x2e, 0x75, 0x6c, 0x74, 0x72, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x79, 0x70,
	0x74, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x54, 0x0a, 0x13, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x5f, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x24, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x75, 0x6c, 0x74,
	0x72, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x11, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x51, 0x0a, 0x12, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x6f, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72,
	0x6b, 0x2e, 0x75, 0x6c, 0x74, 0x72, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x10, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x17,
	0x0a, 0x07, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x74, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x66, 0x65, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x22, 0x43, 0x0a, 0x27, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x41, 0x75, 0x74, 0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x72, 0x79, 0x70,
	0x74, 0x6f, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x27, 0x0a, 0x25, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x1a, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x43, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x5b, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x41, 0x0a, 0x1d, 0x61, 0x75,
	0x74, 0x6f, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x77, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x5f, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x1a, 0x61, 0x75, 0x74, 0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x57,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2a, 0x33, 0x0a,
	0x0a, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x43,
	0x52, 0x59, 0x50, 0x54, 0x4f, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x55, 0x53, 0x44, 0x54,
	0x10, 0x01, 0x2a, 0x59, 0x0a, 0x11, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x1f, 0x43, 0x52, 0x59, 0x50, 0x54,
	0x4f, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05,
	0x45, 0x52, 0x43, 0x32, 0x30, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x45, 0x50, 0x32, 0x30,
	0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x52, 0x43, 0x32, 0x30, 0x10, 0x03, 0x2a, 0x60, 0x0a,
	0x12, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x21, 0x43, 0x52, 0x59, 0x50, 0x54, 0x4f, 0x5f, 0x4e, 0x45,
	0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x56,
	0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x55, 0x53, 0x45,
	0x44, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x41, 0x4e, 0x4e, 0x45, 0x44, 0x10, 0x03, 0x2a,
	0x8e, 0x01, 0x0a, 0x15, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x48, 0x6f, 0x74, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28, 0x0a, 0x24, 0x43, 0x52, 0x59,
	0x50, 0x54, 0x4f, 0x5f, 0x48, 0x4f, 0x54, 0x5f, 0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x23, 0x0a, 0x1f, 0x43, 0x52, 0x59, 0x50, 0x54, 0x4f, 0x5f, 0x48, 0x4f,
	0x54, 0x5f, 0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x26, 0x0a, 0x22, 0x43, 0x52, 0x59, 0x50,
	0x54, 0x4f, 0x5f, 0x48, 0x4f, 0x54, 0x5f, 0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02,
	0x2a, 0x3f, 0x0a, 0x10, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x1e, 0x43, 0x52, 0x59, 0x50, 0x54, 0x4f, 0x5f, 0x57,
	0x41, 0x4c, 0x4c, 0x45, 0x54, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x55, 0x4d, 0x4f, 0x10,
	0x01, 0x32, 0xc6, 0x12, 0x0a, 0x06, 0x55, 0x6c, 0x74, 0x72, 0x6f, 0x6e, 0x12, 0x74, 0x0a, 0x14,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x57, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x12, 0x2e, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72,
	0x6b, 0x2e, 0x75, 0x6c, 0x74, 0x72, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72,
	0x6b, 0x2e, 0x75, 0x6c, 0x74, 0x72, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x74, 0x0a, 0x14, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x43, 0x72, 0x79, 0x70,
	0x74, 0x6f, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x12, 0x2e, 0x2e, 0x6d, 0x63, 0x75,
	0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x75, 0x6c, 0x74, 0x72, 0x6f, 0x6e, 0x2e, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x57, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6d, 0x63, 0x75,
	0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x75, 0x6c, 0x74, 0x72, 0x6f, 0x6e, 0x2e, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x57, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x77, 0x0a, 0x15, 0x41, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x65, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x12, 0x2f, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x75,
	0x6c, 0x74, 0x72, 0x6f, 0x6e, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x43, 0x72, 0x79,
	0x70, 0x74, 0x6f, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e,
	0x75, 0x6c, 0x74, 0x72, 0x6f, 0x6e, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x43, 0x72,
	0x79, 0x70, 0x74, 0x6f, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x74, 0x0a, 0x14, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x43, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x12, 0x2e, 0x2e, 0x6d, 0x63, 0x75, 0x63,
	0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x75, 0x6c, 0x74, 0x72, 0x6f, 0x6e, 0x2e, 0x53, 0x75,
	0x62, 0x6d, 0x69, 0x74, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6d, 0x63, 0x75, 0x63,
	0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x75, 0x6c, 0x74, 0x72, 0x6f, 0x6e, 0x2e, 0x53, 0x75,
	0x62, 0x6d, 0x69, 0x74, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x74, 0x0a, 0x14, 0x52, 0x65, 0x6a, 0x65, 0x63,
	0x74, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x12,
	0x2e, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x75, 0x6c, 0x74,
	0x72, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2c, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x75, 0x6c, 0x74,
	0x72, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x6b, 0x0a,
	0x11, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x54, 0x6f, 0x70,
	0x55, 0x70, 0x12, 0x2b, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e,
	0x75, 0x6c, 0x74, 0x72, 0x6f, 0x6e, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x43, 0x72, 0x79,
	0x70, 0x74, 0x6f, 0x54, 0x6f, 0x70, 0x55, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x29, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x75, 0x6c, 0x74,
	0x72, 0x6f, 0x6e, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x54, 0x6f, 0x70, 0x55, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x6e, 0x0a, 0x12, 0x41, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x65, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x54, 0x6f, 0x70, 0x55, 0x70,
	0x12, 0x2c, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x75, 0x6c,
	0x74, 0x72, 0x6f, 0x6e, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x43, 0x72, 0x79, 0x70,
	0x74, 0x6f, 0x54, 0x6f, 0x70, 0x55, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a,
	0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x75, 0x6c, 0x74, 0x72,
	0x6f, 0x6e, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x54, 0x6f, 0x70, 0x55, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x6b, 0x0a, 0x11, 0x52, 0x65,
	0x6a, 0x65, 0x63, 0x74, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x54, 0x6f, 0x70, 0x55, 0x70, 0x12,
	0x2b, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x75, 0x6c, 0x74,
	0x72, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x54, 0x6f, 0x70, 0x55, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6d,
	0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x75, 0x6c, 0x74, 0x72, 0x6f, 0x6e,
	0x2e, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x54, 0x6f, 0x70,
	0x55, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x65, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x72,
	0x79, 0x70, 0x74, 0x6f, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x29, 0x2e, 0x6d, 0x63, 0x75,
	0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x75, 0x6c, 0x74, 0x72, 0x6f, 0x6e, 0x2e, 0x47,
	0x65, 0x74, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61,
	0x72, 0x6b, 0x2e, 0x75, 0x6c, 0x74, 0x72, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x72, 0x79,
	0x70, 0x74, 0x6f, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x77,
	0x0a, 0x15, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x12, 0x2f, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73,
	0x74, 0x61, 0x72, 0x6b, 0x2e, 0x75, 0x6c, 0x74, 0x72, 0x6f, 0x6e, 0x2e, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e,
	0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x75, 0x6c, 0x74, 0x72, 0x6f, 0x6e, 0x2e, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x57, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x71, 0x0a, 0x13, 0x49, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x12, 0x2d,
	0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x75, 0x6c, 0x74, 0x72,
	0x6f, 0x6e, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e,
	0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x75, 0x6c, 0x74, 0x72, 0x6f,
	0x6e, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x6b, 0x0a, 0x11, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x12,
	0x2b, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x75, 0x6c, 0x74,
	0x72, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6d,
	0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x75, 0x6c, 0x74, 0x72, 0x6f, 0x6e,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x57, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x80, 0x01, 0x0a, 0x18, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x48, 0x6f, 0x74, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x73, 0x12, 0x32, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72,
	0x6b, 0x2e, 0x75, 0x6c, 0x74, 0x72, 0x6f, 0x6e, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x48, 0x6f, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e,
	0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x75, 0x6c, 0x74, 0x72, 0x6f, 0x6e, 0x2e, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x48, 0x6f, 0x74, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x7a, 0x0a, 0x16, 0x49, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x48, 0x6f, 0x74, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x73, 0x12, 0x30, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72,
	0x6b, 0x2e, 0x75, 0x6c, 0x74, 0x72, 0x6f, 0x6e, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x43,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x48, 0x6f, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74,
	0x61, 0x72, 0x6b, 0x2e, 0x75, 0x6c, 0x74, 0x72, 0x6f, 0x6e, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x48, 0x6f, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x74, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x72,
	0x79, 0x70, 0x74, 0x6f, 0x48, 0x6f, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x12, 0x2e,
	0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x75, 0x6c, 0x74, 0x72,
	0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x48, 0x6f, 0x74,
	0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c,
	0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x75, 0x6c, 0x74, 0x72,
	0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x48, 0x6f, 0x74,
	0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x83, 0x01, 0x0a,
	0x19, 0x47, 0x65, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x48, 0x6f, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x12, 0x33, 0x2e, 0x6d, 0x63, 0x75,
	0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x75, 0x6c, 0x74, 0x72, 0x6f, 0x6e, 0x2e, 0x47,
	0x65, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x48, 0x6f,
	0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x31, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x75, 0x6c, 0x74,
	0x72, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x72, 0x79,
	0x70, 0x74, 0x6f, 0x48, 0x6f, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x6b, 0x0a, 0x11, 0x4c, 0x6f, 0x61, 0x64, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x12, 0x2b, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73,
	0x74, 0x61, 0x72, 0x6b, 0x2e, 0x75, 0x6c, 0x74, 0x72, 0x6f, 0x6e, 0x2e, 0x4c, 0x6f, 0x61, 0x64,
	0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72,
	0x6b, 0x2e, 0x75, 0x6c, 0x74, 0x72, 0x6f, 0x6e, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x43, 0x72, 0x79,
	0x70, 0x74, 0x6f, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x98, 0x01, 0x0a, 0x20, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x57, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x12, 0x3a, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72,
	0x6b, 0x2e, 0x75, 0x6c, 0x74, 0x72, 0x6f, 0x6e, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41,
	0x75, 0x74, 0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x38, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x75, 0x6c,
	0x74, 0x72, 0x6f, 0x6e, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x57, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x6b, 0x0a, 0x11, 0x47, 0x65,
	0x74, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12,
	0x2b, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x75, 0x6c, 0x74,
	0x72, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6d,
	0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x75, 0x6c, 0x74, 0x72, 0x6f, 0x6e,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x71, 0x0a, 0x13, 0x43, 0x61, 0x6c, 0x6c, 0x62,
	0x61, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d,
	0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x75, 0x6c, 0x74, 0x72,
	0x6f, 0x6e, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e,
	0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x75, 0x6c, 0x74, 0x72, 0x6f,
	0x6e, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x42, 0x36, 0x5a, 0x34, 0x67, 0x69,
	0x74, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x63, 0x75, 0x63, 0x2f, 0x6d, 0x6f,
	0x6e, 0x6f, 0x72, 0x65, 0x70, 0x6f, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x73,
	0x74, 0x61, 0x72, 0x6b, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x3b, 0x73, 0x74, 0x61,
	0x72, 0x6b, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_stark_api_ultron_proto_rawDescOnce sync.Once
	file_stark_api_ultron_proto_rawDescData = file_stark_api_ultron_proto_rawDesc
)

func file_stark_api_ultron_proto_rawDescGZIP() []byte {
	file_stark_api_ultron_proto_rawDescOnce.Do(func() {
		file_stark_api_ultron_proto_rawDescData = protoimpl.X.CompressGZIP(file_stark_api_ultron_proto_rawDescData)
	})
	return file_stark_api_ultron_proto_rawDescData
}

var file_stark_api_ultron_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_stark_api_ultron_proto_msgTypes = make([]protoimpl.MessageInfo, 43)
var file_stark_api_ultron_proto_goTypes = []interface{}{
	(CryptoType)(0),                                 // 0: mcuc.stark.ultron.CryptoType
	(CryptoNetworkType)(0),                          // 1: mcuc.stark.ultron.CryptoNetworkType
	(CryptoWalletStatus)(0),                         // 2: mcuc.stark.ultron.CryptoWalletStatus
	(CryptoHotWalletStatus)(0),                      // 3: mcuc.stark.ultron.CryptoHotWalletStatus
	(CryptoWalletName)(0),                           // 4: mcuc.stark.ultron.CryptoWalletName
	(*CreateCryptoWithdrawRequest)(nil),             // 5: mcuc.stark.ultron.CreateCryptoWithdrawRequest
	(*CreateCryptoWithdrawReply)(nil),               // 6: mcuc.stark.ultron.CreateCryptoWithdrawReply
	(*CancelCryptoWithdrawRequest)(nil),             // 7: mcuc.stark.ultron.CancelCryptoWithdrawRequest
	(*CancelCryptoWithdrawReply)(nil),               // 8: mcuc.stark.ultron.CancelCryptoWithdrawReply
	(*CancelCryptoTopUpRequest)(nil),                // 9: mcuc.stark.ultron.CancelCryptoTopUpRequest
	(*CancelCryptoTopUpReply)(nil),                  // 10: mcuc.stark.ultron.CancelCryptoTopUpReply
	(*ApproveCryptoWithdrawRequest)(nil),            // 11: mcuc.stark.ultron.ApproveCryptoWithdrawRequest
	(*ApproveCryptoWithdrawReply)(nil),              // 12: mcuc.stark.ultron.ApproveCryptoWithdrawReply
	(*SubmitCryptoWithdrawRequest)(nil),             // 13: mcuc.stark.ultron.SubmitCryptoWithdrawRequest
	(*SubmitCryptoWithdrawReply)(nil),               // 14: mcuc.stark.ultron.SubmitCryptoWithdrawReply
	(*RejectCryptoWithdrawRequest)(nil),             // 15: mcuc.stark.ultron.RejectCryptoWithdrawRequest
	(*RejectCryptoWithdrawReply)(nil),               // 16: mcuc.stark.ultron.RejectCryptoWithdrawReply
	(*ApproveCryptoTopUpRequest)(nil),               // 17: mcuc.stark.ultron.ApproveCryptoTopUpRequest
	(*ApproveCryptoTopUpReply)(nil),                 // 18: mcuc.stark.ultron.ApproveCryptoTopUpReply
	(*RejectCryptoTopUpRequest)(nil),                // 19: mcuc.stark.ultron.RejectCryptoTopUpRequest
	(*RejectCryptoTopUpReply)(nil),                  // 20: mcuc.stark.ultron.RejectCryptoTopUpReply
	(*GetCryptoWalletRequest)(nil),                  // 21: mcuc.stark.ultron.GetCryptoWalletRequest
	(*GetCryptoWalletReply)(nil),                    // 22: mcuc.stark.ultron.GetCryptoWalletReply
	(*LoadCryptoWalletsRequest)(nil),                // 23: mcuc.stark.ultron.LoadCryptoWalletsRequest
	(*LoadCryptoWalletsReply)(nil),                  // 24: mcuc.stark.ultron.LoadCryptoWalletsReply
	(*ValidateCryptoWalletsRequest)(nil),            // 25: mcuc.stark.ultron.ValidateCryptoWalletsRequest
	(*ValidateCryptoWalletsReply)(nil),              // 26: mcuc.stark.ultron.ValidateCryptoWalletsReply
	(*ImportCryptoWalletsRequest)(nil),              // 27: mcuc.stark.ultron.ImportCryptoWalletsRequest
	(*ImportCryptoWalletsReply)(nil),                // 28: mcuc.stark.ultron.ImportCryptoWalletsReply
	(*ListCryptoWalletsRequest)(nil),                // 29: mcuc.stark.ultron.ListCryptoWalletsRequest
	(*ListCryptoWalletsReply)(nil),                  // 30: mcuc.stark.ultron.ListCryptoWalletsReply
	(*ValidateCryptoHotWalletsRequest)(nil),         // 31: mcuc.stark.ultron.ValidateCryptoHotWalletsRequest
	(*ValidateCryptoHotWalletsReply)(nil),           // 32: mcuc.stark.ultron.ValidateCryptoHotWalletsReply
	(*ImportCryptoHotWalletsRequest)(nil),           // 33: mcuc.stark.ultron.ImportCryptoHotWalletsRequest
	(*ImportCryptoHotWalletsReply)(nil),             // 34: mcuc.stark.ultron.ImportCryptoHotWalletsReply
	(*ListCryptoHotWalletsRequest)(nil),             // 35: mcuc.stark.ultron.ListCryptoHotWalletsRequest
	(*ListCryptoHotWalletsReply)(nil),               // 36: mcuc.stark.ultron.ListCryptoHotWalletsReply
	(*GetSystemCryptoHotWalletsRequest)(nil),        // 37: mcuc.stark.ultron.GetSystemCryptoHotWalletsRequest
	(*GetSystemCryptoHotWalletsReply)(nil),          // 38: mcuc.stark.ultron.GetSystemCryptoHotWalletsReply
	(*SystemCryptoHotWallet)(nil),                   // 39: mcuc.stark.ultron.SystemCryptoHotWallet
	(*CallbackTransactionRequest)(nil),              // 40: mcuc.stark.ultron.CallbackTransactionRequest
	(*CallbackTransactionReply)(nil),                // 41: mcuc.stark.ultron.CallbackTransactionReply
	(*CryptoWallet)(nil),                            // 42: mcuc.stark.ultron.CryptoWallet
	(*CryptoPaymentDetail)(nil),                     // 43: mcuc.stark.ultron.CryptoPaymentDetail
	(*UpdateAutoTransferCryptoWithdrawRequest)(nil), // 44: mcuc.stark.ultron.UpdateAutoTransferCryptoWithdrawRequest
	(*UpdateAutoTransferCryptoWithdrawReply)(nil),   // 45: mcuc.stark.ultron.UpdateAutoTransferCryptoWithdrawReply
	(*GetCryptoSettingsRequest)(nil),                // 46: mcuc.stark.ultron.GetCryptoSettingsRequest
	(*GetCryptoSettingsReply)(nil),                  // 47: mcuc.stark.ultron.GetCryptoSettingsReply
}
var file_stark_api_ultron_proto_depIdxs = []int32{
	4,  // 0: mcuc.stark.ultron.CreateCryptoWithdrawRequest.crypto_wallet_name:type_name -> mcuc.stark.ultron.CryptoWalletName
	0,  // 1: mcuc.stark.ultron.CreateCryptoWithdrawRequest.crypto_type:type_name -> mcuc.stark.ultron.CryptoType
	1,  // 2: mcuc.stark.ultron.CreateCryptoWithdrawRequest.crypto_network_type:type_name -> mcuc.stark.ultron.CryptoNetworkType
	0,  // 3: mcuc.stark.ultron.GetCryptoWalletRequest.crypto_type:type_name -> mcuc.stark.ultron.CryptoType
	1,  // 4: mcuc.stark.ultron.GetCryptoWalletRequest.crypto_network_type:type_name -> mcuc.stark.ultron.CryptoNetworkType
	0,  // 5: mcuc.stark.ultron.LoadCryptoWalletsRequest.crypto_type:type_name -> mcuc.stark.ultron.CryptoType
	1,  // 6: mcuc.stark.ultron.LoadCryptoWalletsRequest.crypto_network_type:type_name -> mcuc.stark.ultron.CryptoNetworkType
	42, // 7: mcuc.stark.ultron.ValidateCryptoWalletsRequest.records:type_name -> mcuc.stark.ultron.CryptoWallet
	42, // 8: mcuc.stark.ultron.ValidateCryptoWalletsReply.valid_records:type_name -> mcuc.stark.ultron.CryptoWallet
	42, // 9: mcuc.stark.ultron.ValidateCryptoWalletsReply.duplicated_records:type_name -> mcuc.stark.ultron.CryptoWallet
	42, // 10: mcuc.stark.ultron.ImportCryptoWalletsRequest.wallets:type_name -> mcuc.stark.ultron.CryptoWallet
	42, // 11: mcuc.stark.ultron.ImportCryptoWalletsReply.wallets:type_name -> mcuc.stark.ultron.CryptoWallet
	0,  // 12: mcuc.stark.ultron.ListCryptoWalletsRequest.crypto_types:type_name -> mcuc.stark.ultron.CryptoType
	1,  // 13: mcuc.stark.ultron.ListCryptoWalletsRequest.crypto_network_types:type_name -> mcuc.stark.ultron.CryptoNetworkType
	2,  // 14: mcuc.stark.ultron.ListCryptoWalletsRequest.statuses:type_name -> mcuc.stark.ultron.CryptoWalletStatus
	42, // 15: mcuc.stark.ultron.ListCryptoWalletsReply.records:type_name -> mcuc.stark.ultron.CryptoWallet
	39, // 16: mcuc.stark.ultron.ValidateCryptoHotWalletsRequest.records:type_name -> mcuc.stark.ultron.SystemCryptoHotWallet
	39, // 17: mcuc.stark.ultron.ValidateCryptoHotWalletsReply.valid_records:type_name -> mcuc.stark.ultron.SystemCryptoHotWallet
	39, // 18: mcuc.stark.ultron.ValidateCryptoHotWalletsReply.duplicated_records:type_name -> mcuc.stark.ultron.SystemCryptoHotWallet
	39, // 19: mcuc.stark.ultron.ImportCryptoHotWalletsRequest.records:type_name -> mcuc.stark.ultron.SystemCryptoHotWallet
	39, // 20: mcuc.stark.ultron.ImportCryptoHotWalletsReply.records:type_name -> mcuc.stark.ultron.SystemCryptoHotWallet
	0,  // 21: mcuc.stark.ultron.ListCryptoHotWalletsRequest.crypto_types:type_name -> mcuc.stark.ultron.CryptoType
	1,  // 22: mcuc.stark.ultron.ListCryptoHotWalletsRequest.crypto_network_types:type_name -> mcuc.stark.ultron.CryptoNetworkType
	2,  // 23: mcuc.stark.ultron.ListCryptoHotWalletsRequest.statuses:type_name -> mcuc.stark.ultron.CryptoWalletStatus
	39, // 24: mcuc.stark.ultron.ListCryptoHotWalletsReply.records:type_name -> mcuc.stark.ultron.SystemCryptoHotWallet
	0,  // 25: mcuc.stark.ultron.GetSystemCryptoHotWalletsRequest.crypto_type:type_name -> mcuc.stark.ultron.CryptoType
	1,  // 26: mcuc.stark.ultron.GetSystemCryptoHotWalletsRequest.crypto_network_type:type_name -> mcuc.stark.ultron.CryptoNetworkType
	39, // 27: mcuc.stark.ultron.GetSystemCryptoHotWalletsReply.records:type_name -> mcuc.stark.ultron.SystemCryptoHotWallet
	0,  // 28: mcuc.stark.ultron.SystemCryptoHotWallet.crypto_type:type_name -> mcuc.stark.ultron.CryptoType
	1,  // 29: mcuc.stark.ultron.SystemCryptoHotWallet.crypto_network_type:type_name -> mcuc.stark.ultron.CryptoNetworkType
	3,  // 30: mcuc.stark.ultron.SystemCryptoHotWallet.status:type_name -> mcuc.stark.ultron.CryptoHotWalletStatus
	0,  // 31: mcuc.stark.ultron.CryptoWallet.crypto_type:type_name -> mcuc.stark.ultron.CryptoType
	1,  // 32: mcuc.stark.ultron.CryptoWallet.crypto_network_type:type_name -> mcuc.stark.ultron.CryptoNetworkType
	2,  // 33: mcuc.stark.ultron.CryptoWallet.status:type_name -> mcuc.stark.ultron.CryptoWalletStatus
	0,  // 34: mcuc.stark.ultron.CryptoPaymentDetail.crypto_type:type_name -> mcuc.stark.ultron.CryptoType
	1,  // 35: mcuc.stark.ultron.CryptoPaymentDetail.crypto_network_type:type_name -> mcuc.stark.ultron.CryptoNetworkType
	4,  // 36: mcuc.stark.ultron.CryptoPaymentDetail.crypto_wallet_name:type_name -> mcuc.stark.ultron.CryptoWalletName
	5,  // 37: mcuc.stark.ultron.Ultron.CreateCryptoWithdraw:input_type -> mcuc.stark.ultron.CreateCryptoWithdrawRequest
	7,  // 38: mcuc.stark.ultron.Ultron.CancelCryptoWithdraw:input_type -> mcuc.stark.ultron.CancelCryptoWithdrawRequest
	11, // 39: mcuc.stark.ultron.Ultron.ApproveCryptoWithdraw:input_type -> mcuc.stark.ultron.ApproveCryptoWithdrawRequest
	13, // 40: mcuc.stark.ultron.Ultron.SubmitCryptoWithdraw:input_type -> mcuc.stark.ultron.SubmitCryptoWithdrawRequest
	15, // 41: mcuc.stark.ultron.Ultron.RejectCryptoWithdraw:input_type -> mcuc.stark.ultron.RejectCryptoWithdrawRequest
	9,  // 42: mcuc.stark.ultron.Ultron.CancelCryptoTopUp:input_type -> mcuc.stark.ultron.CancelCryptoTopUpRequest
	17, // 43: mcuc.stark.ultron.Ultron.ApproveCryptoTopUp:input_type -> mcuc.stark.ultron.ApproveCryptoTopUpRequest
	19, // 44: mcuc.stark.ultron.Ultron.RejectCryptoTopUp:input_type -> mcuc.stark.ultron.RejectCryptoTopUpRequest
	21, // 45: mcuc.stark.ultron.Ultron.GetCryptoWallet:input_type -> mcuc.stark.ultron.GetCryptoWalletRequest
	25, // 46: mcuc.stark.ultron.Ultron.ValidateCryptoWallets:input_type -> mcuc.stark.ultron.ValidateCryptoWalletsRequest
	27, // 47: mcuc.stark.ultron.Ultron.ImportCryptoWallets:input_type -> mcuc.stark.ultron.ImportCryptoWalletsRequest
	29, // 48: mcuc.stark.ultron.Ultron.ListCryptoWallets:input_type -> mcuc.stark.ultron.ListCryptoWalletsRequest
	31, // 49: mcuc.stark.ultron.Ultron.ValidateCryptoHotWallets:input_type -> mcuc.stark.ultron.ValidateCryptoHotWalletsRequest
	33, // 50: mcuc.stark.ultron.Ultron.ImportCryptoHotWallets:input_type -> mcuc.stark.ultron.ImportCryptoHotWalletsRequest
	35, // 51: mcuc.stark.ultron.Ultron.ListCryptoHotWallets:input_type -> mcuc.stark.ultron.ListCryptoHotWalletsRequest
	37, // 52: mcuc.stark.ultron.Ultron.GetSystemCryptoHotWallets:input_type -> mcuc.stark.ultron.GetSystemCryptoHotWalletsRequest
	23, // 53: mcuc.stark.ultron.Ultron.LoadCryptoWallets:input_type -> mcuc.stark.ultron.LoadCryptoWalletsRequest
	44, // 54: mcuc.stark.ultron.Ultron.UpdateAutoTransferCryptoWithdraw:input_type -> mcuc.stark.ultron.UpdateAutoTransferCryptoWithdrawRequest
	46, // 55: mcuc.stark.ultron.Ultron.GetCryptoSettings:input_type -> mcuc.stark.ultron.GetCryptoSettingsRequest
	40, // 56: mcuc.stark.ultron.Ultron.CallbackTransaction:input_type -> mcuc.stark.ultron.CallbackTransactionRequest
	6,  // 57: mcuc.stark.ultron.Ultron.CreateCryptoWithdraw:output_type -> mcuc.stark.ultron.CreateCryptoWithdrawReply
	8,  // 58: mcuc.stark.ultron.Ultron.CancelCryptoWithdraw:output_type -> mcuc.stark.ultron.CancelCryptoWithdrawReply
	12, // 59: mcuc.stark.ultron.Ultron.ApproveCryptoWithdraw:output_type -> mcuc.stark.ultron.ApproveCryptoWithdrawReply
	14, // 60: mcuc.stark.ultron.Ultron.SubmitCryptoWithdraw:output_type -> mcuc.stark.ultron.SubmitCryptoWithdrawReply
	16, // 61: mcuc.stark.ultron.Ultron.RejectCryptoWithdraw:output_type -> mcuc.stark.ultron.RejectCryptoWithdrawReply
	10, // 62: mcuc.stark.ultron.Ultron.CancelCryptoTopUp:output_type -> mcuc.stark.ultron.CancelCryptoTopUpReply
	18, // 63: mcuc.stark.ultron.Ultron.ApproveCryptoTopUp:output_type -> mcuc.stark.ultron.ApproveCryptoTopUpReply
	20, // 64: mcuc.stark.ultron.Ultron.RejectCryptoTopUp:output_type -> mcuc.stark.ultron.RejectCryptoTopUpReply
	22, // 65: mcuc.stark.ultron.Ultron.GetCryptoWallet:output_type -> mcuc.stark.ultron.GetCryptoWalletReply
	26, // 66: mcuc.stark.ultron.Ultron.ValidateCryptoWallets:output_type -> mcuc.stark.ultron.ValidateCryptoWalletsReply
	28, // 67: mcuc.stark.ultron.Ultron.ImportCryptoWallets:output_type -> mcuc.stark.ultron.ImportCryptoWalletsReply
	30, // 68: mcuc.stark.ultron.Ultron.ListCryptoWallets:output_type -> mcuc.stark.ultron.ListCryptoWalletsReply
	32, // 69: mcuc.stark.ultron.Ultron.ValidateCryptoHotWallets:output_type -> mcuc.stark.ultron.ValidateCryptoHotWalletsReply
	34, // 70: mcuc.stark.ultron.Ultron.ImportCryptoHotWallets:output_type -> mcuc.stark.ultron.ImportCryptoHotWalletsReply
	36, // 71: mcuc.stark.ultron.Ultron.ListCryptoHotWallets:output_type -> mcuc.stark.ultron.ListCryptoHotWalletsReply
	38, // 72: mcuc.stark.ultron.Ultron.GetSystemCryptoHotWallets:output_type -> mcuc.stark.ultron.GetSystemCryptoHotWalletsReply
	24, // 73: mcuc.stark.ultron.Ultron.LoadCryptoWallets:output_type -> mcuc.stark.ultron.LoadCryptoWalletsReply
	45, // 74: mcuc.stark.ultron.Ultron.UpdateAutoTransferCryptoWithdraw:output_type -> mcuc.stark.ultron.UpdateAutoTransferCryptoWithdrawReply
	47, // 75: mcuc.stark.ultron.Ultron.GetCryptoSettings:output_type -> mcuc.stark.ultron.GetCryptoSettingsReply
	41, // 76: mcuc.stark.ultron.Ultron.CallbackTransaction:output_type -> mcuc.stark.ultron.CallbackTransactionReply
	57, // [57:77] is the sub-list for method output_type
	37, // [37:57] is the sub-list for method input_type
	37, // [37:37] is the sub-list for extension type_name
	37, // [37:37] is the sub-list for extension extendee
	0,  // [0:37] is the sub-list for field type_name
}

func init() { file_stark_api_ultron_proto_init() }
func file_stark_api_ultron_proto_init() {
	if File_stark_api_ultron_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_stark_api_ultron_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCryptoWithdrawRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_ultron_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCryptoWithdrawReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_ultron_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelCryptoWithdrawRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_ultron_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelCryptoWithdrawReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_ultron_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelCryptoTopUpRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_ultron_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelCryptoTopUpReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_ultron_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApproveCryptoWithdrawRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_ultron_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApproveCryptoWithdrawReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_ultron_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitCryptoWithdrawRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_ultron_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitCryptoWithdrawReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_ultron_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RejectCryptoWithdrawRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_ultron_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RejectCryptoWithdrawReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_ultron_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApproveCryptoTopUpRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_ultron_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApproveCryptoTopUpReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_ultron_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RejectCryptoTopUpRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_ultron_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RejectCryptoTopUpReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_ultron_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCryptoWalletRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_ultron_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCryptoWalletReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_ultron_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadCryptoWalletsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_ultron_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadCryptoWalletsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_ultron_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateCryptoWalletsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_ultron_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateCryptoWalletsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_ultron_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportCryptoWalletsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_ultron_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportCryptoWalletsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_ultron_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCryptoWalletsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_ultron_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCryptoWalletsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_ultron_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateCryptoHotWalletsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_ultron_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateCryptoHotWalletsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_ultron_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportCryptoHotWalletsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_ultron_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportCryptoHotWalletsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_ultron_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCryptoHotWalletsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_ultron_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCryptoHotWalletsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_ultron_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSystemCryptoHotWalletsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_ultron_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSystemCryptoHotWalletsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_ultron_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemCryptoHotWallet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_ultron_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallbackTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_ultron_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallbackTransactionReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_ultron_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CryptoWallet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_ultron_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CryptoPaymentDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_ultron_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAutoTransferCryptoWithdrawRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_ultron_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAutoTransferCryptoWithdrawReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_ultron_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCryptoSettingsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_ultron_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCryptoSettingsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_stark_api_ultron_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   43,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_stark_api_ultron_proto_goTypes,
		DependencyIndexes: file_stark_api_ultron_proto_depIdxs,
		EnumInfos:         file_stark_api_ultron_proto_enumTypes,
		MessageInfos:      file_stark_api_ultron_proto_msgTypes,
	}.Build()
	File_stark_api_ultron_proto = out.File
	file_stark_api_ultron_proto_rawDesc = nil
	file_stark_api_ultron_proto_goTypes = nil
	file_stark_api_ultron_proto_depIdxs = nil
}
