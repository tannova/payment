// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.12.4
// source: stark/api/howard.proto

package stark

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type StatisticFilterType int32

const (
	StatisticFilterType_STATISTIC_FILTER_UNSPECIFIED StatisticFilterType = 0
	StatisticFilterType_STATISTIC_FILTER_DAILY       StatisticFilterType = 1
	StatisticFilterType_STATISTIC_FILTER_WEEKLY      StatisticFilterType = 2
	StatisticFilterType_STATISTIC_FILTER_MONTHLY     StatisticFilterType = 3
)

// Enum value maps for StatisticFilterType.
var (
	StatisticFilterType_name = map[int32]string{
		0: "STATISTIC_FILTER_UNSPECIFIED",
		1: "STATISTIC_FILTER_DAILY",
		2: "STATISTIC_FILTER_WEEKLY",
		3: "STATISTIC_FILTER_MONTHLY",
	}
	StatisticFilterType_value = map[string]int32{
		"STATISTIC_FILTER_UNSPECIFIED": 0,
		"STATISTIC_FILTER_DAILY":       1,
		"STATISTIC_FILTER_WEEKLY":      2,
		"STATISTIC_FILTER_MONTHLY":     3,
	}
)

func (x StatisticFilterType) Enum() *StatisticFilterType {
	p := new(StatisticFilterType)
	*p = x
	return p
}

func (x StatisticFilterType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StatisticFilterType) Descriptor() protoreflect.EnumDescriptor {
	return file_stark_api_howard_proto_enumTypes[0].Descriptor()
}

func (StatisticFilterType) Type() protoreflect.EnumType {
	return &file_stark_api_howard_proto_enumTypes[0]
}

func (x StatisticFilterType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StatisticFilterType.Descriptor instead.
func (StatisticFilterType) EnumDescriptor() ([]byte, []int) {
	return file_stark_api_howard_proto_rawDescGZIP(), []int{0}
}

type StatisticDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Number  uint64  `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	Percent float64 `protobuf:"fixed64,2,opt,name=percent,proto3" json:"percent,omitempty"` // >0 <0
}

func (x *StatisticDetail) Reset() {
	*x = StatisticDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_howard_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatisticDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatisticDetail) ProtoMessage() {}

func (x *StatisticDetail) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_howard_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatisticDetail.ProtoReflect.Descriptor instead.
func (*StatisticDetail) Descriptor() ([]byte, []int) {
	return file_stark_api_howard_proto_rawDescGZIP(), []int{0}
}

func (x *StatisticDetail) GetNumber() uint64 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *StatisticDetail) GetPercent() float64 {
	if x != nil {
		return x.Percent
	}
	return 0
}

type GetStatisticRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PaymentType PaymentType         `protobuf:"varint,3,opt,name=payment_type,json=paymentType,proto3,enum=mcuc.stark.PaymentType" json:"payment_type,omitempty"`
	FilterType  StatisticFilterType `protobuf:"varint,4,opt,name=filter_type,json=filterType,proto3,enum=mcuc.stark.howard.StatisticFilterType" json:"filter_type,omitempty"`
	TimeZone    int32               `protobuf:"varint,5,opt,name=time_zone,json=timeZone,proto3" json:"time_zone,omitempty"`
}

func (x *GetStatisticRequest) Reset() {
	*x = GetStatisticRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_howard_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStatisticRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStatisticRequest) ProtoMessage() {}

func (x *GetStatisticRequest) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_howard_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStatisticRequest.ProtoReflect.Descriptor instead.
func (*GetStatisticRequest) Descriptor() ([]byte, []int) {
	return file_stark_api_howard_proto_rawDescGZIP(), []int{1}
}

func (x *GetStatisticRequest) GetPaymentType() PaymentType {
	if x != nil {
		return x.PaymentType
	}
	return PaymentType_PAYMENT_UNSPECIFIED
}

func (x *GetStatisticRequest) GetFilterType() StatisticFilterType {
	if x != nil {
		return x.FilterType
	}
	return StatisticFilterType_STATISTIC_FILTER_UNSPECIFIED
}

func (x *GetStatisticRequest) GetTimeZone() int32 {
	if x != nil {
		return x.TimeZone
	}
	return 0
}

type GetStatisticReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Order  *StatisticDetail `protobuf:"bytes,1,opt,name=order,proto3" json:"order,omitempty"`
	Amount *StatisticDetail `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	User   *StatisticDetail `protobuf:"bytes,3,opt,name=user,proto3" json:"user,omitempty"`
	Arppu  *StatisticDetail `protobuf:"bytes,4,opt,name=arppu,proto3" json:"arppu,omitempty"`
}

func (x *GetStatisticReply) Reset() {
	*x = GetStatisticReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_howard_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStatisticReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStatisticReply) ProtoMessage() {}

func (x *GetStatisticReply) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_howard_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStatisticReply.ProtoReflect.Descriptor instead.
func (*GetStatisticReply) Descriptor() ([]byte, []int) {
	return file_stark_api_howard_proto_rawDescGZIP(), []int{2}
}

func (x *GetStatisticReply) GetOrder() *StatisticDetail {
	if x != nil {
		return x.Order
	}
	return nil
}

func (x *GetStatisticReply) GetAmount() *StatisticDetail {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *GetStatisticReply) GetUser() *StatisticDetail {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *GetStatisticReply) GetArppu() *StatisticDetail {
	if x != nil {
		return x.Arppu
	}
	return nil
}

type GetProcessingPerformanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromDate   *timestamp.Timestamp `protobuf:"bytes,1,opt,name=from_date,json=fromDate,proto3" json:"from_date,omitempty"`
	ToDate     *timestamp.Timestamp `protobuf:"bytes,2,opt,name=to_date,json=toDate,proto3" json:"to_date,omitempty"`
	MerchantId int64                `protobuf:"varint,3,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty"`
}

func (x *GetProcessingPerformanceRequest) Reset() {
	*x = GetProcessingPerformanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_howard_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProcessingPerformanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProcessingPerformanceRequest) ProtoMessage() {}

func (x *GetProcessingPerformanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_howard_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProcessingPerformanceRequest.ProtoReflect.Descriptor instead.
func (*GetProcessingPerformanceRequest) Descriptor() ([]byte, []int) {
	return file_stark_api_howard_proto_rawDescGZIP(), []int{3}
}

func (x *GetProcessingPerformanceRequest) GetFromDate() *timestamp.Timestamp {
	if x != nil {
		return x.FromDate
	}
	return nil
}

func (x *GetProcessingPerformanceRequest) GetToDate() *timestamp.Timestamp {
	if x != nil {
		return x.ToDate
	}
	return nil
}

func (x *GetProcessingPerformanceRequest) GetMerchantId() int64 {
	if x != nil {
		return x.MerchantId
	}
	return 0
}

type GetProcessingPerformanceReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MerchantId   int64            `protobuf:"varint,1,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty"`
	TotalOrder   uint64           `protobuf:"varint,2,opt,name=total_order,json=totalOrder,proto3" json:"total_order,omitempty"`
	Successfully *StatisticDetail `protobuf:"bytes,3,opt,name=successfully,proto3" json:"successfully,omitempty"`
	Failed       *StatisticDetail `protobuf:"bytes,4,opt,name=failed,proto3" json:"failed,omitempty"`
	Waiting      *StatisticDetail `protobuf:"bytes,5,opt,name=waiting,proto3" json:"waiting,omitempty"` // not Complete||failed
}

func (x *GetProcessingPerformanceReply) Reset() {
	*x = GetProcessingPerformanceReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_howard_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProcessingPerformanceReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProcessingPerformanceReply) ProtoMessage() {}

func (x *GetProcessingPerformanceReply) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_howard_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProcessingPerformanceReply.ProtoReflect.Descriptor instead.
func (*GetProcessingPerformanceReply) Descriptor() ([]byte, []int) {
	return file_stark_api_howard_proto_rawDescGZIP(), []int{4}
}

func (x *GetProcessingPerformanceReply) GetMerchantId() int64 {
	if x != nil {
		return x.MerchantId
	}
	return 0
}

func (x *GetProcessingPerformanceReply) GetTotalOrder() uint64 {
	if x != nil {
		return x.TotalOrder
	}
	return 0
}

func (x *GetProcessingPerformanceReply) GetSuccessfully() *StatisticDetail {
	if x != nil {
		return x.Successfully
	}
	return nil
}

func (x *GetProcessingPerformanceReply) GetFailed() *StatisticDetail {
	if x != nil {
		return x.Failed
	}
	return nil
}

func (x *GetProcessingPerformanceReply) GetWaiting() *StatisticDetail {
	if x != nil {
		return x.Waiting
	}
	return nil
}

type TotalAmountMerchant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MerchantId int64  `protobuf:"varint,1,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty"`
	Amount     uint64 `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *TotalAmountMerchant) Reset() {
	*x = TotalAmountMerchant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_howard_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TotalAmountMerchant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TotalAmountMerchant) ProtoMessage() {}

func (x *TotalAmountMerchant) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_howard_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TotalAmountMerchant.ProtoReflect.Descriptor instead.
func (*TotalAmountMerchant) Descriptor() ([]byte, []int) {
	return file_stark_api_howard_proto_rawDescGZIP(), []int{5}
}

func (x *TotalAmountMerchant) GetMerchantId() int64 {
	if x != nil {
		return x.MerchantId
	}
	return 0
}

func (x *TotalAmountMerchant) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type TotalAmountDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date            *timestamp.Timestamp   `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	MerchantAmounts []*TotalAmountMerchant `protobuf:"bytes,2,rep,name=merchant_amounts,json=merchantAmounts,proto3" json:"merchant_amounts,omitempty"`
}

func (x *TotalAmountDetail) Reset() {
	*x = TotalAmountDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_howard_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TotalAmountDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TotalAmountDetail) ProtoMessage() {}

func (x *TotalAmountDetail) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_howard_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TotalAmountDetail.ProtoReflect.Descriptor instead.
func (*TotalAmountDetail) Descriptor() ([]byte, []int) {
	return file_stark_api_howard_proto_rawDescGZIP(), []int{6}
}

func (x *TotalAmountDetail) GetDate() *timestamp.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *TotalAmountDetail) GetMerchantAmounts() []*TotalAmountMerchant {
	if x != nil {
		return x.MerchantAmounts
	}
	return nil
}

type GetTotalAmountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromDate  *timestamp.Timestamp `protobuf:"bytes,1,opt,name=from_date,json=fromDate,proto3" json:"from_date,omitempty"`
	ToDate    *timestamp.Timestamp `protobuf:"bytes,2,opt,name=to_date,json=toDate,proto3" json:"to_date,omitempty"`
	Merchants []int64              `protobuf:"varint,3,rep,packed,name=merchants,proto3" json:"merchants,omitempty"`
	TimeZone  int32                `protobuf:"varint,4,opt,name=time_zone,json=timeZone,proto3" json:"time_zone,omitempty"`
}

func (x *GetTotalAmountRequest) Reset() {
	*x = GetTotalAmountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_howard_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTotalAmountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTotalAmountRequest) ProtoMessage() {}

func (x *GetTotalAmountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_howard_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTotalAmountRequest.ProtoReflect.Descriptor instead.
func (*GetTotalAmountRequest) Descriptor() ([]byte, []int) {
	return file_stark_api_howard_proto_rawDescGZIP(), []int{7}
}

func (x *GetTotalAmountRequest) GetFromDate() *timestamp.Timestamp {
	if x != nil {
		return x.FromDate
	}
	return nil
}

func (x *GetTotalAmountRequest) GetToDate() *timestamp.Timestamp {
	if x != nil {
		return x.ToDate
	}
	return nil
}

func (x *GetTotalAmountRequest) GetMerchants() []int64 {
	if x != nil {
		return x.Merchants
	}
	return nil
}

func (x *GetTotalAmountRequest) GetTimeZone() int32 {
	if x != nil {
		return x.TimeZone
	}
	return 0
}

type GetTotalAmountReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details []*TotalAmountDetail `protobuf:"bytes,1,rep,name=details,proto3" json:"details,omitempty"`
}

func (x *GetTotalAmountReply) Reset() {
	*x = GetTotalAmountReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_howard_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTotalAmountReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTotalAmountReply) ProtoMessage() {}

func (x *GetTotalAmountReply) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_howard_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTotalAmountReply.ProtoReflect.Descriptor instead.
func (*GetTotalAmountReply) Descriptor() ([]byte, []int) {
	return file_stark_api_howard_proto_rawDescGZIP(), []int{8}
}

func (x *GetTotalAmountReply) GetDetails() []*TotalAmountDetail {
	if x != nil {
		return x.Details
	}
	return nil
}

type GetReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromDate   *timestamp.Timestamp `protobuf:"bytes,1,opt,name=from_date,json=fromDate,proto3" json:"from_date,omitempty"`
	ToDate     *timestamp.Timestamp `protobuf:"bytes,2,opt,name=to_date,json=toDate,proto3" json:"to_date,omitempty"`
	MerchantId int64                `protobuf:"varint,3,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty"`
	TimeZone   int32                `protobuf:"varint,4,opt,name=time_zone,json=timeZone,proto3" json:"time_zone,omitempty"`
}

func (x *GetReportRequest) Reset() {
	*x = GetReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_howard_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReportRequest) ProtoMessage() {}

func (x *GetReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_howard_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReportRequest.ProtoReflect.Descriptor instead.
func (*GetReportRequest) Descriptor() ([]byte, []int) {
	return file_stark_api_howard_proto_rawDescGZIP(), []int{9}
}

func (x *GetReportRequest) GetFromDate() *timestamp.Timestamp {
	if x != nil {
		return x.FromDate
	}
	return nil
}

func (x *GetReportRequest) GetToDate() *timestamp.Timestamp {
	if x != nil {
		return x.ToDate
	}
	return nil
}

func (x *GetReportRequest) GetMerchantId() int64 {
	if x != nil {
		return x.MerchantId
	}
	return 0
}

func (x *GetReportRequest) GetTimeZone() int32 {
	if x != nil {
		return x.TimeZone
	}
	return 0
}

type Income struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date   *timestamp.Timestamp `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	Amount float64              `protobuf:"fixed64,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *Income) Reset() {
	*x = Income{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_howard_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Income) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Income) ProtoMessage() {}

func (x *Income) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_howard_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Income.ProtoReflect.Descriptor instead.
func (*Income) Descriptor() ([]byte, []int) {
	return file_stark_api_howard_proto_rawDescGZIP(), []int{10}
}

func (x *Income) GetDate() *timestamp.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *Income) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type TopUpCompletion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Completed int64 `protobuf:"varint,1,opt,name=completed,proto3" json:"completed,omitempty"`
	Total     int64 `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *TopUpCompletion) Reset() {
	*x = TopUpCompletion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_howard_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopUpCompletion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopUpCompletion) ProtoMessage() {}

func (x *TopUpCompletion) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_howard_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopUpCompletion.ProtoReflect.Descriptor instead.
func (*TopUpCompletion) Descriptor() ([]byte, []int) {
	return file_stark_api_howard_proto_rawDescGZIP(), []int{11}
}

func (x *TopUpCompletion) GetCompleted() int64 {
	if x != nil {
		return x.Completed
	}
	return 0
}

func (x *TopUpCompletion) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type WithdrawCompletion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Completed int64 `protobuf:"varint,1,opt,name=completed,proto3" json:"completed,omitempty"`
	Total     int64 `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *WithdrawCompletion) Reset() {
	*x = WithdrawCompletion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_howard_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithdrawCompletion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawCompletion) ProtoMessage() {}

func (x *WithdrawCompletion) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_howard_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawCompletion.ProtoReflect.Descriptor instead.
func (*WithdrawCompletion) Descriptor() ([]byte, []int) {
	return file_stark_api_howard_proto_rawDescGZIP(), []int{12}
}

func (x *WithdrawCompletion) GetCompleted() int64 {
	if x != nil {
		return x.Completed
	}
	return 0
}

func (x *WithdrawCompletion) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type AllocationDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Method  MethodType `protobuf:"varint,1,opt,name=method,proto3,enum=mcuc.stark.MethodType" json:"method,omitempty"`
	Amount  float64    `protobuf:"fixed64,2,opt,name=amount,proto3" json:"amount,omitempty"`
	Percent float64    `protobuf:"fixed64,3,opt,name=percent,proto3" json:"percent,omitempty"`
}

func (x *AllocationDetail) Reset() {
	*x = AllocationDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_howard_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllocationDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllocationDetail) ProtoMessage() {}

func (x *AllocationDetail) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_howard_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllocationDetail.ProtoReflect.Descriptor instead.
func (*AllocationDetail) Descriptor() ([]byte, []int) {
	return file_stark_api_howard_proto_rawDescGZIP(), []int{13}
}

func (x *AllocationDetail) GetMethod() MethodType {
	if x != nil {
		return x.Method
	}
	return MethodType_METHOD_UNSPECIFIED
}

func (x *AllocationDetail) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *AllocationDetail) GetPercent() float64 {
	if x != nil {
		return x.Percent
	}
	return 0
}

type PaymentMethodRevenue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Method MethodType  `protobuf:"varint,1,opt,name=method,proto3,enum=mcuc.stark.MethodType" json:"method,omitempty"`
	Type   PaymentType `protobuf:"varint,2,opt,name=type,proto3,enum=mcuc.stark.PaymentType" json:"type,omitempty"`
	Amount float64     `protobuf:"fixed64,3,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *PaymentMethodRevenue) Reset() {
	*x = PaymentMethodRevenue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_howard_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentMethodRevenue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentMethodRevenue) ProtoMessage() {}

func (x *PaymentMethodRevenue) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_howard_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentMethodRevenue.ProtoReflect.Descriptor instead.
func (*PaymentMethodRevenue) Descriptor() ([]byte, []int) {
	return file_stark_api_howard_proto_rawDescGZIP(), []int{14}
}

func (x *PaymentMethodRevenue) GetMethod() MethodType {
	if x != nil {
		return x.Method
	}
	return MethodType_METHOD_UNSPECIFIED
}

func (x *PaymentMethodRevenue) GetType() PaymentType {
	if x != nil {
		return x.Type
	}
	return PaymentType_PAYMENT_UNSPECIFIED
}

func (x *PaymentMethodRevenue) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type TellerRevenue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string  `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Amount float64 `protobuf:"fixed64,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *TellerRevenue) Reset() {
	*x = TellerRevenue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_howard_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TellerRevenue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TellerRevenue) ProtoMessage() {}

func (x *TellerRevenue) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_howard_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TellerRevenue.ProtoReflect.Descriptor instead.
func (*TellerRevenue) Descriptor() ([]byte, []int) {
	return file_stark_api_howard_proto_rawDescGZIP(), []int{15}
}

func (x *TellerRevenue) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *TellerRevenue) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type GetIncomeStatementReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Revenues []*Income `protobuf:"bytes,1,rep,name=revenues,proto3" json:"revenues,omitempty"`
	Profits  []*Income `protobuf:"bytes,2,rep,name=profits,proto3" json:"profits,omitempty"`
}

func (x *GetIncomeStatementReply) Reset() {
	*x = GetIncomeStatementReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_howard_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIncomeStatementReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIncomeStatementReply) ProtoMessage() {}

func (x *GetIncomeStatementReply) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_howard_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIncomeStatementReply.ProtoReflect.Descriptor instead.
func (*GetIncomeStatementReply) Descriptor() ([]byte, []int) {
	return file_stark_api_howard_proto_rawDescGZIP(), []int{16}
}

func (x *GetIncomeStatementReply) GetRevenues() []*Income {
	if x != nil {
		return x.Revenues
	}
	return nil
}

func (x *GetIncomeStatementReply) GetProfits() []*Income {
	if x != nil {
		return x.Profits
	}
	return nil
}

type GetPaymentTodayReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TopUpCompletion    *TopUpCompletion    `protobuf:"bytes,3,opt,name=top_up_completion,json=topUpCompletion,proto3" json:"top_up_completion,omitempty"`
	WithdrawCompletion *WithdrawCompletion `protobuf:"bytes,4,opt,name=withdraw_completion,json=withdrawCompletion,proto3" json:"withdraw_completion,omitempty"`
}

func (x *GetPaymentTodayReply) Reset() {
	*x = GetPaymentTodayReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_howard_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPaymentTodayReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPaymentTodayReply) ProtoMessage() {}

func (x *GetPaymentTodayReply) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_howard_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPaymentTodayReply.ProtoReflect.Descriptor instead.
func (*GetPaymentTodayReply) Descriptor() ([]byte, []int) {
	return file_stark_api_howard_proto_rawDescGZIP(), []int{17}
}

func (x *GetPaymentTodayReply) GetTopUpCompletion() *TopUpCompletion {
	if x != nil {
		return x.TopUpCompletion
	}
	return nil
}

func (x *GetPaymentTodayReply) GetWithdrawCompletion() *WithdrawCompletion {
	if x != nil {
		return x.WithdrawCompletion
	}
	return nil
}

type GetProfitRateReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalRevenue float64 `protobuf:"fixed64,1,opt,name=total_revenue,json=totalRevenue,proto3" json:"total_revenue,omitempty"`
	TotalProfit  float64 `protobuf:"fixed64,2,opt,name=total_profit,json=totalProfit,proto3" json:"total_profit,omitempty"`
	ProfitRate   float64 `protobuf:"fixed64,3,opt,name=profit_rate,json=profitRate,proto3" json:"profit_rate,omitempty"`
}

func (x *GetProfitRateReply) Reset() {
	*x = GetProfitRateReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_howard_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProfitRateReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProfitRateReply) ProtoMessage() {}

func (x *GetProfitRateReply) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_howard_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProfitRateReply.ProtoReflect.Descriptor instead.
func (*GetProfitRateReply) Descriptor() ([]byte, []int) {
	return file_stark_api_howard_proto_rawDescGZIP(), []int{18}
}

func (x *GetProfitRateReply) GetTotalRevenue() float64 {
	if x != nil {
		return x.TotalRevenue
	}
	return 0
}

func (x *GetProfitRateReply) GetTotalProfit() float64 {
	if x != nil {
		return x.TotalProfit
	}
	return 0
}

func (x *GetProfitRateReply) GetProfitRate() float64 {
	if x != nil {
		return x.ProfitRate
	}
	return 0
}

type GetAllocationTopUpRateReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalTopup          float64             `protobuf:"fixed64,1,opt,name=total_topup,json=totalTopup,proto3" json:"total_topup,omitempty"`
	TopUpAllocationRate []*AllocationDetail `protobuf:"bytes,2,rep,name=top_up_allocation_rate,json=topUpAllocationRate,proto3" json:"top_up_allocation_rate,omitempty"`
}

func (x *GetAllocationTopUpRateReply) Reset() {
	*x = GetAllocationTopUpRateReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_howard_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllocationTopUpRateReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllocationTopUpRateReply) ProtoMessage() {}

func (x *GetAllocationTopUpRateReply) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_howard_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllocationTopUpRateReply.ProtoReflect.Descriptor instead.
func (*GetAllocationTopUpRateReply) Descriptor() ([]byte, []int) {
	return file_stark_api_howard_proto_rawDescGZIP(), []int{19}
}

func (x *GetAllocationTopUpRateReply) GetTotalTopup() float64 {
	if x != nil {
		return x.TotalTopup
	}
	return 0
}

func (x *GetAllocationTopUpRateReply) GetTopUpAllocationRate() []*AllocationDetail {
	if x != nil {
		return x.TopUpAllocationRate
	}
	return nil
}

type GetAllocationWithdrawRateReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalWithdraw          float64             `protobuf:"fixed64,1,opt,name=total_withdraw,json=totalWithdraw,proto3" json:"total_withdraw,omitempty"`
	WithdrawAllocationRate []*AllocationDetail `protobuf:"bytes,2,rep,name=withdraw_allocation_rate,json=withdrawAllocationRate,proto3" json:"withdraw_allocation_rate,omitempty"`
}

func (x *GetAllocationWithdrawRateReply) Reset() {
	*x = GetAllocationWithdrawRateReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_howard_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllocationWithdrawRateReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllocationWithdrawRateReply) ProtoMessage() {}

func (x *GetAllocationWithdrawRateReply) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_howard_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllocationWithdrawRateReply.ProtoReflect.Descriptor instead.
func (*GetAllocationWithdrawRateReply) Descriptor() ([]byte, []int) {
	return file_stark_api_howard_proto_rawDescGZIP(), []int{20}
}

func (x *GetAllocationWithdrawRateReply) GetTotalWithdraw() float64 {
	if x != nil {
		return x.TotalWithdraw
	}
	return 0
}

func (x *GetAllocationWithdrawRateReply) GetWithdrawAllocationRate() []*AllocationDetail {
	if x != nil {
		return x.WithdrawAllocationRate
	}
	return nil
}

type GetTopPaymentMethodReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TopPaymentMethodRevenue []*PaymentMethodRevenue `protobuf:"bytes,1,rep,name=top_payment_method_revenue,json=topPaymentMethodRevenue,proto3" json:"top_payment_method_revenue,omitempty"`
}

func (x *GetTopPaymentMethodReply) Reset() {
	*x = GetTopPaymentMethodReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_howard_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTopPaymentMethodReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTopPaymentMethodReply) ProtoMessage() {}

func (x *GetTopPaymentMethodReply) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_howard_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTopPaymentMethodReply.ProtoReflect.Descriptor instead.
func (*GetTopPaymentMethodReply) Descriptor() ([]byte, []int) {
	return file_stark_api_howard_proto_rawDescGZIP(), []int{21}
}

func (x *GetTopPaymentMethodReply) GetTopPaymentMethodRevenue() []*PaymentMethodRevenue {
	if x != nil {
		return x.TopPaymentMethodRevenue
	}
	return nil
}

type GetTopTellerReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TopTellerRevenue []*TellerRevenue `protobuf:"bytes,2,rep,name=top_teller_revenue,json=topTellerRevenue,proto3" json:"top_teller_revenue,omitempty"`
}

func (x *GetTopTellerReply) Reset() {
	*x = GetTopTellerReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_howard_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTopTellerReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTopTellerReply) ProtoMessage() {}

func (x *GetTopTellerReply) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_howard_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTopTellerReply.ProtoReflect.Descriptor instead.
func (*GetTopTellerReply) Descriptor() ([]byte, []int) {
	return file_stark_api_howard_proto_rawDescGZIP(), []int{22}
}

func (x *GetTopTellerReply) GetTopTellerRevenue() []*TellerRevenue {
	if x != nil {
		return x.TopTellerRevenue
	}
	return nil
}

type SaleReportItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Quantity int64   `protobuf:"varint,2,opt,name=quantity,proto3" json:"quantity,omitempty"`
	Amount   float64 `protobuf:"fixed64,3,opt,name=amount,proto3" json:"amount,omitempty"`
	Average  float64 `protobuf:"fixed64,4,opt,name=average,proto3" json:"average,omitempty"`
	Discount float64 `protobuf:"fixed64,5,opt,name=discount,proto3" json:"discount,omitempty"`
	Revenue  float64 `protobuf:"fixed64,6,opt,name=revenue,proto3" json:"revenue,omitempty"`
	// Types that are assignable to Key:
	//	*SaleReportItem_Date
	//	*SaleReportItem_MerchantId
	//	*SaleReportItem_PaymentMethod
	//	*SaleReportItem_TellerId
	Key isSaleReportItem_Key `protobuf_oneof:"key"`
}

func (x *SaleReportItem) Reset() {
	*x = SaleReportItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_howard_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaleReportItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaleReportItem) ProtoMessage() {}

func (x *SaleReportItem) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_howard_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaleReportItem.ProtoReflect.Descriptor instead.
func (*SaleReportItem) Descriptor() ([]byte, []int) {
	return file_stark_api_howard_proto_rawDescGZIP(), []int{23}
}

func (x *SaleReportItem) GetQuantity() int64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *SaleReportItem) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *SaleReportItem) GetAverage() float64 {
	if x != nil {
		return x.Average
	}
	return 0
}

func (x *SaleReportItem) GetDiscount() float64 {
	if x != nil {
		return x.Discount
	}
	return 0
}

func (x *SaleReportItem) GetRevenue() float64 {
	if x != nil {
		return x.Revenue
	}
	return 0
}

func (m *SaleReportItem) GetKey() isSaleReportItem_Key {
	if m != nil {
		return m.Key
	}
	return nil
}

func (x *SaleReportItem) GetDate() *timestamp.Timestamp {
	if x, ok := x.GetKey().(*SaleReportItem_Date); ok {
		return x.Date
	}
	return nil
}

func (x *SaleReportItem) GetMerchantId() int64 {
	if x, ok := x.GetKey().(*SaleReportItem_MerchantId); ok {
		return x.MerchantId
	}
	return 0
}

func (x *SaleReportItem) GetPaymentMethod() MethodType {
	if x, ok := x.GetKey().(*SaleReportItem_PaymentMethod); ok {
		return x.PaymentMethod
	}
	return MethodType_METHOD_UNSPECIFIED
}

func (x *SaleReportItem) GetTellerId() string {
	if x, ok := x.GetKey().(*SaleReportItem_TellerId); ok {
		return x.TellerId
	}
	return ""
}

type isSaleReportItem_Key interface {
	isSaleReportItem_Key()
}

type SaleReportItem_Date struct {
	Date *timestamp.Timestamp `protobuf:"bytes,7,opt,name=date,proto3,oneof"`
}

type SaleReportItem_MerchantId struct {
	MerchantId int64 `protobuf:"varint,8,opt,name=merchant_id,json=merchantId,proto3,oneof"`
}

type SaleReportItem_PaymentMethod struct {
	PaymentMethod MethodType `protobuf:"varint,9,opt,name=payment_method,json=paymentMethod,proto3,enum=mcuc.stark.MethodType,oneof"`
}

type SaleReportItem_TellerId struct {
	TellerId string `protobuf:"bytes,10,opt,name=teller_id,json=tellerId,proto3,oneof"`
}

func (*SaleReportItem_Date) isSaleReportItem_Key() {}

func (*SaleReportItem_MerchantId) isSaleReportItem_Key() {}

func (*SaleReportItem_PaymentMethod) isSaleReportItem_Key() {}

func (*SaleReportItem_TellerId) isSaleReportItem_Key() {}

type GetSellReportByTimeRangeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromDate *timestamp.Timestamp `protobuf:"bytes,1,opt,name=from_date,json=fromDate,proto3" json:"from_date,omitempty"`
	ToDate   *timestamp.Timestamp `protobuf:"bytes,2,opt,name=to_date,json=toDate,proto3" json:"to_date,omitempty"`
	Currency Currency             `protobuf:"varint,3,opt,name=currency,proto3,enum=mcuc.stark.Currency" json:"currency,omitempty"`
	TimeZone int32                `protobuf:"varint,4,opt,name=time_zone,json=timeZone,proto3" json:"time_zone,omitempty"`
}

func (x *GetSellReportByTimeRangeRequest) Reset() {
	*x = GetSellReportByTimeRangeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_howard_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSellReportByTimeRangeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSellReportByTimeRangeRequest) ProtoMessage() {}

func (x *GetSellReportByTimeRangeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_howard_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSellReportByTimeRangeRequest.ProtoReflect.Descriptor instead.
func (*GetSellReportByTimeRangeRequest) Descriptor() ([]byte, []int) {
	return file_stark_api_howard_proto_rawDescGZIP(), []int{24}
}

func (x *GetSellReportByTimeRangeRequest) GetFromDate() *timestamp.Timestamp {
	if x != nil {
		return x.FromDate
	}
	return nil
}

func (x *GetSellReportByTimeRangeRequest) GetToDate() *timestamp.Timestamp {
	if x != nil {
		return x.ToDate
	}
	return nil
}

func (x *GetSellReportByTimeRangeRequest) GetCurrency() Currency {
	if x != nil {
		return x.Currency
	}
	return Currency_CURRENCY_UNSPECIFIED
}

func (x *GetSellReportByTimeRangeRequest) GetTimeZone() int32 {
	if x != nil {
		return x.TimeZone
	}
	return 0
}

type GetSellReportByTimeRangeReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TopUps    []*SaleReportItem `protobuf:"bytes,1,rep,name=top_ups,json=topUps,proto3" json:"top_ups,omitempty"`
	Withdraws []*SaleReportItem `protobuf:"bytes,2,rep,name=withdraws,proto3" json:"withdraws,omitempty"`
}

func (x *GetSellReportByTimeRangeReply) Reset() {
	*x = GetSellReportByTimeRangeReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_howard_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSellReportByTimeRangeReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSellReportByTimeRangeReply) ProtoMessage() {}

func (x *GetSellReportByTimeRangeReply) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_howard_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSellReportByTimeRangeReply.ProtoReflect.Descriptor instead.
func (*GetSellReportByTimeRangeReply) Descriptor() ([]byte, []int) {
	return file_stark_api_howard_proto_rawDescGZIP(), []int{25}
}

func (x *GetSellReportByTimeRangeReply) GetTopUps() []*SaleReportItem {
	if x != nil {
		return x.TopUps
	}
	return nil
}

func (x *GetSellReportByTimeRangeReply) GetWithdraws() []*SaleReportItem {
	if x != nil {
		return x.Withdraws
	}
	return nil
}

type GetSellReportByMerchantRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromDate    *timestamp.Timestamp `protobuf:"bytes,1,opt,name=from_date,json=fromDate,proto3" json:"from_date,omitempty"`
	ToDate      *timestamp.Timestamp `protobuf:"bytes,2,opt,name=to_date,json=toDate,proto3" json:"to_date,omitempty"`
	Currency    Currency             `protobuf:"varint,3,opt,name=currency,proto3,enum=mcuc.stark.Currency" json:"currency,omitempty"`
	MerchantIds []int64              `protobuf:"varint,4,rep,packed,name=merchant_ids,json=merchantIds,proto3" json:"merchant_ids,omitempty"`
}

func (x *GetSellReportByMerchantRequest) Reset() {
	*x = GetSellReportByMerchantRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_howard_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSellReportByMerchantRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSellReportByMerchantRequest) ProtoMessage() {}

func (x *GetSellReportByMerchantRequest) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_howard_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSellReportByMerchantRequest.ProtoReflect.Descriptor instead.
func (*GetSellReportByMerchantRequest) Descriptor() ([]byte, []int) {
	return file_stark_api_howard_proto_rawDescGZIP(), []int{26}
}

func (x *GetSellReportByMerchantRequest) GetFromDate() *timestamp.Timestamp {
	if x != nil {
		return x.FromDate
	}
	return nil
}

func (x *GetSellReportByMerchantRequest) GetToDate() *timestamp.Timestamp {
	if x != nil {
		return x.ToDate
	}
	return nil
}

func (x *GetSellReportByMerchantRequest) GetCurrency() Currency {
	if x != nil {
		return x.Currency
	}
	return Currency_CURRENCY_UNSPECIFIED
}

func (x *GetSellReportByMerchantRequest) GetMerchantIds() []int64 {
	if x != nil {
		return x.MerchantIds
	}
	return nil
}

type GetSellReportByMerchantReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TopUps    []*SaleReportItem `protobuf:"bytes,1,rep,name=top_ups,json=topUps,proto3" json:"top_ups,omitempty"`
	Withdraws []*SaleReportItem `protobuf:"bytes,2,rep,name=withdraws,proto3" json:"withdraws,omitempty"`
}

func (x *GetSellReportByMerchantReply) Reset() {
	*x = GetSellReportByMerchantReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_howard_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSellReportByMerchantReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSellReportByMerchantReply) ProtoMessage() {}

func (x *GetSellReportByMerchantReply) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_howard_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSellReportByMerchantReply.ProtoReflect.Descriptor instead.
func (*GetSellReportByMerchantReply) Descriptor() ([]byte, []int) {
	return file_stark_api_howard_proto_rawDescGZIP(), []int{27}
}

func (x *GetSellReportByMerchantReply) GetTopUps() []*SaleReportItem {
	if x != nil {
		return x.TopUps
	}
	return nil
}

func (x *GetSellReportByMerchantReply) GetWithdraws() []*SaleReportItem {
	if x != nil {
		return x.Withdraws
	}
	return nil
}

type GetSellReportByPaymentMethodRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromDate *timestamp.Timestamp `protobuf:"bytes,1,opt,name=from_date,json=fromDate,proto3" json:"from_date,omitempty"`
	ToDate   *timestamp.Timestamp `protobuf:"bytes,2,opt,name=to_date,json=toDate,proto3" json:"to_date,omitempty"`
	Currency Currency             `protobuf:"varint,3,opt,name=currency,proto3,enum=mcuc.stark.Currency" json:"currency,omitempty"`
}

func (x *GetSellReportByPaymentMethodRequest) Reset() {
	*x = GetSellReportByPaymentMethodRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_howard_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSellReportByPaymentMethodRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSellReportByPaymentMethodRequest) ProtoMessage() {}

func (x *GetSellReportByPaymentMethodRequest) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_howard_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSellReportByPaymentMethodRequest.ProtoReflect.Descriptor instead.
func (*GetSellReportByPaymentMethodRequest) Descriptor() ([]byte, []int) {
	return file_stark_api_howard_proto_rawDescGZIP(), []int{28}
}

func (x *GetSellReportByPaymentMethodRequest) GetFromDate() *timestamp.Timestamp {
	if x != nil {
		return x.FromDate
	}
	return nil
}

func (x *GetSellReportByPaymentMethodRequest) GetToDate() *timestamp.Timestamp {
	if x != nil {
		return x.ToDate
	}
	return nil
}

func (x *GetSellReportByPaymentMethodRequest) GetCurrency() Currency {
	if x != nil {
		return x.Currency
	}
	return Currency_CURRENCY_UNSPECIFIED
}

type GetSellReportByPaymentMethodReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TopUps    []*SaleReportItem `protobuf:"bytes,1,rep,name=top_ups,json=topUps,proto3" json:"top_ups,omitempty"`
	Withdraws []*SaleReportItem `protobuf:"bytes,2,rep,name=withdraws,proto3" json:"withdraws,omitempty"`
}

func (x *GetSellReportByPaymentMethodReply) Reset() {
	*x = GetSellReportByPaymentMethodReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_howard_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSellReportByPaymentMethodReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSellReportByPaymentMethodReply) ProtoMessage() {}

func (x *GetSellReportByPaymentMethodReply) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_howard_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSellReportByPaymentMethodReply.ProtoReflect.Descriptor instead.
func (*GetSellReportByPaymentMethodReply) Descriptor() ([]byte, []int) {
	return file_stark_api_howard_proto_rawDescGZIP(), []int{29}
}

func (x *GetSellReportByPaymentMethodReply) GetTopUps() []*SaleReportItem {
	if x != nil {
		return x.TopUps
	}
	return nil
}

func (x *GetSellReportByPaymentMethodReply) GetWithdraws() []*SaleReportItem {
	if x != nil {
		return x.Withdraws
	}
	return nil
}

type GetSellReportByTellerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromDate *timestamp.Timestamp `protobuf:"bytes,1,opt,name=from_date,json=fromDate,proto3" json:"from_date,omitempty"`
	ToDate   *timestamp.Timestamp `protobuf:"bytes,2,opt,name=to_date,json=toDate,proto3" json:"to_date,omitempty"`
	Currency Currency             `protobuf:"varint,3,opt,name=currency,proto3,enum=mcuc.stark.Currency" json:"currency,omitempty"`
}

func (x *GetSellReportByTellerRequest) Reset() {
	*x = GetSellReportByTellerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_howard_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSellReportByTellerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSellReportByTellerRequest) ProtoMessage() {}

func (x *GetSellReportByTellerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_howard_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSellReportByTellerRequest.ProtoReflect.Descriptor instead.
func (*GetSellReportByTellerRequest) Descriptor() ([]byte, []int) {
	return file_stark_api_howard_proto_rawDescGZIP(), []int{30}
}

func (x *GetSellReportByTellerRequest) GetFromDate() *timestamp.Timestamp {
	if x != nil {
		return x.FromDate
	}
	return nil
}

func (x *GetSellReportByTellerRequest) GetToDate() *timestamp.Timestamp {
	if x != nil {
		return x.ToDate
	}
	return nil
}

func (x *GetSellReportByTellerRequest) GetCurrency() Currency {
	if x != nil {
		return x.Currency
	}
	return Currency_CURRENCY_UNSPECIFIED
}

type GetSellReportByTellerReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TopUps    []*SaleReportItem `protobuf:"bytes,1,rep,name=top_ups,json=topUps,proto3" json:"top_ups,omitempty"`
	Withdraws []*SaleReportItem `protobuf:"bytes,2,rep,name=withdraws,proto3" json:"withdraws,omitempty"`
}

func (x *GetSellReportByTellerReply) Reset() {
	*x = GetSellReportByTellerReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stark_api_howard_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSellReportByTellerReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSellReportByTellerReply) ProtoMessage() {}

func (x *GetSellReportByTellerReply) ProtoReflect() protoreflect.Message {
	mi := &file_stark_api_howard_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSellReportByTellerReply.ProtoReflect.Descriptor instead.
func (*GetSellReportByTellerReply) Descriptor() ([]byte, []int) {
	return file_stark_api_howard_proto_rawDescGZIP(), []int{31}
}

func (x *GetSellReportByTellerReply) GetTopUps() []*SaleReportItem {
	if x != nil {
		return x.TopUps
	}
	return nil
}

func (x *GetSellReportByTellerReply) GetWithdraws() []*SaleReportItem {
	if x != nil {
		return x.Withdraws
	}
	return nil
}

var File_stark_api_howard_proto protoreflect.FileDescriptor

var file_stark_api_howard_proto_rawDesc = []byte{
	0x0a, 0x16, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x68, 0x6f, 0x77, 0x61,
	0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73,
	0x74, 0x61, 0x72, 0x6b, 0x2e, 0x68, 0x6f, 0x77, 0x61, 0x72, 0x64, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x43, 0x0a, 0x0f,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12,
	0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x22, 0xcb, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0c, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x17, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x47, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x6d, 0x63, 0x75,
	0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x68, 0x6f, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2f,
	0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x12, 0xfa, 0x42, 0x0f, 0x1a, 0x0d, 0x18, 0x0e, 0x28, 0xf4, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0x01, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x22,
	0xfb, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x38, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72,
	0x6b, 0x2e, 0x68, 0x6f, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12,
	0x3a, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x68, 0x6f, 0x77,
	0x61, 0x72, 0x64, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x04, 0x75,
	0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6d, 0x63, 0x75, 0x63,
	0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x68, 0x6f, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x04, 0x75,
	0x73, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x05, 0x61, 0x72, 0x70, 0x70, 0x75, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e,
	0x68, 0x6f, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x05, 0x61, 0x72, 0x70, 0x70, 0x75, 0x22, 0xb9, 0x01,
	0x0a, 0x1f, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x50,
	0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x37, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x74, 0x6f,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x06, 0x74, 0x6f, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x28, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x22, 0x02, 0x20, 0x00, 0x52, 0x0a, 0x6d,
	0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xa3, 0x02, 0x0a, 0x1d, 0x47, 0x65,
	0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x6d,
	0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x46, 0x0a,
	0x0c, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b,
	0x2e, 0x68, 0x6f, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x0c, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x66, 0x75, 0x6c, 0x6c, 0x79, 0x12, 0x3a, 0x0a, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61,
	0x72, 0x6b, 0x2e, 0x68, 0x6f, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x12, 0x3c, 0x0a, 0x07, 0x77, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e,
	0x68, 0x6f, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x07, 0x77, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x22,
	0x4e, 0x0a, 0x13, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0x96, 0x01, 0x0a, 0x11, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x51, 0x0a, 0x10, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x68, 0x6f, 0x77,
	0x61, 0x72, 0x64, 0x2e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4d,
	0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x52, 0x0f, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x22, 0xd4, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x37, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x74,
	0x6f, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x06, 0x74, 0x6f, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x2f,
	0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x12, 0xfa, 0x42, 0x0f, 0x1a, 0x0d, 0x18, 0x0e, 0x28, 0xf4, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0x01, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x22,
	0x55, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x3e, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73,
	0x74, 0x61, 0x72, 0x6b, 0x2e, 0x68, 0x6f, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x07, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0xdb, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x09, 0x66,
	0x72, 0x6f, 0x6d, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x74, 0x6f, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x06, 0x74, 0x6f, 0x44, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x0b, 0x6d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x22, 0x02, 0x20, 0x00, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x7a, 0x6f, 0x6e, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x12, 0xfa, 0x42, 0x0f, 0x1a, 0x0d, 0x18, 0x0e, 0x28,
	0xf4, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65,
	0x5a, 0x6f, 0x6e, 0x65, 0x22, 0x50, 0x0a, 0x06, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x2e,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x45, 0x0a, 0x0f, 0x54, 0x6f, 0x70, 0x55, 0x70, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x48, 0x0a,
	0x12, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x74, 0x0a, 0x10, 0x41, 0x6c, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x2e, 0x0a, 0x06, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x63,
	0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x22, 0x8b, 0x01,
	0x0a, 0x14, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52,
	0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74,
	0x61, 0x72, 0x6b, 0x2e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72,
	0x6b, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x40, 0x0a, 0x0d, 0x54,
	0x65, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x85, 0x01,
	0x0a, 0x17, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x35, 0x0a, 0x08, 0x72, 0x65, 0x76,
	0x65, 0x6e, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x63,
	0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x68, 0x6f, 0x77, 0x61, 0x72, 0x64, 0x2e,
	0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x52, 0x08, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x73,
	0x12, 0x33, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x68,
	0x6f, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x52, 0x07, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x74, 0x73, 0x22, 0xbe, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x64, 0x61, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x4e,
	0x0a, 0x11, 0x74, 0x6f, 0x70, 0x5f, 0x75, 0x70, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6d, 0x63, 0x75, 0x63,
	0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x68, 0x6f, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x54, 0x6f,
	0x70, 0x55, 0x70, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x74,
	0x6f, 0x70, 0x55, 0x70, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x56,
	0x0a, 0x13, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x63,
	0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x68, 0x6f, 0x77, 0x61, 0x72, 0x64, 0x2e,
	0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x12, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x7d, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x74, 0x52, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x23, 0x0a, 0x0d,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x74, 0x52, 0x61, 0x74, 0x65, 0x22, 0x98, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x70, 0x55, 0x70, 0x52, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74,
	0x6f, 0x70, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x54, 0x6f, 0x70, 0x75, 0x70, 0x12, 0x58, 0x0a, 0x16, 0x74, 0x6f, 0x70, 0x5f, 0x75, 0x70,
	0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74,
	0x61, 0x72, 0x6b, 0x2e, 0x68, 0x6f, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x13, 0x74, 0x6f, 0x70,
	0x55, 0x70, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65,
	0x22, 0xa6, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x52, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x77, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x12, 0x5d, 0x0a, 0x18, 0x77, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d,
	0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x68, 0x6f, 0x77, 0x61, 0x72, 0x64,
	0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x52, 0x16, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x41, 0x6c, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x22, 0x80, 0x01, 0x0a, 0x18, 0x47, 0x65,
	0x74, 0x54, 0x6f, 0x70, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x64, 0x0a, 0x1a, 0x74, 0x6f, 0x70, 0x5f, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x72, 0x65, 0x76,
	0x65, 0x6e, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6d, 0x63, 0x75,
	0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x68, 0x6f, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x65, 0x76, 0x65,
	0x6e, 0x75, 0x65, 0x52, 0x17, 0x74, 0x6f, 0x70, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x22, 0x63, 0x0a, 0x11,
	0x47, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x54, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x4e, 0x0a, 0x12, 0x74, 0x6f, 0x70, 0x5f, 0x74, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x5f,
	0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x68, 0x6f, 0x77, 0x61, 0x72,
	0x64, 0x2e, 0x54, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x52,
	0x10, 0x74, 0x6f, 0x70, 0x54, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75,
	0x65, 0x22, 0xd0, 0x02, 0x0a, 0x0e, 0x53, 0x61, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x49, 0x74, 0x65, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x76, 0x65, 0x72,
	0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x61, 0x76, 0x65, 0x72, 0x61,
	0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x07, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x6d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x00, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x3f, 0x0a,
	0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61,
	0x72, 0x6b, 0x2e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52,
	0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x1d,
	0x0a, 0x09, 0x74, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x08, 0x74, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x42, 0x05, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x22, 0xf2, 0x01, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x6c,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x33, 0x0a, 0x07, 0x74, 0x6f, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x06,
	0x74, 0x6f, 0x44, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e,
	0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x08,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x2f, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x12, 0xfa, 0x42, 0x0f,
	0x1a, 0x0d, 0x18, 0x0e, 0x28, 0xf4, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x52,
	0x08, 0x74, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x22, 0x9c, 0x01, 0x0a, 0x1d, 0x47, 0x65,
	0x74, 0x53, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x54, 0x69, 0x6d,
	0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x3a, 0x0a, 0x07, 0x74,
	0x6f, 0x70, 0x5f, 0x75, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d,
	0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x68, 0x6f, 0x77, 0x61, 0x72, 0x64,
	0x2e, 0x53, 0x61, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x06, 0x74, 0x6f, 0x70, 0x55, 0x70, 0x73, 0x12, 0x3f, 0x0a, 0x09, 0x77, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x63, 0x75,
	0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x68, 0x6f, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x53,
	0x61, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x09, 0x77,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x73, 0x22, 0xe3, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74,
	0x53, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x4d, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x09, 0x66,
	0x72, 0x6f, 0x6d, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x74, 0x6f, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x06, 0x74, 0x6f, 0x44, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x08, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x6d, 0x63,
	0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x6d,
	0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x22, 0x9b,
	0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x42, 0x79, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x3a, 0x0a, 0x07, 0x74, 0x6f, 0x70, 0x5f, 0x75, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x68, 0x6f,
	0x77, 0x61, 0x72, 0x64, 0x2e, 0x53, 0x61, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x06, 0x74, 0x6f, 0x70, 0x55, 0x70, 0x73, 0x12, 0x3f, 0x0a, 0x09, 0x77,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x68, 0x6f, 0x77, 0x61,
	0x72, 0x64, 0x2e, 0x53, 0x61, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x09, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x73, 0x22, 0xc5, 0x01, 0x0a,
	0x23, 0x47, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x79,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x65, 0x12, 0x33, 0x0a,
	0x07, 0x74, 0x6f, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x06, 0x74, 0x6f, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x30, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72,
	0x6b, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x22, 0xa0, 0x01, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x6c,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x3a, 0x0a, 0x07, 0x74, 0x6f,
	0x70, 0x5f, 0x75, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x63,
	0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x68, 0x6f, 0x77, 0x61, 0x72, 0x64, 0x2e,
	0x53, 0x61, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x06,
	0x74, 0x6f, 0x70, 0x55, 0x70, 0x73, 0x12, 0x3f, 0x0a, 0x09, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x63, 0x75, 0x63,
	0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x68, 0x6f, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x53, 0x61,
	0x6c, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x09, 0x77, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x73, 0x22, 0xbe, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x53,
	0x65, 0x6c, 0x6c, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x54, 0x65, 0x6c, 0x6c, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x33, 0x0a, 0x07, 0x74, 0x6f, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x06,
	0x74, 0x6f, 0x44, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e,
	0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x08,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22, 0x99, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74,
	0x53, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x54, 0x65, 0x6c, 0x6c,
	0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x3a, 0x0a, 0x07, 0x74, 0x6f, 0x70, 0x5f, 0x75,
	0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e,
	0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x68, 0x6f, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x53, 0x61, 0x6c,
	0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x06, 0x74, 0x6f, 0x70,
	0x55, 0x70, 0x73, 0x12, 0x3f, 0x0a, 0x09, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74,
	0x61, 0x72, 0x6b, 0x2e, 0x68, 0x6f, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x53, 0x61, 0x6c, 0x65, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x09, 0x77, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x73, 0x2a, 0x8e, 0x01, 0x0a, 0x13, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x1c,
	0x53, 0x54, 0x41, 0x54, 0x49, 0x53, 0x54, 0x49, 0x43, 0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a,
	0x0a, 0x16, 0x53, 0x54, 0x41, 0x54, 0x49, 0x53, 0x54, 0x49, 0x43, 0x5f, 0x46, 0x49, 0x4c, 0x54,
	0x45, 0x52, 0x5f, 0x44, 0x41, 0x49, 0x4c, 0x59, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x54,
	0x41, 0x54, 0x49, 0x53, 0x54, 0x49, 0x43, 0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x57,
	0x45, 0x45, 0x4b, 0x4c, 0x59, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x54, 0x41, 0x54, 0x49,
	0x53, 0x54, 0x49, 0x43, 0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x4d, 0x4f, 0x4e, 0x54,
	0x48, 0x4c, 0x59, 0x10, 0x03, 0x32, 0xa4, 0x0c, 0x0a, 0x06, 0x48, 0x6f, 0x77, 0x61, 0x72, 0x64,
	0x12, 0x5c, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x12, 0x26, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x68, 0x6f,
	0x77, 0x61, 0x72, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e,
	0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x68, 0x6f, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x47, 0x65, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x80,
	0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x32, 0x2e, 0x6d, 0x63,
	0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x68, 0x6f, 0x77, 0x61, 0x72, 0x64, 0x2e,
	0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x30, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x68, 0x6f, 0x77,
	0x61, 0x72, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x62, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x28, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b,
	0x2e, 0x68, 0x6f, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e,
	0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x68, 0x6f, 0x77, 0x61, 0x72,
	0x64, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x65, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x63, 0x6f,
	0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x2e, 0x6d, 0x63,
	0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x68, 0x6f, 0x77, 0x61, 0x72, 0x64, 0x2e,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2a, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x68, 0x6f,
	0x77, 0x61, 0x72, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x5f, 0x0a, 0x0f,
	0x47, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x64, 0x61, 0x79, 0x12,
	0x23, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x68, 0x6f, 0x77,
	0x61, 0x72, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72,
	0x6b, 0x2e, 0x68, 0x6f, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x54, 0x6f, 0x64, 0x61, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x5b, 0x0a,
	0x0d, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x23,
	0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x68, 0x6f, 0x77, 0x61,
	0x72, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b,
	0x2e, 0x68, 0x6f, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x74, 0x52, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x6d, 0x0a, 0x16, 0x47, 0x65,
	0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x70, 0x55, 0x70,
	0x52, 0x61, 0x74, 0x65, 0x12, 0x23, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72,
	0x6b, 0x2e, 0x68, 0x6f, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x6d, 0x63, 0x75, 0x63,
	0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x68, 0x6f, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x47, 0x65,
	0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x70, 0x55, 0x70,
	0x52, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x73, 0x0a, 0x19, 0x47, 0x65, 0x74,
	0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x52, 0x61, 0x74, 0x65, 0x12, 0x23, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74,
	0x61, 0x72, 0x6b, 0x2e, 0x68, 0x6f, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6d, 0x63,
	0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x68, 0x6f, 0x77, 0x61, 0x72, 0x64, 0x2e,
	0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x52, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x67,
	0x0a, 0x13, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x23, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61,
	0x72, 0x6b, 0x2e, 0x68, 0x6f, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6d, 0x63, 0x75,
	0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x68, 0x6f, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x47,
	0x65, 0x74, 0x54, 0x6f, 0x70, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x59, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x54, 0x6f,
	0x70, 0x54, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x23, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73,
	0x74, 0x61, 0x72, 0x6b, 0x2e, 0x68, 0x6f, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6d,
	0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x68, 0x6f, 0x77, 0x61, 0x72, 0x64,
	0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x54, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x80, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x6c, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x32, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x68, 0x6f, 0x77,
	0x61, 0x72, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x42, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b,
	0x2e, 0x68, 0x6f, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x6c, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x7d, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x6c,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x12, 0x31, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x68, 0x6f,
	0x77, 0x61, 0x72, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x42, 0x79, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b,
	0x2e, 0x68, 0x6f, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x6c, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x8c, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x6c,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x36, 0x2e, 0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61,
	0x72, 0x6b, 0x2e, 0x68, 0x6f, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x6c,
	0x6c, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e,
	0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x68, 0x6f, 0x77, 0x61, 0x72,
	0x64, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x42,
	0x79, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x77, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x6c, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x54, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x2f, 0x2e, 0x6d,
	0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x68, 0x6f, 0x77, 0x61, 0x72, 0x64,
	0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x79,
	0x54, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e,
	0x6d, 0x63, 0x75, 0x63, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2e, 0x68, 0x6f, 0x77, 0x61, 0x72,
	0x64, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x42,
	0x79, 0x54, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x42, 0x36, 0x5a, 0x34,
	0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x63, 0x75, 0x63, 0x2f,
	0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x65, 0x70, 0x6f, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64,
	0x2f, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x3b, 0x73,
	0x74, 0x61, 0x72, 0x6b, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_stark_api_howard_proto_rawDescOnce sync.Once
	file_stark_api_howard_proto_rawDescData = file_stark_api_howard_proto_rawDesc
)

func file_stark_api_howard_proto_rawDescGZIP() []byte {
	file_stark_api_howard_proto_rawDescOnce.Do(func() {
		file_stark_api_howard_proto_rawDescData = protoimpl.X.CompressGZIP(file_stark_api_howard_proto_rawDescData)
	})
	return file_stark_api_howard_proto_rawDescData
}

var file_stark_api_howard_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_stark_api_howard_proto_msgTypes = make([]protoimpl.MessageInfo, 32)
var file_stark_api_howard_proto_goTypes = []interface{}{
	(StatisticFilterType)(0),                    // 0: mcuc.stark.howard.StatisticFilterType
	(*StatisticDetail)(nil),                     // 1: mcuc.stark.howard.StatisticDetail
	(*GetStatisticRequest)(nil),                 // 2: mcuc.stark.howard.GetStatisticRequest
	(*GetStatisticReply)(nil),                   // 3: mcuc.stark.howard.GetStatisticReply
	(*GetProcessingPerformanceRequest)(nil),     // 4: mcuc.stark.howard.GetProcessingPerformanceRequest
	(*GetProcessingPerformanceReply)(nil),       // 5: mcuc.stark.howard.GetProcessingPerformanceReply
	(*TotalAmountMerchant)(nil),                 // 6: mcuc.stark.howard.TotalAmountMerchant
	(*TotalAmountDetail)(nil),                   // 7: mcuc.stark.howard.TotalAmountDetail
	(*GetTotalAmountRequest)(nil),               // 8: mcuc.stark.howard.GetTotalAmountRequest
	(*GetTotalAmountReply)(nil),                 // 9: mcuc.stark.howard.GetTotalAmountReply
	(*GetReportRequest)(nil),                    // 10: mcuc.stark.howard.GetReportRequest
	(*Income)(nil),                              // 11: mcuc.stark.howard.Income
	(*TopUpCompletion)(nil),                     // 12: mcuc.stark.howard.TopUpCompletion
	(*WithdrawCompletion)(nil),                  // 13: mcuc.stark.howard.WithdrawCompletion
	(*AllocationDetail)(nil),                    // 14: mcuc.stark.howard.AllocationDetail
	(*PaymentMethodRevenue)(nil),                // 15: mcuc.stark.howard.PaymentMethodRevenue
	(*TellerRevenue)(nil),                       // 16: mcuc.stark.howard.TellerRevenue
	(*GetIncomeStatementReply)(nil),             // 17: mcuc.stark.howard.GetIncomeStatementReply
	(*GetPaymentTodayReply)(nil),                // 18: mcuc.stark.howard.GetPaymentTodayReply
	(*GetProfitRateReply)(nil),                  // 19: mcuc.stark.howard.GetProfitRateReply
	(*GetAllocationTopUpRateReply)(nil),         // 20: mcuc.stark.howard.GetAllocationTopUpRateReply
	(*GetAllocationWithdrawRateReply)(nil),      // 21: mcuc.stark.howard.GetAllocationWithdrawRateReply
	(*GetTopPaymentMethodReply)(nil),            // 22: mcuc.stark.howard.GetTopPaymentMethodReply
	(*GetTopTellerReply)(nil),                   // 23: mcuc.stark.howard.GetTopTellerReply
	(*SaleReportItem)(nil),                      // 24: mcuc.stark.howard.SaleReportItem
	(*GetSellReportByTimeRangeRequest)(nil),     // 25: mcuc.stark.howard.GetSellReportByTimeRangeRequest
	(*GetSellReportByTimeRangeReply)(nil),       // 26: mcuc.stark.howard.GetSellReportByTimeRangeReply
	(*GetSellReportByMerchantRequest)(nil),      // 27: mcuc.stark.howard.GetSellReportByMerchantRequest
	(*GetSellReportByMerchantReply)(nil),        // 28: mcuc.stark.howard.GetSellReportByMerchantReply
	(*GetSellReportByPaymentMethodRequest)(nil), // 29: mcuc.stark.howard.GetSellReportByPaymentMethodRequest
	(*GetSellReportByPaymentMethodReply)(nil),   // 30: mcuc.stark.howard.GetSellReportByPaymentMethodReply
	(*GetSellReportByTellerRequest)(nil),        // 31: mcuc.stark.howard.GetSellReportByTellerRequest
	(*GetSellReportByTellerReply)(nil),          // 32: mcuc.stark.howard.GetSellReportByTellerReply
	(PaymentType)(0),                            // 33: mcuc.stark.PaymentType
	(*timestamp.Timestamp)(nil),                 // 34: google.protobuf.Timestamp
	(MethodType)(0),                             // 35: mcuc.stark.MethodType
	(Currency)(0),                               // 36: mcuc.stark.Currency
}
var file_stark_api_howard_proto_depIdxs = []int32{
	33, // 0: mcuc.stark.howard.GetStatisticRequest.payment_type:type_name -> mcuc.stark.PaymentType
	0,  // 1: mcuc.stark.howard.GetStatisticRequest.filter_type:type_name -> mcuc.stark.howard.StatisticFilterType
	1,  // 2: mcuc.stark.howard.GetStatisticReply.order:type_name -> mcuc.stark.howard.StatisticDetail
	1,  // 3: mcuc.stark.howard.GetStatisticReply.amount:type_name -> mcuc.stark.howard.StatisticDetail
	1,  // 4: mcuc.stark.howard.GetStatisticReply.user:type_name -> mcuc.stark.howard.StatisticDetail
	1,  // 5: mcuc.stark.howard.GetStatisticReply.arppu:type_name -> mcuc.stark.howard.StatisticDetail
	34, // 6: mcuc.stark.howard.GetProcessingPerformanceRequest.from_date:type_name -> google.protobuf.Timestamp
	34, // 7: mcuc.stark.howard.GetProcessingPerformanceRequest.to_date:type_name -> google.protobuf.Timestamp
	1,  // 8: mcuc.stark.howard.GetProcessingPerformanceReply.successfully:type_name -> mcuc.stark.howard.StatisticDetail
	1,  // 9: mcuc.stark.howard.GetProcessingPerformanceReply.failed:type_name -> mcuc.stark.howard.StatisticDetail
	1,  // 10: mcuc.stark.howard.GetProcessingPerformanceReply.waiting:type_name -> mcuc.stark.howard.StatisticDetail
	34, // 11: mcuc.stark.howard.TotalAmountDetail.date:type_name -> google.protobuf.Timestamp
	6,  // 12: mcuc.stark.howard.TotalAmountDetail.merchant_amounts:type_name -> mcuc.stark.howard.TotalAmountMerchant
	34, // 13: mcuc.stark.howard.GetTotalAmountRequest.from_date:type_name -> google.protobuf.Timestamp
	34, // 14: mcuc.stark.howard.GetTotalAmountRequest.to_date:type_name -> google.protobuf.Timestamp
	7,  // 15: mcuc.stark.howard.GetTotalAmountReply.details:type_name -> mcuc.stark.howard.TotalAmountDetail
	34, // 16: mcuc.stark.howard.GetReportRequest.from_date:type_name -> google.protobuf.Timestamp
	34, // 17: mcuc.stark.howard.GetReportRequest.to_date:type_name -> google.protobuf.Timestamp
	34, // 18: mcuc.stark.howard.Income.date:type_name -> google.protobuf.Timestamp
	35, // 19: mcuc.stark.howard.AllocationDetail.method:type_name -> mcuc.stark.MethodType
	35, // 20: mcuc.stark.howard.PaymentMethodRevenue.method:type_name -> mcuc.stark.MethodType
	33, // 21: mcuc.stark.howard.PaymentMethodRevenue.type:type_name -> mcuc.stark.PaymentType
	11, // 22: mcuc.stark.howard.GetIncomeStatementReply.revenues:type_name -> mcuc.stark.howard.Income
	11, // 23: mcuc.stark.howard.GetIncomeStatementReply.profits:type_name -> mcuc.stark.howard.Income
	12, // 24: mcuc.stark.howard.GetPaymentTodayReply.top_up_completion:type_name -> mcuc.stark.howard.TopUpCompletion
	13, // 25: mcuc.stark.howard.GetPaymentTodayReply.withdraw_completion:type_name -> mcuc.stark.howard.WithdrawCompletion
	14, // 26: mcuc.stark.howard.GetAllocationTopUpRateReply.top_up_allocation_rate:type_name -> mcuc.stark.howard.AllocationDetail
	14, // 27: mcuc.stark.howard.GetAllocationWithdrawRateReply.withdraw_allocation_rate:type_name -> mcuc.stark.howard.AllocationDetail
	15, // 28: mcuc.stark.howard.GetTopPaymentMethodReply.top_payment_method_revenue:type_name -> mcuc.stark.howard.PaymentMethodRevenue
	16, // 29: mcuc.stark.howard.GetTopTellerReply.top_teller_revenue:type_name -> mcuc.stark.howard.TellerRevenue
	34, // 30: mcuc.stark.howard.SaleReportItem.date:type_name -> google.protobuf.Timestamp
	35, // 31: mcuc.stark.howard.SaleReportItem.payment_method:type_name -> mcuc.stark.MethodType
	34, // 32: mcuc.stark.howard.GetSellReportByTimeRangeRequest.from_date:type_name -> google.protobuf.Timestamp
	34, // 33: mcuc.stark.howard.GetSellReportByTimeRangeRequest.to_date:type_name -> google.protobuf.Timestamp
	36, // 34: mcuc.stark.howard.GetSellReportByTimeRangeRequest.currency:type_name -> mcuc.stark.Currency
	24, // 35: mcuc.stark.howard.GetSellReportByTimeRangeReply.top_ups:type_name -> mcuc.stark.howard.SaleReportItem
	24, // 36: mcuc.stark.howard.GetSellReportByTimeRangeReply.withdraws:type_name -> mcuc.stark.howard.SaleReportItem
	34, // 37: mcuc.stark.howard.GetSellReportByMerchantRequest.from_date:type_name -> google.protobuf.Timestamp
	34, // 38: mcuc.stark.howard.GetSellReportByMerchantRequest.to_date:type_name -> google.protobuf.Timestamp
	36, // 39: mcuc.stark.howard.GetSellReportByMerchantRequest.currency:type_name -> mcuc.stark.Currency
	24, // 40: mcuc.stark.howard.GetSellReportByMerchantReply.top_ups:type_name -> mcuc.stark.howard.SaleReportItem
	24, // 41: mcuc.stark.howard.GetSellReportByMerchantReply.withdraws:type_name -> mcuc.stark.howard.SaleReportItem
	34, // 42: mcuc.stark.howard.GetSellReportByPaymentMethodRequest.from_date:type_name -> google.protobuf.Timestamp
	34, // 43: mcuc.stark.howard.GetSellReportByPaymentMethodRequest.to_date:type_name -> google.protobuf.Timestamp
	36, // 44: mcuc.stark.howard.GetSellReportByPaymentMethodRequest.currency:type_name -> mcuc.stark.Currency
	24, // 45: mcuc.stark.howard.GetSellReportByPaymentMethodReply.top_ups:type_name -> mcuc.stark.howard.SaleReportItem
	24, // 46: mcuc.stark.howard.GetSellReportByPaymentMethodReply.withdraws:type_name -> mcuc.stark.howard.SaleReportItem
	34, // 47: mcuc.stark.howard.GetSellReportByTellerRequest.from_date:type_name -> google.protobuf.Timestamp
	34, // 48: mcuc.stark.howard.GetSellReportByTellerRequest.to_date:type_name -> google.protobuf.Timestamp
	36, // 49: mcuc.stark.howard.GetSellReportByTellerRequest.currency:type_name -> mcuc.stark.Currency
	24, // 50: mcuc.stark.howard.GetSellReportByTellerReply.top_ups:type_name -> mcuc.stark.howard.SaleReportItem
	24, // 51: mcuc.stark.howard.GetSellReportByTellerReply.withdraws:type_name -> mcuc.stark.howard.SaleReportItem
	2,  // 52: mcuc.stark.howard.Howard.GetStatistic:input_type -> mcuc.stark.howard.GetStatisticRequest
	4,  // 53: mcuc.stark.howard.Howard.GetProcessingPerformance:input_type -> mcuc.stark.howard.GetProcessingPerformanceRequest
	8,  // 54: mcuc.stark.howard.Howard.GetTotalAmount:input_type -> mcuc.stark.howard.GetTotalAmountRequest
	10, // 55: mcuc.stark.howard.Howard.GetIncomeStatement:input_type -> mcuc.stark.howard.GetReportRequest
	10, // 56: mcuc.stark.howard.Howard.GetPaymentToday:input_type -> mcuc.stark.howard.GetReportRequest
	10, // 57: mcuc.stark.howard.Howard.GetProfitRate:input_type -> mcuc.stark.howard.GetReportRequest
	10, // 58: mcuc.stark.howard.Howard.GetAllocationTopUpRate:input_type -> mcuc.stark.howard.GetReportRequest
	10, // 59: mcuc.stark.howard.Howard.GetAllocationWithdrawRate:input_type -> mcuc.stark.howard.GetReportRequest
	10, // 60: mcuc.stark.howard.Howard.GetTopPaymentMethod:input_type -> mcuc.stark.howard.GetReportRequest
	10, // 61: mcuc.stark.howard.Howard.GetTopTeller:input_type -> mcuc.stark.howard.GetReportRequest
	25, // 62: mcuc.stark.howard.Howard.GetSellReportByTimeRange:input_type -> mcuc.stark.howard.GetSellReportByTimeRangeRequest
	27, // 63: mcuc.stark.howard.Howard.GetSellReportByMerchant:input_type -> mcuc.stark.howard.GetSellReportByMerchantRequest
	29, // 64: mcuc.stark.howard.Howard.GetSellReportByPaymentMethod:input_type -> mcuc.stark.howard.GetSellReportByPaymentMethodRequest
	31, // 65: mcuc.stark.howard.Howard.GetSellReportByTeller:input_type -> mcuc.stark.howard.GetSellReportByTellerRequest
	3,  // 66: mcuc.stark.howard.Howard.GetStatistic:output_type -> mcuc.stark.howard.GetStatisticReply
	5,  // 67: mcuc.stark.howard.Howard.GetProcessingPerformance:output_type -> mcuc.stark.howard.GetProcessingPerformanceReply
	9,  // 68: mcuc.stark.howard.Howard.GetTotalAmount:output_type -> mcuc.stark.howard.GetTotalAmountReply
	17, // 69: mcuc.stark.howard.Howard.GetIncomeStatement:output_type -> mcuc.stark.howard.GetIncomeStatementReply
	18, // 70: mcuc.stark.howard.Howard.GetPaymentToday:output_type -> mcuc.stark.howard.GetPaymentTodayReply
	19, // 71: mcuc.stark.howard.Howard.GetProfitRate:output_type -> mcuc.stark.howard.GetProfitRateReply
	20, // 72: mcuc.stark.howard.Howard.GetAllocationTopUpRate:output_type -> mcuc.stark.howard.GetAllocationTopUpRateReply
	21, // 73: mcuc.stark.howard.Howard.GetAllocationWithdrawRate:output_type -> mcuc.stark.howard.GetAllocationWithdrawRateReply
	22, // 74: mcuc.stark.howard.Howard.GetTopPaymentMethod:output_type -> mcuc.stark.howard.GetTopPaymentMethodReply
	23, // 75: mcuc.stark.howard.Howard.GetTopTeller:output_type -> mcuc.stark.howard.GetTopTellerReply
	26, // 76: mcuc.stark.howard.Howard.GetSellReportByTimeRange:output_type -> mcuc.stark.howard.GetSellReportByTimeRangeReply
	28, // 77: mcuc.stark.howard.Howard.GetSellReportByMerchant:output_type -> mcuc.stark.howard.GetSellReportByMerchantReply
	30, // 78: mcuc.stark.howard.Howard.GetSellReportByPaymentMethod:output_type -> mcuc.stark.howard.GetSellReportByPaymentMethodReply
	32, // 79: mcuc.stark.howard.Howard.GetSellReportByTeller:output_type -> mcuc.stark.howard.GetSellReportByTellerReply
	66, // [66:80] is the sub-list for method output_type
	52, // [52:66] is the sub-list for method input_type
	52, // [52:52] is the sub-list for extension type_name
	52, // [52:52] is the sub-list for extension extendee
	0,  // [0:52] is the sub-list for field type_name
}

func init() { file_stark_api_howard_proto_init() }
func file_stark_api_howard_proto_init() {
	if File_stark_api_howard_proto != nil {
		return
	}
	file_stark_api_stark_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_stark_api_howard_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatisticDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_howard_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStatisticRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_howard_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStatisticReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_howard_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProcessingPerformanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_howard_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProcessingPerformanceReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_howard_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TotalAmountMerchant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_howard_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TotalAmountDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_howard_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTotalAmountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_howard_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTotalAmountReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_howard_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_howard_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Income); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_howard_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopUpCompletion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_howard_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithdrawCompletion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_howard_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllocationDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_howard_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentMethodRevenue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_howard_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TellerRevenue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_howard_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIncomeStatementReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_howard_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPaymentTodayReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_howard_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProfitRateReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_howard_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllocationTopUpRateReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_howard_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllocationWithdrawRateReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_howard_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTopPaymentMethodReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_howard_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTopTellerReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_howard_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaleReportItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_howard_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSellReportByTimeRangeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_howard_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSellReportByTimeRangeReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_howard_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSellReportByMerchantRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_howard_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSellReportByMerchantReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_howard_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSellReportByPaymentMethodRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_howard_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSellReportByPaymentMethodReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_howard_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSellReportByTellerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stark_api_howard_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSellReportByTellerReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_stark_api_howard_proto_msgTypes[23].OneofWrappers = []interface{}{
		(*SaleReportItem_Date)(nil),
		(*SaleReportItem_MerchantId)(nil),
		(*SaleReportItem_PaymentMethod)(nil),
		(*SaleReportItem_TellerId)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_stark_api_howard_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   32,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_stark_api_howard_proto_goTypes,
		DependencyIndexes: file_stark_api_howard_proto_depIdxs,
		EnumInfos:         file_stark_api_howard_proto_enumTypes,
		MessageInfos:      file_stark_api_howard_proto_msgTypes,
	}.Build()
	File_stark_api_howard_proto = out.File
	file_stark_api_howard_proto_rawDesc = nil
	file_stark_api_howard_proto_goTypes = nil
	file_stark_api_howard_proto_depIdxs = nil
}
