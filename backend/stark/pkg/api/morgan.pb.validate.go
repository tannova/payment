// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: stark/api/morgan.proto

package stark

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"

	groot "gitlab.com/mcuc/monorepo/backend/groot/pkg/api"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}

	_ = groot.TelcoName(0)

	_ = groot.TelcoName(0)
)

// define the regex for a UUID once up-front
var _morgan_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on CreateTelcoWithdrawRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateTelcoWithdrawRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetAmount() <= 0 {
		return CreateTelcoWithdrawRequestValidationError{
			field:  "Amount",
			reason: "value must be greater than 0",
		}
	}

	// no validation rules for TelcoName

	// no validation rules for MerchantUserId

	return nil
}

// CreateTelcoWithdrawRequestValidationError is the validation error returned
// by CreateTelcoWithdrawRequest.Validate if the designated constraints aren't met.
type CreateTelcoWithdrawRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTelcoWithdrawRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTelcoWithdrawRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTelcoWithdrawRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTelcoWithdrawRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTelcoWithdrawRequestValidationError) ErrorName() string {
	return "CreateTelcoWithdrawRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTelcoWithdrawRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTelcoWithdrawRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTelcoWithdrawRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTelcoWithdrawRequestValidationError{}

// Validate checks the field values on CreateTelcoWithdrawReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateTelcoWithdrawReply) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for PaymentId

	return nil
}

// CreateTelcoWithdrawReplyValidationError is the validation error returned by
// CreateTelcoWithdrawReply.Validate if the designated constraints aren't met.
type CreateTelcoWithdrawReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTelcoWithdrawReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTelcoWithdrawReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTelcoWithdrawReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTelcoWithdrawReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTelcoWithdrawReplyValidationError) ErrorName() string {
	return "CreateTelcoWithdrawReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTelcoWithdrawReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTelcoWithdrawReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTelcoWithdrawReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTelcoWithdrawReplyValidationError{}

// Validate checks the field values on CreateTelcoTopUpRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateTelcoTopUpRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetCard()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateTelcoTopUpRequestValidationError{
				field:  "Card",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for TxId

	// no validation rules for MerchantUserId

	return nil
}

// CreateTelcoTopUpRequestValidationError is the validation error returned by
// CreateTelcoTopUpRequest.Validate if the designated constraints aren't met.
type CreateTelcoTopUpRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTelcoTopUpRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTelcoTopUpRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTelcoTopUpRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTelcoTopUpRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTelcoTopUpRequestValidationError) ErrorName() string {
	return "CreateTelcoTopUpRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTelcoTopUpRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTelcoTopUpRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTelcoTopUpRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTelcoTopUpRequestValidationError{}

// Validate checks the field values on CreateTelcoTopUpReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateTelcoTopUpReply) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for PaymentId

	return nil
}

// CreateTelcoTopUpReplyValidationError is the validation error returned by
// CreateTelcoTopUpReply.Validate if the designated constraints aren't met.
type CreateTelcoTopUpReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTelcoTopUpReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTelcoTopUpReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTelcoTopUpReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTelcoTopUpReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTelcoTopUpReplyValidationError) ErrorName() string {
	return "CreateTelcoTopUpReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTelcoTopUpReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTelcoTopUpReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTelcoTopUpReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTelcoTopUpReplyValidationError{}

// Validate checks the field values on CancelTelcoWithdrawRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CancelTelcoWithdrawRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for PaymentId

	return nil
}

// CancelTelcoWithdrawRequestValidationError is the validation error returned
// by CancelTelcoWithdrawRequest.Validate if the designated constraints aren't met.
type CancelTelcoWithdrawRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelTelcoWithdrawRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelTelcoWithdrawRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelTelcoWithdrawRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelTelcoWithdrawRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelTelcoWithdrawRequestValidationError) ErrorName() string {
	return "CancelTelcoWithdrawRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CancelTelcoWithdrawRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelTelcoWithdrawRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelTelcoWithdrawRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelTelcoWithdrawRequestValidationError{}

// Validate checks the field values on CancelTelcoWithdrawReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CancelTelcoWithdrawReply) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// CancelTelcoWithdrawReplyValidationError is the validation error returned by
// CancelTelcoWithdrawReply.Validate if the designated constraints aren't met.
type CancelTelcoWithdrawReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelTelcoWithdrawReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelTelcoWithdrawReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelTelcoWithdrawReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelTelcoWithdrawReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelTelcoWithdrawReplyValidationError) ErrorName() string {
	return "CancelTelcoWithdrawReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CancelTelcoWithdrawReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelTelcoWithdrawReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelTelcoWithdrawReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelTelcoWithdrawReplyValidationError{}

// Validate checks the field values on CompleteTelcoTopUpRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CompleteTelcoTopUpRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetCard()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CompleteTelcoTopUpRequestValidationError{
				field:  "Card",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for PaymentId

	// no validation rules for ChargedAmount

	// no validation rules for Provider

	return nil
}

// CompleteTelcoTopUpRequestValidationError is the validation error returned by
// CompleteTelcoTopUpRequest.Validate if the designated constraints aren't met.
type CompleteTelcoTopUpRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompleteTelcoTopUpRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompleteTelcoTopUpRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompleteTelcoTopUpRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompleteTelcoTopUpRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompleteTelcoTopUpRequestValidationError) ErrorName() string {
	return "CompleteTelcoTopUpRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CompleteTelcoTopUpRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompleteTelcoTopUpRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompleteTelcoTopUpRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompleteTelcoTopUpRequestValidationError{}

// Validate checks the field values on CompleteTelcoTopUpReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CompleteTelcoTopUpReply) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// CompleteTelcoTopUpReplyValidationError is the validation error returned by
// CompleteTelcoTopUpReply.Validate if the designated constraints aren't met.
type CompleteTelcoTopUpReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompleteTelcoTopUpReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompleteTelcoTopUpReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompleteTelcoTopUpReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompleteTelcoTopUpReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompleteTelcoTopUpReplyValidationError) ErrorName() string {
	return "CompleteTelcoTopUpReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CompleteTelcoTopUpReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompleteTelcoTopUpReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompleteTelcoTopUpReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompleteTelcoTopUpReplyValidationError{}

// Validate checks the field values on ApproveTelcoTopUpRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ApproveTelcoTopUpRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for PaymentId

	// no validation rules for Note

	return nil
}

// ApproveTelcoTopUpRequestValidationError is the validation error returned by
// ApproveTelcoTopUpRequest.Validate if the designated constraints aren't met.
type ApproveTelcoTopUpRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApproveTelcoTopUpRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApproveTelcoTopUpRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApproveTelcoTopUpRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApproveTelcoTopUpRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApproveTelcoTopUpRequestValidationError) ErrorName() string {
	return "ApproveTelcoTopUpRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ApproveTelcoTopUpRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApproveTelcoTopUpRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApproveTelcoTopUpRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApproveTelcoTopUpRequestValidationError{}

// Validate checks the field values on ApproveTelcoTopUpReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ApproveTelcoTopUpReply) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ApproveTelcoTopUpReplyValidationError is the validation error returned by
// ApproveTelcoTopUpReply.Validate if the designated constraints aren't met.
type ApproveTelcoTopUpReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApproveTelcoTopUpReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApproveTelcoTopUpReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApproveTelcoTopUpReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApproveTelcoTopUpReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApproveTelcoTopUpReplyValidationError) ErrorName() string {
	return "ApproveTelcoTopUpReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ApproveTelcoTopUpReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApproveTelcoTopUpReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApproveTelcoTopUpReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApproveTelcoTopUpReplyValidationError{}

// Validate checks the field values on ApproveTelcoWithdrawRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ApproveTelcoWithdrawRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for PaymentId

	// no validation rules for Note

	return nil
}

// ApproveTelcoWithdrawRequestValidationError is the validation error returned
// by ApproveTelcoWithdrawRequest.Validate if the designated constraints
// aren't met.
type ApproveTelcoWithdrawRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApproveTelcoWithdrawRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApproveTelcoWithdrawRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApproveTelcoWithdrawRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApproveTelcoWithdrawRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApproveTelcoWithdrawRequestValidationError) ErrorName() string {
	return "ApproveTelcoWithdrawRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ApproveTelcoWithdrawRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApproveTelcoWithdrawRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApproveTelcoWithdrawRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApproveTelcoWithdrawRequestValidationError{}

// Validate checks the field values on ApproveTelcoWithdrawReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ApproveTelcoWithdrawReply) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ApproveTelcoWithdrawReplyValidationError is the validation error returned by
// ApproveTelcoWithdrawReply.Validate if the designated constraints aren't met.
type ApproveTelcoWithdrawReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApproveTelcoWithdrawReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApproveTelcoWithdrawReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApproveTelcoWithdrawReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApproveTelcoWithdrawReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApproveTelcoWithdrawReplyValidationError) ErrorName() string {
	return "ApproveTelcoWithdrawReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ApproveTelcoWithdrawReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApproveTelcoWithdrawReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApproveTelcoWithdrawReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApproveTelcoWithdrawReplyValidationError{}

// Validate checks the field values on RejectTelcoTopUpRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RejectTelcoTopUpRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for PaymentId

	// no validation rules for Note

	// no validation rules for IsMerchantCall

	return nil
}

// RejectTelcoTopUpRequestValidationError is the validation error returned by
// RejectTelcoTopUpRequest.Validate if the designated constraints aren't met.
type RejectTelcoTopUpRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RejectTelcoTopUpRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RejectTelcoTopUpRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RejectTelcoTopUpRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RejectTelcoTopUpRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RejectTelcoTopUpRequestValidationError) ErrorName() string {
	return "RejectTelcoTopUpRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RejectTelcoTopUpRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRejectTelcoTopUpRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RejectTelcoTopUpRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RejectTelcoTopUpRequestValidationError{}

// Validate checks the field values on RejectTelcoTopUpReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RejectTelcoTopUpReply) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// RejectTelcoTopUpReplyValidationError is the validation error returned by
// RejectTelcoTopUpReply.Validate if the designated constraints aren't met.
type RejectTelcoTopUpReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RejectTelcoTopUpReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RejectTelcoTopUpReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RejectTelcoTopUpReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RejectTelcoTopUpReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RejectTelcoTopUpReplyValidationError) ErrorName() string {
	return "RejectTelcoTopUpReplyValidationError"
}

// Error satisfies the builtin error interface
func (e RejectTelcoTopUpReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRejectTelcoTopUpReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RejectTelcoTopUpReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RejectTelcoTopUpReplyValidationError{}

// Validate checks the field values on RejectTelcoWithdrawRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RejectTelcoWithdrawRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for PaymentId

	// no validation rules for Note

	// no validation rules for IsMerchantCall

	return nil
}

// RejectTelcoWithdrawRequestValidationError is the validation error returned
// by RejectTelcoWithdrawRequest.Validate if the designated constraints aren't met.
type RejectTelcoWithdrawRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RejectTelcoWithdrawRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RejectTelcoWithdrawRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RejectTelcoWithdrawRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RejectTelcoWithdrawRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RejectTelcoWithdrawRequestValidationError) ErrorName() string {
	return "RejectTelcoWithdrawRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RejectTelcoWithdrawRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRejectTelcoWithdrawRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RejectTelcoWithdrawRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RejectTelcoWithdrawRequestValidationError{}

// Validate checks the field values on RejectTelcoWithdrawReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RejectTelcoWithdrawReply) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// RejectTelcoWithdrawReplyValidationError is the validation error returned by
// RejectTelcoWithdrawReply.Validate if the designated constraints aren't met.
type RejectTelcoWithdrawReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RejectTelcoWithdrawReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RejectTelcoWithdrawReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RejectTelcoWithdrawReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RejectTelcoWithdrawReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RejectTelcoWithdrawReplyValidationError) ErrorName() string {
	return "RejectTelcoWithdrawReplyValidationError"
}

// Error satisfies the builtin error interface
func (e RejectTelcoWithdrawReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRejectTelcoWithdrawReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RejectTelcoWithdrawReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RejectTelcoWithdrawReplyValidationError{}

// Validate checks the field values on GetSettingsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetSettingsRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetSettingsRequestValidationError is the validation error returned by
// GetSettingsRequest.Validate if the designated constraints aren't met.
type GetSettingsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSettingsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSettingsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSettingsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSettingsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSettingsRequestValidationError) ErrorName() string {
	return "GetSettingsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSettingsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSettingsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSettingsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSettingsRequestValidationError{}

// Validate checks the field values on GetSettingsReply with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetSettingsReply) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for TopUpAutoApproval

	// no validation rules for EnableThirdParty

	for idx, item := range m.GetChargeCardProviders() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetSettingsReplyValidationError{
					field:  fmt.Sprintf("ChargeCardProviders[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetGetCardProviders() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetSettingsReplyValidationError{
					field:  fmt.Sprintf("GetCardProviders[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetSettingsReplyValidationError is the validation error returned by
// GetSettingsReply.Validate if the designated constraints aren't met.
type GetSettingsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSettingsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSettingsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSettingsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSettingsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSettingsReplyValidationError) ErrorName() string { return "GetSettingsReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetSettingsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSettingsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSettingsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSettingsReplyValidationError{}

// Validate checks the field values on UpdateTopUpAutoApprovalSettingRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *UpdateTopUpAutoApprovalSettingRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for TopUpAutoApproval

	return nil
}

// UpdateTopUpAutoApprovalSettingRequestValidationError is the validation error
// returned by UpdateTopUpAutoApprovalSettingRequest.Validate if the
// designated constraints aren't met.
type UpdateTopUpAutoApprovalSettingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTopUpAutoApprovalSettingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTopUpAutoApprovalSettingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTopUpAutoApprovalSettingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTopUpAutoApprovalSettingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTopUpAutoApprovalSettingRequestValidationError) ErrorName() string {
	return "UpdateTopUpAutoApprovalSettingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTopUpAutoApprovalSettingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTopUpAutoApprovalSettingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTopUpAutoApprovalSettingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTopUpAutoApprovalSettingRequestValidationError{}

// Validate checks the field values on UpdateTopUpAutoApprovalSettingReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *UpdateTopUpAutoApprovalSettingReply) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// UpdateTopUpAutoApprovalSettingReplyValidationError is the validation error
// returned by UpdateTopUpAutoApprovalSettingReply.Validate if the designated
// constraints aren't met.
type UpdateTopUpAutoApprovalSettingReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTopUpAutoApprovalSettingReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTopUpAutoApprovalSettingReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTopUpAutoApprovalSettingReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTopUpAutoApprovalSettingReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTopUpAutoApprovalSettingReplyValidationError) ErrorName() string {
	return "UpdateTopUpAutoApprovalSettingReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTopUpAutoApprovalSettingReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTopUpAutoApprovalSettingReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTopUpAutoApprovalSettingReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTopUpAutoApprovalSettingReplyValidationError{}

// Validate checks the field values on UpdateUsingThirdPartySettingRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *UpdateUsingThirdPartySettingRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for EnableThirdParty

	return nil
}

// UpdateUsingThirdPartySettingRequestValidationError is the validation error
// returned by UpdateUsingThirdPartySettingRequest.Validate if the designated
// constraints aren't met.
type UpdateUsingThirdPartySettingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUsingThirdPartySettingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUsingThirdPartySettingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUsingThirdPartySettingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUsingThirdPartySettingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUsingThirdPartySettingRequestValidationError) ErrorName() string {
	return "UpdateUsingThirdPartySettingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUsingThirdPartySettingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUsingThirdPartySettingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUsingThirdPartySettingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUsingThirdPartySettingRequestValidationError{}

// Validate checks the field values on UpdateUsingThirdPartySettingReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *UpdateUsingThirdPartySettingReply) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// UpdateUsingThirdPartySettingReplyValidationError is the validation error
// returned by UpdateUsingThirdPartySettingReply.Validate if the designated
// constraints aren't met.
type UpdateUsingThirdPartySettingReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUsingThirdPartySettingReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUsingThirdPartySettingReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUsingThirdPartySettingReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUsingThirdPartySettingReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUsingThirdPartySettingReplyValidationError) ErrorName() string {
	return "UpdateUsingThirdPartySettingReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUsingThirdPartySettingReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUsingThirdPartySettingReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUsingThirdPartySettingReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUsingThirdPartySettingReplyValidationError{}

// Validate checks the field values on Provider with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Provider) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Enable

	// no validation rules for Priority

	return nil
}

// ProviderValidationError is the validation error returned by
// Provider.Validate if the designated constraints aren't met.
type ProviderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProviderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProviderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProviderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProviderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProviderValidationError) ErrorName() string { return "ProviderValidationError" }

// Error satisfies the builtin error interface
func (e ProviderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProvider.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProviderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProviderValidationError{}

// Validate checks the field values on UpdateChargeCardProvidersSettingRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *UpdateChargeCardProvidersSettingRequest) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetProviders() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateChargeCardProvidersSettingRequestValidationError{
					field:  fmt.Sprintf("Providers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// UpdateChargeCardProvidersSettingRequestValidationError is the validation
// error returned by UpdateChargeCardProvidersSettingRequest.Validate if the
// designated constraints aren't met.
type UpdateChargeCardProvidersSettingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateChargeCardProvidersSettingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateChargeCardProvidersSettingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateChargeCardProvidersSettingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateChargeCardProvidersSettingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateChargeCardProvidersSettingRequestValidationError) ErrorName() string {
	return "UpdateChargeCardProvidersSettingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateChargeCardProvidersSettingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateChargeCardProvidersSettingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateChargeCardProvidersSettingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateChargeCardProvidersSettingRequestValidationError{}

// Validate checks the field values on UpdateChargeCardProvidersSettingReply
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *UpdateChargeCardProvidersSettingReply) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// UpdateChargeCardProvidersSettingReplyValidationError is the validation error
// returned by UpdateChargeCardProvidersSettingReply.Validate if the
// designated constraints aren't met.
type UpdateChargeCardProvidersSettingReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateChargeCardProvidersSettingReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateChargeCardProvidersSettingReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateChargeCardProvidersSettingReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateChargeCardProvidersSettingReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateChargeCardProvidersSettingReplyValidationError) ErrorName() string {
	return "UpdateChargeCardProvidersSettingReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateChargeCardProvidersSettingReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateChargeCardProvidersSettingReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateChargeCardProvidersSettingReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateChargeCardProvidersSettingReplyValidationError{}

// Validate checks the field values on UpdateGetCardProvidersSettingRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *UpdateGetCardProvidersSettingRequest) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetProviders() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateGetCardProvidersSettingRequestValidationError{
					field:  fmt.Sprintf("Providers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// UpdateGetCardProvidersSettingRequestValidationError is the validation error
// returned by UpdateGetCardProvidersSettingRequest.Validate if the designated
// constraints aren't met.
type UpdateGetCardProvidersSettingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateGetCardProvidersSettingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateGetCardProvidersSettingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateGetCardProvidersSettingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateGetCardProvidersSettingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateGetCardProvidersSettingRequestValidationError) ErrorName() string {
	return "UpdateGetCardProvidersSettingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateGetCardProvidersSettingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateGetCardProvidersSettingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateGetCardProvidersSettingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateGetCardProvidersSettingRequestValidationError{}

// Validate checks the field values on UpdateGetCardProvidersSettingReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *UpdateGetCardProvidersSettingReply) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// UpdateGetCardProvidersSettingReplyValidationError is the validation error
// returned by UpdateGetCardProvidersSettingReply.Validate if the designated
// constraints aren't met.
type UpdateGetCardProvidersSettingReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateGetCardProvidersSettingReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateGetCardProvidersSettingReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateGetCardProvidersSettingReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateGetCardProvidersSettingReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateGetCardProvidersSettingReplyValidationError) ErrorName() string {
	return "UpdateGetCardProvidersSettingReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateGetCardProvidersSettingReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateGetCardProvidersSettingReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateGetCardProvidersSettingReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateGetCardProvidersSettingReplyValidationError{}

// Validate checks the field values on TelcoPaymentDetail with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *TelcoPaymentDetail) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for SerialNumber

	// no validation rules for CardId

	// no validation rules for ChargedAmount

	// no validation rules for Amount

	// no validation rules for TelcoName

	if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TelcoPaymentDetailValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TelcoPaymentDetailValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// TelcoPaymentDetailValidationError is the validation error returned by
// TelcoPaymentDetail.Validate if the designated constraints aren't met.
type TelcoPaymentDetailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TelcoPaymentDetailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TelcoPaymentDetailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TelcoPaymentDetailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TelcoPaymentDetailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TelcoPaymentDetailValidationError) ErrorName() string {
	return "TelcoPaymentDetailValidationError"
}

// Error satisfies the builtin error interface
func (e TelcoPaymentDetailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTelcoPaymentDetail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TelcoPaymentDetailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TelcoPaymentDetailValidationError{}
