// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package stark

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// HowardClient is the client API for Howard service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HowardClient interface {
	GetStatistic(ctx context.Context, in *GetStatisticRequest, opts ...grpc.CallOption) (*GetStatisticReply, error)
	GetProcessingPerformance(ctx context.Context, in *GetProcessingPerformanceRequest, opts ...grpc.CallOption) (*GetProcessingPerformanceReply, error)
	GetTotalAmount(ctx context.Context, in *GetTotalAmountRequest, opts ...grpc.CallOption) (*GetTotalAmountReply, error)
	GetIncomeStatement(ctx context.Context, in *GetReportRequest, opts ...grpc.CallOption) (*GetIncomeStatementReply, error)
	GetPaymentToday(ctx context.Context, in *GetReportRequest, opts ...grpc.CallOption) (*GetPaymentTodayReply, error)
	GetProfitRate(ctx context.Context, in *GetReportRequest, opts ...grpc.CallOption) (*GetProfitRateReply, error)
	GetAllocationTopUpRate(ctx context.Context, in *GetReportRequest, opts ...grpc.CallOption) (*GetAllocationTopUpRateReply, error)
	GetAllocationWithdrawRate(ctx context.Context, in *GetReportRequest, opts ...grpc.CallOption) (*GetAllocationWithdrawRateReply, error)
	GetTopPaymentMethod(ctx context.Context, in *GetReportRequest, opts ...grpc.CallOption) (*GetTopPaymentMethodReply, error)
	GetTopTeller(ctx context.Context, in *GetReportRequest, opts ...grpc.CallOption) (*GetTopTellerReply, error)
	GetSellReportByTimeRange(ctx context.Context, in *GetSellReportByTimeRangeRequest, opts ...grpc.CallOption) (*GetSellReportByTimeRangeReply, error)
	GetSellReportByMerchant(ctx context.Context, in *GetSellReportByMerchantRequest, opts ...grpc.CallOption) (*GetSellReportByMerchantReply, error)
	GetSellReportByPaymentMethod(ctx context.Context, in *GetSellReportByPaymentMethodRequest, opts ...grpc.CallOption) (*GetSellReportByPaymentMethodReply, error)
	GetSellReportByTeller(ctx context.Context, in *GetSellReportByTellerRequest, opts ...grpc.CallOption) (*GetSellReportByTellerReply, error)
}

type howardClient struct {
	cc grpc.ClientConnInterface
}

func NewHowardClient(cc grpc.ClientConnInterface) HowardClient {
	return &howardClient{cc}
}

func (c *howardClient) GetStatistic(ctx context.Context, in *GetStatisticRequest, opts ...grpc.CallOption) (*GetStatisticReply, error) {
	out := new(GetStatisticReply)
	err := c.cc.Invoke(ctx, "/mcuc.stark.howard.Howard/GetStatistic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *howardClient) GetProcessingPerformance(ctx context.Context, in *GetProcessingPerformanceRequest, opts ...grpc.CallOption) (*GetProcessingPerformanceReply, error) {
	out := new(GetProcessingPerformanceReply)
	err := c.cc.Invoke(ctx, "/mcuc.stark.howard.Howard/GetProcessingPerformance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *howardClient) GetTotalAmount(ctx context.Context, in *GetTotalAmountRequest, opts ...grpc.CallOption) (*GetTotalAmountReply, error) {
	out := new(GetTotalAmountReply)
	err := c.cc.Invoke(ctx, "/mcuc.stark.howard.Howard/GetTotalAmount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *howardClient) GetIncomeStatement(ctx context.Context, in *GetReportRequest, opts ...grpc.CallOption) (*GetIncomeStatementReply, error) {
	out := new(GetIncomeStatementReply)
	err := c.cc.Invoke(ctx, "/mcuc.stark.howard.Howard/GetIncomeStatement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *howardClient) GetPaymentToday(ctx context.Context, in *GetReportRequest, opts ...grpc.CallOption) (*GetPaymentTodayReply, error) {
	out := new(GetPaymentTodayReply)
	err := c.cc.Invoke(ctx, "/mcuc.stark.howard.Howard/GetPaymentToday", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *howardClient) GetProfitRate(ctx context.Context, in *GetReportRequest, opts ...grpc.CallOption) (*GetProfitRateReply, error) {
	out := new(GetProfitRateReply)
	err := c.cc.Invoke(ctx, "/mcuc.stark.howard.Howard/GetProfitRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *howardClient) GetAllocationTopUpRate(ctx context.Context, in *GetReportRequest, opts ...grpc.CallOption) (*GetAllocationTopUpRateReply, error) {
	out := new(GetAllocationTopUpRateReply)
	err := c.cc.Invoke(ctx, "/mcuc.stark.howard.Howard/GetAllocationTopUpRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *howardClient) GetAllocationWithdrawRate(ctx context.Context, in *GetReportRequest, opts ...grpc.CallOption) (*GetAllocationWithdrawRateReply, error) {
	out := new(GetAllocationWithdrawRateReply)
	err := c.cc.Invoke(ctx, "/mcuc.stark.howard.Howard/GetAllocationWithdrawRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *howardClient) GetTopPaymentMethod(ctx context.Context, in *GetReportRequest, opts ...grpc.CallOption) (*GetTopPaymentMethodReply, error) {
	out := new(GetTopPaymentMethodReply)
	err := c.cc.Invoke(ctx, "/mcuc.stark.howard.Howard/GetTopPaymentMethod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *howardClient) GetTopTeller(ctx context.Context, in *GetReportRequest, opts ...grpc.CallOption) (*GetTopTellerReply, error) {
	out := new(GetTopTellerReply)
	err := c.cc.Invoke(ctx, "/mcuc.stark.howard.Howard/GetTopTeller", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *howardClient) GetSellReportByTimeRange(ctx context.Context, in *GetSellReportByTimeRangeRequest, opts ...grpc.CallOption) (*GetSellReportByTimeRangeReply, error) {
	out := new(GetSellReportByTimeRangeReply)
	err := c.cc.Invoke(ctx, "/mcuc.stark.howard.Howard/GetSellReportByTimeRange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *howardClient) GetSellReportByMerchant(ctx context.Context, in *GetSellReportByMerchantRequest, opts ...grpc.CallOption) (*GetSellReportByMerchantReply, error) {
	out := new(GetSellReportByMerchantReply)
	err := c.cc.Invoke(ctx, "/mcuc.stark.howard.Howard/GetSellReportByMerchant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *howardClient) GetSellReportByPaymentMethod(ctx context.Context, in *GetSellReportByPaymentMethodRequest, opts ...grpc.CallOption) (*GetSellReportByPaymentMethodReply, error) {
	out := new(GetSellReportByPaymentMethodReply)
	err := c.cc.Invoke(ctx, "/mcuc.stark.howard.Howard/GetSellReportByPaymentMethod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *howardClient) GetSellReportByTeller(ctx context.Context, in *GetSellReportByTellerRequest, opts ...grpc.CallOption) (*GetSellReportByTellerReply, error) {
	out := new(GetSellReportByTellerReply)
	err := c.cc.Invoke(ctx, "/mcuc.stark.howard.Howard/GetSellReportByTeller", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HowardServer is the server API for Howard service.
// All implementations must embed UnimplementedHowardServer
// for forward compatibility
type HowardServer interface {
	GetStatistic(context.Context, *GetStatisticRequest) (*GetStatisticReply, error)
	GetProcessingPerformance(context.Context, *GetProcessingPerformanceRequest) (*GetProcessingPerformanceReply, error)
	GetTotalAmount(context.Context, *GetTotalAmountRequest) (*GetTotalAmountReply, error)
	GetIncomeStatement(context.Context, *GetReportRequest) (*GetIncomeStatementReply, error)
	GetPaymentToday(context.Context, *GetReportRequest) (*GetPaymentTodayReply, error)
	GetProfitRate(context.Context, *GetReportRequest) (*GetProfitRateReply, error)
	GetAllocationTopUpRate(context.Context, *GetReportRequest) (*GetAllocationTopUpRateReply, error)
	GetAllocationWithdrawRate(context.Context, *GetReportRequest) (*GetAllocationWithdrawRateReply, error)
	GetTopPaymentMethod(context.Context, *GetReportRequest) (*GetTopPaymentMethodReply, error)
	GetTopTeller(context.Context, *GetReportRequest) (*GetTopTellerReply, error)
	GetSellReportByTimeRange(context.Context, *GetSellReportByTimeRangeRequest) (*GetSellReportByTimeRangeReply, error)
	GetSellReportByMerchant(context.Context, *GetSellReportByMerchantRequest) (*GetSellReportByMerchantReply, error)
	GetSellReportByPaymentMethod(context.Context, *GetSellReportByPaymentMethodRequest) (*GetSellReportByPaymentMethodReply, error)
	GetSellReportByTeller(context.Context, *GetSellReportByTellerRequest) (*GetSellReportByTellerReply, error)
	mustEmbedUnimplementedHowardServer()
}

// UnimplementedHowardServer must be embedded to have forward compatible implementations.
type UnimplementedHowardServer struct {
}

func (*UnimplementedHowardServer) GetStatistic(context.Context, *GetStatisticRequest) (*GetStatisticReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatistic not implemented")
}
func (*UnimplementedHowardServer) GetProcessingPerformance(context.Context, *GetProcessingPerformanceRequest) (*GetProcessingPerformanceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProcessingPerformance not implemented")
}
func (*UnimplementedHowardServer) GetTotalAmount(context.Context, *GetTotalAmountRequest) (*GetTotalAmountReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTotalAmount not implemented")
}
func (*UnimplementedHowardServer) GetIncomeStatement(context.Context, *GetReportRequest) (*GetIncomeStatementReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIncomeStatement not implemented")
}
func (*UnimplementedHowardServer) GetPaymentToday(context.Context, *GetReportRequest) (*GetPaymentTodayReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPaymentToday not implemented")
}
func (*UnimplementedHowardServer) GetProfitRate(context.Context, *GetReportRequest) (*GetProfitRateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfitRate not implemented")
}
func (*UnimplementedHowardServer) GetAllocationTopUpRate(context.Context, *GetReportRequest) (*GetAllocationTopUpRateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllocationTopUpRate not implemented")
}
func (*UnimplementedHowardServer) GetAllocationWithdrawRate(context.Context, *GetReportRequest) (*GetAllocationWithdrawRateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllocationWithdrawRate not implemented")
}
func (*UnimplementedHowardServer) GetTopPaymentMethod(context.Context, *GetReportRequest) (*GetTopPaymentMethodReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopPaymentMethod not implemented")
}
func (*UnimplementedHowardServer) GetTopTeller(context.Context, *GetReportRequest) (*GetTopTellerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopTeller not implemented")
}
func (*UnimplementedHowardServer) GetSellReportByTimeRange(context.Context, *GetSellReportByTimeRangeRequest) (*GetSellReportByTimeRangeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSellReportByTimeRange not implemented")
}
func (*UnimplementedHowardServer) GetSellReportByMerchant(context.Context, *GetSellReportByMerchantRequest) (*GetSellReportByMerchantReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSellReportByMerchant not implemented")
}
func (*UnimplementedHowardServer) GetSellReportByPaymentMethod(context.Context, *GetSellReportByPaymentMethodRequest) (*GetSellReportByPaymentMethodReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSellReportByPaymentMethod not implemented")
}
func (*UnimplementedHowardServer) GetSellReportByTeller(context.Context, *GetSellReportByTellerRequest) (*GetSellReportByTellerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSellReportByTeller not implemented")
}
func (*UnimplementedHowardServer) mustEmbedUnimplementedHowardServer() {}

func RegisterHowardServer(s *grpc.Server, srv HowardServer) {
	s.RegisterService(&_Howard_serviceDesc, srv)
}

func _Howard_GetStatistic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatisticRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HowardServer).GetStatistic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mcuc.stark.howard.Howard/GetStatistic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HowardServer).GetStatistic(ctx, req.(*GetStatisticRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Howard_GetProcessingPerformance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProcessingPerformanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HowardServer).GetProcessingPerformance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mcuc.stark.howard.Howard/GetProcessingPerformance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HowardServer).GetProcessingPerformance(ctx, req.(*GetProcessingPerformanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Howard_GetTotalAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTotalAmountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HowardServer).GetTotalAmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mcuc.stark.howard.Howard/GetTotalAmount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HowardServer).GetTotalAmount(ctx, req.(*GetTotalAmountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Howard_GetIncomeStatement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HowardServer).GetIncomeStatement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mcuc.stark.howard.Howard/GetIncomeStatement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HowardServer).GetIncomeStatement(ctx, req.(*GetReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Howard_GetPaymentToday_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HowardServer).GetPaymentToday(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mcuc.stark.howard.Howard/GetPaymentToday",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HowardServer).GetPaymentToday(ctx, req.(*GetReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Howard_GetProfitRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HowardServer).GetProfitRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mcuc.stark.howard.Howard/GetProfitRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HowardServer).GetProfitRate(ctx, req.(*GetReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Howard_GetAllocationTopUpRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HowardServer).GetAllocationTopUpRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mcuc.stark.howard.Howard/GetAllocationTopUpRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HowardServer).GetAllocationTopUpRate(ctx, req.(*GetReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Howard_GetAllocationWithdrawRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HowardServer).GetAllocationWithdrawRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mcuc.stark.howard.Howard/GetAllocationWithdrawRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HowardServer).GetAllocationWithdrawRate(ctx, req.(*GetReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Howard_GetTopPaymentMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HowardServer).GetTopPaymentMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mcuc.stark.howard.Howard/GetTopPaymentMethod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HowardServer).GetTopPaymentMethod(ctx, req.(*GetReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Howard_GetTopTeller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HowardServer).GetTopTeller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mcuc.stark.howard.Howard/GetTopTeller",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HowardServer).GetTopTeller(ctx, req.(*GetReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Howard_GetSellReportByTimeRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSellReportByTimeRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HowardServer).GetSellReportByTimeRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mcuc.stark.howard.Howard/GetSellReportByTimeRange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HowardServer).GetSellReportByTimeRange(ctx, req.(*GetSellReportByTimeRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Howard_GetSellReportByMerchant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSellReportByMerchantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HowardServer).GetSellReportByMerchant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mcuc.stark.howard.Howard/GetSellReportByMerchant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HowardServer).GetSellReportByMerchant(ctx, req.(*GetSellReportByMerchantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Howard_GetSellReportByPaymentMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSellReportByPaymentMethodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HowardServer).GetSellReportByPaymentMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mcuc.stark.howard.Howard/GetSellReportByPaymentMethod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HowardServer).GetSellReportByPaymentMethod(ctx, req.(*GetSellReportByPaymentMethodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Howard_GetSellReportByTeller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSellReportByTellerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HowardServer).GetSellReportByTeller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mcuc.stark.howard.Howard/GetSellReportByTeller",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HowardServer).GetSellReportByTeller(ctx, req.(*GetSellReportByTellerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Howard_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mcuc.stark.howard.Howard",
	HandlerType: (*HowardServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStatistic",
			Handler:    _Howard_GetStatistic_Handler,
		},
		{
			MethodName: "GetProcessingPerformance",
			Handler:    _Howard_GetProcessingPerformance_Handler,
		},
		{
			MethodName: "GetTotalAmount",
			Handler:    _Howard_GetTotalAmount_Handler,
		},
		{
			MethodName: "GetIncomeStatement",
			Handler:    _Howard_GetIncomeStatement_Handler,
		},
		{
			MethodName: "GetPaymentToday",
			Handler:    _Howard_GetPaymentToday_Handler,
		},
		{
			MethodName: "GetProfitRate",
			Handler:    _Howard_GetProfitRate_Handler,
		},
		{
			MethodName: "GetAllocationTopUpRate",
			Handler:    _Howard_GetAllocationTopUpRate_Handler,
		},
		{
			MethodName: "GetAllocationWithdrawRate",
			Handler:    _Howard_GetAllocationWithdrawRate_Handler,
		},
		{
			MethodName: "GetTopPaymentMethod",
			Handler:    _Howard_GetTopPaymentMethod_Handler,
		},
		{
			MethodName: "GetTopTeller",
			Handler:    _Howard_GetTopTeller_Handler,
		},
		{
			MethodName: "GetSellReportByTimeRange",
			Handler:    _Howard_GetSellReportByTimeRange_Handler,
		},
		{
			MethodName: "GetSellReportByMerchant",
			Handler:    _Howard_GetSellReportByMerchant_Handler,
		},
		{
			MethodName: "GetSellReportByPaymentMethod",
			Handler:    _Howard_GetSellReportByPaymentMethod_Handler,
		},
		{
			MethodName: "GetSellReportByTeller",
			Handler:    _Howard_GetSellReportByTeller_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stark/api/howard.proto",
}
