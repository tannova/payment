// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package stark

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// VisionClient is the client API for Vision service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VisionClient interface {
	GetPaymentDetail(ctx context.Context, in *GetPaymentDetailRequest, opts ...grpc.CallOption) (*GetPaymentDetailReply, error)
	ListPayments(ctx context.Context, in *ListPaymentsRequest, opts ...grpc.CallOption) (*ListPaymentsReply, error)
	GetPaymentInfoByPaymentCode(ctx context.Context, in *GetPaymentInfoByPaymentCodeRequest, opts ...grpc.CallOption) (*GetPaymentInfoByPaymentCodeReply, error)
}

type visionClient struct {
	cc grpc.ClientConnInterface
}

func NewVisionClient(cc grpc.ClientConnInterface) VisionClient {
	return &visionClient{cc}
}

func (c *visionClient) GetPaymentDetail(ctx context.Context, in *GetPaymentDetailRequest, opts ...grpc.CallOption) (*GetPaymentDetailReply, error) {
	out := new(GetPaymentDetailReply)
	err := c.cc.Invoke(ctx, "/mcuc.stark.vision.Vision/GetPaymentDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *visionClient) ListPayments(ctx context.Context, in *ListPaymentsRequest, opts ...grpc.CallOption) (*ListPaymentsReply, error) {
	out := new(ListPaymentsReply)
	err := c.cc.Invoke(ctx, "/mcuc.stark.vision.Vision/ListPayments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *visionClient) GetPaymentInfoByPaymentCode(ctx context.Context, in *GetPaymentInfoByPaymentCodeRequest, opts ...grpc.CallOption) (*GetPaymentInfoByPaymentCodeReply, error) {
	out := new(GetPaymentInfoByPaymentCodeReply)
	err := c.cc.Invoke(ctx, "/mcuc.stark.vision.Vision/GetPaymentInfoByPaymentCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VisionServer is the server API for Vision service.
// All implementations must embed UnimplementedVisionServer
// for forward compatibility
type VisionServer interface {
	GetPaymentDetail(context.Context, *GetPaymentDetailRequest) (*GetPaymentDetailReply, error)
	ListPayments(context.Context, *ListPaymentsRequest) (*ListPaymentsReply, error)
	GetPaymentInfoByPaymentCode(context.Context, *GetPaymentInfoByPaymentCodeRequest) (*GetPaymentInfoByPaymentCodeReply, error)
	mustEmbedUnimplementedVisionServer()
}

// UnimplementedVisionServer must be embedded to have forward compatible implementations.
type UnimplementedVisionServer struct {
}

func (*UnimplementedVisionServer) GetPaymentDetail(context.Context, *GetPaymentDetailRequest) (*GetPaymentDetailReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPaymentDetail not implemented")
}
func (*UnimplementedVisionServer) ListPayments(context.Context, *ListPaymentsRequest) (*ListPaymentsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPayments not implemented")
}
func (*UnimplementedVisionServer) GetPaymentInfoByPaymentCode(context.Context, *GetPaymentInfoByPaymentCodeRequest) (*GetPaymentInfoByPaymentCodeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPaymentInfoByPaymentCode not implemented")
}
func (*UnimplementedVisionServer) mustEmbedUnimplementedVisionServer() {}

func RegisterVisionServer(s *grpc.Server, srv VisionServer) {
	s.RegisterService(&_Vision_serviceDesc, srv)
}

func _Vision_GetPaymentDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPaymentDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VisionServer).GetPaymentDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mcuc.stark.vision.Vision/GetPaymentDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VisionServer).GetPaymentDetail(ctx, req.(*GetPaymentDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vision_ListPayments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPaymentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VisionServer).ListPayments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mcuc.stark.vision.Vision/ListPayments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VisionServer).ListPayments(ctx, req.(*ListPaymentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vision_GetPaymentInfoByPaymentCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPaymentInfoByPaymentCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VisionServer).GetPaymentInfoByPaymentCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mcuc.stark.vision.Vision/GetPaymentInfoByPaymentCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VisionServer).GetPaymentInfoByPaymentCode(ctx, req.(*GetPaymentInfoByPaymentCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Vision_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mcuc.stark.vision.Vision",
	HandlerType: (*VisionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPaymentDetail",
			Handler:    _Vision_GetPaymentDetail_Handler,
		},
		{
			MethodName: "ListPayments",
			Handler:    _Vision_ListPayments_Handler,
		},
		{
			MethodName: "GetPaymentInfoByPaymentCode",
			Handler:    _Vision_GetPaymentInfoByPaymentCode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stark/api/vision.proto",
}
