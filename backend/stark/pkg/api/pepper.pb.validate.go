// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: stark/api/pepper.proto

package stark

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _pepper_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on GetBankPaymentCodeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetBankPaymentCodeRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for BankName

	// no validation rules for MerchantUserId

	return nil
}

// GetBankPaymentCodeRequestValidationError is the validation error returned by
// GetBankPaymentCodeRequest.Validate if the designated constraints aren't met.
type GetBankPaymentCodeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBankPaymentCodeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBankPaymentCodeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBankPaymentCodeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBankPaymentCodeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBankPaymentCodeRequestValidationError) ErrorName() string {
	return "GetBankPaymentCodeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetBankPaymentCodeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBankPaymentCodeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBankPaymentCodeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBankPaymentCodeRequestValidationError{}

// Validate checks the field values on GetBankPaymentCodeReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetBankPaymentCodeReply) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for AccountNumber

	// no validation rules for AccountName

	// no validation rules for Branch

	return nil
}

// GetBankPaymentCodeReplyValidationError is the validation error returned by
// GetBankPaymentCodeReply.Validate if the designated constraints aren't met.
type GetBankPaymentCodeReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBankPaymentCodeReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBankPaymentCodeReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBankPaymentCodeReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBankPaymentCodeReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBankPaymentCodeReplyValidationError) ErrorName() string {
	return "GetBankPaymentCodeReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetBankPaymentCodeReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBankPaymentCodeReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBankPaymentCodeReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBankPaymentCodeReplyValidationError{}

// Validate checks the field values on CreateBankingWithdrawRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateBankingWithdrawRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetAmount() <= 0 {
		return CreateBankingWithdrawRequestValidationError{
			field:  "Amount",
			reason: "value must be greater than 0",
		}
	}

	// no validation rules for MerchantUserId

	// no validation rules for MerchantUserAccountNumber

	// no validation rules for MerchantUserAccountName

	// no validation rules for BankName

	return nil
}

// CreateBankingWithdrawRequestValidationError is the validation error returned
// by CreateBankingWithdrawRequest.Validate if the designated constraints
// aren't met.
type CreateBankingWithdrawRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateBankingWithdrawRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateBankingWithdrawRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateBankingWithdrawRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateBankingWithdrawRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateBankingWithdrawRequestValidationError) ErrorName() string {
	return "CreateBankingWithdrawRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateBankingWithdrawRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateBankingWithdrawRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateBankingWithdrawRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateBankingWithdrawRequestValidationError{}

// Validate checks the field values on CreateBankingWithdrawReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateBankingWithdrawReply) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for PaymentId

	return nil
}

// CreateBankingWithdrawReplyValidationError is the validation error returned
// by CreateBankingWithdrawReply.Validate if the designated constraints aren't met.
type CreateBankingWithdrawReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateBankingWithdrawReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateBankingWithdrawReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateBankingWithdrawReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateBankingWithdrawReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateBankingWithdrawReplyValidationError) ErrorName() string {
	return "CreateBankingWithdrawReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateBankingWithdrawReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateBankingWithdrawReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateBankingWithdrawReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateBankingWithdrawReplyValidationError{}

// Validate checks the field values on CreateBankingTopUpRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateBankingTopUpRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetAmount() <= 0 {
		return CreateBankingTopUpRequestValidationError{
			field:  "Amount",
			reason: "value must be greater than 0",
		}
	}

	// no validation rules for PaymentCode

	// no validation rules for MerchantUserAccountNumber

	// no validation rules for MerchantUserAccountName

	// no validation rules for SystemAccountNumber

	// no validation rules for SystemAccountName

	// no validation rules for Note

	return nil
}

// CreateBankingTopUpRequestValidationError is the validation error returned by
// CreateBankingTopUpRequest.Validate if the designated constraints aren't met.
type CreateBankingTopUpRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateBankingTopUpRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateBankingTopUpRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateBankingTopUpRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateBankingTopUpRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateBankingTopUpRequestValidationError) ErrorName() string {
	return "CreateBankingTopUpRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateBankingTopUpRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateBankingTopUpRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateBankingTopUpRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateBankingTopUpRequestValidationError{}

// Validate checks the field values on CreateBankingTopUpReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateBankingTopUpReply) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// CreateBankingTopUpReplyValidationError is the validation error returned by
// CreateBankingTopUpReply.Validate if the designated constraints aren't met.
type CreateBankingTopUpReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateBankingTopUpReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateBankingTopUpReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateBankingTopUpReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateBankingTopUpReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateBankingTopUpReplyValidationError) ErrorName() string {
	return "CreateBankingTopUpReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateBankingTopUpReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateBankingTopUpReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateBankingTopUpReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateBankingTopUpReplyValidationError{}

// Validate checks the field values on ApproveBankingTopUpRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ApproveBankingTopUpRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for PaymentId

	// no validation rules for ImageUrl

	// no validation rules for TxId

	// no validation rules for Note

	return nil
}

// ApproveBankingTopUpRequestValidationError is the validation error returned
// by ApproveBankingTopUpRequest.Validate if the designated constraints aren't met.
type ApproveBankingTopUpRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApproveBankingTopUpRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApproveBankingTopUpRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApproveBankingTopUpRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApproveBankingTopUpRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApproveBankingTopUpRequestValidationError) ErrorName() string {
	return "ApproveBankingTopUpRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ApproveBankingTopUpRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApproveBankingTopUpRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApproveBankingTopUpRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApproveBankingTopUpRequestValidationError{}

// Validate checks the field values on ApproveBankingTopUpReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ApproveBankingTopUpReply) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ApproveBankingTopUpReplyValidationError is the validation error returned by
// ApproveBankingTopUpReply.Validate if the designated constraints aren't met.
type ApproveBankingTopUpReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApproveBankingTopUpReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApproveBankingTopUpReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApproveBankingTopUpReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApproveBankingTopUpReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApproveBankingTopUpReplyValidationError) ErrorName() string {
	return "ApproveBankingTopUpReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ApproveBankingTopUpReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApproveBankingTopUpReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApproveBankingTopUpReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApproveBankingTopUpReplyValidationError{}

// Validate checks the field values on RejectBankingTopUpRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RejectBankingTopUpRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for PaymentId

	// no validation rules for Note

	// no validation rules for IsMerchantCall

	return nil
}

// RejectBankingTopUpRequestValidationError is the validation error returned by
// RejectBankingTopUpRequest.Validate if the designated constraints aren't met.
type RejectBankingTopUpRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RejectBankingTopUpRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RejectBankingTopUpRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RejectBankingTopUpRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RejectBankingTopUpRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RejectBankingTopUpRequestValidationError) ErrorName() string {
	return "RejectBankingTopUpRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RejectBankingTopUpRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRejectBankingTopUpRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RejectBankingTopUpRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RejectBankingTopUpRequestValidationError{}

// Validate checks the field values on RejectBankingTopUpReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RejectBankingTopUpReply) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// RejectBankingTopUpReplyValidationError is the validation error returned by
// RejectBankingTopUpReply.Validate if the designated constraints aren't met.
type RejectBankingTopUpReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RejectBankingTopUpReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RejectBankingTopUpReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RejectBankingTopUpReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RejectBankingTopUpReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RejectBankingTopUpReplyValidationError) ErrorName() string {
	return "RejectBankingTopUpReplyValidationError"
}

// Error satisfies the builtin error interface
func (e RejectBankingTopUpReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRejectBankingTopUpReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RejectBankingTopUpReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RejectBankingTopUpReplyValidationError{}

// Validate checks the field values on ApproveBankingWithdrawRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ApproveBankingWithdrawRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for PaymentId

	// no validation rules for Note

	return nil
}

// ApproveBankingWithdrawRequestValidationError is the validation error
// returned by ApproveBankingWithdrawRequest.Validate if the designated
// constraints aren't met.
type ApproveBankingWithdrawRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApproveBankingWithdrawRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApproveBankingWithdrawRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApproveBankingWithdrawRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApproveBankingWithdrawRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApproveBankingWithdrawRequestValidationError) ErrorName() string {
	return "ApproveBankingWithdrawRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ApproveBankingWithdrawRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApproveBankingWithdrawRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApproveBankingWithdrawRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApproveBankingWithdrawRequestValidationError{}

// Validate checks the field values on ApproveBankingWithdrawReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ApproveBankingWithdrawReply) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ApproveBankingWithdrawReplyValidationError is the validation error returned
// by ApproveBankingWithdrawReply.Validate if the designated constraints
// aren't met.
type ApproveBankingWithdrawReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApproveBankingWithdrawReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApproveBankingWithdrawReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApproveBankingWithdrawReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApproveBankingWithdrawReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApproveBankingWithdrawReplyValidationError) ErrorName() string {
	return "ApproveBankingWithdrawReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ApproveBankingWithdrawReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApproveBankingWithdrawReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApproveBankingWithdrawReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApproveBankingWithdrawReplyValidationError{}

// Validate checks the field values on SubmitBankingWithdrawRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SubmitBankingWithdrawRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for PaymentId

	// no validation rules for BankName

	// no validation rules for AccountNumber

	// no validation rules for AccountName

	// no validation rules for Amount

	// no validation rules for Fee

	// no validation rules for ImageUrl

	// no validation rules for TxId

	// no validation rules for Note

	return nil
}

// SubmitBankingWithdrawRequestValidationError is the validation error returned
// by SubmitBankingWithdrawRequest.Validate if the designated constraints
// aren't met.
type SubmitBankingWithdrawRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubmitBankingWithdrawRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubmitBankingWithdrawRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubmitBankingWithdrawRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubmitBankingWithdrawRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubmitBankingWithdrawRequestValidationError) ErrorName() string {
	return "SubmitBankingWithdrawRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SubmitBankingWithdrawRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubmitBankingWithdrawRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubmitBankingWithdrawRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubmitBankingWithdrawRequestValidationError{}

// Validate checks the field values on SubmitBankingWithdrawReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SubmitBankingWithdrawReply) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// SubmitBankingWithdrawReplyValidationError is the validation error returned
// by SubmitBankingWithdrawReply.Validate if the designated constraints aren't met.
type SubmitBankingWithdrawReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubmitBankingWithdrawReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubmitBankingWithdrawReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubmitBankingWithdrawReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubmitBankingWithdrawReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubmitBankingWithdrawReplyValidationError) ErrorName() string {
	return "SubmitBankingWithdrawReplyValidationError"
}

// Error satisfies the builtin error interface
func (e SubmitBankingWithdrawReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubmitBankingWithdrawReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubmitBankingWithdrawReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubmitBankingWithdrawReplyValidationError{}

// Validate checks the field values on
// GetIsMerchantUserBankAccountVerifiedRequest with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *GetIsMerchantUserBankAccountVerifiedRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for AccountNumber

	// no validation rules for AccountName

	return nil
}

// GetIsMerchantUserBankAccountVerifiedRequestValidationError is the validation
// error returned by GetIsMerchantUserBankAccountVerifiedRequest.Validate if
// the designated constraints aren't met.
type GetIsMerchantUserBankAccountVerifiedRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetIsMerchantUserBankAccountVerifiedRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetIsMerchantUserBankAccountVerifiedRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetIsMerchantUserBankAccountVerifiedRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetIsMerchantUserBankAccountVerifiedRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetIsMerchantUserBankAccountVerifiedRequestValidationError) ErrorName() string {
	return "GetIsMerchantUserBankAccountVerifiedRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetIsMerchantUserBankAccountVerifiedRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetIsMerchantUserBankAccountVerifiedRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetIsMerchantUserBankAccountVerifiedRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetIsMerchantUserBankAccountVerifiedRequestValidationError{}

// Validate checks the field values on
// GetIsMerchantUserBankAccountVerifiedReply with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *GetIsMerchantUserBankAccountVerifiedReply) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Verified

	return nil
}

// GetIsMerchantUserBankAccountVerifiedReplyValidationError is the validation
// error returned by GetIsMerchantUserBankAccountVerifiedReply.Validate if the
// designated constraints aren't met.
type GetIsMerchantUserBankAccountVerifiedReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetIsMerchantUserBankAccountVerifiedReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetIsMerchantUserBankAccountVerifiedReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetIsMerchantUserBankAccountVerifiedReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetIsMerchantUserBankAccountVerifiedReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetIsMerchantUserBankAccountVerifiedReplyValidationError) ErrorName() string {
	return "GetIsMerchantUserBankAccountVerifiedReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetIsMerchantUserBankAccountVerifiedReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetIsMerchantUserBankAccountVerifiedReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetIsMerchantUserBankAccountVerifiedReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetIsMerchantUserBankAccountVerifiedReplyValidationError{}

// Validate checks the field values on RejectBankingWithdrawRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RejectBankingWithdrawRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for PaymentId

	// no validation rules for Note

	// no validation rules for IsMerchantCall

	return nil
}

// RejectBankingWithdrawRequestValidationError is the validation error returned
// by RejectBankingWithdrawRequest.Validate if the designated constraints
// aren't met.
type RejectBankingWithdrawRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RejectBankingWithdrawRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RejectBankingWithdrawRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RejectBankingWithdrawRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RejectBankingWithdrawRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RejectBankingWithdrawRequestValidationError) ErrorName() string {
	return "RejectBankingWithdrawRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RejectBankingWithdrawRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRejectBankingWithdrawRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RejectBankingWithdrawRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RejectBankingWithdrawRequestValidationError{}

// Validate checks the field values on RejectBankingWithdrawReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RejectBankingWithdrawReply) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// RejectBankingWithdrawReplyValidationError is the validation error returned
// by RejectBankingWithdrawReply.Validate if the designated constraints aren't met.
type RejectBankingWithdrawReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RejectBankingWithdrawReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RejectBankingWithdrawReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RejectBankingWithdrawReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RejectBankingWithdrawReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RejectBankingWithdrawReplyValidationError) ErrorName() string {
	return "RejectBankingWithdrawReplyValidationError"
}

// Error satisfies the builtin error interface
func (e RejectBankingWithdrawReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRejectBankingWithdrawReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RejectBankingWithdrawReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RejectBankingWithdrawReplyValidationError{}

// Validate checks the field values on CancelBankingWithdrawRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CancelBankingWithdrawRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for PaymentId

	return nil
}

// CancelBankingWithdrawRequestValidationError is the validation error returned
// by CancelBankingWithdrawRequest.Validate if the designated constraints
// aren't met.
type CancelBankingWithdrawRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelBankingWithdrawRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelBankingWithdrawRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelBankingWithdrawRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelBankingWithdrawRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelBankingWithdrawRequestValidationError) ErrorName() string {
	return "CancelBankingWithdrawRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CancelBankingWithdrawRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelBankingWithdrawRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelBankingWithdrawRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelBankingWithdrawRequestValidationError{}

// Validate checks the field values on CancelBankingWithdrawReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CancelBankingWithdrawReply) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// CancelBankingWithdrawReplyValidationError is the validation error returned
// by CancelBankingWithdrawReply.Validate if the designated constraints aren't met.
type CancelBankingWithdrawReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelBankingWithdrawReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelBankingWithdrawReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelBankingWithdrawReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelBankingWithdrawReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelBankingWithdrawReplyValidationError) ErrorName() string {
	return "CancelBankingWithdrawReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CancelBankingWithdrawReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelBankingWithdrawReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelBankingWithdrawReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelBankingWithdrawReplyValidationError{}

// Validate checks the field values on ListSystemBankAccountsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListSystemBankAccountsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetPage() <= 0 {
		return ListSystemBankAccountsRequestValidationError{
			field:  "Page",
			reason: "value must be greater than 0",
		}
	}

	if m.GetSize() <= 0 {
		return ListSystemBankAccountsRequestValidationError{
			field:  "Size",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// ListSystemBankAccountsRequestValidationError is the validation error
// returned by ListSystemBankAccountsRequest.Validate if the designated
// constraints aren't met.
type ListSystemBankAccountsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSystemBankAccountsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSystemBankAccountsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSystemBankAccountsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSystemBankAccountsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSystemBankAccountsRequestValidationError) ErrorName() string {
	return "ListSystemBankAccountsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListSystemBankAccountsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSystemBankAccountsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSystemBankAccountsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSystemBankAccountsRequestValidationError{}

// Validate checks the field values on ListSystemBankAccountsReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListSystemBankAccountsReply) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Total

	// no validation rules for CurrentPage

	for idx, item := range m.GetRecords() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListSystemBankAccountsReplyValidationError{
					field:  fmt.Sprintf("Records[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListSystemBankAccountsReplyValidationError is the validation error returned
// by ListSystemBankAccountsReply.Validate if the designated constraints
// aren't met.
type ListSystemBankAccountsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSystemBankAccountsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSystemBankAccountsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSystemBankAccountsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSystemBankAccountsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSystemBankAccountsReplyValidationError) ErrorName() string {
	return "ListSystemBankAccountsReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListSystemBankAccountsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSystemBankAccountsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSystemBankAccountsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSystemBankAccountsReplyValidationError{}

// Validate checks the field values on CreateSystemBankAccountRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateSystemBankAccountRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for AccountId

	// no validation rules for BankName

	if m.GetMerchantId() <= 0 {
		return CreateSystemBankAccountRequestValidationError{
			field:  "MerchantId",
			reason: "value must be greater than 0",
		}
	}

	// no validation rules for AccountNumber

	// no validation rules for AccountName

	// no validation rules for Branch

	// no validation rules for Balance

	// no validation rules for DailyBalanceLimit

	// no validation rules for ErrorCode

	return nil
}

// CreateSystemBankAccountRequestValidationError is the validation error
// returned by CreateSystemBankAccountRequest.Validate if the designated
// constraints aren't met.
type CreateSystemBankAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSystemBankAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSystemBankAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSystemBankAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSystemBankAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSystemBankAccountRequestValidationError) ErrorName() string {
	return "CreateSystemBankAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSystemBankAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSystemBankAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSystemBankAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSystemBankAccountRequestValidationError{}

// Validate checks the field values on CreateSystemBankAccountReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateSystemBankAccountReply) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// CreateSystemBankAccountReplyValidationError is the validation error returned
// by CreateSystemBankAccountReply.Validate if the designated constraints
// aren't met.
type CreateSystemBankAccountReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSystemBankAccountReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSystemBankAccountReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSystemBankAccountReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSystemBankAccountReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSystemBankAccountReplyValidationError) ErrorName() string {
	return "CreateSystemBankAccountReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSystemBankAccountReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSystemBankAccountReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSystemBankAccountReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSystemBankAccountReplyValidationError{}

// Validate checks the field values on VerifyMerchantUserBankAccountRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *VerifyMerchantUserBankAccountRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for BankName

	if utf8.RuneCountInString(m.GetAccountNumber()) < 8 {
		return VerifyMerchantUserBankAccountRequestValidationError{
			field:  "AccountNumber",
			reason: "value length must be at least 8 runes",
		}
	}

	if !_VerifyMerchantUserBankAccountRequest_AccountNumber_Pattern.MatchString(m.GetAccountNumber()) {
		return VerifyMerchantUserBankAccountRequestValidationError{
			field:  "AccountNumber",
			reason: "value does not match regex pattern \"[0-9]\"",
		}
	}

	if !_VerifyMerchantUserBankAccountRequest_AccountName_Pattern.MatchString(m.GetAccountName()) {
		return VerifyMerchantUserBankAccountRequestValidationError{
			field:  "AccountName",
			reason: "value does not match regex pattern \"[a-zA-Z]\"",
		}
	}

	return nil
}

// VerifyMerchantUserBankAccountRequestValidationError is the validation error
// returned by VerifyMerchantUserBankAccountRequest.Validate if the designated
// constraints aren't met.
type VerifyMerchantUserBankAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerifyMerchantUserBankAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerifyMerchantUserBankAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerifyMerchantUserBankAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerifyMerchantUserBankAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerifyMerchantUserBankAccountRequestValidationError) ErrorName() string {
	return "VerifyMerchantUserBankAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e VerifyMerchantUserBankAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerifyMerchantUserBankAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerifyMerchantUserBankAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerifyMerchantUserBankAccountRequestValidationError{}

var _VerifyMerchantUserBankAccountRequest_AccountNumber_Pattern = regexp.MustCompile("[0-9]")

var _VerifyMerchantUserBankAccountRequest_AccountName_Pattern = regexp.MustCompile("[a-zA-Z]")

// Validate checks the field values on VerifyMerchantUserBankAccountReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *VerifyMerchantUserBankAccountReply) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// VerifyMerchantUserBankAccountReplyValidationError is the validation error
// returned by VerifyMerchantUserBankAccountReply.Validate if the designated
// constraints aren't met.
type VerifyMerchantUserBankAccountReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerifyMerchantUserBankAccountReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerifyMerchantUserBankAccountReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerifyMerchantUserBankAccountReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerifyMerchantUserBankAccountReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerifyMerchantUserBankAccountReplyValidationError) ErrorName() string {
	return "VerifyMerchantUserBankAccountReplyValidationError"
}

// Error satisfies the builtin error interface
func (e VerifyMerchantUserBankAccountReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerifyMerchantUserBankAccountReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerifyMerchantUserBankAccountReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerifyMerchantUserBankAccountReplyValidationError{}

// Validate checks the field values on ImportSystemBankAccountRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ImportSystemBankAccountRequest) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetRecords() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ImportSystemBankAccountRequestValidationError{
					field:  fmt.Sprintf("Records[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ImportSystemBankAccountRequestValidationError is the validation error
// returned by ImportSystemBankAccountRequest.Validate if the designated
// constraints aren't met.
type ImportSystemBankAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImportSystemBankAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImportSystemBankAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImportSystemBankAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImportSystemBankAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImportSystemBankAccountRequestValidationError) ErrorName() string {
	return "ImportSystemBankAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ImportSystemBankAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImportSystemBankAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImportSystemBankAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImportSystemBankAccountRequestValidationError{}

// Validate checks the field values on ImportSystemBankAccountReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ImportSystemBankAccountReply) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ImportSystemBankAccountReplyValidationError is the validation error returned
// by ImportSystemBankAccountReply.Validate if the designated constraints
// aren't met.
type ImportSystemBankAccountReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImportSystemBankAccountReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImportSystemBankAccountReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImportSystemBankAccountReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImportSystemBankAccountReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImportSystemBankAccountReplyValidationError) ErrorName() string {
	return "ImportSystemBankAccountReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ImportSystemBankAccountReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImportSystemBankAccountReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImportSystemBankAccountReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImportSystemBankAccountReplyValidationError{}

// Validate checks the field values on ValidateImportSystemBankAccountRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *ValidateImportSystemBankAccountRequest) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetRecords() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ValidateImportSystemBankAccountRequestValidationError{
					field:  fmt.Sprintf("Records[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ValidateImportSystemBankAccountRequestValidationError is the validation
// error returned by ValidateImportSystemBankAccountRequest.Validate if the
// designated constraints aren't met.
type ValidateImportSystemBankAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ValidateImportSystemBankAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ValidateImportSystemBankAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ValidateImportSystemBankAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ValidateImportSystemBankAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ValidateImportSystemBankAccountRequestValidationError) ErrorName() string {
	return "ValidateImportSystemBankAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ValidateImportSystemBankAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sValidateImportSystemBankAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ValidateImportSystemBankAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ValidateImportSystemBankAccountRequestValidationError{}

// Validate checks the field values on ValidateImportSystemBankAccountReply
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *ValidateImportSystemBankAccountReply) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetDuplicatedRecords() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ValidateImportSystemBankAccountReplyValidationError{
					field:  fmt.Sprintf("DuplicatedRecords[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetValidRecords() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ValidateImportSystemBankAccountReplyValidationError{
					field:  fmt.Sprintf("ValidRecords[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetDuplicatedAccountIdRecords() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ValidateImportSystemBankAccountReplyValidationError{
					field:  fmt.Sprintf("DuplicatedAccountIdRecords[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetInvalidRecords() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ValidateImportSystemBankAccountReplyValidationError{
					field:  fmt.Sprintf("InvalidRecords[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ValidateImportSystemBankAccountReplyValidationError is the validation error
// returned by ValidateImportSystemBankAccountReply.Validate if the designated
// constraints aren't met.
type ValidateImportSystemBankAccountReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ValidateImportSystemBankAccountReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ValidateImportSystemBankAccountReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ValidateImportSystemBankAccountReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ValidateImportSystemBankAccountReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ValidateImportSystemBankAccountReplyValidationError) ErrorName() string {
	return "ValidateImportSystemBankAccountReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ValidateImportSystemBankAccountReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sValidateImportSystemBankAccountReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ValidateImportSystemBankAccountReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ValidateImportSystemBankAccountReplyValidationError{}

// Validate checks the field values on UpdateSystemBankAccountStatusRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *UpdateSystemBankAccountStatusRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetId() <= 0 {
		return UpdateSystemBankAccountStatusRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
	}

	// no validation rules for Status

	return nil
}

// UpdateSystemBankAccountStatusRequestValidationError is the validation error
// returned by UpdateSystemBankAccountStatusRequest.Validate if the designated
// constraints aren't met.
type UpdateSystemBankAccountStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSystemBankAccountStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSystemBankAccountStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSystemBankAccountStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSystemBankAccountStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSystemBankAccountStatusRequestValidationError) ErrorName() string {
	return "UpdateSystemBankAccountStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSystemBankAccountStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSystemBankAccountStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSystemBankAccountStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSystemBankAccountStatusRequestValidationError{}

// Validate checks the field values on UpdateSystemBankAccountStatusReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *UpdateSystemBankAccountStatusReply) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// UpdateSystemBankAccountStatusReplyValidationError is the validation error
// returned by UpdateSystemBankAccountStatusReply.Validate if the designated
// constraints aren't met.
type UpdateSystemBankAccountStatusReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSystemBankAccountStatusReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSystemBankAccountStatusReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSystemBankAccountStatusReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSystemBankAccountStatusReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSystemBankAccountStatusReplyValidationError) ErrorName() string {
	return "UpdateSystemBankAccountStatusReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSystemBankAccountStatusReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSystemBankAccountStatusReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSystemBankAccountStatusReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSystemBankAccountStatusReplyValidationError{}

// Validate checks the field values on
// ListSystemBankAccountByPaymentInfoRequest with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *ListSystemBankAccountByPaymentInfoRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for MerchantId

	// no validation rules for BankName

	return nil
}

// ListSystemBankAccountByPaymentInfoRequestValidationError is the validation
// error returned by ListSystemBankAccountByPaymentInfoRequest.Validate if the
// designated constraints aren't met.
type ListSystemBankAccountByPaymentInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSystemBankAccountByPaymentInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSystemBankAccountByPaymentInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSystemBankAccountByPaymentInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSystemBankAccountByPaymentInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSystemBankAccountByPaymentInfoRequestValidationError) ErrorName() string {
	return "ListSystemBankAccountByPaymentInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListSystemBankAccountByPaymentInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSystemBankAccountByPaymentInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSystemBankAccountByPaymentInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSystemBankAccountByPaymentInfoRequestValidationError{}

// Validate checks the field values on ListSystemBankAccountByPaymentInfoReply
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *ListSystemBankAccountByPaymentInfoReply) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetRecords() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListSystemBankAccountByPaymentInfoReplyValidationError{
					field:  fmt.Sprintf("Records[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListSystemBankAccountByPaymentInfoReplyValidationError is the validation
// error returned by ListSystemBankAccountByPaymentInfoReply.Validate if the
// designated constraints aren't met.
type ListSystemBankAccountByPaymentInfoReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSystemBankAccountByPaymentInfoReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSystemBankAccountByPaymentInfoReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSystemBankAccountByPaymentInfoReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSystemBankAccountByPaymentInfoReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSystemBankAccountByPaymentInfoReplyValidationError) ErrorName() string {
	return "ListSystemBankAccountByPaymentInfoReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListSystemBankAccountByPaymentInfoReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSystemBankAccountByPaymentInfoReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSystemBankAccountByPaymentInfoReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSystemBankAccountByPaymentInfoReplyValidationError{}

// Validate checks the field values on SystemBank with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *SystemBank) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for BankName

	// no validation rules for Status

	// no validation rules for MerchantId

	// no validation rules for AccountNumber

	// no validation rules for AccountName

	// no validation rules for Branch

	// no validation rules for Balance

	// no validation rules for DailyBalanceLimit

	// no validation rules for DailyUsedAmount

	// no validation rules for DailyBalance

	return nil
}

// SystemBankValidationError is the validation error returned by
// SystemBank.Validate if the designated constraints aren't met.
type SystemBankValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SystemBankValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SystemBankValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SystemBankValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SystemBankValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SystemBankValidationError) ErrorName() string { return "SystemBankValidationError" }

// Error satisfies the builtin error interface
func (e SystemBankValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSystemBank.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SystemBankValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SystemBankValidationError{}

// Validate checks the field values on ConductBankPayment with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ConductBankPayment) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for BankName

	// no validation rules for AccountNumber

	// no validation rules for AccountName

	// no validation rules for Amount

	// no validation rules for Fee

	return nil
}

// ConductBankPaymentValidationError is the validation error returned by
// ConductBankPayment.Validate if the designated constraints aren't met.
type ConductBankPaymentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConductBankPaymentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConductBankPaymentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConductBankPaymentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConductBankPaymentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConductBankPaymentValidationError) ErrorName() string {
	return "ConductBankPaymentValidationError"
}

// Error satisfies the builtin error interface
func (e ConductBankPaymentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConductBankPayment.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConductBankPaymentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConductBankPaymentValidationError{}

// Validate checks the field values on BankingPaymentDetail with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *BankingPaymentDetail) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for MerchantUserBankName

	// no validation rules for MerchantUserAccountNumber

	// no validation rules for MerchantUserAccountName

	// no validation rules for SystemBankName

	// no validation rules for SystemAccountNumber

	// no validation rules for SystemAccountName

	// no validation rules for Amount

	// no validation rules for ImageUrl

	// no validation rules for TxId

	// no validation rules for PaymentCode

	// no validation rules for Fee

	// no validation rules for MerchantUserId

	if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BankingPaymentDetailValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BankingPaymentDetailValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// BankingPaymentDetailValidationError is the validation error returned by
// BankingPaymentDetail.Validate if the designated constraints aren't met.
type BankingPaymentDetailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BankingPaymentDetailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BankingPaymentDetailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BankingPaymentDetailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BankingPaymentDetailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BankingPaymentDetailValidationError) ErrorName() string {
	return "BankingPaymentDetailValidationError"
}

// Error satisfies the builtin error interface
func (e BankingPaymentDetailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBankingPaymentDetail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BankingPaymentDetailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BankingPaymentDetailValidationError{}
