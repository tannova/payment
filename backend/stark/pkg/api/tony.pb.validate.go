// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: stark/api/tony.proto

package stark

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _tony_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on GetEWalletPaymentCodeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetEWalletPaymentCodeRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for EWalletName

	// no validation rules for MerchantUserId

	return nil
}

// GetEWalletPaymentCodeRequestValidationError is the validation error returned
// by GetEWalletPaymentCodeRequest.Validate if the designated constraints
// aren't met.
type GetEWalletPaymentCodeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEWalletPaymentCodeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEWalletPaymentCodeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEWalletPaymentCodeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEWalletPaymentCodeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEWalletPaymentCodeRequestValidationError) ErrorName() string {
	return "GetEWalletPaymentCodeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetEWalletPaymentCodeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEWalletPaymentCodeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEWalletPaymentCodeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEWalletPaymentCodeRequestValidationError{}

// Validate checks the field values on GetEWalletPaymentCodeReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetEWalletPaymentCodeReply) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for EWalletName

	// no validation rules for AccountPhoneNumber

	// no validation rules for AccountName

	return nil
}

// GetEWalletPaymentCodeReplyValidationError is the validation error returned
// by GetEWalletPaymentCodeReply.Validate if the designated constraints aren't met.
type GetEWalletPaymentCodeReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEWalletPaymentCodeReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEWalletPaymentCodeReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEWalletPaymentCodeReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEWalletPaymentCodeReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEWalletPaymentCodeReplyValidationError) ErrorName() string {
	return "GetEWalletPaymentCodeReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetEWalletPaymentCodeReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEWalletPaymentCodeReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEWalletPaymentCodeReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEWalletPaymentCodeReplyValidationError{}

// Validate checks the field values on CancelEWalletTopUpRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CancelEWalletTopUpRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for PaymentId

	// no validation rules for Note

	return nil
}

// CancelEWalletTopUpRequestValidationError is the validation error returned by
// CancelEWalletTopUpRequest.Validate if the designated constraints aren't met.
type CancelEWalletTopUpRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelEWalletTopUpRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelEWalletTopUpRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelEWalletTopUpRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelEWalletTopUpRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelEWalletTopUpRequestValidationError) ErrorName() string {
	return "CancelEWalletTopUpRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CancelEWalletTopUpRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelEWalletTopUpRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelEWalletTopUpRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelEWalletTopUpRequestValidationError{}

// Validate checks the field values on CancelEWalletTopUpReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CancelEWalletTopUpReply) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// CancelEWalletTopUpReplyValidationError is the validation error returned by
// CancelEWalletTopUpReply.Validate if the designated constraints aren't met.
type CancelEWalletTopUpReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelEWalletTopUpReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelEWalletTopUpReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelEWalletTopUpReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelEWalletTopUpReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelEWalletTopUpReplyValidationError) ErrorName() string {
	return "CancelEWalletTopUpReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CancelEWalletTopUpReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelEWalletTopUpReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelEWalletTopUpReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelEWalletTopUpReplyValidationError{}

// Validate checks the field values on CreateEWalletTopUpRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateEWalletTopUpRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetAmount() <= 0 {
		return CreateEWalletTopUpRequestValidationError{
			field:  "Amount",
			reason: "value must be greater than 0",
		}
	}

	// no validation rules for PaymentCode

	// no validation rules for MerchantUserAccountPhoneNumber

	// no validation rules for MerchantUserAccountName

	// no validation rules for SystemAccountPhoneNumber

	// no validation rules for SystemAccountName

	// no validation rules for Note

	return nil
}

// CreateEWalletTopUpRequestValidationError is the validation error returned by
// CreateEWalletTopUpRequest.Validate if the designated constraints aren't met.
type CreateEWalletTopUpRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateEWalletTopUpRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateEWalletTopUpRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateEWalletTopUpRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateEWalletTopUpRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateEWalletTopUpRequestValidationError) ErrorName() string {
	return "CreateEWalletTopUpRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateEWalletTopUpRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateEWalletTopUpRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateEWalletTopUpRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateEWalletTopUpRequestValidationError{}

// Validate checks the field values on CreateEWalletTopUpReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateEWalletTopUpReply) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for PaymentId

	return nil
}

// CreateEWalletTopUpReplyValidationError is the validation error returned by
// CreateEWalletTopUpReply.Validate if the designated constraints aren't met.
type CreateEWalletTopUpReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateEWalletTopUpReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateEWalletTopUpReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateEWalletTopUpReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateEWalletTopUpReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateEWalletTopUpReplyValidationError) ErrorName() string {
	return "CreateEWalletTopUpReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateEWalletTopUpReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateEWalletTopUpReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateEWalletTopUpReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateEWalletTopUpReplyValidationError{}

// Validate checks the field values on ApproveEWalletTopUpRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ApproveEWalletTopUpRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for PaymentId

	// no validation rules for ImageUrl

	// no validation rules for TxId

	// no validation rules for Note

	return nil
}

// ApproveEWalletTopUpRequestValidationError is the validation error returned
// by ApproveEWalletTopUpRequest.Validate if the designated constraints aren't met.
type ApproveEWalletTopUpRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApproveEWalletTopUpRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApproveEWalletTopUpRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApproveEWalletTopUpRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApproveEWalletTopUpRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApproveEWalletTopUpRequestValidationError) ErrorName() string {
	return "ApproveEWalletTopUpRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ApproveEWalletTopUpRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApproveEWalletTopUpRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApproveEWalletTopUpRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApproveEWalletTopUpRequestValidationError{}

// Validate checks the field values on ApproveEWalletTopUpReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ApproveEWalletTopUpReply) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for PaymentId

	return nil
}

// ApproveEWalletTopUpReplyValidationError is the validation error returned by
// ApproveEWalletTopUpReply.Validate if the designated constraints aren't met.
type ApproveEWalletTopUpReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApproveEWalletTopUpReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApproveEWalletTopUpReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApproveEWalletTopUpReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApproveEWalletTopUpReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApproveEWalletTopUpReplyValidationError) ErrorName() string {
	return "ApproveEWalletTopUpReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ApproveEWalletTopUpReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApproveEWalletTopUpReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApproveEWalletTopUpReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApproveEWalletTopUpReplyValidationError{}

// Validate checks the field values on RejectEWalletTopUpRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RejectEWalletTopUpRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for PaymentId

	// no validation rules for Note

	// no validation rules for IsMerchantCall

	return nil
}

// RejectEWalletTopUpRequestValidationError is the validation error returned by
// RejectEWalletTopUpRequest.Validate if the designated constraints aren't met.
type RejectEWalletTopUpRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RejectEWalletTopUpRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RejectEWalletTopUpRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RejectEWalletTopUpRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RejectEWalletTopUpRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RejectEWalletTopUpRequestValidationError) ErrorName() string {
	return "RejectEWalletTopUpRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RejectEWalletTopUpRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRejectEWalletTopUpRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RejectEWalletTopUpRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RejectEWalletTopUpRequestValidationError{}

// Validate checks the field values on RejectEWalletTopUpReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RejectEWalletTopUpReply) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// RejectEWalletTopUpReplyValidationError is the validation error returned by
// RejectEWalletTopUpReply.Validate if the designated constraints aren't met.
type RejectEWalletTopUpReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RejectEWalletTopUpReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RejectEWalletTopUpReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RejectEWalletTopUpReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RejectEWalletTopUpReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RejectEWalletTopUpReplyValidationError) ErrorName() string {
	return "RejectEWalletTopUpReplyValidationError"
}

// Error satisfies the builtin error interface
func (e RejectEWalletTopUpReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRejectEWalletTopUpReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RejectEWalletTopUpReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RejectEWalletTopUpReplyValidationError{}

// Validate checks the field values on CreateSystemEWalletRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateSystemEWalletRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for AccountId

	// no validation rules for AccountWalletName

	// no validation rules for AccountPhoneNumber

	// no validation rules for AccountName

	// no validation rules for Balance

	// no validation rules for DailyBalance

	// no validation rules for DailyBalanceLimit

	// no validation rules for DailyUsedAmount

	if m.GetMerchantId() <= 0 {
		return CreateSystemEWalletRequestValidationError{
			field:  "MerchantId",
			reason: "value must be greater than 0",
		}
	}

	// no validation rules for ErrorCode

	return nil
}

// CreateSystemEWalletRequestValidationError is the validation error returned
// by CreateSystemEWalletRequest.Validate if the designated constraints aren't met.
type CreateSystemEWalletRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSystemEWalletRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSystemEWalletRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSystemEWalletRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSystemEWalletRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSystemEWalletRequestValidationError) ErrorName() string {
	return "CreateSystemEWalletRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSystemEWalletRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSystemEWalletRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSystemEWalletRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSystemEWalletRequestValidationError{}

// Validate checks the field values on CreateSystemEWalletReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateSystemEWalletReply) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// CreateSystemEWalletReplyValidationError is the validation error returned by
// CreateSystemEWalletReply.Validate if the designated constraints aren't met.
type CreateSystemEWalletReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSystemEWalletReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSystemEWalletReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSystemEWalletReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSystemEWalletReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSystemEWalletReplyValidationError) ErrorName() string {
	return "CreateSystemEWalletReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSystemEWalletReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSystemEWalletReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSystemEWalletReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSystemEWalletReplyValidationError{}

// Validate checks the field values on UpdateSystemEWalletStatusRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *UpdateSystemEWalletStatusRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetId() <= 0 {
		return UpdateSystemEWalletStatusRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
	}

	// no validation rules for Status

	return nil
}

// UpdateSystemEWalletStatusRequestValidationError is the validation error
// returned by UpdateSystemEWalletStatusRequest.Validate if the designated
// constraints aren't met.
type UpdateSystemEWalletStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSystemEWalletStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSystemEWalletStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSystemEWalletStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSystemEWalletStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSystemEWalletStatusRequestValidationError) ErrorName() string {
	return "UpdateSystemEWalletStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSystemEWalletStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSystemEWalletStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSystemEWalletStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSystemEWalletStatusRequestValidationError{}

// Validate checks the field values on UpdateSystemEWalletStatusReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateSystemEWalletStatusReply) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetEWallet()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateSystemEWalletStatusReplyValidationError{
				field:  "EWallet",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateSystemEWalletStatusReplyValidationError is the validation error
// returned by UpdateSystemEWalletStatusReply.Validate if the designated
// constraints aren't met.
type UpdateSystemEWalletStatusReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSystemEWalletStatusReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSystemEWalletStatusReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSystemEWalletStatusReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSystemEWalletStatusReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSystemEWalletStatusReplyValidationError) ErrorName() string {
	return "UpdateSystemEWalletStatusReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSystemEWalletStatusReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSystemEWalletStatusReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSystemEWalletStatusReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSystemEWalletStatusReplyValidationError{}

// Validate checks the field values on ListSystemEWalletsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListSystemEWalletsRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Page

	// no validation rules for Size

	return nil
}

// ListSystemEWalletsRequestValidationError is the validation error returned by
// ListSystemEWalletsRequest.Validate if the designated constraints aren't met.
type ListSystemEWalletsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSystemEWalletsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSystemEWalletsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSystemEWalletsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSystemEWalletsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSystemEWalletsRequestValidationError) ErrorName() string {
	return "ListSystemEWalletsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListSystemEWalletsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSystemEWalletsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSystemEWalletsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSystemEWalletsRequestValidationError{}

// Validate checks the field values on ListSystemEWalletsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListSystemEWalletsReply) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetRecords() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListSystemEWalletsReplyValidationError{
					field:  fmt.Sprintf("Records[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	// no validation rules for CurrentPage

	return nil
}

// ListSystemEWalletsReplyValidationError is the validation error returned by
// ListSystemEWalletsReply.Validate if the designated constraints aren't met.
type ListSystemEWalletsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSystemEWalletsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSystemEWalletsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSystemEWalletsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSystemEWalletsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSystemEWalletsReplyValidationError) ErrorName() string {
	return "ListSystemEWalletsReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListSystemEWalletsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSystemEWalletsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSystemEWalletsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSystemEWalletsReplyValidationError{}

// Validate checks the field values on ValidateSystemEWalletsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ValidateSystemEWalletsRequest) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetRecords() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ValidateSystemEWalletsRequestValidationError{
					field:  fmt.Sprintf("Records[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ValidateSystemEWalletsRequestValidationError is the validation error
// returned by ValidateSystemEWalletsRequest.Validate if the designated
// constraints aren't met.
type ValidateSystemEWalletsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ValidateSystemEWalletsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ValidateSystemEWalletsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ValidateSystemEWalletsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ValidateSystemEWalletsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ValidateSystemEWalletsRequestValidationError) ErrorName() string {
	return "ValidateSystemEWalletsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ValidateSystemEWalletsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sValidateSystemEWalletsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ValidateSystemEWalletsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ValidateSystemEWalletsRequestValidationError{}

// Validate checks the field values on ValidateSystemEWalletsReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ValidateSystemEWalletsReply) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetValidRecords() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ValidateSystemEWalletsReplyValidationError{
					field:  fmt.Sprintf("ValidRecords[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetDuplicatedRecords() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ValidateSystemEWalletsReplyValidationError{
					field:  fmt.Sprintf("DuplicatedRecords[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetInvalidRecords() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ValidateSystemEWalletsReplyValidationError{
					field:  fmt.Sprintf("InvalidRecords[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetDuplicatedIdRecords() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ValidateSystemEWalletsReplyValidationError{
					field:  fmt.Sprintf("DuplicatedIdRecords[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ValidateSystemEWalletsReplyValidationError is the validation error returned
// by ValidateSystemEWalletsReply.Validate if the designated constraints
// aren't met.
type ValidateSystemEWalletsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ValidateSystemEWalletsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ValidateSystemEWalletsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ValidateSystemEWalletsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ValidateSystemEWalletsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ValidateSystemEWalletsReplyValidationError) ErrorName() string {
	return "ValidateSystemEWalletsReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ValidateSystemEWalletsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sValidateSystemEWalletsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ValidateSystemEWalletsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ValidateSystemEWalletsReplyValidationError{}

// Validate checks the field values on ImportSystemEWalletsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ImportSystemEWalletsRequest) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetRecords() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ImportSystemEWalletsRequestValidationError{
					field:  fmt.Sprintf("Records[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ImportSystemEWalletsRequestValidationError is the validation error returned
// by ImportSystemEWalletsRequest.Validate if the designated constraints
// aren't met.
type ImportSystemEWalletsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImportSystemEWalletsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImportSystemEWalletsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImportSystemEWalletsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImportSystemEWalletsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImportSystemEWalletsRequestValidationError) ErrorName() string {
	return "ImportSystemEWalletsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ImportSystemEWalletsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImportSystemEWalletsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImportSystemEWalletsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImportSystemEWalletsRequestValidationError{}

// Validate checks the field values on ImportSystemEWalletsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ImportSystemEWalletsReply) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ImportSystemEWalletsReplyValidationError is the validation error returned by
// ImportSystemEWalletsReply.Validate if the designated constraints aren't met.
type ImportSystemEWalletsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImportSystemEWalletsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImportSystemEWalletsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImportSystemEWalletsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImportSystemEWalletsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImportSystemEWalletsReplyValidationError) ErrorName() string {
	return "ImportSystemEWalletsReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ImportSystemEWalletsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImportSystemEWalletsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImportSystemEWalletsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImportSystemEWalletsReplyValidationError{}

// Validate checks the field values on GetSystemEWalletsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetSystemEWalletsRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for EWalletName

	// no validation rules for MerchantId

	return nil
}

// GetSystemEWalletsRequestValidationError is the validation error returned by
// GetSystemEWalletsRequest.Validate if the designated constraints aren't met.
type GetSystemEWalletsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSystemEWalletsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSystemEWalletsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSystemEWalletsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSystemEWalletsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSystemEWalletsRequestValidationError) ErrorName() string {
	return "GetSystemEWalletsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSystemEWalletsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSystemEWalletsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSystemEWalletsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSystemEWalletsRequestValidationError{}

// Validate checks the field values on GetSystemEWalletsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetSystemEWalletsReply) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetSystemEWallets() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetSystemEWalletsReplyValidationError{
					field:  fmt.Sprintf("SystemEWallets[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetSystemEWalletsReplyValidationError is the validation error returned by
// GetSystemEWalletsReply.Validate if the designated constraints aren't met.
type GetSystemEWalletsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSystemEWalletsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSystemEWalletsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSystemEWalletsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSystemEWalletsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSystemEWalletsReplyValidationError) ErrorName() string {
	return "GetSystemEWalletsReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetSystemEWalletsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSystemEWalletsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSystemEWalletsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSystemEWalletsReplyValidationError{}

// Validate checks the field values on EWalletPaymentDetail with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *EWalletPaymentDetail) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for PaymentCode

	// no validation rules for EWalletName

	// no validation rules for MerchantUserAccountPhoneNumber

	// no validation rules for MerchantUserAccountName

	// no validation rules for SystemAccountPhoneNumber

	// no validation rules for SystemAccountName

	// no validation rules for Amount

	// no validation rules for Fee

	// no validation rules for MerchantUserId

	return nil
}

// EWalletPaymentDetailValidationError is the validation error returned by
// EWalletPaymentDetail.Validate if the designated constraints aren't met.
type EWalletPaymentDetailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EWalletPaymentDetailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EWalletPaymentDetailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EWalletPaymentDetailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EWalletPaymentDetailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EWalletPaymentDetailValidationError) ErrorName() string {
	return "EWalletPaymentDetailValidationError"
}

// Error satisfies the builtin error interface
func (e EWalletPaymentDetailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEWalletPaymentDetail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EWalletPaymentDetailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EWalletPaymentDetailValidationError{}

// Validate checks the field values on SystemEWallet with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *SystemEWallet) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SystemEWalletValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SystemEWalletValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CreatedBy

	// no validation rules for UpdatedBy

	// no validation rules for EWalletName

	// no validation rules for Status

	// no validation rules for MerchantId

	// no validation rules for AccountPhoneNumber

	// no validation rules for AccountName

	// no validation rules for Balance

	// no validation rules for DailyBalance

	// no validation rules for DailyBalanceLimit

	// no validation rules for DailyUsedAmount

	return nil
}

// SystemEWalletValidationError is the validation error returned by
// SystemEWallet.Validate if the designated constraints aren't met.
type SystemEWalletValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SystemEWalletValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SystemEWalletValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SystemEWalletValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SystemEWalletValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SystemEWalletValidationError) ErrorName() string { return "SystemEWalletValidationError" }

// Error satisfies the builtin error interface
func (e SystemEWalletValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSystemEWallet.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SystemEWalletValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SystemEWalletValidationError{}
