// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package postman

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// PostmanClient is the client API for Postman service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PostmanClient interface {
	SendMail(ctx context.Context, in *SendMailRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	SendSms(ctx context.Context, in *SendSmsRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type postmanClient struct {
	cc grpc.ClientConnInterface
}

func NewPostmanClient(cc grpc.ClientConnInterface) PostmanClient {
	return &postmanClient{cc}
}

func (c *postmanClient) SendMail(ctx context.Context, in *SendMailRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/postman.Postman/SendMail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postmanClient) SendSms(ctx context.Context, in *SendSmsRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/postman.Postman/SendSms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PostmanServer is the server API for Postman service.
// All implementations must embed UnimplementedPostmanServer
// for forward compatibility
type PostmanServer interface {
	SendMail(context.Context, *SendMailRequest) (*empty.Empty, error)
	SendSms(context.Context, *SendSmsRequest) (*empty.Empty, error)
	mustEmbedUnimplementedPostmanServer()
}

// UnimplementedPostmanServer must be embedded to have forward compatible implementations.
type UnimplementedPostmanServer struct {
}

func (*UnimplementedPostmanServer) SendMail(context.Context, *SendMailRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMail not implemented")
}
func (*UnimplementedPostmanServer) SendSms(context.Context, *SendSmsRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendSms not implemented")
}
func (*UnimplementedPostmanServer) mustEmbedUnimplementedPostmanServer() {}

func RegisterPostmanServer(s *grpc.Server, srv PostmanServer) {
	s.RegisterService(&_Postman_serviceDesc, srv)
}

func _Postman_SendMail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostmanServer).SendMail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/postman.Postman/SendMail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostmanServer).SendMail(ctx, req.(*SendMailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Postman_SendSms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendSmsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostmanServer).SendSms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/postman.Postman/SendSms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostmanServer).SendSms(ctx, req.(*SendSmsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Postman_serviceDesc = grpc.ServiceDesc{
	ServiceName: "postman.Postman",
	HandlerType: (*PostmanServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMail",
			Handler:    _Postman_SendMail_Handler,
		},
		{
			MethodName: "SendSms",
			Handler:    _Postman_SendSms_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/postman.proto",
}
