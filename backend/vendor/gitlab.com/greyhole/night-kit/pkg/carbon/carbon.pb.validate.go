// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/carbon.proto

package api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on Logger with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Logger) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Level

	// no validation rules for Pretty

	return nil
}

// LoggerValidationError is the validation error returned by Logger.Validate if
// the designated constraints aren't met.
type LoggerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoggerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoggerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoggerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoggerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoggerValidationError) ErrorName() string { return "LoggerValidationError" }

// Error satisfies the builtin error interface
func (e LoggerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLogger.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoggerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoggerValidationError{}

// Validate checks the field values on TCPSocket with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *TCPSocket) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetAddress()) < 1 {
		return TCPSocketValidationError{
			field:  "Address",
			reason: "value length must be at least 1 bytes",
		}
	}

	if m.GetPort() > 65535 {
		return TCPSocketValidationError{
			field:  "Port",
			reason: "value must be less than or equal to 65535",
		}
	}

	// no validation rules for Secure

	return nil
}

// TCPSocketValidationError is the validation error returned by
// TCPSocket.Validate if the designated constraints aren't met.
type TCPSocketValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TCPSocketValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TCPSocketValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TCPSocketValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TCPSocketValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TCPSocketValidationError) ErrorName() string { return "TCPSocketValidationError" }

// Error satisfies the builtin error interface
func (e TCPSocketValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTCPSocket.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TCPSocketValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TCPSocketValidationError{}

// Validate checks the field values on UnixSocket with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *UnixSocket) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetPath()) < 1 {
		return UnixSocketValidationError{
			field:  "Path",
			reason: "value length must be at least 1 bytes",
		}
	}

	return nil
}

// UnixSocketValidationError is the validation error returned by
// UnixSocket.Validate if the designated constraints aren't met.
type UnixSocketValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnixSocketValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnixSocketValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnixSocketValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnixSocketValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnixSocketValidationError) ErrorName() string { return "UnixSocketValidationError" }

// Error satisfies the builtin error interface
func (e UnixSocketValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnixSocket.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnixSocketValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnixSocketValidationError{}

// Validate checks the field values on Listener with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Listener) Validate() error {
	if m == nil {
		return nil
	}

	switch m.Socket.(type) {

	case *Listener_Tcp:

		if v, ok := interface{}(m.GetTcp()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListenerValidationError{
					field:  "Tcp",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Listener_Unix:

		if v, ok := interface{}(m.GetUnix()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListenerValidationError{
					field:  "Unix",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		return ListenerValidationError{
			field:  "Socket",
			reason: "value is required",
		}

	}

	return nil
}

// ListenerValidationError is the validation error returned by
// Listener.Validate if the designated constraints aren't met.
type ListenerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListenerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListenerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListenerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListenerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListenerValidationError) ErrorName() string { return "ListenerValidationError" }

// Error satisfies the builtin error interface
func (e ListenerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListener.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListenerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListenerValidationError{}

// Validate checks the field values on Database with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Database) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetUrl()) < 1 {
		return DatabaseValidationError{
			field:  "Url",
			reason: "value length must be at least 1 bytes",
		}
	}

	// no validation rules for Debug

	return nil
}

// DatabaseValidationError is the validation error returned by
// Database.Validate if the designated constraints aren't met.
type DatabaseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DatabaseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DatabaseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DatabaseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DatabaseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DatabaseValidationError) ErrorName() string { return "DatabaseValidationError" }

// Error satisfies the builtin error interface
func (e DatabaseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDatabase.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DatabaseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DatabaseValidationError{}

// Validate checks the field values on JwtSigning with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *JwtSigning) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetPrivateKey()) < 1 {
		return JwtSigningValidationError{
			field:  "PrivateKey",
			reason: "value length must be at least 1 bytes",
		}
	}

	// no validation rules for Password

	// no validation rules for ExpiresTime

	if utf8.RuneCountInString(m.GetIssuer()) < 1 {
		return JwtSigningValidationError{
			field:  "Issuer",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetAudience()) < 1 {
		return JwtSigningValidationError{
			field:  "Audience",
			reason: "value length must be at least 1 runes",
		}
	}

	return nil
}

// JwtSigningValidationError is the validation error returned by
// JwtSigning.Validate if the designated constraints aren't met.
type JwtSigningValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JwtSigningValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JwtSigningValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JwtSigningValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JwtSigningValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JwtSigningValidationError) ErrorName() string { return "JwtSigningValidationError" }

// Error satisfies the builtin error interface
func (e JwtSigningValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJwtSigning.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JwtSigningValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JwtSigningValidationError{}

// Validate checks the field values on S3 with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *S3) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetAccessKeyId()) < 1 {
		return S3ValidationError{
			field:  "AccessKeyId",
			reason: "value length must be at least 1 bytes",
		}
	}

	if len(m.GetSecretAccessKey()) < 1 {
		return S3ValidationError{
			field:  "SecretAccessKey",
			reason: "value length must be at least 1 bytes",
		}
	}

	if len(m.GetRegion()) < 1 {
		return S3ValidationError{
			field:  "Region",
			reason: "value length must be at least 1 bytes",
		}
	}

	if len(m.GetBucket()) < 1 {
		return S3ValidationError{
			field:  "Bucket",
			reason: "value length must be at least 1 bytes",
		}
	}

	if len(m.GetHost()) < 1 {
		return S3ValidationError{
			field:  "Host",
			reason: "value length must be at least 1 bytes",
		}
	}

	return nil
}

// S3ValidationError is the validation error returned by S3.Validate if the
// designated constraints aren't met.
type S3ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e S3ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e S3ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e S3ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e S3ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e S3ValidationError) ErrorName() string { return "S3ValidationError" }

// Error satisfies the builtin error interface
func (e S3ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sS3.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = S3ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = S3ValidationError{}

// Validate checks the field values on NATS with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *NATS) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Url

	return nil
}

// NATSValidationError is the validation error returned by NATS.Validate if the
// designated constraints aren't met.
type NATSValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NATSValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NATSValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NATSValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NATSValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NATSValidationError) ErrorName() string { return "NATSValidationError" }

// Error satisfies the builtin error interface
func (e NATSValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNATS.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NATSValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NATSValidationError{}

// Validate checks the field values on Redis with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Redis) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetAddress()) < 1 {
		return RedisValidationError{
			field:  "Address",
			reason: "value length must be at least 1 bytes",
		}
	}

	// no validation rules for Password

	// no validation rules for Db

	return nil
}

// RedisValidationError is the validation error returned by Redis.Validate if
// the designated constraints aren't met.
type RedisValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RedisValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RedisValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RedisValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RedisValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RedisValidationError) ErrorName() string { return "RedisValidationError" }

// Error satisfies the builtin error interface
func (e RedisValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRedis.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RedisValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RedisValidationError{}

// Validate checks the field values on Profiling with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Profiling) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Enable

	if m.GetPort() > 65535 {
		return ProfilingValidationError{
			field:  "Port",
			reason: "value must be less than or equal to 65535",
		}
	}

	return nil
}

// ProfilingValidationError is the validation error returned by
// Profiling.Validate if the designated constraints aren't met.
type ProfilingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProfilingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProfilingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProfilingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProfilingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProfilingValidationError) ErrorName() string { return "ProfilingValidationError" }

// Error satisfies the builtin error interface
func (e ProfilingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProfiling.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProfilingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProfilingValidationError{}
