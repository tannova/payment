// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: myid/api/myid.proto

package myid

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _myid_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on SignUpRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *SignUpRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Username

	// no validation rules for Password

	// no validation rules for ConfirmPassword

	// no validation rules for DeviceId

	// no validation rules for ReferrerId

	return nil
}

// SignUpRequestValidationError is the validation error returned by
// SignUpRequest.Validate if the designated constraints aren't met.
type SignUpRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SignUpRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SignUpRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SignUpRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SignUpRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SignUpRequestValidationError) ErrorName() string { return "SignUpRequestValidationError" }

// Error satisfies the builtin error interface
func (e SignUpRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSignUpRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SignUpRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SignUpRequestValidationError{}

// Validate checks the field values on SignUpV2Request with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *SignUpV2Request) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for DeviceId

	// no validation rules for ReferrerId

	switch m.Credential.(type) {

	case *SignUpV2Request_MyId:

		if v, ok := interface{}(m.GetMyId()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SignUpV2RequestValidationError{
					field:  "MyId",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SignUpV2Request_Facebook_:

		if v, ok := interface{}(m.GetFacebook()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SignUpV2RequestValidationError{
					field:  "Facebook",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		return SignUpV2RequestValidationError{
			field:  "Credential",
			reason: "value is required",
		}

	}

	return nil
}

// SignUpV2RequestValidationError is the validation error returned by
// SignUpV2Request.Validate if the designated constraints aren't met.
type SignUpV2RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SignUpV2RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SignUpV2RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SignUpV2RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SignUpV2RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SignUpV2RequestValidationError) ErrorName() string { return "SignUpV2RequestValidationError" }

// Error satisfies the builtin error interface
func (e SignUpV2RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSignUpV2Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SignUpV2RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SignUpV2RequestValidationError{}

// Validate checks the field values on SignUpReply with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *SignUpReply) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetTokenInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SignUpReplyValidationError{
				field:  "TokenInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// SignUpReplyValidationError is the validation error returned by
// SignUpReply.Validate if the designated constraints aren't met.
type SignUpReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SignUpReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SignUpReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SignUpReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SignUpReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SignUpReplyValidationError) ErrorName() string { return "SignUpReplyValidationError" }

// Error satisfies the builtin error interface
func (e SignUpReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSignUpReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SignUpReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SignUpReplyValidationError{}

// Validate checks the field values on SignInRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *SignInRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Username

	// no validation rules for Password

	// no validation rules for DeviceId

	// no validation rules for DeviceName

	return nil
}

// SignInRequestValidationError is the validation error returned by
// SignInRequest.Validate if the designated constraints aren't met.
type SignInRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SignInRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SignInRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SignInRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SignInRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SignInRequestValidationError) ErrorName() string { return "SignInRequestValidationError" }

// Error satisfies the builtin error interface
func (e SignInRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSignInRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SignInRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SignInRequestValidationError{}

// Validate checks the field values on SignInV2Request with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *SignInV2Request) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for DeviceId

	// no validation rules for DeviceName

	switch m.Credential.(type) {

	case *SignInV2Request_MyId:

		if v, ok := interface{}(m.GetMyId()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SignInV2RequestValidationError{
					field:  "MyId",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SignInV2Request_Facebook_:

		if v, ok := interface{}(m.GetFacebook()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SignInV2RequestValidationError{
					field:  "Facebook",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		return SignInV2RequestValidationError{
			field:  "Credential",
			reason: "value is required",
		}

	}

	return nil
}

// SignInV2RequestValidationError is the validation error returned by
// SignInV2Request.Validate if the designated constraints aren't met.
type SignInV2RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SignInV2RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SignInV2RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SignInV2RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SignInV2RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SignInV2RequestValidationError) ErrorName() string { return "SignInV2RequestValidationError" }

// Error satisfies the builtin error interface
func (e SignInV2RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSignInV2Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SignInV2RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SignInV2RequestValidationError{}

// Validate checks the field values on SignInReply with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *SignInReply) Validate() error {
	if m == nil {
		return nil
	}

	switch m.Result.(type) {

	case *SignInReply_TokenInfo:

		if v, ok := interface{}(m.GetTokenInfo()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SignInReplyValidationError{
					field:  "TokenInfo",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SignInReply_ConfirmOtp:

		if v, ok := interface{}(m.GetConfirmOtp()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SignInReplyValidationError{
					field:  "ConfirmOtp",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// SignInReplyValidationError is the validation error returned by
// SignInReply.Validate if the designated constraints aren't met.
type SignInReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SignInReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SignInReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SignInReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SignInReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SignInReplyValidationError) ErrorName() string { return "SignInReplyValidationError" }

// Error satisfies the builtin error interface
func (e SignInReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSignInReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SignInReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SignInReplyValidationError{}

// Validate checks the field values on ResendSignInOTPRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ResendSignInOTPRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for OtpId

	return nil
}

// ResendSignInOTPRequestValidationError is the validation error returned by
// ResendSignInOTPRequest.Validate if the designated constraints aren't met.
type ResendSignInOTPRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResendSignInOTPRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResendSignInOTPRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResendSignInOTPRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResendSignInOTPRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResendSignInOTPRequestValidationError) ErrorName() string {
	return "ResendSignInOTPRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ResendSignInOTPRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResendSignInOTPRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResendSignInOTPRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResendSignInOTPRequestValidationError{}

// Validate checks the field values on ResendSignInOTPReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ResendSignInOTPReply) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetConfirmOtp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResendSignInOTPReplyValidationError{
				field:  "ConfirmOtp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ResendSignInOTPReplyValidationError is the validation error returned by
// ResendSignInOTPReply.Validate if the designated constraints aren't met.
type ResendSignInOTPReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResendSignInOTPReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResendSignInOTPReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResendSignInOTPReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResendSignInOTPReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResendSignInOTPReplyValidationError) ErrorName() string {
	return "ResendSignInOTPReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ResendSignInOTPReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResendSignInOTPReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResendSignInOTPReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResendSignInOTPReplyValidationError{}

// Validate checks the field values on ConfirmSignInRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ConfirmSignInRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for OtpId

	// no validation rules for Otp

	return nil
}

// ConfirmSignInRequestValidationError is the validation error returned by
// ConfirmSignInRequest.Validate if the designated constraints aren't met.
type ConfirmSignInRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfirmSignInRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfirmSignInRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfirmSignInRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfirmSignInRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfirmSignInRequestValidationError) ErrorName() string {
	return "ConfirmSignInRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ConfirmSignInRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfirmSignInRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfirmSignInRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfirmSignInRequestValidationError{}

// Validate checks the field values on ConfirmSignInReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ConfirmSignInReply) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetTokenInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConfirmSignInReplyValidationError{
				field:  "TokenInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ConfirmSignInReplyValidationError is the validation error returned by
// ConfirmSignInReply.Validate if the designated constraints aren't met.
type ConfirmSignInReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfirmSignInReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfirmSignInReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfirmSignInReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfirmSignInReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfirmSignInReplyValidationError) ErrorName() string {
	return "ConfirmSignInReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ConfirmSignInReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfirmSignInReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfirmSignInReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfirmSignInReplyValidationError{}

// Validate checks the field values on CreatePasswordRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreatePasswordRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for OtpId

	// no validation rules for Otp

	// no validation rules for NewPassword

	// no validation rules for ConfirmNewPassword

	return nil
}

// CreatePasswordRequestValidationError is the validation error returned by
// CreatePasswordRequest.Validate if the designated constraints aren't met.
type CreatePasswordRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePasswordRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePasswordRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePasswordRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePasswordRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePasswordRequestValidationError) ErrorName() string {
	return "CreatePasswordRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePasswordRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePasswordRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePasswordRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePasswordRequestValidationError{}

// Validate checks the field values on CreateAccessTokenRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateAccessTokenRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for IdToken

	return nil
}

// CreateAccessTokenRequestValidationError is the validation error returned by
// CreateAccessTokenRequest.Validate if the designated constraints aren't met.
type CreateAccessTokenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAccessTokenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAccessTokenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAccessTokenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAccessTokenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAccessTokenRequestValidationError) ErrorName() string {
	return "CreateAccessTokenRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAccessTokenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAccessTokenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAccessTokenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAccessTokenRequestValidationError{}

// Validate checks the field values on CreateAccessTokenReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateAccessTokenReply) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for AccessToken

	return nil
}

// CreateAccessTokenReplyValidationError is the validation error returned by
// CreateAccessTokenReply.Validate if the designated constraints aren't met.
type CreateAccessTokenReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAccessTokenReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAccessTokenReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAccessTokenReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAccessTokenReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAccessTokenReplyValidationError) ErrorName() string {
	return "CreateAccessTokenReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAccessTokenReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAccessTokenReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAccessTokenReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAccessTokenReplyValidationError{}

// Validate checks the field values on MeReply with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *MeReply) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MeReplyValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetPermissions() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MeReplyValidationError{
					field:  fmt.Sprintf("Permissions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// MeReplyValidationError is the validation error returned by MeReply.Validate
// if the designated constraints aren't met.
type MeReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MeReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MeReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MeReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MeReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MeReplyValidationError) ErrorName() string { return "MeReplyValidationError" }

// Error satisfies the builtin error interface
func (e MeReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMeReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MeReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MeReplyValidationError{}

// Validate checks the field values on ChangePasswordRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ChangePasswordRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for CurrentPassword

	// no validation rules for NewPassword

	// no validation rules for ConfirmNewPassword

	return nil
}

// ChangePasswordRequestValidationError is the validation error returned by
// ChangePasswordRequest.Validate if the designated constraints aren't met.
type ChangePasswordRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangePasswordRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangePasswordRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangePasswordRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangePasswordRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangePasswordRequestValidationError) ErrorName() string {
	return "ChangePasswordRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ChangePasswordRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangePasswordRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangePasswordRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangePasswordRequestValidationError{}

// Validate checks the field values on UpdateMetadataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateMetadataRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Metadata

	return nil
}

// UpdateMetadataRequestValidationError is the validation error returned by
// UpdateMetadataRequest.Validate if the designated constraints aren't met.
type UpdateMetadataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateMetadataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateMetadataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateMetadataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateMetadataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateMetadataRequestValidationError) ErrorName() string {
	return "UpdateMetadataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateMetadataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateMetadataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateMetadataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateMetadataRequestValidationError{}

// Validate checks the field values on UpdateEmailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateEmailRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Email

	return nil
}

// UpdateEmailRequestValidationError is the validation error returned by
// UpdateEmailRequest.Validate if the designated constraints aren't met.
type UpdateEmailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateEmailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateEmailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateEmailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateEmailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateEmailRequestValidationError) ErrorName() string {
	return "UpdateEmailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateEmailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateEmailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateEmailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateEmailRequestValidationError{}

// Validate checks the field values on UpdateEmailReply with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *UpdateEmailReply) Validate() error {
	if m == nil {
		return nil
	}

	switch m.Result.(type) {

	case *UpdateEmailReply_Otp:

		if v, ok := interface{}(m.GetOtp()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateEmailReplyValidationError{
					field:  "Otp",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *UpdateEmailReply_User:

		if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateEmailReplyValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// UpdateEmailReplyValidationError is the validation error returned by
// UpdateEmailReply.Validate if the designated constraints aren't met.
type UpdateEmailReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateEmailReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateEmailReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateEmailReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateEmailReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateEmailReplyValidationError) ErrorName() string { return "UpdateEmailReplyValidationError" }

// Error satisfies the builtin error interface
func (e UpdateEmailReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateEmailReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateEmailReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateEmailReplyValidationError{}

// Validate checks the field values on VerifyEmailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *VerifyEmailRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for OtpId

	// no validation rules for Otp

	return nil
}

// VerifyEmailRequestValidationError is the validation error returned by
// VerifyEmailRequest.Validate if the designated constraints aren't met.
type VerifyEmailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerifyEmailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerifyEmailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerifyEmailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerifyEmailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerifyEmailRequestValidationError) ErrorName() string {
	return "VerifyEmailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e VerifyEmailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerifyEmailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerifyEmailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerifyEmailRequestValidationError{}

// Validate checks the field values on VerifyEmailReply with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *VerifyEmailReply) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VerifyEmailReplyValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// VerifyEmailReplyValidationError is the validation error returned by
// VerifyEmailReply.Validate if the designated constraints aren't met.
type VerifyEmailReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerifyEmailReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerifyEmailReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerifyEmailReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerifyEmailReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerifyEmailReplyValidationError) ErrorName() string { return "VerifyEmailReplyValidationError" }

// Error satisfies the builtin error interface
func (e VerifyEmailReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerifyEmailReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerifyEmailReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerifyEmailReplyValidationError{}

// Validate checks the field values on UpdatePhoneNumberRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdatePhoneNumberRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for PhoneNumber

	return nil
}

// UpdatePhoneNumberRequestValidationError is the validation error returned by
// UpdatePhoneNumberRequest.Validate if the designated constraints aren't met.
type UpdatePhoneNumberRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePhoneNumberRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePhoneNumberRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePhoneNumberRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePhoneNumberRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePhoneNumberRequestValidationError) ErrorName() string {
	return "UpdatePhoneNumberRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePhoneNumberRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePhoneNumberRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePhoneNumberRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePhoneNumberRequestValidationError{}

// Validate checks the field values on UpdatePhoneNumberReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdatePhoneNumberReply) Validate() error {
	if m == nil {
		return nil
	}

	switch m.Result.(type) {

	case *UpdatePhoneNumberReply_Otp:

		if v, ok := interface{}(m.GetOtp()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdatePhoneNumberReplyValidationError{
					field:  "Otp",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *UpdatePhoneNumberReply_User:

		if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdatePhoneNumberReplyValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// UpdatePhoneNumberReplyValidationError is the validation error returned by
// UpdatePhoneNumberReply.Validate if the designated constraints aren't met.
type UpdatePhoneNumberReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePhoneNumberReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePhoneNumberReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePhoneNumberReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePhoneNumberReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePhoneNumberReplyValidationError) ErrorName() string {
	return "UpdatePhoneNumberReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePhoneNumberReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePhoneNumberReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePhoneNumberReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePhoneNumberReplyValidationError{}

// Validate checks the field values on VerifyPhoneNumberRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *VerifyPhoneNumberRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for OtpId

	// no validation rules for Otp

	return nil
}

// VerifyPhoneNumberRequestValidationError is the validation error returned by
// VerifyPhoneNumberRequest.Validate if the designated constraints aren't met.
type VerifyPhoneNumberRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerifyPhoneNumberRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerifyPhoneNumberRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerifyPhoneNumberRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerifyPhoneNumberRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerifyPhoneNumberRequestValidationError) ErrorName() string {
	return "VerifyPhoneNumberRequestValidationError"
}

// Error satisfies the builtin error interface
func (e VerifyPhoneNumberRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerifyPhoneNumberRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerifyPhoneNumberRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerifyPhoneNumberRequestValidationError{}

// Validate checks the field values on VerifyPhoneNumberReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *VerifyPhoneNumberReply) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VerifyPhoneNumberReplyValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// VerifyPhoneNumberReplyValidationError is the validation error returned by
// VerifyPhoneNumberReply.Validate if the designated constraints aren't met.
type VerifyPhoneNumberReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerifyPhoneNumberReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerifyPhoneNumberReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerifyPhoneNumberReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerifyPhoneNumberReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerifyPhoneNumberReplyValidationError) ErrorName() string {
	return "VerifyPhoneNumberReplyValidationError"
}

// Error satisfies the builtin error interface
func (e VerifyPhoneNumberReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerifyPhoneNumberReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerifyPhoneNumberReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerifyPhoneNumberReplyValidationError{}

// Validate checks the field values on ResetPasswordRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ResetPasswordRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetCaptcha()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResetPasswordRequestValidationError{
				field:  "Captcha",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	switch m.By.(type) {

	case *ResetPasswordRequest_Email:
		// no validation rules for Email

	case *ResetPasswordRequest_PhoneNumber:
		// no validation rules for PhoneNumber

	}

	return nil
}

// ResetPasswordRequestValidationError is the validation error returned by
// ResetPasswordRequest.Validate if the designated constraints aren't met.
type ResetPasswordRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResetPasswordRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResetPasswordRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResetPasswordRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResetPasswordRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResetPasswordRequestValidationError) ErrorName() string {
	return "ResetPasswordRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ResetPasswordRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResetPasswordRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResetPasswordRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResetPasswordRequestValidationError{}

// Validate checks the field values on ResetPasswordReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ResetPasswordReply) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetOtp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResetPasswordReplyValidationError{
				field:  "Otp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ResetPasswordReplyValidationError is the validation error returned by
// ResetPasswordReply.Validate if the designated constraints aren't met.
type ResetPasswordReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResetPasswordReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResetPasswordReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResetPasswordReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResetPasswordReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResetPasswordReplyValidationError) ErrorName() string {
	return "ResetPasswordReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ResetPasswordReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResetPasswordReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResetPasswordReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResetPasswordReplyValidationError{}

// Validate checks the field values on VerifyResetPasswordRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *VerifyResetPasswordRequest) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetOtpId()) < 1 {
		return VerifyResetPasswordRequestValidationError{
			field:  "OtpId",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetOtp()) < 1 {
		return VerifyResetPasswordRequestValidationError{
			field:  "Otp",
			reason: "value length must be at least 1 runes",
		}
	}

	return nil
}

// VerifyResetPasswordRequestValidationError is the validation error returned
// by VerifyResetPasswordRequest.Validate if the designated constraints aren't met.
type VerifyResetPasswordRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerifyResetPasswordRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerifyResetPasswordRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerifyResetPasswordRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerifyResetPasswordRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerifyResetPasswordRequestValidationError) ErrorName() string {
	return "VerifyResetPasswordRequestValidationError"
}

// Error satisfies the builtin error interface
func (e VerifyResetPasswordRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerifyResetPasswordRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerifyResetPasswordRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerifyResetPasswordRequestValidationError{}

// Validate checks the field values on SubmitResetPasswordRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SubmitResetPasswordRequest) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetOtpId()) < 1 {
		return SubmitResetPasswordRequestValidationError{
			field:  "OtpId",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetOtp()) < 1 {
		return SubmitResetPasswordRequestValidationError{
			field:  "Otp",
			reason: "value length must be at least 1 runes",
		}
	}

	// no validation rules for NewPassword

	// no validation rules for ConfirmNewPassword

	return nil
}

// SubmitResetPasswordRequestValidationError is the validation error returned
// by SubmitResetPasswordRequest.Validate if the designated constraints aren't met.
type SubmitResetPasswordRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubmitResetPasswordRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubmitResetPasswordRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubmitResetPasswordRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubmitResetPasswordRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubmitResetPasswordRequestValidationError) ErrorName() string {
	return "SubmitResetPasswordRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SubmitResetPasswordRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubmitResetPasswordRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubmitResetPasswordRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubmitResetPasswordRequestValidationError{}

// Validate checks the field values on UserInfo with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *UserInfo) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for SafeId

	// no validation rules for Username

	// no validation rules for Email

	// no validation rules for PhoneNumber

	// no validation rules for Metadata

	for idx, item := range m.GetRoles() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UserInfoValidationError{
					field:  fmt.Sprintf("Roles[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Status

	if v, ok := interface{}(m.GetLastSignedIn()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserInfoValidationError{
				field:  "LastSignedIn",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserInfoValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserInfoValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetCredentials() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UserInfoValidationError{
					field:  fmt.Sprintf("Credentials[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// UserInfoValidationError is the validation error returned by
// UserInfo.Validate if the designated constraints aren't met.
type UserInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserInfoValidationError) ErrorName() string { return "UserInfoValidationError" }

// Error satisfies the builtin error interface
func (e UserInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserInfoValidationError{}

// Validate checks the field values on TokenInfo with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *TokenInfo) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserId

	// no validation rules for SafeId

	// no validation rules for Username

	// no validation rules for IdToken

	// no validation rules for AccessToken

	return nil
}

// TokenInfoValidationError is the validation error returned by
// TokenInfo.Validate if the designated constraints aren't met.
type TokenInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TokenInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TokenInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TokenInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TokenInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TokenInfoValidationError) ErrorName() string { return "TokenInfoValidationError" }

// Error satisfies the builtin error interface
func (e TokenInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTokenInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TokenInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TokenInfoValidationError{}

// Validate checks the field values on OTP with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *OTP) Validate() error {
	if m == nil {
		return nil
	}

	switch m.Result.(type) {

	case *OTP_Waiting:
		// no validation rules for Waiting

	case *OTP_Success:

		if v, ok := interface{}(m.GetSuccess()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OTPValidationError{
					field:  "Success",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// OTPValidationError is the validation error returned by OTP.Validate if the
// designated constraints aren't met.
type OTPValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OTPValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OTPValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OTPValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OTPValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OTPValidationError) ErrorName() string { return "OTPValidationError" }

// Error satisfies the builtin error interface
func (e OTPValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOTP.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OTPValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OTPValidationError{}

// Validate checks the field values on Captcha with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Captcha) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetId()) < 1 {
		return CaptchaValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetCode()) < 1 {
		return CaptchaValidationError{
			field:  "Code",
			reason: "value length must be at least 1 runes",
		}
	}

	return nil
}

// CaptchaValidationError is the validation error returned by Captcha.Validate
// if the designated constraints aren't met.
type CaptchaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CaptchaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CaptchaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CaptchaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CaptchaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CaptchaValidationError) ErrorName() string { return "CaptchaValidationError" }

// Error satisfies the builtin error interface
func (e CaptchaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCaptcha.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CaptchaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CaptchaValidationError{}

// Validate checks the field values on CreateUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *CreateUserRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Username

	// no validation rules for Email

	// no validation rules for PhoneNumber

	// no validation rules for Metadata

	for idx, item := range m.GetRoles() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateUserRequestValidationError{
					field:  fmt.Sprintf("Roles[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// CreateUserRequestValidationError is the validation error returned by
// CreateUserRequest.Validate if the designated constraints aren't met.
type CreateUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserRequestValidationError) ErrorName() string {
	return "CreateUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserRequestValidationError{}

// Validate checks the field values on CreateUserReply with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *CreateUserReply) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateUserReplyValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateUserReplyValidationError is the validation error returned by
// CreateUserReply.Validate if the designated constraints aren't met.
type CreateUserReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserReplyValidationError) ErrorName() string { return "CreateUserReplyValidationError" }

// Error satisfies the builtin error interface
func (e CreateUserReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserReplyValidationError{}

// Validate checks the field values on ListUsersRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ListUsersRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Query

	// no validation rules for UserId

	// no validation rules for Username

	// no validation rules for Email

	// no validation rules for PhoneNumber

	// no validation rules for Limit

	// no validation rules for Cursor

	return nil
}

// ListUsersRequestValidationError is the validation error returned by
// ListUsersRequest.Validate if the designated constraints aren't met.
type ListUsersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUsersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUsersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUsersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUsersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUsersRequestValidationError) ErrorName() string { return "ListUsersRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListUsersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUsersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUsersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUsersRequestValidationError{}

// Validate checks the field values on ListUsersReply with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ListUsersReply) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListUsersReplyValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextCursor

	// no validation rules for HasMore

	// no validation rules for Total

	return nil
}

// ListUsersReplyValidationError is the validation error returned by
// ListUsersReply.Validate if the designated constraints aren't met.
type ListUsersReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUsersReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUsersReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUsersReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUsersReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUsersReplyValidationError) ErrorName() string { return "ListUsersReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListUsersReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUsersReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUsersReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUsersReplyValidationError{}

// Validate checks the field values on UpdateUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *UpdateUserRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetId() <= 0 {
		return UpdateUserRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
	}

	for idx, item := range m.GetChanges() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateUserRequestValidationError{
					field:  fmt.Sprintf("Changes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// UpdateUserRequestValidationError is the validation error returned by
// UpdateUserRequest.Validate if the designated constraints aren't met.
type UpdateUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserRequestValidationError) ErrorName() string {
	return "UpdateUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserRequestValidationError{}

// Validate checks the field values on UpdateUserReply with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *UpdateUserReply) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateUserReplyValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateUserReplyValidationError is the validation error returned by
// UpdateUserReply.Validate if the designated constraints aren't met.
type UpdateUserReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserReplyValidationError) ErrorName() string { return "UpdateUserReplyValidationError" }

// Error satisfies the builtin error interface
func (e UpdateUserReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserReplyValidationError{}

// Validate checks the field values on LockUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *LockUserRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetId() <= 0 {
		return LockUserRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// LockUserRequestValidationError is the validation error returned by
// LockUserRequest.Validate if the designated constraints aren't met.
type LockUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LockUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LockUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LockUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LockUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LockUserRequestValidationError) ErrorName() string { return "LockUserRequestValidationError" }

// Error satisfies the builtin error interface
func (e LockUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLockUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LockUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LockUserRequestValidationError{}

// Validate checks the field values on LockUserReply with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *LockUserReply) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LockUserReplyValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// LockUserReplyValidationError is the validation error returned by
// LockUserReply.Validate if the designated constraints aren't met.
type LockUserReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LockUserReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LockUserReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LockUserReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LockUserReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LockUserReplyValidationError) ErrorName() string { return "LockUserReplyValidationError" }

// Error satisfies the builtin error interface
func (e LockUserReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLockUserReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LockUserReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LockUserReplyValidationError{}

// Validate checks the field values on UnlockUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *UnlockUserRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetId() <= 0 {
		return UnlockUserRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// UnlockUserRequestValidationError is the validation error returned by
// UnlockUserRequest.Validate if the designated constraints aren't met.
type UnlockUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnlockUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnlockUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnlockUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnlockUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnlockUserRequestValidationError) ErrorName() string {
	return "UnlockUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UnlockUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnlockUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnlockUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnlockUserRequestValidationError{}

// Validate checks the field values on UnlockUserReply with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *UnlockUserReply) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UnlockUserReplyValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UnlockUserReplyValidationError is the validation error returned by
// UnlockUserReply.Validate if the designated constraints aren't met.
type UnlockUserReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnlockUserReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnlockUserReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnlockUserReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnlockUserReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnlockUserReplyValidationError) ErrorName() string { return "UnlockUserReplyValidationError" }

// Error satisfies the builtin error interface
func (e UnlockUserReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnlockUserReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnlockUserReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnlockUserReplyValidationError{}

// Validate checks the field values on BanUserRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *BanUserRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetId() <= 0 {
		return BanUserRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// BanUserRequestValidationError is the validation error returned by
// BanUserRequest.Validate if the designated constraints aren't met.
type BanUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BanUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BanUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BanUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BanUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BanUserRequestValidationError) ErrorName() string { return "BanUserRequestValidationError" }

// Error satisfies the builtin error interface
func (e BanUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBanUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BanUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BanUserRequestValidationError{}

// Validate checks the field values on BanUserReply with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *BanUserReply) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BanUserReplyValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// BanUserReplyValidationError is the validation error returned by
// BanUserReply.Validate if the designated constraints aren't met.
type BanUserReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BanUserReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BanUserReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BanUserReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BanUserReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BanUserReplyValidationError) ErrorName() string { return "BanUserReplyValidationError" }

// Error satisfies the builtin error interface
func (e BanUserReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBanUserReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BanUserReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BanUserReplyValidationError{}

// Validate checks the field values on UnbanUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *UnbanUserRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetId() <= 0 {
		return UnbanUserRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// UnbanUserRequestValidationError is the validation error returned by
// UnbanUserRequest.Validate if the designated constraints aren't met.
type UnbanUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnbanUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnbanUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnbanUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnbanUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnbanUserRequestValidationError) ErrorName() string { return "UnbanUserRequestValidationError" }

// Error satisfies the builtin error interface
func (e UnbanUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnbanUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnbanUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnbanUserRequestValidationError{}

// Validate checks the field values on UnbanUserReply with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *UnbanUserReply) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UnbanUserReplyValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UnbanUserReplyValidationError is the validation error returned by
// UnbanUserReply.Validate if the designated constraints aren't met.
type UnbanUserReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnbanUserReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnbanUserReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnbanUserReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnbanUserReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnbanUserReplyValidationError) ErrorName() string { return "UnbanUserReplyValidationError" }

// Error satisfies the builtin error interface
func (e UnbanUserReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnbanUserReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnbanUserReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnbanUserReplyValidationError{}

// Validate checks the field values on GetUserRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GetUserRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetId() <= 0 {
		return GetUserRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// GetUserRequestValidationError is the validation error returned by
// GetUserRequest.Validate if the designated constraints aren't met.
type GetUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserRequestValidationError) ErrorName() string { return "GetUserRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserRequestValidationError{}

// Validate checks the field values on GetUserReply with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GetUserReply) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserReplyValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetUserReplyValidationError is the validation error returned by
// GetUserReply.Validate if the designated constraints aren't met.
type GetUserReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserReplyValidationError) ErrorName() string { return "GetUserReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetUserReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserReplyValidationError{}

// Validate checks the field values on ResendCreatePasswordOTPRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ResendCreatePasswordOTPRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserId

	return nil
}

// ResendCreatePasswordOTPRequestValidationError is the validation error
// returned by ResendCreatePasswordOTPRequest.Validate if the designated
// constraints aren't met.
type ResendCreatePasswordOTPRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResendCreatePasswordOTPRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResendCreatePasswordOTPRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResendCreatePasswordOTPRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResendCreatePasswordOTPRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResendCreatePasswordOTPRequestValidationError) ErrorName() string {
	return "ResendCreatePasswordOTPRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ResendCreatePasswordOTPRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResendCreatePasswordOTPRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResendCreatePasswordOTPRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResendCreatePasswordOTPRequestValidationError{}

// Validate checks the field values on ResendCreatePasswordOTPReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ResendCreatePasswordOTPReply) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ResendCreatePasswordOTPReplyValidationError is the validation error returned
// by ResendCreatePasswordOTPReply.Validate if the designated constraints
// aren't met.
type ResendCreatePasswordOTPReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResendCreatePasswordOTPReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResendCreatePasswordOTPReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResendCreatePasswordOTPReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResendCreatePasswordOTPReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResendCreatePasswordOTPReplyValidationError) ErrorName() string {
	return "ResendCreatePasswordOTPReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ResendCreatePasswordOTPReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResendCreatePasswordOTPReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResendCreatePasswordOTPReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResendCreatePasswordOTPReplyValidationError{}

// Validate checks the field values on GetUsersRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetUsersRequest) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetUserIds()) < 1 {
		return GetUsersRequestValidationError{
			field:  "UserIds",
			reason: "value must contain at least 1 item(s)",
		}
	}

	return nil
}

// GetUsersRequestValidationError is the validation error returned by
// GetUsersRequest.Validate if the designated constraints aren't met.
type GetUsersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUsersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUsersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUsersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUsersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUsersRequestValidationError) ErrorName() string { return "GetUsersRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetUsersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUsersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUsersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUsersRequestValidationError{}

// Validate checks the field values on GetUsersReply with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GetUsersReply) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUsersReplyValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetUsersReplyValidationError is the validation error returned by
// GetUsersReply.Validate if the designated constraints aren't met.
type GetUsersReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUsersReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUsersReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUsersReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUsersReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUsersReplyValidationError) ErrorName() string { return "GetUsersReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetUsersReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUsersReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUsersReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUsersReplyValidationError{}

// Validate checks the field values on GetUserIDsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetUserIDsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := len(m.GetSafeIds()); l < 1 || l > 20 {
		return GetUserIDsRequestValidationError{
			field:  "SafeIds",
			reason: "value must contain between 1 and 20 items, inclusive",
		}
	}

	return nil
}

// GetUserIDsRequestValidationError is the validation error returned by
// GetUserIDsRequest.Validate if the designated constraints aren't met.
type GetUserIDsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserIDsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserIDsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserIDsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserIDsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserIDsRequestValidationError) ErrorName() string {
	return "GetUserIDsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserIDsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserIDsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserIDsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserIDsRequestValidationError{}

// Validate checks the field values on GetUserIDsReply with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetUserIDsReply) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserIds

	return nil
}

// GetUserIDsReplyValidationError is the validation error returned by
// GetUserIDsReply.Validate if the designated constraints aren't met.
type GetUserIDsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserIDsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserIDsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserIDsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserIDsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserIDsReplyValidationError) ErrorName() string { return "GetUserIDsReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetUserIDsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserIDsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserIDsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserIDsReplyValidationError{}

// Validate checks the field values on GetUsersByUsernameRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetUsersByUsernameRequest) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetUsernames()) < 1 {
		return GetUsersByUsernameRequestValidationError{
			field:  "Usernames",
			reason: "value must contain at least 1 item(s)",
		}
	}

	return nil
}

// GetUsersByUsernameRequestValidationError is the validation error returned by
// GetUsersByUsernameRequest.Validate if the designated constraints aren't met.
type GetUsersByUsernameRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUsersByUsernameRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUsersByUsernameRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUsersByUsernameRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUsersByUsernameRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUsersByUsernameRequestValidationError) ErrorName() string {
	return "GetUsersByUsernameRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUsersByUsernameRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUsersByUsernameRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUsersByUsernameRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUsersByUsernameRequestValidationError{}

// Validate checks the field values on GetUsersByUsernameReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetUsersByUsernameReply) Validate() error {
	if m == nil {
		return nil
	}

	for key, val := range m.GetUsers() {
		_ = val

		// no validation rules for Users[key]

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUsersByUsernameReplyValidationError{
					field:  fmt.Sprintf("Users[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetUsersByUsernameReplyValidationError is the validation error returned by
// GetUsersByUsernameReply.Validate if the designated constraints aren't met.
type GetUsersByUsernameReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUsersByUsernameReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUsersByUsernameReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUsersByUsernameReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUsersByUsernameReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUsersByUsernameReplyValidationError) ErrorName() string {
	return "GetUsersByUsernameReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetUsersByUsernameReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUsersByUsernameReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUsersByUsernameReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUsersByUsernameReplyValidationError{}

// Validate checks the field values on User with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *User) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserId

	// no validation rules for SafeId

	// no validation rules for Username

	// no validation rules for Email

	// no validation rules for PhoneNumber

	for idx, item := range m.GetRoles() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UserValidationError{
					field:  fmt.Sprintf("Roles[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Metadata

	// no validation rules for Status

	// no validation rules for UniversalId

	if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetLastSignedIn()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserValidationError{
				field:  "LastSignedIn",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetCredentials() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UserValidationError{
					field:  fmt.Sprintf("Credentials[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// UserValidationError is the validation error returned by User.Validate if the
// designated constraints aren't met.
type UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserValidationError) ErrorName() string { return "UserValidationError" }

// Error satisfies the builtin error interface
func (e UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserValidationError{}

// Validate checks the field values on Role with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *Role) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for GroupId

	// no validation rules for RoleId

	return nil
}

// RoleValidationError is the validation error returned by Role.Validate if the
// designated constraints aren't met.
type RoleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleValidationError) ErrorName() string { return "RoleValidationError" }

// Error satisfies the builtin error interface
func (e RoleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRole.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleValidationError{}

// Validate checks the field values on Roles with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Roles) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetRoles() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RolesValidationError{
					field:  fmt.Sprintf("Roles[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// RolesValidationError is the validation error returned by Roles.Validate if
// the designated constraints aren't met.
type RolesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RolesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RolesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RolesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RolesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RolesValidationError) ErrorName() string { return "RolesValidationError" }

// Error satisfies the builtin error interface
func (e RolesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoles.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RolesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RolesValidationError{}

// Validate checks the field values on UserChange with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *UserChange) Validate() error {
	if m == nil {
		return nil
	}

	switch m.Field.(type) {

	case *UserChange_Email:
		// no validation rules for Email

	case *UserChange_PhoneNumber:
		// no validation rules for PhoneNumber

	case *UserChange_Roles:

		if v, ok := interface{}(m.GetRoles()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UserChangeValidationError{
					field:  "Roles",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *UserChange_Metadata:
		// no validation rules for Metadata

	}

	return nil
}

// UserChangeValidationError is the validation error returned by
// UserChange.Validate if the designated constraints aren't met.
type UserChangeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserChangeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserChangeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserChangeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserChangeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserChangeValidationError) ErrorName() string { return "UserChangeValidationError" }

// Error satisfies the builtin error interface
func (e UserChangeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserChange.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserChangeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserChangeValidationError{}

// Validate checks the field values on Permission with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Permission) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetActions() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PermissionValidationError{
					field:  fmt.Sprintf("Actions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// PermissionValidationError is the validation error returned by
// Permission.Validate if the designated constraints aren't met.
type PermissionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PermissionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PermissionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PermissionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PermissionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PermissionValidationError) ErrorName() string { return "PermissionValidationError" }

// Error satisfies the builtin error interface
func (e PermissionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPermission.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PermissionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PermissionValidationError{}

// Validate checks the field values on Resource with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Resource) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Description

	return nil
}

// ResourceValidationError is the validation error returned by
// Resource.Validate if the designated constraints aren't met.
type ResourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourceValidationError) ErrorName() string { return "ResourceValidationError" }

// Error satisfies the builtin error interface
func (e ResourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourceValidationError{}

// Validate checks the field values on Action with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Action) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Description

	if v, ok := interface{}(m.GetResource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ActionValidationError{
				field:  "Resource",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ActionValidationError is the validation error returned by Action.Validate if
// the designated constraints aren't met.
type ActionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ActionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ActionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ActionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ActionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ActionValidationError) ErrorName() string { return "ActionValidationError" }

// Error satisfies the builtin error interface
func (e ActionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAction.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ActionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ActionValidationError{}

// Validate checks the field values on ResetResendOTPRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ResetResendOTPRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetId() <= 0 {
		return ResetResendOTPRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// ResetResendOTPRequestValidationError is the validation error returned by
// ResetResendOTPRequest.Validate if the designated constraints aren't met.
type ResetResendOTPRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResetResendOTPRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResetResendOTPRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResetResendOTPRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResetResendOTPRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResetResendOTPRequestValidationError) ErrorName() string {
	return "ResetResendOTPRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ResetResendOTPRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResetResendOTPRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResetResendOTPRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResetResendOTPRequestValidationError{}

// Validate checks the field values on ResetResendOTPReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ResetResendOTPReply) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResetResendOTPReplyValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ResetResendOTPReplyValidationError is the validation error returned by
// ResetResendOTPReply.Validate if the designated constraints aren't met.
type ResetResendOTPReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResetResendOTPReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResetResendOTPReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResetResendOTPReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResetResendOTPReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResetResendOTPReplyValidationError) ErrorName() string {
	return "ResetResendOTPReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ResetResendOTPReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResetResendOTPReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResetResendOTPReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResetResendOTPReplyValidationError{}

// Validate checks the field values on IsUserBannedRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *IsUserBannedRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetId() <= 0 {
		return IsUserBannedRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// IsUserBannedRequestValidationError is the validation error returned by
// IsUserBannedRequest.Validate if the designated constraints aren't met.
type IsUserBannedRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsUserBannedRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsUserBannedRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsUserBannedRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsUserBannedRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsUserBannedRequestValidationError) ErrorName() string {
	return "IsUserBannedRequestValidationError"
}

// Error satisfies the builtin error interface
func (e IsUserBannedRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsUserBannedRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsUserBannedRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsUserBannedRequestValidationError{}

// Validate checks the field values on IsUserBannedReply with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *IsUserBannedReply) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for IsBanned

	return nil
}

// IsUserBannedReplyValidationError is the validation error returned by
// IsUserBannedReply.Validate if the designated constraints aren't met.
type IsUserBannedReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsUserBannedReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsUserBannedReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsUserBannedReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsUserBannedReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsUserBannedReplyValidationError) ErrorName() string {
	return "IsUserBannedReplyValidationError"
}

// Error satisfies the builtin error interface
func (e IsUserBannedReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsUserBannedReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsUserBannedReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsUserBannedReplyValidationError{}

// Validate checks the field values on IsUserLockedRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *IsUserLockedRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetId() <= 0 {
		return IsUserLockedRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// IsUserLockedRequestValidationError is the validation error returned by
// IsUserLockedRequest.Validate if the designated constraints aren't met.
type IsUserLockedRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsUserLockedRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsUserLockedRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsUserLockedRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsUserLockedRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsUserLockedRequestValidationError) ErrorName() string {
	return "IsUserLockedRequestValidationError"
}

// Error satisfies the builtin error interface
func (e IsUserLockedRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsUserLockedRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsUserLockedRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsUserLockedRequestValidationError{}

// Validate checks the field values on IsUserLockedReply with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *IsUserLockedReply) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for IsLocked

	return nil
}

// IsUserLockedReplyValidationError is the validation error returned by
// IsUserLockedReply.Validate if the designated constraints aren't met.
type IsUserLockedReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsUserLockedReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsUserLockedReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsUserLockedReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsUserLockedReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsUserLockedReplyValidationError) ErrorName() string {
	return "IsUserLockedReplyValidationError"
}

// Error satisfies the builtin error interface
func (e IsUserLockedReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsUserLockedReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsUserLockedReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsUserLockedReplyValidationError{}

// Validate checks the field values on Credential with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Credential) Validate() error {
	if m == nil {
		return nil
	}

	switch m.Method.(type) {

	case *Credential_MyId:

		if v, ok := interface{}(m.GetMyId()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CredentialValidationError{
					field:  "MyId",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Credential_Facebook_:

		if v, ok := interface{}(m.GetFacebook()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CredentialValidationError{
					field:  "Facebook",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// CredentialValidationError is the validation error returned by
// Credential.Validate if the designated constraints aren't met.
type CredentialValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CredentialValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CredentialValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CredentialValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CredentialValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CredentialValidationError) ErrorName() string { return "CredentialValidationError" }

// Error satisfies the builtin error interface
func (e CredentialValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCredential.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CredentialValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CredentialValidationError{}

// Validate checks the field values on ListLoginEventsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListLoginEventsRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Limit

	// no validation rules for Cursor

	return nil
}

// ListLoginEventsRequestValidationError is the validation error returned by
// ListLoginEventsRequest.Validate if the designated constraints aren't met.
type ListLoginEventsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListLoginEventsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListLoginEventsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListLoginEventsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListLoginEventsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListLoginEventsRequestValidationError) ErrorName() string {
	return "ListLoginEventsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListLoginEventsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListLoginEventsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListLoginEventsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListLoginEventsRequestValidationError{}

// Validate checks the field values on ListLoginEventsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListLoginEventsReply) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetEvents() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListLoginEventsReplyValidationError{
					field:  fmt.Sprintf("Events[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextCursor

	// no validation rules for HasMore

	// no validation rules for Total

	return nil
}

// ListLoginEventsReplyValidationError is the validation error returned by
// ListLoginEventsReply.Validate if the designated constraints aren't met.
type ListLoginEventsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListLoginEventsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListLoginEventsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListLoginEventsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListLoginEventsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListLoginEventsReplyValidationError) ErrorName() string {
	return "ListLoginEventsReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListLoginEventsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListLoginEventsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListLoginEventsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListLoginEventsReplyValidationError{}

// Validate checks the field values on LoginEvent with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *LoginEvent) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for UserId

	// no validation rules for DeviceId

	// no validation rules for DeviceName

	if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LoginEventValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// LoginEventValidationError is the validation error returned by
// LoginEvent.Validate if the designated constraints aren't met.
type LoginEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginEventValidationError) ErrorName() string { return "LoginEventValidationError" }

// Error satisfies the builtin error interface
func (e LoginEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginEventValidationError{}

// Validate checks the field values on ListRegisterEventsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListRegisterEventsRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Limit

	// no validation rules for Cursor

	return nil
}

// ListRegisterEventsRequestValidationError is the validation error returned by
// ListRegisterEventsRequest.Validate if the designated constraints aren't met.
type ListRegisterEventsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRegisterEventsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRegisterEventsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRegisterEventsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRegisterEventsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRegisterEventsRequestValidationError) ErrorName() string {
	return "ListRegisterEventsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListRegisterEventsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRegisterEventsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRegisterEventsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRegisterEventsRequestValidationError{}

// Validate checks the field values on ListRegisterEventsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListRegisterEventsReply) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetEvents() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListRegisterEventsReplyValidationError{
					field:  fmt.Sprintf("Events[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextCursor

	// no validation rules for HasMore

	// no validation rules for Total

	return nil
}

// ListRegisterEventsReplyValidationError is the validation error returned by
// ListRegisterEventsReply.Validate if the designated constraints aren't met.
type ListRegisterEventsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRegisterEventsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRegisterEventsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRegisterEventsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRegisterEventsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRegisterEventsReplyValidationError) ErrorName() string {
	return "ListRegisterEventsReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListRegisterEventsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRegisterEventsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRegisterEventsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRegisterEventsReplyValidationError{}

// Validate checks the field values on RegisterEvent with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *RegisterEvent) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for UserId

	if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RegisterEventValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RegisterEventValidationError is the validation error returned by
// RegisterEvent.Validate if the designated constraints aren't met.
type RegisterEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterEventValidationError) ErrorName() string { return "RegisterEventValidationError" }

// Error satisfies the builtin error interface
func (e RegisterEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterEventValidationError{}

// Validate checks the field values on SignUpV2Request_MyID with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SignUpV2Request_MyID) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Username

	// no validation rules for Password

	// no validation rules for ConfirmPassword

	return nil
}

// SignUpV2Request_MyIDValidationError is the validation error returned by
// SignUpV2Request_MyID.Validate if the designated constraints aren't met.
type SignUpV2Request_MyIDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SignUpV2Request_MyIDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SignUpV2Request_MyIDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SignUpV2Request_MyIDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SignUpV2Request_MyIDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SignUpV2Request_MyIDValidationError) ErrorName() string {
	return "SignUpV2Request_MyIDValidationError"
}

// Error satisfies the builtin error interface
func (e SignUpV2Request_MyIDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSignUpV2Request_MyID.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SignUpV2Request_MyIDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SignUpV2Request_MyIDValidationError{}

// Validate checks the field values on SignUpV2Request_Facebook with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SignUpV2Request_Facebook) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Token

	return nil
}

// SignUpV2Request_FacebookValidationError is the validation error returned by
// SignUpV2Request_Facebook.Validate if the designated constraints aren't met.
type SignUpV2Request_FacebookValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SignUpV2Request_FacebookValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SignUpV2Request_FacebookValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SignUpV2Request_FacebookValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SignUpV2Request_FacebookValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SignUpV2Request_FacebookValidationError) ErrorName() string {
	return "SignUpV2Request_FacebookValidationError"
}

// Error satisfies the builtin error interface
func (e SignUpV2Request_FacebookValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSignUpV2Request_Facebook.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SignUpV2Request_FacebookValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SignUpV2Request_FacebookValidationError{}

// Validate checks the field values on SignInV2Request_MyID with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SignInV2Request_MyID) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Username

	// no validation rules for Password

	return nil
}

// SignInV2Request_MyIDValidationError is the validation error returned by
// SignInV2Request_MyID.Validate if the designated constraints aren't met.
type SignInV2Request_MyIDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SignInV2Request_MyIDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SignInV2Request_MyIDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SignInV2Request_MyIDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SignInV2Request_MyIDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SignInV2Request_MyIDValidationError) ErrorName() string {
	return "SignInV2Request_MyIDValidationError"
}

// Error satisfies the builtin error interface
func (e SignInV2Request_MyIDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSignInV2Request_MyID.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SignInV2Request_MyIDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SignInV2Request_MyIDValidationError{}

// Validate checks the field values on SignInV2Request_Facebook with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SignInV2Request_Facebook) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Token

	return nil
}

// SignInV2Request_FacebookValidationError is the validation error returned by
// SignInV2Request_Facebook.Validate if the designated constraints aren't met.
type SignInV2Request_FacebookValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SignInV2Request_FacebookValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SignInV2Request_FacebookValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SignInV2Request_FacebookValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SignInV2Request_FacebookValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SignInV2Request_FacebookValidationError) ErrorName() string {
	return "SignInV2Request_FacebookValidationError"
}

// Error satisfies the builtin error interface
func (e SignInV2Request_FacebookValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSignInV2Request_Facebook.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SignInV2Request_FacebookValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SignInV2Request_FacebookValidationError{}

// Validate checks the field values on OTP_Info with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *OTP_Info) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Recipient

	// no validation rules for Expiry

	return nil
}

// OTP_InfoValidationError is the validation error returned by
// OTP_Info.Validate if the designated constraints aren't met.
type OTP_InfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OTP_InfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OTP_InfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OTP_InfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OTP_InfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OTP_InfoValidationError) ErrorName() string { return "OTP_InfoValidationError" }

// Error satisfies the builtin error interface
func (e OTP_InfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOTP_Info.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OTP_InfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OTP_InfoValidationError{}

// Validate checks the field values on Credential_MyID with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *Credential_MyID) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Username

	return nil
}

// Credential_MyIDValidationError is the validation error returned by
// Credential_MyID.Validate if the designated constraints aren't met.
type Credential_MyIDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Credential_MyIDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Credential_MyIDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Credential_MyIDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Credential_MyIDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Credential_MyIDValidationError) ErrorName() string { return "Credential_MyIDValidationError" }

// Error satisfies the builtin error interface
func (e Credential_MyIDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCredential_MyID.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Credential_MyIDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Credential_MyIDValidationError{}

// Validate checks the field values on Credential_Facebook with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *Credential_Facebook) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for FbId

	return nil
}

// Credential_FacebookValidationError is the validation error returned by
// Credential_Facebook.Validate if the designated constraints aren't met.
type Credential_FacebookValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Credential_FacebookValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Credential_FacebookValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Credential_FacebookValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Credential_FacebookValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Credential_FacebookValidationError) ErrorName() string {
	return "Credential_FacebookValidationError"
}

// Error satisfies the builtin error interface
func (e Credential_FacebookValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCredential_Facebook.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Credential_FacebookValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Credential_FacebookValidationError{}
