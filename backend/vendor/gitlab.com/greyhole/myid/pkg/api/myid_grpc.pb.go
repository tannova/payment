// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package myid

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MyIDClient is the client API for MyID service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MyIDClient interface {
	// deprecated
	SignUp(ctx context.Context, in *SignUpRequest, opts ...grpc.CallOption) (*SignUpReply, error)
	// deprecated
	SignIn(ctx context.Context, in *SignInRequest, opts ...grpc.CallOption) (*SignInReply, error)
	SignUpV2(ctx context.Context, in *SignUpV2Request, opts ...grpc.CallOption) (*SignUpReply, error)
	SignInV2(ctx context.Context, in *SignInV2Request, opts ...grpc.CallOption) (*SignInReply, error)
	ResendSignInOTP(ctx context.Context, in *ResendSignInOTPRequest, opts ...grpc.CallOption) (*ResendSignInOTPReply, error)
	ConfirmSignIn(ctx context.Context, in *ConfirmSignInRequest, opts ...grpc.CallOption) (*ConfirmSignInReply, error)
	SignOut(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	CreatePassword(ctx context.Context, in *CreatePasswordRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	CreateAccessToken(ctx context.Context, in *CreateAccessTokenRequest, opts ...grpc.CallOption) (*CreateAccessTokenReply, error)
	Me(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*MeReply, error)
	ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	UpdateMetadata(ctx context.Context, in *UpdateMetadataRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	UpdateEmail(ctx context.Context, in *UpdateEmailRequest, opts ...grpc.CallOption) (*UpdateEmailReply, error)
	VerifyEmail(ctx context.Context, in *VerifyEmailRequest, opts ...grpc.CallOption) (*VerifyEmailReply, error)
	UpdatePhoneNumber(ctx context.Context, in *UpdatePhoneNumberRequest, opts ...grpc.CallOption) (*UpdatePhoneNumberReply, error)
	VerifyPhoneNumber(ctx context.Context, in *VerifyPhoneNumberRequest, opts ...grpc.CallOption) (*VerifyPhoneNumberReply, error)
	ResetPassword(ctx context.Context, in *ResetPasswordRequest, opts ...grpc.CallOption) (*ResetPasswordReply, error)
	VerifyResetPassword(ctx context.Context, in *VerifyResetPasswordRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	SubmitResetPassword(ctx context.Context, in *SubmitResetPasswordRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type myIDClient struct {
	cc grpc.ClientConnInterface
}

func NewMyIDClient(cc grpc.ClientConnInterface) MyIDClient {
	return &myIDClient{cc}
}

func (c *myIDClient) SignUp(ctx context.Context, in *SignUpRequest, opts ...grpc.CallOption) (*SignUpReply, error) {
	out := new(SignUpReply)
	err := c.cc.Invoke(ctx, "/greyhole.myid.MyID/SignUp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myIDClient) SignIn(ctx context.Context, in *SignInRequest, opts ...grpc.CallOption) (*SignInReply, error) {
	out := new(SignInReply)
	err := c.cc.Invoke(ctx, "/greyhole.myid.MyID/SignIn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myIDClient) SignUpV2(ctx context.Context, in *SignUpV2Request, opts ...grpc.CallOption) (*SignUpReply, error) {
	out := new(SignUpReply)
	err := c.cc.Invoke(ctx, "/greyhole.myid.MyID/SignUpV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myIDClient) SignInV2(ctx context.Context, in *SignInV2Request, opts ...grpc.CallOption) (*SignInReply, error) {
	out := new(SignInReply)
	err := c.cc.Invoke(ctx, "/greyhole.myid.MyID/SignInV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myIDClient) ResendSignInOTP(ctx context.Context, in *ResendSignInOTPRequest, opts ...grpc.CallOption) (*ResendSignInOTPReply, error) {
	out := new(ResendSignInOTPReply)
	err := c.cc.Invoke(ctx, "/greyhole.myid.MyID/ResendSignInOTP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myIDClient) ConfirmSignIn(ctx context.Context, in *ConfirmSignInRequest, opts ...grpc.CallOption) (*ConfirmSignInReply, error) {
	out := new(ConfirmSignInReply)
	err := c.cc.Invoke(ctx, "/greyhole.myid.MyID/ConfirmSignIn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myIDClient) SignOut(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/greyhole.myid.MyID/SignOut", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myIDClient) CreatePassword(ctx context.Context, in *CreatePasswordRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/greyhole.myid.MyID/CreatePassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myIDClient) CreateAccessToken(ctx context.Context, in *CreateAccessTokenRequest, opts ...grpc.CallOption) (*CreateAccessTokenReply, error) {
	out := new(CreateAccessTokenReply)
	err := c.cc.Invoke(ctx, "/greyhole.myid.MyID/CreateAccessToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myIDClient) Me(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*MeReply, error) {
	out := new(MeReply)
	err := c.cc.Invoke(ctx, "/greyhole.myid.MyID/Me", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myIDClient) ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/greyhole.myid.MyID/ChangePassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myIDClient) UpdateMetadata(ctx context.Context, in *UpdateMetadataRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/greyhole.myid.MyID/UpdateMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myIDClient) UpdateEmail(ctx context.Context, in *UpdateEmailRequest, opts ...grpc.CallOption) (*UpdateEmailReply, error) {
	out := new(UpdateEmailReply)
	err := c.cc.Invoke(ctx, "/greyhole.myid.MyID/UpdateEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myIDClient) VerifyEmail(ctx context.Context, in *VerifyEmailRequest, opts ...grpc.CallOption) (*VerifyEmailReply, error) {
	out := new(VerifyEmailReply)
	err := c.cc.Invoke(ctx, "/greyhole.myid.MyID/VerifyEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myIDClient) UpdatePhoneNumber(ctx context.Context, in *UpdatePhoneNumberRequest, opts ...grpc.CallOption) (*UpdatePhoneNumberReply, error) {
	out := new(UpdatePhoneNumberReply)
	err := c.cc.Invoke(ctx, "/greyhole.myid.MyID/UpdatePhoneNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myIDClient) VerifyPhoneNumber(ctx context.Context, in *VerifyPhoneNumberRequest, opts ...grpc.CallOption) (*VerifyPhoneNumberReply, error) {
	out := new(VerifyPhoneNumberReply)
	err := c.cc.Invoke(ctx, "/greyhole.myid.MyID/VerifyPhoneNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myIDClient) ResetPassword(ctx context.Context, in *ResetPasswordRequest, opts ...grpc.CallOption) (*ResetPasswordReply, error) {
	out := new(ResetPasswordReply)
	err := c.cc.Invoke(ctx, "/greyhole.myid.MyID/ResetPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myIDClient) VerifyResetPassword(ctx context.Context, in *VerifyResetPasswordRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/greyhole.myid.MyID/VerifyResetPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myIDClient) SubmitResetPassword(ctx context.Context, in *SubmitResetPasswordRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/greyhole.myid.MyID/SubmitResetPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MyIDServer is the server API for MyID service.
// All implementations must embed UnimplementedMyIDServer
// for forward compatibility
type MyIDServer interface {
	// deprecated
	SignUp(context.Context, *SignUpRequest) (*SignUpReply, error)
	// deprecated
	SignIn(context.Context, *SignInRequest) (*SignInReply, error)
	SignUpV2(context.Context, *SignUpV2Request) (*SignUpReply, error)
	SignInV2(context.Context, *SignInV2Request) (*SignInReply, error)
	ResendSignInOTP(context.Context, *ResendSignInOTPRequest) (*ResendSignInOTPReply, error)
	ConfirmSignIn(context.Context, *ConfirmSignInRequest) (*ConfirmSignInReply, error)
	SignOut(context.Context, *empty.Empty) (*empty.Empty, error)
	CreatePassword(context.Context, *CreatePasswordRequest) (*empty.Empty, error)
	CreateAccessToken(context.Context, *CreateAccessTokenRequest) (*CreateAccessTokenReply, error)
	Me(context.Context, *empty.Empty) (*MeReply, error)
	ChangePassword(context.Context, *ChangePasswordRequest) (*empty.Empty, error)
	UpdateMetadata(context.Context, *UpdateMetadataRequest) (*empty.Empty, error)
	UpdateEmail(context.Context, *UpdateEmailRequest) (*UpdateEmailReply, error)
	VerifyEmail(context.Context, *VerifyEmailRequest) (*VerifyEmailReply, error)
	UpdatePhoneNumber(context.Context, *UpdatePhoneNumberRequest) (*UpdatePhoneNumberReply, error)
	VerifyPhoneNumber(context.Context, *VerifyPhoneNumberRequest) (*VerifyPhoneNumberReply, error)
	ResetPassword(context.Context, *ResetPasswordRequest) (*ResetPasswordReply, error)
	VerifyResetPassword(context.Context, *VerifyResetPasswordRequest) (*empty.Empty, error)
	SubmitResetPassword(context.Context, *SubmitResetPasswordRequest) (*empty.Empty, error)
	mustEmbedUnimplementedMyIDServer()
}

// UnimplementedMyIDServer must be embedded to have forward compatible implementations.
type UnimplementedMyIDServer struct {
}

func (*UnimplementedMyIDServer) SignUp(context.Context, *SignUpRequest) (*SignUpReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignUp not implemented")
}
func (*UnimplementedMyIDServer) SignIn(context.Context, *SignInRequest) (*SignInReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignIn not implemented")
}
func (*UnimplementedMyIDServer) SignUpV2(context.Context, *SignUpV2Request) (*SignUpReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignUpV2 not implemented")
}
func (*UnimplementedMyIDServer) SignInV2(context.Context, *SignInV2Request) (*SignInReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignInV2 not implemented")
}
func (*UnimplementedMyIDServer) ResendSignInOTP(context.Context, *ResendSignInOTPRequest) (*ResendSignInOTPReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResendSignInOTP not implemented")
}
func (*UnimplementedMyIDServer) ConfirmSignIn(context.Context, *ConfirmSignInRequest) (*ConfirmSignInReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmSignIn not implemented")
}
func (*UnimplementedMyIDServer) SignOut(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignOut not implemented")
}
func (*UnimplementedMyIDServer) CreatePassword(context.Context, *CreatePasswordRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePassword not implemented")
}
func (*UnimplementedMyIDServer) CreateAccessToken(context.Context, *CreateAccessTokenRequest) (*CreateAccessTokenReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccessToken not implemented")
}
func (*UnimplementedMyIDServer) Me(context.Context, *empty.Empty) (*MeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Me not implemented")
}
func (*UnimplementedMyIDServer) ChangePassword(context.Context, *ChangePasswordRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePassword not implemented")
}
func (*UnimplementedMyIDServer) UpdateMetadata(context.Context, *UpdateMetadataRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMetadata not implemented")
}
func (*UnimplementedMyIDServer) UpdateEmail(context.Context, *UpdateEmailRequest) (*UpdateEmailReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEmail not implemented")
}
func (*UnimplementedMyIDServer) VerifyEmail(context.Context, *VerifyEmailRequest) (*VerifyEmailReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyEmail not implemented")
}
func (*UnimplementedMyIDServer) UpdatePhoneNumber(context.Context, *UpdatePhoneNumberRequest) (*UpdatePhoneNumberReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePhoneNumber not implemented")
}
func (*UnimplementedMyIDServer) VerifyPhoneNumber(context.Context, *VerifyPhoneNumberRequest) (*VerifyPhoneNumberReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyPhoneNumber not implemented")
}
func (*UnimplementedMyIDServer) ResetPassword(context.Context, *ResetPasswordRequest) (*ResetPasswordReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPassword not implemented")
}
func (*UnimplementedMyIDServer) VerifyResetPassword(context.Context, *VerifyResetPasswordRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyResetPassword not implemented")
}
func (*UnimplementedMyIDServer) SubmitResetPassword(context.Context, *SubmitResetPasswordRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitResetPassword not implemented")
}
func (*UnimplementedMyIDServer) mustEmbedUnimplementedMyIDServer() {}

func RegisterMyIDServer(s *grpc.Server, srv MyIDServer) {
	s.RegisterService(&_MyID_serviceDesc, srv)
}

func _MyID_SignUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignUpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyIDServer).SignUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greyhole.myid.MyID/SignUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyIDServer).SignUp(ctx, req.(*SignUpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyID_SignIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignInRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyIDServer).SignIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greyhole.myid.MyID/SignIn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyIDServer).SignIn(ctx, req.(*SignInRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyID_SignUpV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignUpV2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyIDServer).SignUpV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greyhole.myid.MyID/SignUpV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyIDServer).SignUpV2(ctx, req.(*SignUpV2Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyID_SignInV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignInV2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyIDServer).SignInV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greyhole.myid.MyID/SignInV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyIDServer).SignInV2(ctx, req.(*SignInV2Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyID_ResendSignInOTP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResendSignInOTPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyIDServer).ResendSignInOTP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greyhole.myid.MyID/ResendSignInOTP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyIDServer).ResendSignInOTP(ctx, req.(*ResendSignInOTPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyID_ConfirmSignIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmSignInRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyIDServer).ConfirmSignIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greyhole.myid.MyID/ConfirmSignIn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyIDServer).ConfirmSignIn(ctx, req.(*ConfirmSignInRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyID_SignOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyIDServer).SignOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greyhole.myid.MyID/SignOut",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyIDServer).SignOut(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyID_CreatePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyIDServer).CreatePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greyhole.myid.MyID/CreatePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyIDServer).CreatePassword(ctx, req.(*CreatePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyID_CreateAccessToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccessTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyIDServer).CreateAccessToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greyhole.myid.MyID/CreateAccessToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyIDServer).CreateAccessToken(ctx, req.(*CreateAccessTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyID_Me_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyIDServer).Me(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greyhole.myid.MyID/Me",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyIDServer).Me(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyID_ChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyIDServer).ChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greyhole.myid.MyID/ChangePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyIDServer).ChangePassword(ctx, req.(*ChangePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyID_UpdateMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyIDServer).UpdateMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greyhole.myid.MyID/UpdateMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyIDServer).UpdateMetadata(ctx, req.(*UpdateMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyID_UpdateEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyIDServer).UpdateEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greyhole.myid.MyID/UpdateEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyIDServer).UpdateEmail(ctx, req.(*UpdateEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyID_VerifyEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyIDServer).VerifyEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greyhole.myid.MyID/VerifyEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyIDServer).VerifyEmail(ctx, req.(*VerifyEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyID_UpdatePhoneNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePhoneNumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyIDServer).UpdatePhoneNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greyhole.myid.MyID/UpdatePhoneNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyIDServer).UpdatePhoneNumber(ctx, req.(*UpdatePhoneNumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyID_VerifyPhoneNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyPhoneNumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyIDServer).VerifyPhoneNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greyhole.myid.MyID/VerifyPhoneNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyIDServer).VerifyPhoneNumber(ctx, req.(*VerifyPhoneNumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyID_ResetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyIDServer).ResetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greyhole.myid.MyID/ResetPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyIDServer).ResetPassword(ctx, req.(*ResetPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyID_VerifyResetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyResetPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyIDServer).VerifyResetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greyhole.myid.MyID/VerifyResetPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyIDServer).VerifyResetPassword(ctx, req.(*VerifyResetPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyID_SubmitResetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitResetPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyIDServer).SubmitResetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greyhole.myid.MyID/SubmitResetPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyIDServer).SubmitResetPassword(ctx, req.(*SubmitResetPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MyID_serviceDesc = grpc.ServiceDesc{
	ServiceName: "greyhole.myid.MyID",
	HandlerType: (*MyIDServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SignUp",
			Handler:    _MyID_SignUp_Handler,
		},
		{
			MethodName: "SignIn",
			Handler:    _MyID_SignIn_Handler,
		},
		{
			MethodName: "SignUpV2",
			Handler:    _MyID_SignUpV2_Handler,
		},
		{
			MethodName: "SignInV2",
			Handler:    _MyID_SignInV2_Handler,
		},
		{
			MethodName: "ResendSignInOTP",
			Handler:    _MyID_ResendSignInOTP_Handler,
		},
		{
			MethodName: "ConfirmSignIn",
			Handler:    _MyID_ConfirmSignIn_Handler,
		},
		{
			MethodName: "SignOut",
			Handler:    _MyID_SignOut_Handler,
		},
		{
			MethodName: "CreatePassword",
			Handler:    _MyID_CreatePassword_Handler,
		},
		{
			MethodName: "CreateAccessToken",
			Handler:    _MyID_CreateAccessToken_Handler,
		},
		{
			MethodName: "Me",
			Handler:    _MyID_Me_Handler,
		},
		{
			MethodName: "ChangePassword",
			Handler:    _MyID_ChangePassword_Handler,
		},
		{
			MethodName: "UpdateMetadata",
			Handler:    _MyID_UpdateMetadata_Handler,
		},
		{
			MethodName: "UpdateEmail",
			Handler:    _MyID_UpdateEmail_Handler,
		},
		{
			MethodName: "VerifyEmail",
			Handler:    _MyID_VerifyEmail_Handler,
		},
		{
			MethodName: "UpdatePhoneNumber",
			Handler:    _MyID_UpdatePhoneNumber_Handler,
		},
		{
			MethodName: "VerifyPhoneNumber",
			Handler:    _MyID_VerifyPhoneNumber_Handler,
		},
		{
			MethodName: "ResetPassword",
			Handler:    _MyID_ResetPassword_Handler,
		},
		{
			MethodName: "VerifyResetPassword",
			Handler:    _MyID_VerifyResetPassword_Handler,
		},
		{
			MethodName: "SubmitResetPassword",
			Handler:    _MyID_SubmitResetPassword_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "myid/api/myid.proto",
}

// TheCoffeeHouseClient is the client API for TheCoffeeHouse service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TheCoffeeHouseClient interface {
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserReply, error)
	ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*ListUsersReply, error)
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserReply, error)
	LockUser(ctx context.Context, in *LockUserRequest, opts ...grpc.CallOption) (*LockUserReply, error)
	UnlockUser(ctx context.Context, in *UnlockUserRequest, opts ...grpc.CallOption) (*UnlockUserReply, error)
	BanUser(ctx context.Context, in *BanUserRequest, opts ...grpc.CallOption) (*BanUserReply, error)
	UnbanUser(ctx context.Context, in *UnbanUserRequest, opts ...grpc.CallOption) (*UnbanUserReply, error)
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserReply, error)
	ResendCreatePasswordOTP(ctx context.Context, in *ResendCreatePasswordOTPRequest, opts ...grpc.CallOption) (*ResendCreatePasswordOTPReply, error)
	GetUsers(ctx context.Context, in *GetUsersRequest, opts ...grpc.CallOption) (*GetUsersReply, error)
	ResetResendOTP(ctx context.Context, in *ResetResendOTPRequest, opts ...grpc.CallOption) (*ResetResendOTPReply, error)
	IsUserBanned(ctx context.Context, in *IsUserBannedRequest, opts ...grpc.CallOption) (*IsUserBannedReply, error)
	IsUserLocked(ctx context.Context, in *IsUserLockedRequest, opts ...grpc.CallOption) (*IsUserLockedReply, error)
}

type theCoffeeHouseClient struct {
	cc grpc.ClientConnInterface
}

func NewTheCoffeeHouseClient(cc grpc.ClientConnInterface) TheCoffeeHouseClient {
	return &theCoffeeHouseClient{cc}
}

func (c *theCoffeeHouseClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserReply, error) {
	out := new(CreateUserReply)
	err := c.cc.Invoke(ctx, "/greyhole.myid.TheCoffeeHouse/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *theCoffeeHouseClient) ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*ListUsersReply, error) {
	out := new(ListUsersReply)
	err := c.cc.Invoke(ctx, "/greyhole.myid.TheCoffeeHouse/ListUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *theCoffeeHouseClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserReply, error) {
	out := new(UpdateUserReply)
	err := c.cc.Invoke(ctx, "/greyhole.myid.TheCoffeeHouse/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *theCoffeeHouseClient) LockUser(ctx context.Context, in *LockUserRequest, opts ...grpc.CallOption) (*LockUserReply, error) {
	out := new(LockUserReply)
	err := c.cc.Invoke(ctx, "/greyhole.myid.TheCoffeeHouse/LockUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *theCoffeeHouseClient) UnlockUser(ctx context.Context, in *UnlockUserRequest, opts ...grpc.CallOption) (*UnlockUserReply, error) {
	out := new(UnlockUserReply)
	err := c.cc.Invoke(ctx, "/greyhole.myid.TheCoffeeHouse/UnlockUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *theCoffeeHouseClient) BanUser(ctx context.Context, in *BanUserRequest, opts ...grpc.CallOption) (*BanUserReply, error) {
	out := new(BanUserReply)
	err := c.cc.Invoke(ctx, "/greyhole.myid.TheCoffeeHouse/BanUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *theCoffeeHouseClient) UnbanUser(ctx context.Context, in *UnbanUserRequest, opts ...grpc.CallOption) (*UnbanUserReply, error) {
	out := new(UnbanUserReply)
	err := c.cc.Invoke(ctx, "/greyhole.myid.TheCoffeeHouse/UnbanUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *theCoffeeHouseClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserReply, error) {
	out := new(GetUserReply)
	err := c.cc.Invoke(ctx, "/greyhole.myid.TheCoffeeHouse/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *theCoffeeHouseClient) ResendCreatePasswordOTP(ctx context.Context, in *ResendCreatePasswordOTPRequest, opts ...grpc.CallOption) (*ResendCreatePasswordOTPReply, error) {
	out := new(ResendCreatePasswordOTPReply)
	err := c.cc.Invoke(ctx, "/greyhole.myid.TheCoffeeHouse/ResendCreatePasswordOTP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *theCoffeeHouseClient) GetUsers(ctx context.Context, in *GetUsersRequest, opts ...grpc.CallOption) (*GetUsersReply, error) {
	out := new(GetUsersReply)
	err := c.cc.Invoke(ctx, "/greyhole.myid.TheCoffeeHouse/GetUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *theCoffeeHouseClient) ResetResendOTP(ctx context.Context, in *ResetResendOTPRequest, opts ...grpc.CallOption) (*ResetResendOTPReply, error) {
	out := new(ResetResendOTPReply)
	err := c.cc.Invoke(ctx, "/greyhole.myid.TheCoffeeHouse/ResetResendOTP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *theCoffeeHouseClient) IsUserBanned(ctx context.Context, in *IsUserBannedRequest, opts ...grpc.CallOption) (*IsUserBannedReply, error) {
	out := new(IsUserBannedReply)
	err := c.cc.Invoke(ctx, "/greyhole.myid.TheCoffeeHouse/IsUserBanned", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *theCoffeeHouseClient) IsUserLocked(ctx context.Context, in *IsUserLockedRequest, opts ...grpc.CallOption) (*IsUserLockedReply, error) {
	out := new(IsUserLockedReply)
	err := c.cc.Invoke(ctx, "/greyhole.myid.TheCoffeeHouse/IsUserLocked", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TheCoffeeHouseServer is the server API for TheCoffeeHouse service.
// All implementations must embed UnimplementedTheCoffeeHouseServer
// for forward compatibility
type TheCoffeeHouseServer interface {
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserReply, error)
	ListUsers(context.Context, *ListUsersRequest) (*ListUsersReply, error)
	UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserReply, error)
	LockUser(context.Context, *LockUserRequest) (*LockUserReply, error)
	UnlockUser(context.Context, *UnlockUserRequest) (*UnlockUserReply, error)
	BanUser(context.Context, *BanUserRequest) (*BanUserReply, error)
	UnbanUser(context.Context, *UnbanUserRequest) (*UnbanUserReply, error)
	GetUser(context.Context, *GetUserRequest) (*GetUserReply, error)
	ResendCreatePasswordOTP(context.Context, *ResendCreatePasswordOTPRequest) (*ResendCreatePasswordOTPReply, error)
	GetUsers(context.Context, *GetUsersRequest) (*GetUsersReply, error)
	ResetResendOTP(context.Context, *ResetResendOTPRequest) (*ResetResendOTPReply, error)
	IsUserBanned(context.Context, *IsUserBannedRequest) (*IsUserBannedReply, error)
	IsUserLocked(context.Context, *IsUserLockedRequest) (*IsUserLockedReply, error)
	mustEmbedUnimplementedTheCoffeeHouseServer()
}

// UnimplementedTheCoffeeHouseServer must be embedded to have forward compatible implementations.
type UnimplementedTheCoffeeHouseServer struct {
}

func (*UnimplementedTheCoffeeHouseServer) CreateUser(context.Context, *CreateUserRequest) (*CreateUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (*UnimplementedTheCoffeeHouseServer) ListUsers(context.Context, *ListUsersRequest) (*ListUsersReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUsers not implemented")
}
func (*UnimplementedTheCoffeeHouseServer) UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (*UnimplementedTheCoffeeHouseServer) LockUser(context.Context, *LockUserRequest) (*LockUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LockUser not implemented")
}
func (*UnimplementedTheCoffeeHouseServer) UnlockUser(context.Context, *UnlockUserRequest) (*UnlockUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnlockUser not implemented")
}
func (*UnimplementedTheCoffeeHouseServer) BanUser(context.Context, *BanUserRequest) (*BanUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BanUser not implemented")
}
func (*UnimplementedTheCoffeeHouseServer) UnbanUser(context.Context, *UnbanUserRequest) (*UnbanUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnbanUser not implemented")
}
func (*UnimplementedTheCoffeeHouseServer) GetUser(context.Context, *GetUserRequest) (*GetUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (*UnimplementedTheCoffeeHouseServer) ResendCreatePasswordOTP(context.Context, *ResendCreatePasswordOTPRequest) (*ResendCreatePasswordOTPReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResendCreatePasswordOTP not implemented")
}
func (*UnimplementedTheCoffeeHouseServer) GetUsers(context.Context, *GetUsersRequest) (*GetUsersReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsers not implemented")
}
func (*UnimplementedTheCoffeeHouseServer) ResetResendOTP(context.Context, *ResetResendOTPRequest) (*ResetResendOTPReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetResendOTP not implemented")
}
func (*UnimplementedTheCoffeeHouseServer) IsUserBanned(context.Context, *IsUserBannedRequest) (*IsUserBannedReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsUserBanned not implemented")
}
func (*UnimplementedTheCoffeeHouseServer) IsUserLocked(context.Context, *IsUserLockedRequest) (*IsUserLockedReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsUserLocked not implemented")
}
func (*UnimplementedTheCoffeeHouseServer) mustEmbedUnimplementedTheCoffeeHouseServer() {}

func RegisterTheCoffeeHouseServer(s *grpc.Server, srv TheCoffeeHouseServer) {
	s.RegisterService(&_TheCoffeeHouse_serviceDesc, srv)
}

func _TheCoffeeHouse_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TheCoffeeHouseServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greyhole.myid.TheCoffeeHouse/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TheCoffeeHouseServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TheCoffeeHouse_ListUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TheCoffeeHouseServer).ListUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greyhole.myid.TheCoffeeHouse/ListUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TheCoffeeHouseServer).ListUsers(ctx, req.(*ListUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TheCoffeeHouse_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TheCoffeeHouseServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greyhole.myid.TheCoffeeHouse/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TheCoffeeHouseServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TheCoffeeHouse_LockUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TheCoffeeHouseServer).LockUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greyhole.myid.TheCoffeeHouse/LockUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TheCoffeeHouseServer).LockUser(ctx, req.(*LockUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TheCoffeeHouse_UnlockUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnlockUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TheCoffeeHouseServer).UnlockUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greyhole.myid.TheCoffeeHouse/UnlockUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TheCoffeeHouseServer).UnlockUser(ctx, req.(*UnlockUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TheCoffeeHouse_BanUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BanUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TheCoffeeHouseServer).BanUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greyhole.myid.TheCoffeeHouse/BanUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TheCoffeeHouseServer).BanUser(ctx, req.(*BanUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TheCoffeeHouse_UnbanUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnbanUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TheCoffeeHouseServer).UnbanUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greyhole.myid.TheCoffeeHouse/UnbanUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TheCoffeeHouseServer).UnbanUser(ctx, req.(*UnbanUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TheCoffeeHouse_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TheCoffeeHouseServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greyhole.myid.TheCoffeeHouse/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TheCoffeeHouseServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TheCoffeeHouse_ResendCreatePasswordOTP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResendCreatePasswordOTPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TheCoffeeHouseServer).ResendCreatePasswordOTP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greyhole.myid.TheCoffeeHouse/ResendCreatePasswordOTP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TheCoffeeHouseServer).ResendCreatePasswordOTP(ctx, req.(*ResendCreatePasswordOTPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TheCoffeeHouse_GetUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TheCoffeeHouseServer).GetUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greyhole.myid.TheCoffeeHouse/GetUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TheCoffeeHouseServer).GetUsers(ctx, req.(*GetUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TheCoffeeHouse_ResetResendOTP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetResendOTPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TheCoffeeHouseServer).ResetResendOTP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greyhole.myid.TheCoffeeHouse/ResetResendOTP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TheCoffeeHouseServer).ResetResendOTP(ctx, req.(*ResetResendOTPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TheCoffeeHouse_IsUserBanned_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsUserBannedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TheCoffeeHouseServer).IsUserBanned(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greyhole.myid.TheCoffeeHouse/IsUserBanned",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TheCoffeeHouseServer).IsUserBanned(ctx, req.(*IsUserBannedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TheCoffeeHouse_IsUserLocked_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsUserLockedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TheCoffeeHouseServer).IsUserLocked(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greyhole.myid.TheCoffeeHouse/IsUserLocked",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TheCoffeeHouseServer).IsUserLocked(ctx, req.(*IsUserLockedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TheCoffeeHouse_serviceDesc = grpc.ServiceDesc{
	ServiceName: "greyhole.myid.TheCoffeeHouse",
	HandlerType: (*TheCoffeeHouseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _TheCoffeeHouse_CreateUser_Handler,
		},
		{
			MethodName: "ListUsers",
			Handler:    _TheCoffeeHouse_ListUsers_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _TheCoffeeHouse_UpdateUser_Handler,
		},
		{
			MethodName: "LockUser",
			Handler:    _TheCoffeeHouse_LockUser_Handler,
		},
		{
			MethodName: "UnlockUser",
			Handler:    _TheCoffeeHouse_UnlockUser_Handler,
		},
		{
			MethodName: "BanUser",
			Handler:    _TheCoffeeHouse_BanUser_Handler,
		},
		{
			MethodName: "UnbanUser",
			Handler:    _TheCoffeeHouse_UnbanUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _TheCoffeeHouse_GetUser_Handler,
		},
		{
			MethodName: "ResendCreatePasswordOTP",
			Handler:    _TheCoffeeHouse_ResendCreatePasswordOTP_Handler,
		},
		{
			MethodName: "GetUsers",
			Handler:    _TheCoffeeHouse_GetUsers_Handler,
		},
		{
			MethodName: "ResetResendOTP",
			Handler:    _TheCoffeeHouse_ResetResendOTP_Handler,
		},
		{
			MethodName: "IsUserBanned",
			Handler:    _TheCoffeeHouse_IsUserBanned_Handler,
		},
		{
			MethodName: "IsUserLocked",
			Handler:    _TheCoffeeHouse_IsUserLocked_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "myid/api/myid.proto",
}

// WaitressClient is the client API for Waitress service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WaitressClient interface {
	GetUsers(ctx context.Context, in *GetUsersRequest, opts ...grpc.CallOption) (*GetUsersReply, error)
	// Support mapping safe_id to user_id for old services using safe_id
	GetUserIDs(ctx context.Context, in *GetUserIDsRequest, opts ...grpc.CallOption) (*GetUserIDsReply, error)
	GetUsersByUsername(ctx context.Context, in *GetUsersByUsernameRequest, opts ...grpc.CallOption) (*GetUsersByUsernameReply, error)
}

type waitressClient struct {
	cc grpc.ClientConnInterface
}

func NewWaitressClient(cc grpc.ClientConnInterface) WaitressClient {
	return &waitressClient{cc}
}

func (c *waitressClient) GetUsers(ctx context.Context, in *GetUsersRequest, opts ...grpc.CallOption) (*GetUsersReply, error) {
	out := new(GetUsersReply)
	err := c.cc.Invoke(ctx, "/greyhole.myid.Waitress/GetUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waitressClient) GetUserIDs(ctx context.Context, in *GetUserIDsRequest, opts ...grpc.CallOption) (*GetUserIDsReply, error) {
	out := new(GetUserIDsReply)
	err := c.cc.Invoke(ctx, "/greyhole.myid.Waitress/GetUserIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waitressClient) GetUsersByUsername(ctx context.Context, in *GetUsersByUsernameRequest, opts ...grpc.CallOption) (*GetUsersByUsernameReply, error) {
	out := new(GetUsersByUsernameReply)
	err := c.cc.Invoke(ctx, "/greyhole.myid.Waitress/GetUsersByUsername", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WaitressServer is the server API for Waitress service.
// All implementations must embed UnimplementedWaitressServer
// for forward compatibility
type WaitressServer interface {
	GetUsers(context.Context, *GetUsersRequest) (*GetUsersReply, error)
	// Support mapping safe_id to user_id for old services using safe_id
	GetUserIDs(context.Context, *GetUserIDsRequest) (*GetUserIDsReply, error)
	GetUsersByUsername(context.Context, *GetUsersByUsernameRequest) (*GetUsersByUsernameReply, error)
	mustEmbedUnimplementedWaitressServer()
}

// UnimplementedWaitressServer must be embedded to have forward compatible implementations.
type UnimplementedWaitressServer struct {
}

func (*UnimplementedWaitressServer) GetUsers(context.Context, *GetUsersRequest) (*GetUsersReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsers not implemented")
}
func (*UnimplementedWaitressServer) GetUserIDs(context.Context, *GetUserIDsRequest) (*GetUserIDsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserIDs not implemented")
}
func (*UnimplementedWaitressServer) GetUsersByUsername(context.Context, *GetUsersByUsernameRequest) (*GetUsersByUsernameReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsersByUsername not implemented")
}
func (*UnimplementedWaitressServer) mustEmbedUnimplementedWaitressServer() {}

func RegisterWaitressServer(s *grpc.Server, srv WaitressServer) {
	s.RegisterService(&_Waitress_serviceDesc, srv)
}

func _Waitress_GetUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaitressServer).GetUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greyhole.myid.Waitress/GetUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaitressServer).GetUsers(ctx, req.(*GetUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Waitress_GetUserIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaitressServer).GetUserIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greyhole.myid.Waitress/GetUserIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaitressServer).GetUserIDs(ctx, req.(*GetUserIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Waitress_GetUsersByUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsersByUsernameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaitressServer).GetUsersByUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greyhole.myid.Waitress/GetUsersByUsername",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaitressServer).GetUsersByUsername(ctx, req.(*GetUsersByUsernameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Waitress_serviceDesc = grpc.ServiceDesc{
	ServiceName: "greyhole.myid.Waitress",
	HandlerType: (*WaitressServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUsers",
			Handler:    _Waitress_GetUsers_Handler,
		},
		{
			MethodName: "GetUserIDs",
			Handler:    _Waitress_GetUserIDs_Handler,
		},
		{
			MethodName: "GetUsersByUsername",
			Handler:    _Waitress_GetUsersByUsername_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "myid/api/myid.proto",
}

// ColdBrewClient is the client API for ColdBrew service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ColdBrewClient interface {
	ListLoginEvents(ctx context.Context, in *ListLoginEventsRequest, opts ...grpc.CallOption) (*ListLoginEventsReply, error)
	ListRegisterEvents(ctx context.Context, in *ListRegisterEventsRequest, opts ...grpc.CallOption) (*ListRegisterEventsReply, error)
}

type coldBrewClient struct {
	cc grpc.ClientConnInterface
}

func NewColdBrewClient(cc grpc.ClientConnInterface) ColdBrewClient {
	return &coldBrewClient{cc}
}

func (c *coldBrewClient) ListLoginEvents(ctx context.Context, in *ListLoginEventsRequest, opts ...grpc.CallOption) (*ListLoginEventsReply, error) {
	out := new(ListLoginEventsReply)
	err := c.cc.Invoke(ctx, "/greyhole.myid.ColdBrew/ListLoginEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coldBrewClient) ListRegisterEvents(ctx context.Context, in *ListRegisterEventsRequest, opts ...grpc.CallOption) (*ListRegisterEventsReply, error) {
	out := new(ListRegisterEventsReply)
	err := c.cc.Invoke(ctx, "/greyhole.myid.ColdBrew/ListRegisterEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ColdBrewServer is the server API for ColdBrew service.
// All implementations must embed UnimplementedColdBrewServer
// for forward compatibility
type ColdBrewServer interface {
	ListLoginEvents(context.Context, *ListLoginEventsRequest) (*ListLoginEventsReply, error)
	ListRegisterEvents(context.Context, *ListRegisterEventsRequest) (*ListRegisterEventsReply, error)
	mustEmbedUnimplementedColdBrewServer()
}

// UnimplementedColdBrewServer must be embedded to have forward compatible implementations.
type UnimplementedColdBrewServer struct {
}

func (*UnimplementedColdBrewServer) ListLoginEvents(context.Context, *ListLoginEventsRequest) (*ListLoginEventsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLoginEvents not implemented")
}
func (*UnimplementedColdBrewServer) ListRegisterEvents(context.Context, *ListRegisterEventsRequest) (*ListRegisterEventsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRegisterEvents not implemented")
}
func (*UnimplementedColdBrewServer) mustEmbedUnimplementedColdBrewServer() {}

func RegisterColdBrewServer(s *grpc.Server, srv ColdBrewServer) {
	s.RegisterService(&_ColdBrew_serviceDesc, srv)
}

func _ColdBrew_ListLoginEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLoginEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ColdBrewServer).ListLoginEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greyhole.myid.ColdBrew/ListLoginEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ColdBrewServer).ListLoginEvents(ctx, req.(*ListLoginEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ColdBrew_ListRegisterEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRegisterEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ColdBrewServer).ListRegisterEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greyhole.myid.ColdBrew/ListRegisterEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ColdBrewServer).ListRegisterEvents(ctx, req.(*ListRegisterEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ColdBrew_serviceDesc = grpc.ServiceDesc{
	ServiceName: "greyhole.myid.ColdBrew",
	HandlerType: (*ColdBrewServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListLoginEvents",
			Handler:    _ColdBrew_ListLoginEvents_Handler,
		},
		{
			MethodName: "ListRegisterEvents",
			Handler:    _ColdBrew_ListRegisterEvents_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "myid/api/myid.proto",
}
