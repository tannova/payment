// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: natasha/api/natasha.proto

package natasha

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _natasha_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on CreateMerchantRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateMerchantRequest) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetName()) < 6 {
		return CreateMerchantRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 6 runes",
		}
	}

	// no validation rules for LogoPath

	// no validation rules for WebhookUrl

	if err := m._validateEmail(m.GetEmailContact()); err != nil {
		return CreateMerchantRequestValidationError{
			field:  "EmailContact",
			reason: "value must be a valid email address",
			cause:  err,
		}
	}

	// no validation rules for SlackWebhookUrl

	// no validation rules for SafetyLimit

	return nil
}

func (m *CreateMerchantRequest) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *CreateMerchantRequest) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// CreateMerchantRequestValidationError is the validation error returned by
// CreateMerchantRequest.Validate if the designated constraints aren't met.
type CreateMerchantRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMerchantRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMerchantRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMerchantRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMerchantRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMerchantRequestValidationError) ErrorName() string {
	return "CreateMerchantRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateMerchantRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMerchantRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMerchantRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMerchantRequestValidationError{}

// Validate checks the field values on CreateMerchantReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateMerchantReply) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetMerchant()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateMerchantReplyValidationError{
				field:  "Merchant",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateMerchantReplyValidationError is the validation error returned by
// CreateMerchantReply.Validate if the designated constraints aren't met.
type CreateMerchantReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMerchantReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMerchantReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMerchantReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMerchantReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMerchantReplyValidationError) ErrorName() string {
	return "CreateMerchantReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateMerchantReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMerchantReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMerchantReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMerchantReplyValidationError{}

// Validate checks the field values on UpdateMerchantRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateMerchantRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetId() <= 0 {
		return UpdateMerchantRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
	}

	if utf8.RuneCountInString(m.GetName()) < 6 {
		return UpdateMerchantRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 6 runes",
		}
	}

	// no validation rules for LogoPath

	// no validation rules for WebhookUrl

	// no validation rules for EmailContact

	// no validation rules for SlackWebhookUrl

	// no validation rules for SafetyLimit

	return nil
}

// UpdateMerchantRequestValidationError is the validation error returned by
// UpdateMerchantRequest.Validate if the designated constraints aren't met.
type UpdateMerchantRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateMerchantRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateMerchantRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateMerchantRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateMerchantRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateMerchantRequestValidationError) ErrorName() string {
	return "UpdateMerchantRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateMerchantRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateMerchantRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateMerchantRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateMerchantRequestValidationError{}

// Validate checks the field values on UpdateMerchantReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateMerchantReply) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetMerchant()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateMerchantReplyValidationError{
				field:  "Merchant",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateMerchantReplyValidationError is the validation error returned by
// UpdateMerchantReply.Validate if the designated constraints aren't met.
type UpdateMerchantReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateMerchantReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateMerchantReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateMerchantReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateMerchantReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateMerchantReplyValidationError) ErrorName() string {
	return "UpdateMerchantReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateMerchantReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateMerchantReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateMerchantReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateMerchantReplyValidationError{}

// Validate checks the field values on ListMerchantsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListMerchantsRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Page

	// no validation rules for Size

	// no validation rules for Keyword

	return nil
}

// ListMerchantsRequestValidationError is the validation error returned by
// ListMerchantsRequest.Validate if the designated constraints aren't met.
type ListMerchantsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMerchantsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMerchantsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMerchantsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMerchantsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMerchantsRequestValidationError) ErrorName() string {
	return "ListMerchantsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListMerchantsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMerchantsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMerchantsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMerchantsRequestValidationError{}

// Validate checks the field values on ListMerchantsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListMerchantsReply) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetRecords() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListMerchantsReplyValidationError{
					field:  fmt.Sprintf("Records[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	// no validation rules for CurrentPage

	// no validation rules for CurrentSize

	return nil
}

// ListMerchantsReplyValidationError is the validation error returned by
// ListMerchantsReply.Validate if the designated constraints aren't met.
type ListMerchantsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMerchantsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMerchantsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMerchantsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMerchantsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMerchantsReplyValidationError) ErrorName() string {
	return "ListMerchantsReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListMerchantsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMerchantsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMerchantsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMerchantsReplyValidationError{}

// Validate checks the field values on GetMerchantRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetMerchantRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetId() <= 0 {
		return GetMerchantRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// GetMerchantRequestValidationError is the validation error returned by
// GetMerchantRequest.Validate if the designated constraints aren't met.
type GetMerchantRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMerchantRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMerchantRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMerchantRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMerchantRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMerchantRequestValidationError) ErrorName() string {
	return "GetMerchantRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetMerchantRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMerchantRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMerchantRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMerchantRequestValidationError{}

// Validate checks the field values on GetMerchantReply with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetMerchantReply) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetMerchant()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetMerchantReplyValidationError{
				field:  "Merchant",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetMerchantReplyValidationError is the validation error returned by
// GetMerchantReply.Validate if the designated constraints aren't met.
type GetMerchantReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMerchantReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMerchantReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMerchantReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMerchantReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMerchantReplyValidationError) ErrorName() string { return "GetMerchantReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetMerchantReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMerchantReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMerchantReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMerchantReplyValidationError{}

// Validate checks the field values on Merchant with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Merchant) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for LogoPath

	// no validation rules for EmailContact

	// no validation rules for WebhookUrl

	// no validation rules for SlackWebhookUrl

	// no validation rules for SafetyLimit

	// no validation rules for CreatedBy

	// no validation rules for UpdatedBy

	if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MerchantValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MerchantValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// MerchantValidationError is the validation error returned by
// Merchant.Validate if the designated constraints aren't met.
type MerchantValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MerchantValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MerchantValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MerchantValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MerchantValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MerchantValidationError) ErrorName() string { return "MerchantValidationError" }

// Error satisfies the builtin error interface
func (e MerchantValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMerchant.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MerchantValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MerchantValidationError{}

// Validate checks the field values on MakePaymentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MakePaymentRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for MerchantId

	// no validation rules for Amount

	if _, ok := _MakePaymentRequest_Type_InLookup[m.GetType()]; !ok {
		return MakePaymentRequestValidationError{
			field:  "Type",
			reason: "value must be in list [1 2]",
		}
	}

	if _, ok := PaymentType_name[int32(m.GetType())]; !ok {
		return MakePaymentRequestValidationError{
			field:  "Type",
			reason: "value must be one of the defined enum values",
		}
	}

	return nil
}

// MakePaymentRequestValidationError is the validation error returned by
// MakePaymentRequest.Validate if the designated constraints aren't met.
type MakePaymentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MakePaymentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MakePaymentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MakePaymentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MakePaymentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MakePaymentRequestValidationError) ErrorName() string {
	return "MakePaymentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e MakePaymentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMakePaymentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MakePaymentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MakePaymentRequestValidationError{}

var _MakePaymentRequest_Type_InLookup = map[PaymentType]struct{}{
	1: {},
	2: {},
}

// Validate checks the field values on MakePaymentReply with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *MakePaymentReply) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Balance

	if v, ok := interface{}(m.GetPayment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MakePaymentReplyValidationError{
				field:  "Payment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// MakePaymentReplyValidationError is the validation error returned by
// MakePaymentReply.Validate if the designated constraints aren't met.
type MakePaymentReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MakePaymentReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MakePaymentReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MakePaymentReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MakePaymentReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MakePaymentReplyValidationError) ErrorName() string { return "MakePaymentReplyValidationError" }

// Error satisfies the builtin error interface
func (e MakePaymentReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMakePaymentReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MakePaymentReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MakePaymentReplyValidationError{}

// Validate checks the field values on GetMerchantBalanceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetMerchantBalanceRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for MerchantId

	if v, ok := interface{}(m.GetFromDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetMerchantBalanceRequestValidationError{
				field:  "FromDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetToDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetMerchantBalanceRequestValidationError{
				field:  "ToDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetMerchantBalanceRequestValidationError is the validation error returned by
// GetMerchantBalanceRequest.Validate if the designated constraints aren't met.
type GetMerchantBalanceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMerchantBalanceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMerchantBalanceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMerchantBalanceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMerchantBalanceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMerchantBalanceRequestValidationError) ErrorName() string {
	return "GetMerchantBalanceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetMerchantBalanceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMerchantBalanceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMerchantBalanceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMerchantBalanceRequestValidationError{}

// Validate checks the field values on GetMerchantBalanceReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetMerchantBalanceReply) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Balance

	// no validation rules for TotalMoneyIn

	// no validation rules for TotalMoneyOut

	if v, ok := interface{}(m.GetReceiptVoucher()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetMerchantBalanceReplyValidationError{
				field:  "ReceiptVoucher",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPaymentVoucher()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetMerchantBalanceReplyValidationError{
				field:  "PaymentVoucher",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for BalanceForMexWithdrawProfit

	// no validation rules for BalanceForMexWithdrawFunds

	// no validation rules for Profit

	return nil
}

// GetMerchantBalanceReplyValidationError is the validation error returned by
// GetMerchantBalanceReply.Validate if the designated constraints aren't met.
type GetMerchantBalanceReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMerchantBalanceReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMerchantBalanceReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMerchantBalanceReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMerchantBalanceReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMerchantBalanceReplyValidationError) ErrorName() string {
	return "GetMerchantBalanceReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetMerchantBalanceReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMerchantBalanceReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMerchantBalanceReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMerchantBalanceReplyValidationError{}

// Validate checks the field values on NotifyRejectPaymentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *NotifyRejectPaymentRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for MerchantId

	// no validation rules for Reason

	// no validation rules for PaymentId

	return nil
}

// NotifyRejectPaymentRequestValidationError is the validation error returned
// by NotifyRejectPaymentRequest.Validate if the designated constraints aren't met.
type NotifyRejectPaymentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotifyRejectPaymentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotifyRejectPaymentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotifyRejectPaymentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotifyRejectPaymentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotifyRejectPaymentRequestValidationError) ErrorName() string {
	return "NotifyRejectPaymentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e NotifyRejectPaymentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotifyRejectPaymentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotifyRejectPaymentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotifyRejectPaymentRequestValidationError{}

// Validate checks the field values on NotifyRejectPaymentReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *NotifyRejectPaymentReply) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// NotifyRejectPaymentReplyValidationError is the validation error returned by
// NotifyRejectPaymentReply.Validate if the designated constraints aren't met.
type NotifyRejectPaymentReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotifyRejectPaymentReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotifyRejectPaymentReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotifyRejectPaymentReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotifyRejectPaymentReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotifyRejectPaymentReplyValidationError) ErrorName() string {
	return "NotifyRejectPaymentReplyValidationError"
}

// Error satisfies the builtin error interface
func (e NotifyRejectPaymentReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotifyRejectPaymentReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotifyRejectPaymentReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotifyRejectPaymentReplyValidationError{}

// Validate checks the field values on CreateVoucherRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateVoucherRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetMerchantId() <= 0 {
		return CreateVoucherRequestValidationError{
			field:  "MerchantId",
			reason: "value must be greater than 0",
		}
	}

	if _, ok := _CreateVoucherRequest_Type_NotInLookup[m.GetType()]; ok {
		return CreateVoucherRequestValidationError{
			field:  "Type",
			reason: "value must not be in list [0 1 2]",
		}
	}

	if _, ok := PaymentType_name[int32(m.GetType())]; !ok {
		return CreateVoucherRequestValidationError{
			field:  "Type",
			reason: "value must be one of the defined enum values",
		}
	}

	if m.GetAmount() <= 0 {
		return CreateVoucherRequestValidationError{
			field:  "Amount",
			reason: "value must be greater than 0",
		}
	}

	// no validation rules for Note

	return nil
}

// CreateVoucherRequestValidationError is the validation error returned by
// CreateVoucherRequest.Validate if the designated constraints aren't met.
type CreateVoucherRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateVoucherRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateVoucherRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateVoucherRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateVoucherRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateVoucherRequestValidationError) ErrorName() string {
	return "CreateVoucherRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateVoucherRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateVoucherRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateVoucherRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateVoucherRequestValidationError{}

var _CreateVoucherRequest_Type_NotInLookup = map[PaymentType]struct{}{
	0: {},
	1: {},
	2: {},
}

// Validate checks the field values on CreateVoucherReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateVoucherReply) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetVoucher()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateVoucherReplyValidationError{
				field:  "Voucher",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateVoucherReplyValidationError is the validation error returned by
// CreateVoucherReply.Validate if the designated constraints aren't met.
type CreateVoucherReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateVoucherReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateVoucherReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateVoucherReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateVoucherReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateVoucherReplyValidationError) ErrorName() string {
	return "CreateVoucherReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateVoucherReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateVoucherReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateVoucherReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateVoucherReplyValidationError{}

// Validate checks the field values on SubmitVoucherRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SubmitVoucherRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for PayerProvider

	// no validation rules for PayerAccount

	// no validation rules for PayerName

	// no validation rules for PayeeProvider

	// no validation rules for PayeeAccount

	// no validation rules for PayeeName

	// no validation rules for TxId

	// no validation rules for HandlerNote

	// no validation rules for ImageUrl

	return nil
}

// SubmitVoucherRequestValidationError is the validation error returned by
// SubmitVoucherRequest.Validate if the designated constraints aren't met.
type SubmitVoucherRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubmitVoucherRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubmitVoucherRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubmitVoucherRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubmitVoucherRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubmitVoucherRequestValidationError) ErrorName() string {
	return "SubmitVoucherRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SubmitVoucherRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubmitVoucherRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubmitVoucherRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubmitVoucherRequestValidationError{}

// Validate checks the field values on SubmitVoucherReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SubmitVoucherReply) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// SubmitVoucherReplyValidationError is the validation error returned by
// SubmitVoucherReply.Validate if the designated constraints aren't met.
type SubmitVoucherReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubmitVoucherReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubmitVoucherReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubmitVoucherReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubmitVoucherReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubmitVoucherReplyValidationError) ErrorName() string {
	return "SubmitVoucherReplyValidationError"
}

// Error satisfies the builtin error interface
func (e SubmitVoucherReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubmitVoucherReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubmitVoucherReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubmitVoucherReplyValidationError{}

// Validate checks the field values on CancelVoucherRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CancelVoucherRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Note

	return nil
}

// CancelVoucherRequestValidationError is the validation error returned by
// CancelVoucherRequest.Validate if the designated constraints aren't met.
type CancelVoucherRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelVoucherRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelVoucherRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelVoucherRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelVoucherRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelVoucherRequestValidationError) ErrorName() string {
	return "CancelVoucherRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CancelVoucherRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelVoucherRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelVoucherRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelVoucherRequestValidationError{}

// Validate checks the field values on CancelVoucherReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CancelVoucherReply) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// CancelVoucherReplyValidationError is the validation error returned by
// CancelVoucherReply.Validate if the designated constraints aren't met.
type CancelVoucherReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelVoucherReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelVoucherReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelVoucherReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelVoucherReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelVoucherReplyValidationError) ErrorName() string {
	return "CancelVoucherReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CancelVoucherReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelVoucherReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelVoucherReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelVoucherReplyValidationError{}

// Validate checks the field values on ListVouchersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListVouchersRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for MerchantId

	// no validation rules for Id

	// no validation rules for Page

	// no validation rules for Size

	return nil
}

// ListVouchersRequestValidationError is the validation error returned by
// ListVouchersRequest.Validate if the designated constraints aren't met.
type ListVouchersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListVouchersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListVouchersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListVouchersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListVouchersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListVouchersRequestValidationError) ErrorName() string {
	return "ListVouchersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListVouchersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListVouchersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListVouchersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListVouchersRequestValidationError{}

// Validate checks the field values on ListVouchersReply with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ListVouchersReply) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetRecords() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListVouchersReplyValidationError{
					field:  fmt.Sprintf("Records[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	// no validation rules for CurrentPage

	// no validation rules for CurrentSize

	return nil
}

// ListVouchersReplyValidationError is the validation error returned by
// ListVouchersReply.Validate if the designated constraints aren't met.
type ListVouchersReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListVouchersReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListVouchersReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListVouchersReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListVouchersReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListVouchersReplyValidationError) ErrorName() string {
	return "ListVouchersReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListVouchersReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListVouchersReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListVouchersReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListVouchersReplyValidationError{}

// Validate checks the field values on GetVoucherRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetVoucherRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetId() <= 0 {
		return GetVoucherRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// GetVoucherRequestValidationError is the validation error returned by
// GetVoucherRequest.Validate if the designated constraints aren't met.
type GetVoucherRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetVoucherRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetVoucherRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetVoucherRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetVoucherRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetVoucherRequestValidationError) ErrorName() string {
	return "GetVoucherRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetVoucherRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetVoucherRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetVoucherRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetVoucherRequestValidationError{}

// Validate checks the field values on GetVoucherReply with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetVoucherReply) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetVoucher()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetVoucherReplyValidationError{
				field:  "Voucher",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetVoucherReplyValidationError is the validation error returned by
// GetVoucherReply.Validate if the designated constraints aren't met.
type GetVoucherReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetVoucherReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetVoucherReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetVoucherReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetVoucherReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetVoucherReplyValidationError) ErrorName() string { return "GetVoucherReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetVoucherReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetVoucherReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetVoucherReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetVoucherReplyValidationError{}

// Validate checks the field values on ListPaymentsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListPaymentsRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for MerchantId

	// no validation rules for Id

	if v, ok := interface{}(m.GetFromDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListPaymentsRequestValidationError{
				field:  "FromDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Page

	// no validation rules for Size

	return nil
}

// ListPaymentsRequestValidationError is the validation error returned by
// ListPaymentsRequest.Validate if the designated constraints aren't met.
type ListPaymentsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPaymentsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPaymentsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPaymentsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPaymentsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPaymentsRequestValidationError) ErrorName() string {
	return "ListPaymentsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListPaymentsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPaymentsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPaymentsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPaymentsRequestValidationError{}

// Validate checks the field values on ListPaymentsReply with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ListPaymentsReply) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetRecords() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListPaymentsReplyValidationError{
					field:  fmt.Sprintf("Records[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	// no validation rules for CurrentPage

	// no validation rules for CurrentSize

	return nil
}

// ListPaymentsReplyValidationError is the validation error returned by
// ListPaymentsReply.Validate if the designated constraints aren't met.
type ListPaymentsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPaymentsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPaymentsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPaymentsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPaymentsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPaymentsReplyValidationError) ErrorName() string {
	return "ListPaymentsReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListPaymentsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPaymentsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPaymentsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPaymentsReplyValidationError{}

// Validate checks the field values on Payment with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Payment) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for MerchantId

	// no validation rules for PaymentType

	// no validation rules for Amount

	// no validation rules for CreatedBy

	// no validation rules for UpdatedBy

	if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PaymentValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PaymentValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// PaymentValidationError is the validation error returned by Payment.Validate
// if the designated constraints aren't met.
type PaymentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PaymentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PaymentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PaymentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PaymentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PaymentValidationError) ErrorName() string { return "PaymentValidationError" }

// Error satisfies the builtin error interface
func (e PaymentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPayment.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PaymentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PaymentValidationError{}

// Validate checks the field values on VoucherSummary with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *VoucherSummary) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Total

	// no validation rules for TotalIn_30Days

	// no validation rules for Percent

	return nil
}

// VoucherSummaryValidationError is the validation error returned by
// VoucherSummary.Validate if the designated constraints aren't met.
type VoucherSummaryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VoucherSummaryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VoucherSummaryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VoucherSummaryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VoucherSummaryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VoucherSummaryValidationError) ErrorName() string { return "VoucherSummaryValidationError" }

// Error satisfies the builtin error interface
func (e VoucherSummaryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVoucherSummary.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VoucherSummaryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VoucherSummaryValidationError{}

// Validate checks the field values on Voucher with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Voucher) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for MerchantId

	// no validation rules for PaymentId

	// no validation rules for Amount

	// no validation rules for Type

	// no validation rules for Status

	// no validation rules for ImageUrl

	// no validation rules for Note

	// no validation rules for PayeeProvider

	// no validation rules for PayeeAccount

	// no validation rules for PayeeName

	// no validation rules for PayerProvider

	// no validation rules for PayerAccount

	// no validation rules for PayerName

	// no validation rules for TxId

	// no validation rules for HandledBy

	// no validation rules for HandlerNote

	// no validation rules for CreatedBy

	// no validation rules for UpdatedBy

	if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VoucherValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VoucherValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// VoucherValidationError is the validation error returned by Voucher.Validate
// if the designated constraints aren't met.
type VoucherValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VoucherValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VoucherValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VoucherValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VoucherValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VoucherValidationError) ErrorName() string { return "VoucherValidationError" }

// Error satisfies the builtin error interface
func (e VoucherValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVoucher.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VoucherValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VoucherValidationError{}
