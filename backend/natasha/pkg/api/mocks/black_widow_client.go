// Code generated by mockery v2.4.0. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	natasha "gitlab.com/mcuc/monorepo/backend/natasha/pkg/api"
)

// BlackWidowClient is an autogenerated mock type for the BlackWidowClient type
type BlackWidowClient struct {
	mock.Mock
}

// GetMerchantBalance provides a mock function with given fields: ctx, in, opts
func (_m *BlackWidowClient) GetMerchantBalance(ctx context.Context, in *natasha.GetMerchantBalanceRequest, opts ...grpc.CallOption) (*natasha.GetMerchantBalanceReply, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *natasha.GetMerchantBalanceReply
	if rf, ok := ret.Get(0).(func(context.Context, *natasha.GetMerchantBalanceRequest, ...grpc.CallOption) *natasha.GetMerchantBalanceReply); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*natasha.GetMerchantBalanceReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *natasha.GetMerchantBalanceRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPayments provides a mock function with given fields: ctx, in, opts
func (_m *BlackWidowClient) ListPayments(ctx context.Context, in *natasha.ListPaymentsRequest, opts ...grpc.CallOption) (*natasha.ListPaymentsReply, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *natasha.ListPaymentsReply
	if rf, ok := ret.Get(0).(func(context.Context, *natasha.ListPaymentsRequest, ...grpc.CallOption) *natasha.ListPaymentsReply); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*natasha.ListPaymentsReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *natasha.ListPaymentsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MakePayment provides a mock function with given fields: ctx, in, opts
func (_m *BlackWidowClient) MakePayment(ctx context.Context, in *natasha.MakePaymentRequest, opts ...grpc.CallOption) (*natasha.MakePaymentReply, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *natasha.MakePaymentReply
	if rf, ok := ret.Get(0).(func(context.Context, *natasha.MakePaymentRequest, ...grpc.CallOption) *natasha.MakePaymentReply); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*natasha.MakePaymentReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *natasha.MakePaymentRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NotifyRejectPayment provides a mock function with given fields: ctx, in, opts
func (_m *BlackWidowClient) NotifyRejectPayment(ctx context.Context, in *natasha.NotifyRejectPaymentRequest, opts ...grpc.CallOption) (*natasha.NotifyRejectPaymentReply, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *natasha.NotifyRejectPaymentReply
	if rf, ok := ret.Get(0).(func(context.Context, *natasha.NotifyRejectPaymentRequest, ...grpc.CallOption) *natasha.NotifyRejectPaymentReply); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*natasha.NotifyRejectPaymentReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *natasha.NotifyRejectPaymentRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
