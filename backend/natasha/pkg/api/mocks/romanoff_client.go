// Code generated by mockery v2.4.0. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	natasha "gitlab.com/mcuc/monorepo/backend/natasha/pkg/api"
)

// RomanoffClient is an autogenerated mock type for the RomanoffClient type
type RomanoffClient struct {
	mock.Mock
}

// CancelVoucher provides a mock function with given fields: ctx, in, opts
func (_m *RomanoffClient) CancelVoucher(ctx context.Context, in *natasha.CancelVoucherRequest, opts ...grpc.CallOption) (*natasha.CancelVoucherReply, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *natasha.CancelVoucherReply
	if rf, ok := ret.Get(0).(func(context.Context, *natasha.CancelVoucherRequest, ...grpc.CallOption) *natasha.CancelVoucherReply); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*natasha.CancelVoucherReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *natasha.CancelVoucherRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateVoucher provides a mock function with given fields: ctx, in, opts
func (_m *RomanoffClient) CreateVoucher(ctx context.Context, in *natasha.CreateVoucherRequest, opts ...grpc.CallOption) (*natasha.CreateVoucherReply, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *natasha.CreateVoucherReply
	if rf, ok := ret.Get(0).(func(context.Context, *natasha.CreateVoucherRequest, ...grpc.CallOption) *natasha.CreateVoucherReply); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*natasha.CreateVoucherReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *natasha.CreateVoucherRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVoucher provides a mock function with given fields: ctx, in, opts
func (_m *RomanoffClient) GetVoucher(ctx context.Context, in *natasha.GetVoucherRequest, opts ...grpc.CallOption) (*natasha.GetVoucherReply, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *natasha.GetVoucherReply
	if rf, ok := ret.Get(0).(func(context.Context, *natasha.GetVoucherRequest, ...grpc.CallOption) *natasha.GetVoucherReply); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*natasha.GetVoucherReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *natasha.GetVoucherRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListVouchers provides a mock function with given fields: ctx, in, opts
func (_m *RomanoffClient) ListVouchers(ctx context.Context, in *natasha.ListVouchersRequest, opts ...grpc.CallOption) (*natasha.ListVouchersReply, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *natasha.ListVouchersReply
	if rf, ok := ret.Get(0).(func(context.Context, *natasha.ListVouchersRequest, ...grpc.CallOption) *natasha.ListVouchersReply); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*natasha.ListVouchersReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *natasha.ListVouchersRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SubmitVoucher provides a mock function with given fields: ctx, in, opts
func (_m *RomanoffClient) SubmitVoucher(ctx context.Context, in *natasha.SubmitVoucherRequest, opts ...grpc.CallOption) (*natasha.SubmitVoucherReply, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *natasha.SubmitVoucherReply
	if rf, ok := ret.Get(0).(func(context.Context, *natasha.SubmitVoucherRequest, ...grpc.CallOption) *natasha.SubmitVoucherReply); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*natasha.SubmitVoucherReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *natasha.SubmitVoucherRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
