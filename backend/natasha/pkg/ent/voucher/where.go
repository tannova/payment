// Code generated by entc, DO NOT EDIT.

package voucher

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"gitlab.com/mcuc/monorepo/backend/natasha/pkg/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// MerchantID applies equality check predicate on the "merchant_id" field. It's identical to MerchantIDEQ.
func MerchantID(v int64) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMerchantID), v))
	})
}

// PaymentID applies equality check predicate on the "payment_id" field. It's identical to PaymentIDEQ.
func PaymentID(v int64) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPaymentID), v))
	})
}

// Amount applies equality check predicate on the "amount" field. It's identical to AmountEQ.
func Amount(v int64) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAmount), v))
	})
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v int32) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldType), v))
	})
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v int32) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// PayeeProvider applies equality check predicate on the "payee_provider" field. It's identical to PayeeProviderEQ.
func PayeeProvider(v int32) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPayeeProvider), v))
	})
}

// PayeeAccount applies equality check predicate on the "payee_account" field. It's identical to PayeeAccountEQ.
func PayeeAccount(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPayeeAccount), v))
	})
}

// PayeeName applies equality check predicate on the "payee_name" field. It's identical to PayeeNameEQ.
func PayeeName(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPayeeName), v))
	})
}

// PayerProvider applies equality check predicate on the "payer_provider" field. It's identical to PayerProviderEQ.
func PayerProvider(v int32) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPayerProvider), v))
	})
}

// PayerAccount applies equality check predicate on the "payer_account" field. It's identical to PayerAccountEQ.
func PayerAccount(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPayerAccount), v))
	})
}

// PayerName applies equality check predicate on the "payer_name" field. It's identical to PayerNameEQ.
func PayerName(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPayerName), v))
	})
}

// TxID applies equality check predicate on the "tx_id" field. It's identical to TxIDEQ.
func TxID(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTxID), v))
	})
}

// ImageURL applies equality check predicate on the "image_url" field. It's identical to ImageURLEQ.
func ImageURL(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldImageURL), v))
	})
}

// CreatorNote applies equality check predicate on the "creator_note" field. It's identical to CreatorNoteEQ.
func CreatorNote(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatorNote), v))
	})
}

// HandledBy applies equality check predicate on the "handled_by" field. It's identical to HandledByEQ.
func HandledBy(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHandledBy), v))
	})
}

// HandlerNote applies equality check predicate on the "handler_note" field. It's identical to HandlerNoteEQ.
func HandlerNote(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHandlerNote), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedBy), v))
	})
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedBy), v))
	})
}

// MerchantIDEQ applies the EQ predicate on the "merchant_id" field.
func MerchantIDEQ(v int64) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMerchantID), v))
	})
}

// MerchantIDNEQ applies the NEQ predicate on the "merchant_id" field.
func MerchantIDNEQ(v int64) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMerchantID), v))
	})
}

// MerchantIDIn applies the In predicate on the "merchant_id" field.
func MerchantIDIn(vs ...int64) predicate.Voucher {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Voucher(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMerchantID), v...))
	})
}

// MerchantIDNotIn applies the NotIn predicate on the "merchant_id" field.
func MerchantIDNotIn(vs ...int64) predicate.Voucher {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Voucher(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMerchantID), v...))
	})
}

// MerchantIDGT applies the GT predicate on the "merchant_id" field.
func MerchantIDGT(v int64) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMerchantID), v))
	})
}

// MerchantIDGTE applies the GTE predicate on the "merchant_id" field.
func MerchantIDGTE(v int64) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMerchantID), v))
	})
}

// MerchantIDLT applies the LT predicate on the "merchant_id" field.
func MerchantIDLT(v int64) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMerchantID), v))
	})
}

// MerchantIDLTE applies the LTE predicate on the "merchant_id" field.
func MerchantIDLTE(v int64) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMerchantID), v))
	})
}

// PaymentIDEQ applies the EQ predicate on the "payment_id" field.
func PaymentIDEQ(v int64) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPaymentID), v))
	})
}

// PaymentIDNEQ applies the NEQ predicate on the "payment_id" field.
func PaymentIDNEQ(v int64) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPaymentID), v))
	})
}

// PaymentIDIn applies the In predicate on the "payment_id" field.
func PaymentIDIn(vs ...int64) predicate.Voucher {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Voucher(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPaymentID), v...))
	})
}

// PaymentIDNotIn applies the NotIn predicate on the "payment_id" field.
func PaymentIDNotIn(vs ...int64) predicate.Voucher {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Voucher(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPaymentID), v...))
	})
}

// PaymentIDGT applies the GT predicate on the "payment_id" field.
func PaymentIDGT(v int64) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPaymentID), v))
	})
}

// PaymentIDGTE applies the GTE predicate on the "payment_id" field.
func PaymentIDGTE(v int64) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPaymentID), v))
	})
}

// PaymentIDLT applies the LT predicate on the "payment_id" field.
func PaymentIDLT(v int64) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPaymentID), v))
	})
}

// PaymentIDLTE applies the LTE predicate on the "payment_id" field.
func PaymentIDLTE(v int64) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPaymentID), v))
	})
}

// PaymentIDIsNil applies the IsNil predicate on the "payment_id" field.
func PaymentIDIsNil() predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPaymentID)))
	})
}

// PaymentIDNotNil applies the NotNil predicate on the "payment_id" field.
func PaymentIDNotNil() predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPaymentID)))
	})
}

// AmountEQ applies the EQ predicate on the "amount" field.
func AmountEQ(v int64) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAmount), v))
	})
}

// AmountNEQ applies the NEQ predicate on the "amount" field.
func AmountNEQ(v int64) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAmount), v))
	})
}

// AmountIn applies the In predicate on the "amount" field.
func AmountIn(vs ...int64) predicate.Voucher {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Voucher(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAmount), v...))
	})
}

// AmountNotIn applies the NotIn predicate on the "amount" field.
func AmountNotIn(vs ...int64) predicate.Voucher {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Voucher(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAmount), v...))
	})
}

// AmountGT applies the GT predicate on the "amount" field.
func AmountGT(v int64) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAmount), v))
	})
}

// AmountGTE applies the GTE predicate on the "amount" field.
func AmountGTE(v int64) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAmount), v))
	})
}

// AmountLT applies the LT predicate on the "amount" field.
func AmountLT(v int64) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAmount), v))
	})
}

// AmountLTE applies the LTE predicate on the "amount" field.
func AmountLTE(v int64) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAmount), v))
	})
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v int32) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldType), v))
	})
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v int32) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldType), v))
	})
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...int32) predicate.Voucher {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Voucher(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldType), v...))
	})
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...int32) predicate.Voucher {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Voucher(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldType), v...))
	})
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v int32) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldType), v))
	})
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v int32) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldType), v))
	})
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v int32) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldType), v))
	})
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v int32) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldType), v))
	})
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v int32) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v int32) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatus), v))
	})
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...int32) predicate.Voucher {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Voucher(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStatus), v...))
	})
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...int32) predicate.Voucher {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Voucher(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStatus), v...))
	})
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v int32) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStatus), v))
	})
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v int32) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStatus), v))
	})
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v int32) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStatus), v))
	})
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v int32) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStatus), v))
	})
}

// StatusIsNil applies the IsNil predicate on the "status" field.
func StatusIsNil() predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStatus)))
	})
}

// StatusNotNil applies the NotNil predicate on the "status" field.
func StatusNotNil() predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStatus)))
	})
}

// PayeeProviderEQ applies the EQ predicate on the "payee_provider" field.
func PayeeProviderEQ(v int32) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPayeeProvider), v))
	})
}

// PayeeProviderNEQ applies the NEQ predicate on the "payee_provider" field.
func PayeeProviderNEQ(v int32) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPayeeProvider), v))
	})
}

// PayeeProviderIn applies the In predicate on the "payee_provider" field.
func PayeeProviderIn(vs ...int32) predicate.Voucher {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Voucher(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPayeeProvider), v...))
	})
}

// PayeeProviderNotIn applies the NotIn predicate on the "payee_provider" field.
func PayeeProviderNotIn(vs ...int32) predicate.Voucher {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Voucher(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPayeeProvider), v...))
	})
}

// PayeeProviderGT applies the GT predicate on the "payee_provider" field.
func PayeeProviderGT(v int32) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPayeeProvider), v))
	})
}

// PayeeProviderGTE applies the GTE predicate on the "payee_provider" field.
func PayeeProviderGTE(v int32) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPayeeProvider), v))
	})
}

// PayeeProviderLT applies the LT predicate on the "payee_provider" field.
func PayeeProviderLT(v int32) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPayeeProvider), v))
	})
}

// PayeeProviderLTE applies the LTE predicate on the "payee_provider" field.
func PayeeProviderLTE(v int32) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPayeeProvider), v))
	})
}

// PayeeProviderIsNil applies the IsNil predicate on the "payee_provider" field.
func PayeeProviderIsNil() predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPayeeProvider)))
	})
}

// PayeeProviderNotNil applies the NotNil predicate on the "payee_provider" field.
func PayeeProviderNotNil() predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPayeeProvider)))
	})
}

// PayeeAccountEQ applies the EQ predicate on the "payee_account" field.
func PayeeAccountEQ(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPayeeAccount), v))
	})
}

// PayeeAccountNEQ applies the NEQ predicate on the "payee_account" field.
func PayeeAccountNEQ(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPayeeAccount), v))
	})
}

// PayeeAccountIn applies the In predicate on the "payee_account" field.
func PayeeAccountIn(vs ...string) predicate.Voucher {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Voucher(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPayeeAccount), v...))
	})
}

// PayeeAccountNotIn applies the NotIn predicate on the "payee_account" field.
func PayeeAccountNotIn(vs ...string) predicate.Voucher {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Voucher(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPayeeAccount), v...))
	})
}

// PayeeAccountGT applies the GT predicate on the "payee_account" field.
func PayeeAccountGT(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPayeeAccount), v))
	})
}

// PayeeAccountGTE applies the GTE predicate on the "payee_account" field.
func PayeeAccountGTE(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPayeeAccount), v))
	})
}

// PayeeAccountLT applies the LT predicate on the "payee_account" field.
func PayeeAccountLT(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPayeeAccount), v))
	})
}

// PayeeAccountLTE applies the LTE predicate on the "payee_account" field.
func PayeeAccountLTE(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPayeeAccount), v))
	})
}

// PayeeAccountContains applies the Contains predicate on the "payee_account" field.
func PayeeAccountContains(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPayeeAccount), v))
	})
}

// PayeeAccountHasPrefix applies the HasPrefix predicate on the "payee_account" field.
func PayeeAccountHasPrefix(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPayeeAccount), v))
	})
}

// PayeeAccountHasSuffix applies the HasSuffix predicate on the "payee_account" field.
func PayeeAccountHasSuffix(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPayeeAccount), v))
	})
}

// PayeeAccountIsNil applies the IsNil predicate on the "payee_account" field.
func PayeeAccountIsNil() predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPayeeAccount)))
	})
}

// PayeeAccountNotNil applies the NotNil predicate on the "payee_account" field.
func PayeeAccountNotNil() predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPayeeAccount)))
	})
}

// PayeeAccountEqualFold applies the EqualFold predicate on the "payee_account" field.
func PayeeAccountEqualFold(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPayeeAccount), v))
	})
}

// PayeeAccountContainsFold applies the ContainsFold predicate on the "payee_account" field.
func PayeeAccountContainsFold(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPayeeAccount), v))
	})
}

// PayeeNameEQ applies the EQ predicate on the "payee_name" field.
func PayeeNameEQ(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPayeeName), v))
	})
}

// PayeeNameNEQ applies the NEQ predicate on the "payee_name" field.
func PayeeNameNEQ(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPayeeName), v))
	})
}

// PayeeNameIn applies the In predicate on the "payee_name" field.
func PayeeNameIn(vs ...string) predicate.Voucher {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Voucher(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPayeeName), v...))
	})
}

// PayeeNameNotIn applies the NotIn predicate on the "payee_name" field.
func PayeeNameNotIn(vs ...string) predicate.Voucher {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Voucher(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPayeeName), v...))
	})
}

// PayeeNameGT applies the GT predicate on the "payee_name" field.
func PayeeNameGT(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPayeeName), v))
	})
}

// PayeeNameGTE applies the GTE predicate on the "payee_name" field.
func PayeeNameGTE(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPayeeName), v))
	})
}

// PayeeNameLT applies the LT predicate on the "payee_name" field.
func PayeeNameLT(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPayeeName), v))
	})
}

// PayeeNameLTE applies the LTE predicate on the "payee_name" field.
func PayeeNameLTE(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPayeeName), v))
	})
}

// PayeeNameContains applies the Contains predicate on the "payee_name" field.
func PayeeNameContains(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPayeeName), v))
	})
}

// PayeeNameHasPrefix applies the HasPrefix predicate on the "payee_name" field.
func PayeeNameHasPrefix(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPayeeName), v))
	})
}

// PayeeNameHasSuffix applies the HasSuffix predicate on the "payee_name" field.
func PayeeNameHasSuffix(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPayeeName), v))
	})
}

// PayeeNameIsNil applies the IsNil predicate on the "payee_name" field.
func PayeeNameIsNil() predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPayeeName)))
	})
}

// PayeeNameNotNil applies the NotNil predicate on the "payee_name" field.
func PayeeNameNotNil() predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPayeeName)))
	})
}

// PayeeNameEqualFold applies the EqualFold predicate on the "payee_name" field.
func PayeeNameEqualFold(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPayeeName), v))
	})
}

// PayeeNameContainsFold applies the ContainsFold predicate on the "payee_name" field.
func PayeeNameContainsFold(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPayeeName), v))
	})
}

// PayerProviderEQ applies the EQ predicate on the "payer_provider" field.
func PayerProviderEQ(v int32) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPayerProvider), v))
	})
}

// PayerProviderNEQ applies the NEQ predicate on the "payer_provider" field.
func PayerProviderNEQ(v int32) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPayerProvider), v))
	})
}

// PayerProviderIn applies the In predicate on the "payer_provider" field.
func PayerProviderIn(vs ...int32) predicate.Voucher {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Voucher(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPayerProvider), v...))
	})
}

// PayerProviderNotIn applies the NotIn predicate on the "payer_provider" field.
func PayerProviderNotIn(vs ...int32) predicate.Voucher {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Voucher(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPayerProvider), v...))
	})
}

// PayerProviderGT applies the GT predicate on the "payer_provider" field.
func PayerProviderGT(v int32) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPayerProvider), v))
	})
}

// PayerProviderGTE applies the GTE predicate on the "payer_provider" field.
func PayerProviderGTE(v int32) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPayerProvider), v))
	})
}

// PayerProviderLT applies the LT predicate on the "payer_provider" field.
func PayerProviderLT(v int32) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPayerProvider), v))
	})
}

// PayerProviderLTE applies the LTE predicate on the "payer_provider" field.
func PayerProviderLTE(v int32) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPayerProvider), v))
	})
}

// PayerProviderIsNil applies the IsNil predicate on the "payer_provider" field.
func PayerProviderIsNil() predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPayerProvider)))
	})
}

// PayerProviderNotNil applies the NotNil predicate on the "payer_provider" field.
func PayerProviderNotNil() predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPayerProvider)))
	})
}

// PayerAccountEQ applies the EQ predicate on the "payer_account" field.
func PayerAccountEQ(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPayerAccount), v))
	})
}

// PayerAccountNEQ applies the NEQ predicate on the "payer_account" field.
func PayerAccountNEQ(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPayerAccount), v))
	})
}

// PayerAccountIn applies the In predicate on the "payer_account" field.
func PayerAccountIn(vs ...string) predicate.Voucher {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Voucher(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPayerAccount), v...))
	})
}

// PayerAccountNotIn applies the NotIn predicate on the "payer_account" field.
func PayerAccountNotIn(vs ...string) predicate.Voucher {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Voucher(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPayerAccount), v...))
	})
}

// PayerAccountGT applies the GT predicate on the "payer_account" field.
func PayerAccountGT(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPayerAccount), v))
	})
}

// PayerAccountGTE applies the GTE predicate on the "payer_account" field.
func PayerAccountGTE(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPayerAccount), v))
	})
}

// PayerAccountLT applies the LT predicate on the "payer_account" field.
func PayerAccountLT(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPayerAccount), v))
	})
}

// PayerAccountLTE applies the LTE predicate on the "payer_account" field.
func PayerAccountLTE(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPayerAccount), v))
	})
}

// PayerAccountContains applies the Contains predicate on the "payer_account" field.
func PayerAccountContains(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPayerAccount), v))
	})
}

// PayerAccountHasPrefix applies the HasPrefix predicate on the "payer_account" field.
func PayerAccountHasPrefix(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPayerAccount), v))
	})
}

// PayerAccountHasSuffix applies the HasSuffix predicate on the "payer_account" field.
func PayerAccountHasSuffix(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPayerAccount), v))
	})
}

// PayerAccountIsNil applies the IsNil predicate on the "payer_account" field.
func PayerAccountIsNil() predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPayerAccount)))
	})
}

// PayerAccountNotNil applies the NotNil predicate on the "payer_account" field.
func PayerAccountNotNil() predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPayerAccount)))
	})
}

// PayerAccountEqualFold applies the EqualFold predicate on the "payer_account" field.
func PayerAccountEqualFold(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPayerAccount), v))
	})
}

// PayerAccountContainsFold applies the ContainsFold predicate on the "payer_account" field.
func PayerAccountContainsFold(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPayerAccount), v))
	})
}

// PayerNameEQ applies the EQ predicate on the "payer_name" field.
func PayerNameEQ(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPayerName), v))
	})
}

// PayerNameNEQ applies the NEQ predicate on the "payer_name" field.
func PayerNameNEQ(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPayerName), v))
	})
}

// PayerNameIn applies the In predicate on the "payer_name" field.
func PayerNameIn(vs ...string) predicate.Voucher {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Voucher(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPayerName), v...))
	})
}

// PayerNameNotIn applies the NotIn predicate on the "payer_name" field.
func PayerNameNotIn(vs ...string) predicate.Voucher {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Voucher(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPayerName), v...))
	})
}

// PayerNameGT applies the GT predicate on the "payer_name" field.
func PayerNameGT(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPayerName), v))
	})
}

// PayerNameGTE applies the GTE predicate on the "payer_name" field.
func PayerNameGTE(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPayerName), v))
	})
}

// PayerNameLT applies the LT predicate on the "payer_name" field.
func PayerNameLT(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPayerName), v))
	})
}

// PayerNameLTE applies the LTE predicate on the "payer_name" field.
func PayerNameLTE(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPayerName), v))
	})
}

// PayerNameContains applies the Contains predicate on the "payer_name" field.
func PayerNameContains(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPayerName), v))
	})
}

// PayerNameHasPrefix applies the HasPrefix predicate on the "payer_name" field.
func PayerNameHasPrefix(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPayerName), v))
	})
}

// PayerNameHasSuffix applies the HasSuffix predicate on the "payer_name" field.
func PayerNameHasSuffix(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPayerName), v))
	})
}

// PayerNameIsNil applies the IsNil predicate on the "payer_name" field.
func PayerNameIsNil() predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPayerName)))
	})
}

// PayerNameNotNil applies the NotNil predicate on the "payer_name" field.
func PayerNameNotNil() predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPayerName)))
	})
}

// PayerNameEqualFold applies the EqualFold predicate on the "payer_name" field.
func PayerNameEqualFold(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPayerName), v))
	})
}

// PayerNameContainsFold applies the ContainsFold predicate on the "payer_name" field.
func PayerNameContainsFold(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPayerName), v))
	})
}

// TxIDEQ applies the EQ predicate on the "tx_id" field.
func TxIDEQ(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTxID), v))
	})
}

// TxIDNEQ applies the NEQ predicate on the "tx_id" field.
func TxIDNEQ(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTxID), v))
	})
}

// TxIDIn applies the In predicate on the "tx_id" field.
func TxIDIn(vs ...string) predicate.Voucher {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Voucher(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTxID), v...))
	})
}

// TxIDNotIn applies the NotIn predicate on the "tx_id" field.
func TxIDNotIn(vs ...string) predicate.Voucher {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Voucher(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTxID), v...))
	})
}

// TxIDGT applies the GT predicate on the "tx_id" field.
func TxIDGT(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTxID), v))
	})
}

// TxIDGTE applies the GTE predicate on the "tx_id" field.
func TxIDGTE(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTxID), v))
	})
}

// TxIDLT applies the LT predicate on the "tx_id" field.
func TxIDLT(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTxID), v))
	})
}

// TxIDLTE applies the LTE predicate on the "tx_id" field.
func TxIDLTE(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTxID), v))
	})
}

// TxIDContains applies the Contains predicate on the "tx_id" field.
func TxIDContains(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTxID), v))
	})
}

// TxIDHasPrefix applies the HasPrefix predicate on the "tx_id" field.
func TxIDHasPrefix(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTxID), v))
	})
}

// TxIDHasSuffix applies the HasSuffix predicate on the "tx_id" field.
func TxIDHasSuffix(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTxID), v))
	})
}

// TxIDIsNil applies the IsNil predicate on the "tx_id" field.
func TxIDIsNil() predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTxID)))
	})
}

// TxIDNotNil applies the NotNil predicate on the "tx_id" field.
func TxIDNotNil() predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTxID)))
	})
}

// TxIDEqualFold applies the EqualFold predicate on the "tx_id" field.
func TxIDEqualFold(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTxID), v))
	})
}

// TxIDContainsFold applies the ContainsFold predicate on the "tx_id" field.
func TxIDContainsFold(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTxID), v))
	})
}

// ImageURLEQ applies the EQ predicate on the "image_url" field.
func ImageURLEQ(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldImageURL), v))
	})
}

// ImageURLNEQ applies the NEQ predicate on the "image_url" field.
func ImageURLNEQ(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldImageURL), v))
	})
}

// ImageURLIn applies the In predicate on the "image_url" field.
func ImageURLIn(vs ...string) predicate.Voucher {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Voucher(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldImageURL), v...))
	})
}

// ImageURLNotIn applies the NotIn predicate on the "image_url" field.
func ImageURLNotIn(vs ...string) predicate.Voucher {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Voucher(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldImageURL), v...))
	})
}

// ImageURLGT applies the GT predicate on the "image_url" field.
func ImageURLGT(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldImageURL), v))
	})
}

// ImageURLGTE applies the GTE predicate on the "image_url" field.
func ImageURLGTE(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldImageURL), v))
	})
}

// ImageURLLT applies the LT predicate on the "image_url" field.
func ImageURLLT(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldImageURL), v))
	})
}

// ImageURLLTE applies the LTE predicate on the "image_url" field.
func ImageURLLTE(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldImageURL), v))
	})
}

// ImageURLContains applies the Contains predicate on the "image_url" field.
func ImageURLContains(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldImageURL), v))
	})
}

// ImageURLHasPrefix applies the HasPrefix predicate on the "image_url" field.
func ImageURLHasPrefix(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldImageURL), v))
	})
}

// ImageURLHasSuffix applies the HasSuffix predicate on the "image_url" field.
func ImageURLHasSuffix(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldImageURL), v))
	})
}

// ImageURLIsNil applies the IsNil predicate on the "image_url" field.
func ImageURLIsNil() predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldImageURL)))
	})
}

// ImageURLNotNil applies the NotNil predicate on the "image_url" field.
func ImageURLNotNil() predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldImageURL)))
	})
}

// ImageURLEqualFold applies the EqualFold predicate on the "image_url" field.
func ImageURLEqualFold(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldImageURL), v))
	})
}

// ImageURLContainsFold applies the ContainsFold predicate on the "image_url" field.
func ImageURLContainsFold(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldImageURL), v))
	})
}

// CreatorNoteEQ applies the EQ predicate on the "creator_note" field.
func CreatorNoteEQ(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatorNote), v))
	})
}

// CreatorNoteNEQ applies the NEQ predicate on the "creator_note" field.
func CreatorNoteNEQ(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatorNote), v))
	})
}

// CreatorNoteIn applies the In predicate on the "creator_note" field.
func CreatorNoteIn(vs ...string) predicate.Voucher {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Voucher(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatorNote), v...))
	})
}

// CreatorNoteNotIn applies the NotIn predicate on the "creator_note" field.
func CreatorNoteNotIn(vs ...string) predicate.Voucher {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Voucher(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatorNote), v...))
	})
}

// CreatorNoteGT applies the GT predicate on the "creator_note" field.
func CreatorNoteGT(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatorNote), v))
	})
}

// CreatorNoteGTE applies the GTE predicate on the "creator_note" field.
func CreatorNoteGTE(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatorNote), v))
	})
}

// CreatorNoteLT applies the LT predicate on the "creator_note" field.
func CreatorNoteLT(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatorNote), v))
	})
}

// CreatorNoteLTE applies the LTE predicate on the "creator_note" field.
func CreatorNoteLTE(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatorNote), v))
	})
}

// CreatorNoteContains applies the Contains predicate on the "creator_note" field.
func CreatorNoteContains(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCreatorNote), v))
	})
}

// CreatorNoteHasPrefix applies the HasPrefix predicate on the "creator_note" field.
func CreatorNoteHasPrefix(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCreatorNote), v))
	})
}

// CreatorNoteHasSuffix applies the HasSuffix predicate on the "creator_note" field.
func CreatorNoteHasSuffix(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCreatorNote), v))
	})
}

// CreatorNoteIsNil applies the IsNil predicate on the "creator_note" field.
func CreatorNoteIsNil() predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCreatorNote)))
	})
}

// CreatorNoteNotNil applies the NotNil predicate on the "creator_note" field.
func CreatorNoteNotNil() predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCreatorNote)))
	})
}

// CreatorNoteEqualFold applies the EqualFold predicate on the "creator_note" field.
func CreatorNoteEqualFold(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCreatorNote), v))
	})
}

// CreatorNoteContainsFold applies the ContainsFold predicate on the "creator_note" field.
func CreatorNoteContainsFold(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCreatorNote), v))
	})
}

// HandledByEQ applies the EQ predicate on the "handled_by" field.
func HandledByEQ(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHandledBy), v))
	})
}

// HandledByNEQ applies the NEQ predicate on the "handled_by" field.
func HandledByNEQ(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHandledBy), v))
	})
}

// HandledByIn applies the In predicate on the "handled_by" field.
func HandledByIn(vs ...string) predicate.Voucher {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Voucher(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldHandledBy), v...))
	})
}

// HandledByNotIn applies the NotIn predicate on the "handled_by" field.
func HandledByNotIn(vs ...string) predicate.Voucher {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Voucher(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldHandledBy), v...))
	})
}

// HandledByGT applies the GT predicate on the "handled_by" field.
func HandledByGT(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldHandledBy), v))
	})
}

// HandledByGTE applies the GTE predicate on the "handled_by" field.
func HandledByGTE(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldHandledBy), v))
	})
}

// HandledByLT applies the LT predicate on the "handled_by" field.
func HandledByLT(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldHandledBy), v))
	})
}

// HandledByLTE applies the LTE predicate on the "handled_by" field.
func HandledByLTE(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldHandledBy), v))
	})
}

// HandledByContains applies the Contains predicate on the "handled_by" field.
func HandledByContains(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldHandledBy), v))
	})
}

// HandledByHasPrefix applies the HasPrefix predicate on the "handled_by" field.
func HandledByHasPrefix(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldHandledBy), v))
	})
}

// HandledByHasSuffix applies the HasSuffix predicate on the "handled_by" field.
func HandledByHasSuffix(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldHandledBy), v))
	})
}

// HandledByIsNil applies the IsNil predicate on the "handled_by" field.
func HandledByIsNil() predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldHandledBy)))
	})
}

// HandledByNotNil applies the NotNil predicate on the "handled_by" field.
func HandledByNotNil() predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldHandledBy)))
	})
}

// HandledByEqualFold applies the EqualFold predicate on the "handled_by" field.
func HandledByEqualFold(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldHandledBy), v))
	})
}

// HandledByContainsFold applies the ContainsFold predicate on the "handled_by" field.
func HandledByContainsFold(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldHandledBy), v))
	})
}

// HandlerNoteEQ applies the EQ predicate on the "handler_note" field.
func HandlerNoteEQ(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHandlerNote), v))
	})
}

// HandlerNoteNEQ applies the NEQ predicate on the "handler_note" field.
func HandlerNoteNEQ(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHandlerNote), v))
	})
}

// HandlerNoteIn applies the In predicate on the "handler_note" field.
func HandlerNoteIn(vs ...string) predicate.Voucher {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Voucher(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldHandlerNote), v...))
	})
}

// HandlerNoteNotIn applies the NotIn predicate on the "handler_note" field.
func HandlerNoteNotIn(vs ...string) predicate.Voucher {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Voucher(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldHandlerNote), v...))
	})
}

// HandlerNoteGT applies the GT predicate on the "handler_note" field.
func HandlerNoteGT(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldHandlerNote), v))
	})
}

// HandlerNoteGTE applies the GTE predicate on the "handler_note" field.
func HandlerNoteGTE(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldHandlerNote), v))
	})
}

// HandlerNoteLT applies the LT predicate on the "handler_note" field.
func HandlerNoteLT(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldHandlerNote), v))
	})
}

// HandlerNoteLTE applies the LTE predicate on the "handler_note" field.
func HandlerNoteLTE(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldHandlerNote), v))
	})
}

// HandlerNoteContains applies the Contains predicate on the "handler_note" field.
func HandlerNoteContains(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldHandlerNote), v))
	})
}

// HandlerNoteHasPrefix applies the HasPrefix predicate on the "handler_note" field.
func HandlerNoteHasPrefix(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldHandlerNote), v))
	})
}

// HandlerNoteHasSuffix applies the HasSuffix predicate on the "handler_note" field.
func HandlerNoteHasSuffix(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldHandlerNote), v))
	})
}

// HandlerNoteIsNil applies the IsNil predicate on the "handler_note" field.
func HandlerNoteIsNil() predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldHandlerNote)))
	})
}

// HandlerNoteNotNil applies the NotNil predicate on the "handler_note" field.
func HandlerNoteNotNil() predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldHandlerNote)))
	})
}

// HandlerNoteEqualFold applies the EqualFold predicate on the "handler_note" field.
func HandlerNoteEqualFold(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldHandlerNote), v))
	})
}

// HandlerNoteContainsFold applies the ContainsFold predicate on the "handler_note" field.
func HandlerNoteContainsFold(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldHandlerNote), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Voucher {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Voucher(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Voucher {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Voucher(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Voucher {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Voucher(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Voucher {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Voucher(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedBy), v))
	})
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedBy), v))
	})
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...string) predicate.Voucher {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Voucher(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedBy), v...))
	})
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...string) predicate.Voucher {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Voucher(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedBy), v...))
	})
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedBy), v))
	})
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedBy), v))
	})
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedBy), v))
	})
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedBy), v))
	})
}

// CreatedByContains applies the Contains predicate on the "created_by" field.
func CreatedByContains(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCreatedBy), v))
	})
}

// CreatedByHasPrefix applies the HasPrefix predicate on the "created_by" field.
func CreatedByHasPrefix(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCreatedBy), v))
	})
}

// CreatedByHasSuffix applies the HasSuffix predicate on the "created_by" field.
func CreatedByHasSuffix(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCreatedBy), v))
	})
}

// CreatedByEqualFold applies the EqualFold predicate on the "created_by" field.
func CreatedByEqualFold(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCreatedBy), v))
	})
}

// CreatedByContainsFold applies the ContainsFold predicate on the "created_by" field.
func CreatedByContainsFold(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCreatedBy), v))
	})
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedBy), v))
	})
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedBy), v))
	})
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...string) predicate.Voucher {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Voucher(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedBy), v...))
	})
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...string) predicate.Voucher {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Voucher(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedBy), v...))
	})
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedBy), v))
	})
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedBy), v))
	})
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedBy), v))
	})
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedBy), v))
	})
}

// UpdatedByContains applies the Contains predicate on the "updated_by" field.
func UpdatedByContains(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUpdatedBy), v))
	})
}

// UpdatedByHasPrefix applies the HasPrefix predicate on the "updated_by" field.
func UpdatedByHasPrefix(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUpdatedBy), v))
	})
}

// UpdatedByHasSuffix applies the HasSuffix predicate on the "updated_by" field.
func UpdatedByHasSuffix(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUpdatedBy), v))
	})
}

// UpdatedByEqualFold applies the EqualFold predicate on the "updated_by" field.
func UpdatedByEqualFold(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUpdatedBy), v))
	})
}

// UpdatedByContainsFold applies the ContainsFold predicate on the "updated_by" field.
func UpdatedByContainsFold(v string) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUpdatedBy), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Voucher) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Voucher) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Voucher) predicate.Voucher {
	return predicate.Voucher(func(s *sql.Selector) {
		p(s.Not())
	})
}
