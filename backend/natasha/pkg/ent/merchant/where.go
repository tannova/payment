// Code generated by entc, DO NOT EDIT.

package merchant

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"gitlab.com/mcuc/monorepo/backend/natasha/pkg/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// EmailContact applies equality check predicate on the "email_contact" field. It's identical to EmailContactEQ.
func EmailContact(v string) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEmailContact), v))
	})
}

// LogoPath applies equality check predicate on the "logo_path" field. It's identical to LogoPathEQ.
func LogoPath(v string) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLogoPath), v))
	})
}

// WebhookURL applies equality check predicate on the "webhook_url" field. It's identical to WebhookURLEQ.
func WebhookURL(v string) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWebhookURL), v))
	})
}

// SlackWebhookURL applies equality check predicate on the "slack_webhook_url" field. It's identical to SlackWebhookURLEQ.
func SlackWebhookURL(v string) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSlackWebhookURL), v))
	})
}

// SafetyLimit applies equality check predicate on the "safety_limit" field. It's identical to SafetyLimitEQ.
func SafetyLimit(v uint64) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSafetyLimit), v))
	})
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v string) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedBy), v))
	})
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v string) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedBy), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Merchant {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Merchant(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Merchant {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Merchant(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// EmailContactEQ applies the EQ predicate on the "email_contact" field.
func EmailContactEQ(v string) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEmailContact), v))
	})
}

// EmailContactNEQ applies the NEQ predicate on the "email_contact" field.
func EmailContactNEQ(v string) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEmailContact), v))
	})
}

// EmailContactIn applies the In predicate on the "email_contact" field.
func EmailContactIn(vs ...string) predicate.Merchant {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Merchant(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEmailContact), v...))
	})
}

// EmailContactNotIn applies the NotIn predicate on the "email_contact" field.
func EmailContactNotIn(vs ...string) predicate.Merchant {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Merchant(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEmailContact), v...))
	})
}

// EmailContactGT applies the GT predicate on the "email_contact" field.
func EmailContactGT(v string) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEmailContact), v))
	})
}

// EmailContactGTE applies the GTE predicate on the "email_contact" field.
func EmailContactGTE(v string) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEmailContact), v))
	})
}

// EmailContactLT applies the LT predicate on the "email_contact" field.
func EmailContactLT(v string) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEmailContact), v))
	})
}

// EmailContactLTE applies the LTE predicate on the "email_contact" field.
func EmailContactLTE(v string) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEmailContact), v))
	})
}

// EmailContactContains applies the Contains predicate on the "email_contact" field.
func EmailContactContains(v string) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldEmailContact), v))
	})
}

// EmailContactHasPrefix applies the HasPrefix predicate on the "email_contact" field.
func EmailContactHasPrefix(v string) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldEmailContact), v))
	})
}

// EmailContactHasSuffix applies the HasSuffix predicate on the "email_contact" field.
func EmailContactHasSuffix(v string) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldEmailContact), v))
	})
}

// EmailContactEqualFold applies the EqualFold predicate on the "email_contact" field.
func EmailContactEqualFold(v string) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldEmailContact), v))
	})
}

// EmailContactContainsFold applies the ContainsFold predicate on the "email_contact" field.
func EmailContactContainsFold(v string) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldEmailContact), v))
	})
}

// LogoPathEQ applies the EQ predicate on the "logo_path" field.
func LogoPathEQ(v string) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLogoPath), v))
	})
}

// LogoPathNEQ applies the NEQ predicate on the "logo_path" field.
func LogoPathNEQ(v string) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLogoPath), v))
	})
}

// LogoPathIn applies the In predicate on the "logo_path" field.
func LogoPathIn(vs ...string) predicate.Merchant {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Merchant(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLogoPath), v...))
	})
}

// LogoPathNotIn applies the NotIn predicate on the "logo_path" field.
func LogoPathNotIn(vs ...string) predicate.Merchant {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Merchant(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLogoPath), v...))
	})
}

// LogoPathGT applies the GT predicate on the "logo_path" field.
func LogoPathGT(v string) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLogoPath), v))
	})
}

// LogoPathGTE applies the GTE predicate on the "logo_path" field.
func LogoPathGTE(v string) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLogoPath), v))
	})
}

// LogoPathLT applies the LT predicate on the "logo_path" field.
func LogoPathLT(v string) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLogoPath), v))
	})
}

// LogoPathLTE applies the LTE predicate on the "logo_path" field.
func LogoPathLTE(v string) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLogoPath), v))
	})
}

// LogoPathContains applies the Contains predicate on the "logo_path" field.
func LogoPathContains(v string) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLogoPath), v))
	})
}

// LogoPathHasPrefix applies the HasPrefix predicate on the "logo_path" field.
func LogoPathHasPrefix(v string) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLogoPath), v))
	})
}

// LogoPathHasSuffix applies the HasSuffix predicate on the "logo_path" field.
func LogoPathHasSuffix(v string) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLogoPath), v))
	})
}

// LogoPathEqualFold applies the EqualFold predicate on the "logo_path" field.
func LogoPathEqualFold(v string) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLogoPath), v))
	})
}

// LogoPathContainsFold applies the ContainsFold predicate on the "logo_path" field.
func LogoPathContainsFold(v string) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLogoPath), v))
	})
}

// WebhookURLEQ applies the EQ predicate on the "webhook_url" field.
func WebhookURLEQ(v string) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWebhookURL), v))
	})
}

// WebhookURLNEQ applies the NEQ predicate on the "webhook_url" field.
func WebhookURLNEQ(v string) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldWebhookURL), v))
	})
}

// WebhookURLIn applies the In predicate on the "webhook_url" field.
func WebhookURLIn(vs ...string) predicate.Merchant {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Merchant(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldWebhookURL), v...))
	})
}

// WebhookURLNotIn applies the NotIn predicate on the "webhook_url" field.
func WebhookURLNotIn(vs ...string) predicate.Merchant {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Merchant(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldWebhookURL), v...))
	})
}

// WebhookURLGT applies the GT predicate on the "webhook_url" field.
func WebhookURLGT(v string) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldWebhookURL), v))
	})
}

// WebhookURLGTE applies the GTE predicate on the "webhook_url" field.
func WebhookURLGTE(v string) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldWebhookURL), v))
	})
}

// WebhookURLLT applies the LT predicate on the "webhook_url" field.
func WebhookURLLT(v string) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldWebhookURL), v))
	})
}

// WebhookURLLTE applies the LTE predicate on the "webhook_url" field.
func WebhookURLLTE(v string) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldWebhookURL), v))
	})
}

// WebhookURLContains applies the Contains predicate on the "webhook_url" field.
func WebhookURLContains(v string) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldWebhookURL), v))
	})
}

// WebhookURLHasPrefix applies the HasPrefix predicate on the "webhook_url" field.
func WebhookURLHasPrefix(v string) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldWebhookURL), v))
	})
}

// WebhookURLHasSuffix applies the HasSuffix predicate on the "webhook_url" field.
func WebhookURLHasSuffix(v string) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldWebhookURL), v))
	})
}

// WebhookURLEqualFold applies the EqualFold predicate on the "webhook_url" field.
func WebhookURLEqualFold(v string) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldWebhookURL), v))
	})
}

// WebhookURLContainsFold applies the ContainsFold predicate on the "webhook_url" field.
func WebhookURLContainsFold(v string) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldWebhookURL), v))
	})
}

// SlackWebhookURLEQ applies the EQ predicate on the "slack_webhook_url" field.
func SlackWebhookURLEQ(v string) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSlackWebhookURL), v))
	})
}

// SlackWebhookURLNEQ applies the NEQ predicate on the "slack_webhook_url" field.
func SlackWebhookURLNEQ(v string) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSlackWebhookURL), v))
	})
}

// SlackWebhookURLIn applies the In predicate on the "slack_webhook_url" field.
func SlackWebhookURLIn(vs ...string) predicate.Merchant {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Merchant(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSlackWebhookURL), v...))
	})
}

// SlackWebhookURLNotIn applies the NotIn predicate on the "slack_webhook_url" field.
func SlackWebhookURLNotIn(vs ...string) predicate.Merchant {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Merchant(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSlackWebhookURL), v...))
	})
}

// SlackWebhookURLGT applies the GT predicate on the "slack_webhook_url" field.
func SlackWebhookURLGT(v string) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSlackWebhookURL), v))
	})
}

// SlackWebhookURLGTE applies the GTE predicate on the "slack_webhook_url" field.
func SlackWebhookURLGTE(v string) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSlackWebhookURL), v))
	})
}

// SlackWebhookURLLT applies the LT predicate on the "slack_webhook_url" field.
func SlackWebhookURLLT(v string) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSlackWebhookURL), v))
	})
}

// SlackWebhookURLLTE applies the LTE predicate on the "slack_webhook_url" field.
func SlackWebhookURLLTE(v string) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSlackWebhookURL), v))
	})
}

// SlackWebhookURLContains applies the Contains predicate on the "slack_webhook_url" field.
func SlackWebhookURLContains(v string) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSlackWebhookURL), v))
	})
}

// SlackWebhookURLHasPrefix applies the HasPrefix predicate on the "slack_webhook_url" field.
func SlackWebhookURLHasPrefix(v string) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSlackWebhookURL), v))
	})
}

// SlackWebhookURLHasSuffix applies the HasSuffix predicate on the "slack_webhook_url" field.
func SlackWebhookURLHasSuffix(v string) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSlackWebhookURL), v))
	})
}

// SlackWebhookURLEqualFold applies the EqualFold predicate on the "slack_webhook_url" field.
func SlackWebhookURLEqualFold(v string) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSlackWebhookURL), v))
	})
}

// SlackWebhookURLContainsFold applies the ContainsFold predicate on the "slack_webhook_url" field.
func SlackWebhookURLContainsFold(v string) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSlackWebhookURL), v))
	})
}

// SafetyLimitEQ applies the EQ predicate on the "safety_limit" field.
func SafetyLimitEQ(v uint64) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSafetyLimit), v))
	})
}

// SafetyLimitNEQ applies the NEQ predicate on the "safety_limit" field.
func SafetyLimitNEQ(v uint64) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSafetyLimit), v))
	})
}

// SafetyLimitIn applies the In predicate on the "safety_limit" field.
func SafetyLimitIn(vs ...uint64) predicate.Merchant {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Merchant(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSafetyLimit), v...))
	})
}

// SafetyLimitNotIn applies the NotIn predicate on the "safety_limit" field.
func SafetyLimitNotIn(vs ...uint64) predicate.Merchant {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Merchant(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSafetyLimit), v...))
	})
}

// SafetyLimitGT applies the GT predicate on the "safety_limit" field.
func SafetyLimitGT(v uint64) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSafetyLimit), v))
	})
}

// SafetyLimitGTE applies the GTE predicate on the "safety_limit" field.
func SafetyLimitGTE(v uint64) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSafetyLimit), v))
	})
}

// SafetyLimitLT applies the LT predicate on the "safety_limit" field.
func SafetyLimitLT(v uint64) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSafetyLimit), v))
	})
}

// SafetyLimitLTE applies the LTE predicate on the "safety_limit" field.
func SafetyLimitLTE(v uint64) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSafetyLimit), v))
	})
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v string) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedBy), v))
	})
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v string) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedBy), v))
	})
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...string) predicate.Merchant {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Merchant(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedBy), v...))
	})
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...string) predicate.Merchant {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Merchant(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedBy), v...))
	})
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v string) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedBy), v))
	})
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v string) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedBy), v))
	})
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v string) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedBy), v))
	})
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v string) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedBy), v))
	})
}

// CreatedByContains applies the Contains predicate on the "created_by" field.
func CreatedByContains(v string) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCreatedBy), v))
	})
}

// CreatedByHasPrefix applies the HasPrefix predicate on the "created_by" field.
func CreatedByHasPrefix(v string) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCreatedBy), v))
	})
}

// CreatedByHasSuffix applies the HasSuffix predicate on the "created_by" field.
func CreatedByHasSuffix(v string) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCreatedBy), v))
	})
}

// CreatedByEqualFold applies the EqualFold predicate on the "created_by" field.
func CreatedByEqualFold(v string) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCreatedBy), v))
	})
}

// CreatedByContainsFold applies the ContainsFold predicate on the "created_by" field.
func CreatedByContainsFold(v string) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCreatedBy), v))
	})
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v string) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedBy), v))
	})
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v string) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedBy), v))
	})
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...string) predicate.Merchant {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Merchant(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedBy), v...))
	})
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...string) predicate.Merchant {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Merchant(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedBy), v...))
	})
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v string) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedBy), v))
	})
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v string) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedBy), v))
	})
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v string) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedBy), v))
	})
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v string) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedBy), v))
	})
}

// UpdatedByContains applies the Contains predicate on the "updated_by" field.
func UpdatedByContains(v string) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUpdatedBy), v))
	})
}

// UpdatedByHasPrefix applies the HasPrefix predicate on the "updated_by" field.
func UpdatedByHasPrefix(v string) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUpdatedBy), v))
	})
}

// UpdatedByHasSuffix applies the HasSuffix predicate on the "updated_by" field.
func UpdatedByHasSuffix(v string) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUpdatedBy), v))
	})
}

// UpdatedByEqualFold applies the EqualFold predicate on the "updated_by" field.
func UpdatedByEqualFold(v string) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUpdatedBy), v))
	})
}

// UpdatedByContainsFold applies the ContainsFold predicate on the "updated_by" field.
func UpdatedByContainsFold(v string) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUpdatedBy), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Merchant {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Merchant(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Merchant {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Merchant(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Merchant {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Merchant(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Merchant {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Merchant(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Merchant) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Merchant) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Merchant) predicate.Merchant {
	return predicate.Merchant(func(s *sql.Selector) {
		p(s.Not())
	})
}
