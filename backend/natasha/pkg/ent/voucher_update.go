// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"gitlab.com/mcuc/monorepo/backend/natasha/pkg/ent/predicate"
	"gitlab.com/mcuc/monorepo/backend/natasha/pkg/ent/voucher"
)

// VoucherUpdate is the builder for updating Voucher entities.
type VoucherUpdate struct {
	config
	hooks    []Hook
	mutation *VoucherMutation
}

// Where adds a new predicate for the VoucherUpdate builder.
func (vu *VoucherUpdate) Where(ps ...predicate.Voucher) *VoucherUpdate {
	vu.mutation.predicates = append(vu.mutation.predicates, ps...)
	return vu
}

// SetMerchantID sets the "merchant_id" field.
func (vu *VoucherUpdate) SetMerchantID(i int64) *VoucherUpdate {
	vu.mutation.ResetMerchantID()
	vu.mutation.SetMerchantID(i)
	return vu
}

// SetNillableMerchantID sets the "merchant_id" field if the given value is not nil.
func (vu *VoucherUpdate) SetNillableMerchantID(i *int64) *VoucherUpdate {
	if i != nil {
		vu.SetMerchantID(*i)
	}
	return vu
}

// AddMerchantID adds i to the "merchant_id" field.
func (vu *VoucherUpdate) AddMerchantID(i int64) *VoucherUpdate {
	vu.mutation.AddMerchantID(i)
	return vu
}

// SetPaymentID sets the "payment_id" field.
func (vu *VoucherUpdate) SetPaymentID(i int64) *VoucherUpdate {
	vu.mutation.ResetPaymentID()
	vu.mutation.SetPaymentID(i)
	return vu
}

// SetNillablePaymentID sets the "payment_id" field if the given value is not nil.
func (vu *VoucherUpdate) SetNillablePaymentID(i *int64) *VoucherUpdate {
	if i != nil {
		vu.SetPaymentID(*i)
	}
	return vu
}

// AddPaymentID adds i to the "payment_id" field.
func (vu *VoucherUpdate) AddPaymentID(i int64) *VoucherUpdate {
	vu.mutation.AddPaymentID(i)
	return vu
}

// ClearPaymentID clears the value of the "payment_id" field.
func (vu *VoucherUpdate) ClearPaymentID() *VoucherUpdate {
	vu.mutation.ClearPaymentID()
	return vu
}

// SetAmount sets the "amount" field.
func (vu *VoucherUpdate) SetAmount(i int64) *VoucherUpdate {
	vu.mutation.ResetAmount()
	vu.mutation.SetAmount(i)
	return vu
}

// AddAmount adds i to the "amount" field.
func (vu *VoucherUpdate) AddAmount(i int64) *VoucherUpdate {
	vu.mutation.AddAmount(i)
	return vu
}

// SetType sets the "type" field.
func (vu *VoucherUpdate) SetType(i int32) *VoucherUpdate {
	vu.mutation.ResetType()
	vu.mutation.SetType(i)
	return vu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (vu *VoucherUpdate) SetNillableType(i *int32) *VoucherUpdate {
	if i != nil {
		vu.SetType(*i)
	}
	return vu
}

// AddType adds i to the "type" field.
func (vu *VoucherUpdate) AddType(i int32) *VoucherUpdate {
	vu.mutation.AddType(i)
	return vu
}

// SetStatus sets the "status" field.
func (vu *VoucherUpdate) SetStatus(i int32) *VoucherUpdate {
	vu.mutation.ResetStatus()
	vu.mutation.SetStatus(i)
	return vu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (vu *VoucherUpdate) SetNillableStatus(i *int32) *VoucherUpdate {
	if i != nil {
		vu.SetStatus(*i)
	}
	return vu
}

// AddStatus adds i to the "status" field.
func (vu *VoucherUpdate) AddStatus(i int32) *VoucherUpdate {
	vu.mutation.AddStatus(i)
	return vu
}

// ClearStatus clears the value of the "status" field.
func (vu *VoucherUpdate) ClearStatus() *VoucherUpdate {
	vu.mutation.ClearStatus()
	return vu
}

// SetPayeeProvider sets the "payee_provider" field.
func (vu *VoucherUpdate) SetPayeeProvider(i int32) *VoucherUpdate {
	vu.mutation.ResetPayeeProvider()
	vu.mutation.SetPayeeProvider(i)
	return vu
}

// SetNillablePayeeProvider sets the "payee_provider" field if the given value is not nil.
func (vu *VoucherUpdate) SetNillablePayeeProvider(i *int32) *VoucherUpdate {
	if i != nil {
		vu.SetPayeeProvider(*i)
	}
	return vu
}

// AddPayeeProvider adds i to the "payee_provider" field.
func (vu *VoucherUpdate) AddPayeeProvider(i int32) *VoucherUpdate {
	vu.mutation.AddPayeeProvider(i)
	return vu
}

// ClearPayeeProvider clears the value of the "payee_provider" field.
func (vu *VoucherUpdate) ClearPayeeProvider() *VoucherUpdate {
	vu.mutation.ClearPayeeProvider()
	return vu
}

// SetPayeeAccount sets the "payee_account" field.
func (vu *VoucherUpdate) SetPayeeAccount(s string) *VoucherUpdate {
	vu.mutation.SetPayeeAccount(s)
	return vu
}

// SetNillablePayeeAccount sets the "payee_account" field if the given value is not nil.
func (vu *VoucherUpdate) SetNillablePayeeAccount(s *string) *VoucherUpdate {
	if s != nil {
		vu.SetPayeeAccount(*s)
	}
	return vu
}

// ClearPayeeAccount clears the value of the "payee_account" field.
func (vu *VoucherUpdate) ClearPayeeAccount() *VoucherUpdate {
	vu.mutation.ClearPayeeAccount()
	return vu
}

// SetPayeeName sets the "payee_name" field.
func (vu *VoucherUpdate) SetPayeeName(s string) *VoucherUpdate {
	vu.mutation.SetPayeeName(s)
	return vu
}

// SetNillablePayeeName sets the "payee_name" field if the given value is not nil.
func (vu *VoucherUpdate) SetNillablePayeeName(s *string) *VoucherUpdate {
	if s != nil {
		vu.SetPayeeName(*s)
	}
	return vu
}

// ClearPayeeName clears the value of the "payee_name" field.
func (vu *VoucherUpdate) ClearPayeeName() *VoucherUpdate {
	vu.mutation.ClearPayeeName()
	return vu
}

// SetPayerProvider sets the "payer_provider" field.
func (vu *VoucherUpdate) SetPayerProvider(i int32) *VoucherUpdate {
	vu.mutation.ResetPayerProvider()
	vu.mutation.SetPayerProvider(i)
	return vu
}

// SetNillablePayerProvider sets the "payer_provider" field if the given value is not nil.
func (vu *VoucherUpdate) SetNillablePayerProvider(i *int32) *VoucherUpdate {
	if i != nil {
		vu.SetPayerProvider(*i)
	}
	return vu
}

// AddPayerProvider adds i to the "payer_provider" field.
func (vu *VoucherUpdate) AddPayerProvider(i int32) *VoucherUpdate {
	vu.mutation.AddPayerProvider(i)
	return vu
}

// ClearPayerProvider clears the value of the "payer_provider" field.
func (vu *VoucherUpdate) ClearPayerProvider() *VoucherUpdate {
	vu.mutation.ClearPayerProvider()
	return vu
}

// SetPayerAccount sets the "payer_account" field.
func (vu *VoucherUpdate) SetPayerAccount(s string) *VoucherUpdate {
	vu.mutation.SetPayerAccount(s)
	return vu
}

// SetNillablePayerAccount sets the "payer_account" field if the given value is not nil.
func (vu *VoucherUpdate) SetNillablePayerAccount(s *string) *VoucherUpdate {
	if s != nil {
		vu.SetPayerAccount(*s)
	}
	return vu
}

// ClearPayerAccount clears the value of the "payer_account" field.
func (vu *VoucherUpdate) ClearPayerAccount() *VoucherUpdate {
	vu.mutation.ClearPayerAccount()
	return vu
}

// SetPayerName sets the "payer_name" field.
func (vu *VoucherUpdate) SetPayerName(s string) *VoucherUpdate {
	vu.mutation.SetPayerName(s)
	return vu
}

// SetNillablePayerName sets the "payer_name" field if the given value is not nil.
func (vu *VoucherUpdate) SetNillablePayerName(s *string) *VoucherUpdate {
	if s != nil {
		vu.SetPayerName(*s)
	}
	return vu
}

// ClearPayerName clears the value of the "payer_name" field.
func (vu *VoucherUpdate) ClearPayerName() *VoucherUpdate {
	vu.mutation.ClearPayerName()
	return vu
}

// SetTxID sets the "tx_id" field.
func (vu *VoucherUpdate) SetTxID(s string) *VoucherUpdate {
	vu.mutation.SetTxID(s)
	return vu
}

// SetNillableTxID sets the "tx_id" field if the given value is not nil.
func (vu *VoucherUpdate) SetNillableTxID(s *string) *VoucherUpdate {
	if s != nil {
		vu.SetTxID(*s)
	}
	return vu
}

// ClearTxID clears the value of the "tx_id" field.
func (vu *VoucherUpdate) ClearTxID() *VoucherUpdate {
	vu.mutation.ClearTxID()
	return vu
}

// SetImageURL sets the "image_url" field.
func (vu *VoucherUpdate) SetImageURL(s string) *VoucherUpdate {
	vu.mutation.SetImageURL(s)
	return vu
}

// SetNillableImageURL sets the "image_url" field if the given value is not nil.
func (vu *VoucherUpdate) SetNillableImageURL(s *string) *VoucherUpdate {
	if s != nil {
		vu.SetImageURL(*s)
	}
	return vu
}

// ClearImageURL clears the value of the "image_url" field.
func (vu *VoucherUpdate) ClearImageURL() *VoucherUpdate {
	vu.mutation.ClearImageURL()
	return vu
}

// SetCreatorNote sets the "creator_note" field.
func (vu *VoucherUpdate) SetCreatorNote(s string) *VoucherUpdate {
	vu.mutation.SetCreatorNote(s)
	return vu
}

// SetNillableCreatorNote sets the "creator_note" field if the given value is not nil.
func (vu *VoucherUpdate) SetNillableCreatorNote(s *string) *VoucherUpdate {
	if s != nil {
		vu.SetCreatorNote(*s)
	}
	return vu
}

// ClearCreatorNote clears the value of the "creator_note" field.
func (vu *VoucherUpdate) ClearCreatorNote() *VoucherUpdate {
	vu.mutation.ClearCreatorNote()
	return vu
}

// SetHandledBy sets the "handled_by" field.
func (vu *VoucherUpdate) SetHandledBy(s string) *VoucherUpdate {
	vu.mutation.SetHandledBy(s)
	return vu
}

// SetNillableHandledBy sets the "handled_by" field if the given value is not nil.
func (vu *VoucherUpdate) SetNillableHandledBy(s *string) *VoucherUpdate {
	if s != nil {
		vu.SetHandledBy(*s)
	}
	return vu
}

// ClearHandledBy clears the value of the "handled_by" field.
func (vu *VoucherUpdate) ClearHandledBy() *VoucherUpdate {
	vu.mutation.ClearHandledBy()
	return vu
}

// SetHandlerNote sets the "handler_note" field.
func (vu *VoucherUpdate) SetHandlerNote(s string) *VoucherUpdate {
	vu.mutation.SetHandlerNote(s)
	return vu
}

// SetNillableHandlerNote sets the "handler_note" field if the given value is not nil.
func (vu *VoucherUpdate) SetNillableHandlerNote(s *string) *VoucherUpdate {
	if s != nil {
		vu.SetHandlerNote(*s)
	}
	return vu
}

// ClearHandlerNote clears the value of the "handler_note" field.
func (vu *VoucherUpdate) ClearHandlerNote() *VoucherUpdate {
	vu.mutation.ClearHandlerNote()
	return vu
}

// SetCreatedAt sets the "created_at" field.
func (vu *VoucherUpdate) SetCreatedAt(t time.Time) *VoucherUpdate {
	vu.mutation.SetCreatedAt(t)
	return vu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (vu *VoucherUpdate) SetNillableCreatedAt(t *time.Time) *VoucherUpdate {
	if t != nil {
		vu.SetCreatedAt(*t)
	}
	return vu
}

// SetUpdatedAt sets the "updated_at" field.
func (vu *VoucherUpdate) SetUpdatedAt(t time.Time) *VoucherUpdate {
	vu.mutation.SetUpdatedAt(t)
	return vu
}

// SetCreatedBy sets the "created_by" field.
func (vu *VoucherUpdate) SetCreatedBy(s string) *VoucherUpdate {
	vu.mutation.SetCreatedBy(s)
	return vu
}

// SetUpdatedBy sets the "updated_by" field.
func (vu *VoucherUpdate) SetUpdatedBy(s string) *VoucherUpdate {
	vu.mutation.SetUpdatedBy(s)
	return vu
}

// Mutation returns the VoucherMutation object of the builder.
func (vu *VoucherUpdate) Mutation() *VoucherMutation {
	return vu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vu *VoucherUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	vu.defaults()
	if len(vu.hooks) == 0 {
		if err = vu.check(); err != nil {
			return 0, err
		}
		affected, err = vu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*VoucherMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = vu.check(); err != nil {
				return 0, err
			}
			vu.mutation = mutation
			affected, err = vu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(vu.hooks) - 1; i >= 0; i-- {
			mut = vu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, vu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (vu *VoucherUpdate) SaveX(ctx context.Context) int {
	affected, err := vu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vu *VoucherUpdate) Exec(ctx context.Context) error {
	_, err := vu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vu *VoucherUpdate) ExecX(ctx context.Context) {
	if err := vu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vu *VoucherUpdate) defaults() {
	if _, ok := vu.mutation.UpdatedAt(); !ok {
		v := voucher.UpdateDefaultUpdatedAt()
		vu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vu *VoucherUpdate) check() error {
	if v, ok := vu.mutation.MerchantID(); ok {
		if err := voucher.MerchantIDValidator(v); err != nil {
			return &ValidationError{Name: "merchant_id", err: fmt.Errorf("ent: validator failed for field \"merchant_id\": %w", err)}
		}
	}
	if v, ok := vu.mutation.PaymentID(); ok {
		if err := voucher.PaymentIDValidator(v); err != nil {
			return &ValidationError{Name: "payment_id", err: fmt.Errorf("ent: validator failed for field \"payment_id\": %w", err)}
		}
	}
	if v, ok := vu.mutation.GetType(); ok {
		if err := voucher.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf("ent: validator failed for field \"type\": %w", err)}
		}
	}
	if v, ok := vu.mutation.Status(); ok {
		if err := voucher.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf("ent: validator failed for field \"status\": %w", err)}
		}
	}
	if v, ok := vu.mutation.PayeeProvider(); ok {
		if err := voucher.PayeeProviderValidator(v); err != nil {
			return &ValidationError{Name: "payee_provider", err: fmt.Errorf("ent: validator failed for field \"payee_provider\": %w", err)}
		}
	}
	if v, ok := vu.mutation.PayerProvider(); ok {
		if err := voucher.PayerProviderValidator(v); err != nil {
			return &ValidationError{Name: "payer_provider", err: fmt.Errorf("ent: validator failed for field \"payer_provider\": %w", err)}
		}
	}
	if v, ok := vu.mutation.CreatedBy(); ok {
		if err := voucher.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf("ent: validator failed for field \"created_by\": %w", err)}
		}
	}
	if v, ok := vu.mutation.UpdatedBy(); ok {
		if err := voucher.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf("ent: validator failed for field \"updated_by\": %w", err)}
		}
	}
	return nil
}

func (vu *VoucherUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   voucher.Table,
			Columns: voucher.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: voucher.FieldID,
			},
		},
	}
	if ps := vu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vu.mutation.MerchantID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: voucher.FieldMerchantID,
		})
	}
	if value, ok := vu.mutation.AddedMerchantID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: voucher.FieldMerchantID,
		})
	}
	if value, ok := vu.mutation.PaymentID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: voucher.FieldPaymentID,
		})
	}
	if value, ok := vu.mutation.AddedPaymentID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: voucher.FieldPaymentID,
		})
	}
	if vu.mutation.PaymentIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: voucher.FieldPaymentID,
		})
	}
	if value, ok := vu.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: voucher.FieldAmount,
		})
	}
	if value, ok := vu.mutation.AddedAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: voucher.FieldAmount,
		})
	}
	if value, ok := vu.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: voucher.FieldType,
		})
	}
	if value, ok := vu.mutation.AddedType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: voucher.FieldType,
		})
	}
	if value, ok := vu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: voucher.FieldStatus,
		})
	}
	if value, ok := vu.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: voucher.FieldStatus,
		})
	}
	if vu.mutation.StatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: voucher.FieldStatus,
		})
	}
	if value, ok := vu.mutation.PayeeProvider(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: voucher.FieldPayeeProvider,
		})
	}
	if value, ok := vu.mutation.AddedPayeeProvider(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: voucher.FieldPayeeProvider,
		})
	}
	if vu.mutation.PayeeProviderCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: voucher.FieldPayeeProvider,
		})
	}
	if value, ok := vu.mutation.PayeeAccount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: voucher.FieldPayeeAccount,
		})
	}
	if vu.mutation.PayeeAccountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: voucher.FieldPayeeAccount,
		})
	}
	if value, ok := vu.mutation.PayeeName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: voucher.FieldPayeeName,
		})
	}
	if vu.mutation.PayeeNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: voucher.FieldPayeeName,
		})
	}
	if value, ok := vu.mutation.PayerProvider(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: voucher.FieldPayerProvider,
		})
	}
	if value, ok := vu.mutation.AddedPayerProvider(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: voucher.FieldPayerProvider,
		})
	}
	if vu.mutation.PayerProviderCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: voucher.FieldPayerProvider,
		})
	}
	if value, ok := vu.mutation.PayerAccount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: voucher.FieldPayerAccount,
		})
	}
	if vu.mutation.PayerAccountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: voucher.FieldPayerAccount,
		})
	}
	if value, ok := vu.mutation.PayerName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: voucher.FieldPayerName,
		})
	}
	if vu.mutation.PayerNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: voucher.FieldPayerName,
		})
	}
	if value, ok := vu.mutation.TxID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: voucher.FieldTxID,
		})
	}
	if vu.mutation.TxIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: voucher.FieldTxID,
		})
	}
	if value, ok := vu.mutation.ImageURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: voucher.FieldImageURL,
		})
	}
	if vu.mutation.ImageURLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: voucher.FieldImageURL,
		})
	}
	if value, ok := vu.mutation.CreatorNote(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: voucher.FieldCreatorNote,
		})
	}
	if vu.mutation.CreatorNoteCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: voucher.FieldCreatorNote,
		})
	}
	if value, ok := vu.mutation.HandledBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: voucher.FieldHandledBy,
		})
	}
	if vu.mutation.HandledByCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: voucher.FieldHandledBy,
		})
	}
	if value, ok := vu.mutation.HandlerNote(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: voucher.FieldHandlerNote,
		})
	}
	if vu.mutation.HandlerNoteCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: voucher.FieldHandlerNote,
		})
	}
	if value, ok := vu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: voucher.FieldCreatedAt,
		})
	}
	if value, ok := vu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: voucher.FieldUpdatedAt,
		})
	}
	if value, ok := vu.mutation.CreatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: voucher.FieldCreatedBy,
		})
	}
	if value, ok := vu.mutation.UpdatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: voucher.FieldUpdatedBy,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, vu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{voucher.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// VoucherUpdateOne is the builder for updating a single Voucher entity.
type VoucherUpdateOne struct {
	config
	hooks    []Hook
	mutation *VoucherMutation
}

// SetMerchantID sets the "merchant_id" field.
func (vuo *VoucherUpdateOne) SetMerchantID(i int64) *VoucherUpdateOne {
	vuo.mutation.ResetMerchantID()
	vuo.mutation.SetMerchantID(i)
	return vuo
}

// SetNillableMerchantID sets the "merchant_id" field if the given value is not nil.
func (vuo *VoucherUpdateOne) SetNillableMerchantID(i *int64) *VoucherUpdateOne {
	if i != nil {
		vuo.SetMerchantID(*i)
	}
	return vuo
}

// AddMerchantID adds i to the "merchant_id" field.
func (vuo *VoucherUpdateOne) AddMerchantID(i int64) *VoucherUpdateOne {
	vuo.mutation.AddMerchantID(i)
	return vuo
}

// SetPaymentID sets the "payment_id" field.
func (vuo *VoucherUpdateOne) SetPaymentID(i int64) *VoucherUpdateOne {
	vuo.mutation.ResetPaymentID()
	vuo.mutation.SetPaymentID(i)
	return vuo
}

// SetNillablePaymentID sets the "payment_id" field if the given value is not nil.
func (vuo *VoucherUpdateOne) SetNillablePaymentID(i *int64) *VoucherUpdateOne {
	if i != nil {
		vuo.SetPaymentID(*i)
	}
	return vuo
}

// AddPaymentID adds i to the "payment_id" field.
func (vuo *VoucherUpdateOne) AddPaymentID(i int64) *VoucherUpdateOne {
	vuo.mutation.AddPaymentID(i)
	return vuo
}

// ClearPaymentID clears the value of the "payment_id" field.
func (vuo *VoucherUpdateOne) ClearPaymentID() *VoucherUpdateOne {
	vuo.mutation.ClearPaymentID()
	return vuo
}

// SetAmount sets the "amount" field.
func (vuo *VoucherUpdateOne) SetAmount(i int64) *VoucherUpdateOne {
	vuo.mutation.ResetAmount()
	vuo.mutation.SetAmount(i)
	return vuo
}

// AddAmount adds i to the "amount" field.
func (vuo *VoucherUpdateOne) AddAmount(i int64) *VoucherUpdateOne {
	vuo.mutation.AddAmount(i)
	return vuo
}

// SetType sets the "type" field.
func (vuo *VoucherUpdateOne) SetType(i int32) *VoucherUpdateOne {
	vuo.mutation.ResetType()
	vuo.mutation.SetType(i)
	return vuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (vuo *VoucherUpdateOne) SetNillableType(i *int32) *VoucherUpdateOne {
	if i != nil {
		vuo.SetType(*i)
	}
	return vuo
}

// AddType adds i to the "type" field.
func (vuo *VoucherUpdateOne) AddType(i int32) *VoucherUpdateOne {
	vuo.mutation.AddType(i)
	return vuo
}

// SetStatus sets the "status" field.
func (vuo *VoucherUpdateOne) SetStatus(i int32) *VoucherUpdateOne {
	vuo.mutation.ResetStatus()
	vuo.mutation.SetStatus(i)
	return vuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (vuo *VoucherUpdateOne) SetNillableStatus(i *int32) *VoucherUpdateOne {
	if i != nil {
		vuo.SetStatus(*i)
	}
	return vuo
}

// AddStatus adds i to the "status" field.
func (vuo *VoucherUpdateOne) AddStatus(i int32) *VoucherUpdateOne {
	vuo.mutation.AddStatus(i)
	return vuo
}

// ClearStatus clears the value of the "status" field.
func (vuo *VoucherUpdateOne) ClearStatus() *VoucherUpdateOne {
	vuo.mutation.ClearStatus()
	return vuo
}

// SetPayeeProvider sets the "payee_provider" field.
func (vuo *VoucherUpdateOne) SetPayeeProvider(i int32) *VoucherUpdateOne {
	vuo.mutation.ResetPayeeProvider()
	vuo.mutation.SetPayeeProvider(i)
	return vuo
}

// SetNillablePayeeProvider sets the "payee_provider" field if the given value is not nil.
func (vuo *VoucherUpdateOne) SetNillablePayeeProvider(i *int32) *VoucherUpdateOne {
	if i != nil {
		vuo.SetPayeeProvider(*i)
	}
	return vuo
}

// AddPayeeProvider adds i to the "payee_provider" field.
func (vuo *VoucherUpdateOne) AddPayeeProvider(i int32) *VoucherUpdateOne {
	vuo.mutation.AddPayeeProvider(i)
	return vuo
}

// ClearPayeeProvider clears the value of the "payee_provider" field.
func (vuo *VoucherUpdateOne) ClearPayeeProvider() *VoucherUpdateOne {
	vuo.mutation.ClearPayeeProvider()
	return vuo
}

// SetPayeeAccount sets the "payee_account" field.
func (vuo *VoucherUpdateOne) SetPayeeAccount(s string) *VoucherUpdateOne {
	vuo.mutation.SetPayeeAccount(s)
	return vuo
}

// SetNillablePayeeAccount sets the "payee_account" field if the given value is not nil.
func (vuo *VoucherUpdateOne) SetNillablePayeeAccount(s *string) *VoucherUpdateOne {
	if s != nil {
		vuo.SetPayeeAccount(*s)
	}
	return vuo
}

// ClearPayeeAccount clears the value of the "payee_account" field.
func (vuo *VoucherUpdateOne) ClearPayeeAccount() *VoucherUpdateOne {
	vuo.mutation.ClearPayeeAccount()
	return vuo
}

// SetPayeeName sets the "payee_name" field.
func (vuo *VoucherUpdateOne) SetPayeeName(s string) *VoucherUpdateOne {
	vuo.mutation.SetPayeeName(s)
	return vuo
}

// SetNillablePayeeName sets the "payee_name" field if the given value is not nil.
func (vuo *VoucherUpdateOne) SetNillablePayeeName(s *string) *VoucherUpdateOne {
	if s != nil {
		vuo.SetPayeeName(*s)
	}
	return vuo
}

// ClearPayeeName clears the value of the "payee_name" field.
func (vuo *VoucherUpdateOne) ClearPayeeName() *VoucherUpdateOne {
	vuo.mutation.ClearPayeeName()
	return vuo
}

// SetPayerProvider sets the "payer_provider" field.
func (vuo *VoucherUpdateOne) SetPayerProvider(i int32) *VoucherUpdateOne {
	vuo.mutation.ResetPayerProvider()
	vuo.mutation.SetPayerProvider(i)
	return vuo
}

// SetNillablePayerProvider sets the "payer_provider" field if the given value is not nil.
func (vuo *VoucherUpdateOne) SetNillablePayerProvider(i *int32) *VoucherUpdateOne {
	if i != nil {
		vuo.SetPayerProvider(*i)
	}
	return vuo
}

// AddPayerProvider adds i to the "payer_provider" field.
func (vuo *VoucherUpdateOne) AddPayerProvider(i int32) *VoucherUpdateOne {
	vuo.mutation.AddPayerProvider(i)
	return vuo
}

// ClearPayerProvider clears the value of the "payer_provider" field.
func (vuo *VoucherUpdateOne) ClearPayerProvider() *VoucherUpdateOne {
	vuo.mutation.ClearPayerProvider()
	return vuo
}

// SetPayerAccount sets the "payer_account" field.
func (vuo *VoucherUpdateOne) SetPayerAccount(s string) *VoucherUpdateOne {
	vuo.mutation.SetPayerAccount(s)
	return vuo
}

// SetNillablePayerAccount sets the "payer_account" field if the given value is not nil.
func (vuo *VoucherUpdateOne) SetNillablePayerAccount(s *string) *VoucherUpdateOne {
	if s != nil {
		vuo.SetPayerAccount(*s)
	}
	return vuo
}

// ClearPayerAccount clears the value of the "payer_account" field.
func (vuo *VoucherUpdateOne) ClearPayerAccount() *VoucherUpdateOne {
	vuo.mutation.ClearPayerAccount()
	return vuo
}

// SetPayerName sets the "payer_name" field.
func (vuo *VoucherUpdateOne) SetPayerName(s string) *VoucherUpdateOne {
	vuo.mutation.SetPayerName(s)
	return vuo
}

// SetNillablePayerName sets the "payer_name" field if the given value is not nil.
func (vuo *VoucherUpdateOne) SetNillablePayerName(s *string) *VoucherUpdateOne {
	if s != nil {
		vuo.SetPayerName(*s)
	}
	return vuo
}

// ClearPayerName clears the value of the "payer_name" field.
func (vuo *VoucherUpdateOne) ClearPayerName() *VoucherUpdateOne {
	vuo.mutation.ClearPayerName()
	return vuo
}

// SetTxID sets the "tx_id" field.
func (vuo *VoucherUpdateOne) SetTxID(s string) *VoucherUpdateOne {
	vuo.mutation.SetTxID(s)
	return vuo
}

// SetNillableTxID sets the "tx_id" field if the given value is not nil.
func (vuo *VoucherUpdateOne) SetNillableTxID(s *string) *VoucherUpdateOne {
	if s != nil {
		vuo.SetTxID(*s)
	}
	return vuo
}

// ClearTxID clears the value of the "tx_id" field.
func (vuo *VoucherUpdateOne) ClearTxID() *VoucherUpdateOne {
	vuo.mutation.ClearTxID()
	return vuo
}

// SetImageURL sets the "image_url" field.
func (vuo *VoucherUpdateOne) SetImageURL(s string) *VoucherUpdateOne {
	vuo.mutation.SetImageURL(s)
	return vuo
}

// SetNillableImageURL sets the "image_url" field if the given value is not nil.
func (vuo *VoucherUpdateOne) SetNillableImageURL(s *string) *VoucherUpdateOne {
	if s != nil {
		vuo.SetImageURL(*s)
	}
	return vuo
}

// ClearImageURL clears the value of the "image_url" field.
func (vuo *VoucherUpdateOne) ClearImageURL() *VoucherUpdateOne {
	vuo.mutation.ClearImageURL()
	return vuo
}

// SetCreatorNote sets the "creator_note" field.
func (vuo *VoucherUpdateOne) SetCreatorNote(s string) *VoucherUpdateOne {
	vuo.mutation.SetCreatorNote(s)
	return vuo
}

// SetNillableCreatorNote sets the "creator_note" field if the given value is not nil.
func (vuo *VoucherUpdateOne) SetNillableCreatorNote(s *string) *VoucherUpdateOne {
	if s != nil {
		vuo.SetCreatorNote(*s)
	}
	return vuo
}

// ClearCreatorNote clears the value of the "creator_note" field.
func (vuo *VoucherUpdateOne) ClearCreatorNote() *VoucherUpdateOne {
	vuo.mutation.ClearCreatorNote()
	return vuo
}

// SetHandledBy sets the "handled_by" field.
func (vuo *VoucherUpdateOne) SetHandledBy(s string) *VoucherUpdateOne {
	vuo.mutation.SetHandledBy(s)
	return vuo
}

// SetNillableHandledBy sets the "handled_by" field if the given value is not nil.
func (vuo *VoucherUpdateOne) SetNillableHandledBy(s *string) *VoucherUpdateOne {
	if s != nil {
		vuo.SetHandledBy(*s)
	}
	return vuo
}

// ClearHandledBy clears the value of the "handled_by" field.
func (vuo *VoucherUpdateOne) ClearHandledBy() *VoucherUpdateOne {
	vuo.mutation.ClearHandledBy()
	return vuo
}

// SetHandlerNote sets the "handler_note" field.
func (vuo *VoucherUpdateOne) SetHandlerNote(s string) *VoucherUpdateOne {
	vuo.mutation.SetHandlerNote(s)
	return vuo
}

// SetNillableHandlerNote sets the "handler_note" field if the given value is not nil.
func (vuo *VoucherUpdateOne) SetNillableHandlerNote(s *string) *VoucherUpdateOne {
	if s != nil {
		vuo.SetHandlerNote(*s)
	}
	return vuo
}

// ClearHandlerNote clears the value of the "handler_note" field.
func (vuo *VoucherUpdateOne) ClearHandlerNote() *VoucherUpdateOne {
	vuo.mutation.ClearHandlerNote()
	return vuo
}

// SetCreatedAt sets the "created_at" field.
func (vuo *VoucherUpdateOne) SetCreatedAt(t time.Time) *VoucherUpdateOne {
	vuo.mutation.SetCreatedAt(t)
	return vuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (vuo *VoucherUpdateOne) SetNillableCreatedAt(t *time.Time) *VoucherUpdateOne {
	if t != nil {
		vuo.SetCreatedAt(*t)
	}
	return vuo
}

// SetUpdatedAt sets the "updated_at" field.
func (vuo *VoucherUpdateOne) SetUpdatedAt(t time.Time) *VoucherUpdateOne {
	vuo.mutation.SetUpdatedAt(t)
	return vuo
}

// SetCreatedBy sets the "created_by" field.
func (vuo *VoucherUpdateOne) SetCreatedBy(s string) *VoucherUpdateOne {
	vuo.mutation.SetCreatedBy(s)
	return vuo
}

// SetUpdatedBy sets the "updated_by" field.
func (vuo *VoucherUpdateOne) SetUpdatedBy(s string) *VoucherUpdateOne {
	vuo.mutation.SetUpdatedBy(s)
	return vuo
}

// Mutation returns the VoucherMutation object of the builder.
func (vuo *VoucherUpdateOne) Mutation() *VoucherMutation {
	return vuo.mutation
}

// Save executes the query and returns the updated Voucher entity.
func (vuo *VoucherUpdateOne) Save(ctx context.Context) (*Voucher, error) {
	var (
		err  error
		node *Voucher
	)
	vuo.defaults()
	if len(vuo.hooks) == 0 {
		if err = vuo.check(); err != nil {
			return nil, err
		}
		node, err = vuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*VoucherMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = vuo.check(); err != nil {
				return nil, err
			}
			vuo.mutation = mutation
			node, err = vuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(vuo.hooks) - 1; i >= 0; i-- {
			mut = vuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, vuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (vuo *VoucherUpdateOne) SaveX(ctx context.Context) *Voucher {
	node, err := vuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vuo *VoucherUpdateOne) Exec(ctx context.Context) error {
	_, err := vuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vuo *VoucherUpdateOne) ExecX(ctx context.Context) {
	if err := vuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vuo *VoucherUpdateOne) defaults() {
	if _, ok := vuo.mutation.UpdatedAt(); !ok {
		v := voucher.UpdateDefaultUpdatedAt()
		vuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vuo *VoucherUpdateOne) check() error {
	if v, ok := vuo.mutation.MerchantID(); ok {
		if err := voucher.MerchantIDValidator(v); err != nil {
			return &ValidationError{Name: "merchant_id", err: fmt.Errorf("ent: validator failed for field \"merchant_id\": %w", err)}
		}
	}
	if v, ok := vuo.mutation.PaymentID(); ok {
		if err := voucher.PaymentIDValidator(v); err != nil {
			return &ValidationError{Name: "payment_id", err: fmt.Errorf("ent: validator failed for field \"payment_id\": %w", err)}
		}
	}
	if v, ok := vuo.mutation.GetType(); ok {
		if err := voucher.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf("ent: validator failed for field \"type\": %w", err)}
		}
	}
	if v, ok := vuo.mutation.Status(); ok {
		if err := voucher.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf("ent: validator failed for field \"status\": %w", err)}
		}
	}
	if v, ok := vuo.mutation.PayeeProvider(); ok {
		if err := voucher.PayeeProviderValidator(v); err != nil {
			return &ValidationError{Name: "payee_provider", err: fmt.Errorf("ent: validator failed for field \"payee_provider\": %w", err)}
		}
	}
	if v, ok := vuo.mutation.PayerProvider(); ok {
		if err := voucher.PayerProviderValidator(v); err != nil {
			return &ValidationError{Name: "payer_provider", err: fmt.Errorf("ent: validator failed for field \"payer_provider\": %w", err)}
		}
	}
	if v, ok := vuo.mutation.CreatedBy(); ok {
		if err := voucher.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf("ent: validator failed for field \"created_by\": %w", err)}
		}
	}
	if v, ok := vuo.mutation.UpdatedBy(); ok {
		if err := voucher.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf("ent: validator failed for field \"updated_by\": %w", err)}
		}
	}
	return nil
}

func (vuo *VoucherUpdateOne) sqlSave(ctx context.Context) (_node *Voucher, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   voucher.Table,
			Columns: voucher.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: voucher.FieldID,
			},
		},
	}
	id, ok := vuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Voucher.ID for update")}
	}
	_spec.Node.ID.Value = id
	if ps := vuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vuo.mutation.MerchantID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: voucher.FieldMerchantID,
		})
	}
	if value, ok := vuo.mutation.AddedMerchantID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: voucher.FieldMerchantID,
		})
	}
	if value, ok := vuo.mutation.PaymentID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: voucher.FieldPaymentID,
		})
	}
	if value, ok := vuo.mutation.AddedPaymentID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: voucher.FieldPaymentID,
		})
	}
	if vuo.mutation.PaymentIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: voucher.FieldPaymentID,
		})
	}
	if value, ok := vuo.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: voucher.FieldAmount,
		})
	}
	if value, ok := vuo.mutation.AddedAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: voucher.FieldAmount,
		})
	}
	if value, ok := vuo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: voucher.FieldType,
		})
	}
	if value, ok := vuo.mutation.AddedType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: voucher.FieldType,
		})
	}
	if value, ok := vuo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: voucher.FieldStatus,
		})
	}
	if value, ok := vuo.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: voucher.FieldStatus,
		})
	}
	if vuo.mutation.StatusCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: voucher.FieldStatus,
		})
	}
	if value, ok := vuo.mutation.PayeeProvider(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: voucher.FieldPayeeProvider,
		})
	}
	if value, ok := vuo.mutation.AddedPayeeProvider(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: voucher.FieldPayeeProvider,
		})
	}
	if vuo.mutation.PayeeProviderCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: voucher.FieldPayeeProvider,
		})
	}
	if value, ok := vuo.mutation.PayeeAccount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: voucher.FieldPayeeAccount,
		})
	}
	if vuo.mutation.PayeeAccountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: voucher.FieldPayeeAccount,
		})
	}
	if value, ok := vuo.mutation.PayeeName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: voucher.FieldPayeeName,
		})
	}
	if vuo.mutation.PayeeNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: voucher.FieldPayeeName,
		})
	}
	if value, ok := vuo.mutation.PayerProvider(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: voucher.FieldPayerProvider,
		})
	}
	if value, ok := vuo.mutation.AddedPayerProvider(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: voucher.FieldPayerProvider,
		})
	}
	if vuo.mutation.PayerProviderCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: voucher.FieldPayerProvider,
		})
	}
	if value, ok := vuo.mutation.PayerAccount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: voucher.FieldPayerAccount,
		})
	}
	if vuo.mutation.PayerAccountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: voucher.FieldPayerAccount,
		})
	}
	if value, ok := vuo.mutation.PayerName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: voucher.FieldPayerName,
		})
	}
	if vuo.mutation.PayerNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: voucher.FieldPayerName,
		})
	}
	if value, ok := vuo.mutation.TxID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: voucher.FieldTxID,
		})
	}
	if vuo.mutation.TxIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: voucher.FieldTxID,
		})
	}
	if value, ok := vuo.mutation.ImageURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: voucher.FieldImageURL,
		})
	}
	if vuo.mutation.ImageURLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: voucher.FieldImageURL,
		})
	}
	if value, ok := vuo.mutation.CreatorNote(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: voucher.FieldCreatorNote,
		})
	}
	if vuo.mutation.CreatorNoteCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: voucher.FieldCreatorNote,
		})
	}
	if value, ok := vuo.mutation.HandledBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: voucher.FieldHandledBy,
		})
	}
	if vuo.mutation.HandledByCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: voucher.FieldHandledBy,
		})
	}
	if value, ok := vuo.mutation.HandlerNote(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: voucher.FieldHandlerNote,
		})
	}
	if vuo.mutation.HandlerNoteCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: voucher.FieldHandlerNote,
		})
	}
	if value, ok := vuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: voucher.FieldCreatedAt,
		})
	}
	if value, ok := vuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: voucher.FieldUpdatedAt,
		})
	}
	if value, ok := vuo.mutation.CreatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: voucher.FieldCreatedBy,
		})
	}
	if value, ok := vuo.mutation.UpdatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: voucher.FieldUpdatedBy,
		})
	}
	_node = &Voucher{config: vuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{voucher.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
