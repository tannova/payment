// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"gitlab.com/mcuc/monorepo/backend/natasha/pkg/ent/merchant"
)

// MerchantCreate is the builder for creating a Merchant entity.
type MerchantCreate struct {
	config
	mutation *MerchantMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (mc *MerchantCreate) SetName(s string) *MerchantCreate {
	mc.mutation.SetName(s)
	return mc
}

// SetEmailContact sets the "email_contact" field.
func (mc *MerchantCreate) SetEmailContact(s string) *MerchantCreate {
	mc.mutation.SetEmailContact(s)
	return mc
}

// SetLogoPath sets the "logo_path" field.
func (mc *MerchantCreate) SetLogoPath(s string) *MerchantCreate {
	mc.mutation.SetLogoPath(s)
	return mc
}

// SetWebhookURL sets the "webhook_url" field.
func (mc *MerchantCreate) SetWebhookURL(s string) *MerchantCreate {
	mc.mutation.SetWebhookURL(s)
	return mc
}

// SetSlackWebhookURL sets the "slack_webhook_url" field.
func (mc *MerchantCreate) SetSlackWebhookURL(s string) *MerchantCreate {
	mc.mutation.SetSlackWebhookURL(s)
	return mc
}

// SetSafetyLimit sets the "safety_limit" field.
func (mc *MerchantCreate) SetSafetyLimit(u uint64) *MerchantCreate {
	mc.mutation.SetSafetyLimit(u)
	return mc
}

// SetNillableSafetyLimit sets the "safety_limit" field if the given value is not nil.
func (mc *MerchantCreate) SetNillableSafetyLimit(u *uint64) *MerchantCreate {
	if u != nil {
		mc.SetSafetyLimit(*u)
	}
	return mc
}

// SetCreatedBy sets the "created_by" field.
func (mc *MerchantCreate) SetCreatedBy(s string) *MerchantCreate {
	mc.mutation.SetCreatedBy(s)
	return mc
}

// SetUpdatedBy sets the "updated_by" field.
func (mc *MerchantCreate) SetUpdatedBy(s string) *MerchantCreate {
	mc.mutation.SetUpdatedBy(s)
	return mc
}

// SetCreatedAt sets the "created_at" field.
func (mc *MerchantCreate) SetCreatedAt(t time.Time) *MerchantCreate {
	mc.mutation.SetCreatedAt(t)
	return mc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mc *MerchantCreate) SetNillableCreatedAt(t *time.Time) *MerchantCreate {
	if t != nil {
		mc.SetCreatedAt(*t)
	}
	return mc
}

// SetUpdatedAt sets the "updated_at" field.
func (mc *MerchantCreate) SetUpdatedAt(t time.Time) *MerchantCreate {
	mc.mutation.SetUpdatedAt(t)
	return mc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (mc *MerchantCreate) SetNillableUpdatedAt(t *time.Time) *MerchantCreate {
	if t != nil {
		mc.SetUpdatedAt(*t)
	}
	return mc
}

// SetID sets the "id" field.
func (mc *MerchantCreate) SetID(i int64) *MerchantCreate {
	mc.mutation.SetID(i)
	return mc
}

// Mutation returns the MerchantMutation object of the builder.
func (mc *MerchantCreate) Mutation() *MerchantMutation {
	return mc.mutation
}

// Save creates the Merchant in the database.
func (mc *MerchantCreate) Save(ctx context.Context) (*Merchant, error) {
	var (
		err  error
		node *Merchant
	)
	mc.defaults()
	if len(mc.hooks) == 0 {
		if err = mc.check(); err != nil {
			return nil, err
		}
		node, err = mc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MerchantMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = mc.check(); err != nil {
				return nil, err
			}
			mc.mutation = mutation
			node, err = mc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(mc.hooks) - 1; i >= 0; i-- {
			mut = mc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (mc *MerchantCreate) SaveX(ctx context.Context) *Merchant {
	v, err := mc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (mc *MerchantCreate) defaults() {
	if _, ok := mc.mutation.SafetyLimit(); !ok {
		v := merchant.DefaultSafetyLimit
		mc.mutation.SetSafetyLimit(v)
	}
	if _, ok := mc.mutation.CreatedAt(); !ok {
		v := merchant.DefaultCreatedAt()
		mc.mutation.SetCreatedAt(v)
	}
	if _, ok := mc.mutation.UpdatedAt(); !ok {
		v := merchant.DefaultUpdatedAt()
		mc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mc *MerchantCreate) check() error {
	if _, ok := mc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New("ent: missing required field \"name\"")}
	}
	if _, ok := mc.mutation.EmailContact(); !ok {
		return &ValidationError{Name: "email_contact", err: errors.New("ent: missing required field \"email_contact\"")}
	}
	if v, ok := mc.mutation.EmailContact(); ok {
		if err := merchant.EmailContactValidator(v); err != nil {
			return &ValidationError{Name: "email_contact", err: fmt.Errorf("ent: validator failed for field \"email_contact\": %w", err)}
		}
	}
	if _, ok := mc.mutation.LogoPath(); !ok {
		return &ValidationError{Name: "logo_path", err: errors.New("ent: missing required field \"logo_path\"")}
	}
	if _, ok := mc.mutation.WebhookURL(); !ok {
		return &ValidationError{Name: "webhook_url", err: errors.New("ent: missing required field \"webhook_url\"")}
	}
	if v, ok := mc.mutation.WebhookURL(); ok {
		if err := merchant.WebhookURLValidator(v); err != nil {
			return &ValidationError{Name: "webhook_url", err: fmt.Errorf("ent: validator failed for field \"webhook_url\": %w", err)}
		}
	}
	if _, ok := mc.mutation.SlackWebhookURL(); !ok {
		return &ValidationError{Name: "slack_webhook_url", err: errors.New("ent: missing required field \"slack_webhook_url\"")}
	}
	if _, ok := mc.mutation.SafetyLimit(); !ok {
		return &ValidationError{Name: "safety_limit", err: errors.New("ent: missing required field \"safety_limit\"")}
	}
	if _, ok := mc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New("ent: missing required field \"created_by\"")}
	}
	if v, ok := mc.mutation.CreatedBy(); ok {
		if err := merchant.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf("ent: validator failed for field \"created_by\": %w", err)}
		}
	}
	if _, ok := mc.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New("ent: missing required field \"updated_by\"")}
	}
	if v, ok := mc.mutation.UpdatedBy(); ok {
		if err := merchant.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf("ent: validator failed for field \"updated_by\": %w", err)}
		}
	}
	if _, ok := mc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New("ent: missing required field \"created_at\"")}
	}
	if _, ok := mc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New("ent: missing required field \"updated_at\"")}
	}
	return nil
}

func (mc *MerchantCreate) sqlSave(ctx context.Context) (*Merchant, error) {
	_node, _spec := mc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	if _node.ID == 0 {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	return _node, nil
}

func (mc *MerchantCreate) createSpec() (*Merchant, *sqlgraph.CreateSpec) {
	var (
		_node = &Merchant{config: mc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: merchant.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: merchant.FieldID,
			},
		}
	)
	if id, ok := mc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := mc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: merchant.FieldName,
		})
		_node.Name = value
	}
	if value, ok := mc.mutation.EmailContact(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: merchant.FieldEmailContact,
		})
		_node.EmailContact = value
	}
	if value, ok := mc.mutation.LogoPath(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: merchant.FieldLogoPath,
		})
		_node.LogoPath = value
	}
	if value, ok := mc.mutation.WebhookURL(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: merchant.FieldWebhookURL,
		})
		_node.WebhookURL = value
	}
	if value, ok := mc.mutation.SlackWebhookURL(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: merchant.FieldSlackWebhookURL,
		})
		_node.SlackWebhookURL = value
	}
	if value, ok := mc.mutation.SafetyLimit(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: merchant.FieldSafetyLimit,
		})
		_node.SafetyLimit = value
	}
	if value, ok := mc.mutation.CreatedBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: merchant.FieldCreatedBy,
		})
		_node.CreatedBy = value
	}
	if value, ok := mc.mutation.UpdatedBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: merchant.FieldUpdatedBy,
		})
		_node.UpdatedBy = value
	}
	if value, ok := mc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: merchant.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := mc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: merchant.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// MerchantCreateBulk is the builder for creating many Merchant entities in bulk.
type MerchantCreateBulk struct {
	config
	builders []*MerchantCreate
}

// Save creates the Merchant entities in the database.
func (mcb *MerchantCreateBulk) Save(ctx context.Context) ([]*Merchant, error) {
	specs := make([]*sqlgraph.CreateSpec, len(mcb.builders))
	nodes := make([]*Merchant, len(mcb.builders))
	mutators := make([]Mutator, len(mcb.builders))
	for i := range mcb.builders {
		func(i int, root context.Context) {
			builder := mcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MerchantMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				if nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mcb *MerchantCreateBulk) SaveX(ctx context.Context) []*Merchant {
	v, err := mcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
