// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"gitlab.com/mcuc/monorepo/backend/natasha/pkg/ent/merchant"
)

// Merchant is the model entity for the Merchant schema.
type Merchant struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// EmailContact holds the value of the "email_contact" field.
	EmailContact string `json:"email_contact,omitempty"`
	// LogoPath holds the value of the "logo_path" field.
	LogoPath string `json:"logo_path,omitempty"`
	// WebhookURL holds the value of the "webhook_url" field.
	WebhookURL string `json:"webhook_url,omitempty"`
	// SlackWebhookURL holds the value of the "slack_webhook_url" field.
	SlackWebhookURL string `json:"slack_webhook_url,omitempty"`
	// SafetyLimit holds the value of the "safety_limit" field.
	SafetyLimit uint64 `json:"safety_limit,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Merchant) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case merchant.FieldID, merchant.FieldSafetyLimit:
			values[i] = &sql.NullInt64{}
		case merchant.FieldName, merchant.FieldEmailContact, merchant.FieldLogoPath, merchant.FieldWebhookURL, merchant.FieldSlackWebhookURL, merchant.FieldCreatedBy, merchant.FieldUpdatedBy:
			values[i] = &sql.NullString{}
		case merchant.FieldCreatedAt, merchant.FieldUpdatedAt:
			values[i] = &sql.NullTime{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Merchant", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Merchant fields.
func (m *Merchant) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case merchant.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			m.ID = int64(value.Int64)
		case merchant.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				m.Name = value.String
			}
		case merchant.FieldEmailContact:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email_contact", values[i])
			} else if value.Valid {
				m.EmailContact = value.String
			}
		case merchant.FieldLogoPath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field logo_path", values[i])
			} else if value.Valid {
				m.LogoPath = value.String
			}
		case merchant.FieldWebhookURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field webhook_url", values[i])
			} else if value.Valid {
				m.WebhookURL = value.String
			}
		case merchant.FieldSlackWebhookURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field slack_webhook_url", values[i])
			} else if value.Valid {
				m.SlackWebhookURL = value.String
			}
		case merchant.FieldSafetyLimit:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field safety_limit", values[i])
			} else if value.Valid {
				m.SafetyLimit = uint64(value.Int64)
			}
		case merchant.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				m.CreatedBy = value.String
			}
		case merchant.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				m.UpdatedBy = value.String
			}
		case merchant.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				m.CreatedAt = value.Time
			}
		case merchant.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				m.UpdatedAt = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Merchant.
// Note that you need to call Merchant.Unwrap() before calling this method if this Merchant
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Merchant) Update() *MerchantUpdateOne {
	return (&MerchantClient{config: m.config}).UpdateOne(m)
}

// Unwrap unwraps the Merchant entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (m *Merchant) Unwrap() *Merchant {
	tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Merchant is not a transactional entity")
	}
	m.config.driver = tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Merchant) String() string {
	var builder strings.Builder
	builder.WriteString("Merchant(")
	builder.WriteString(fmt.Sprintf("id=%v", m.ID))
	builder.WriteString(", name=")
	builder.WriteString(m.Name)
	builder.WriteString(", email_contact=")
	builder.WriteString(m.EmailContact)
	builder.WriteString(", logo_path=")
	builder.WriteString(m.LogoPath)
	builder.WriteString(", webhook_url=")
	builder.WriteString(m.WebhookURL)
	builder.WriteString(", slack_webhook_url=")
	builder.WriteString(m.SlackWebhookURL)
	builder.WriteString(", safety_limit=")
	builder.WriteString(fmt.Sprintf("%v", m.SafetyLimit))
	builder.WriteString(", created_by=")
	builder.WriteString(m.CreatedBy)
	builder.WriteString(", updated_by=")
	builder.WriteString(m.UpdatedBy)
	builder.WriteString(", created_at=")
	builder.WriteString(m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(m.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Merchants is a parsable slice of Merchant.
type Merchants []*Merchant

func (m Merchants) config(cfg config) {
	for _i := range m {
		m[_i].config = cfg
	}
}
