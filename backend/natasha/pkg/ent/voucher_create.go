// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"gitlab.com/mcuc/monorepo/backend/natasha/pkg/ent/voucher"
)

// VoucherCreate is the builder for creating a Voucher entity.
type VoucherCreate struct {
	config
	mutation *VoucherMutation
	hooks    []Hook
}

// SetMerchantID sets the "merchant_id" field.
func (vc *VoucherCreate) SetMerchantID(i int64) *VoucherCreate {
	vc.mutation.SetMerchantID(i)
	return vc
}

// SetNillableMerchantID sets the "merchant_id" field if the given value is not nil.
func (vc *VoucherCreate) SetNillableMerchantID(i *int64) *VoucherCreate {
	if i != nil {
		vc.SetMerchantID(*i)
	}
	return vc
}

// SetPaymentID sets the "payment_id" field.
func (vc *VoucherCreate) SetPaymentID(i int64) *VoucherCreate {
	vc.mutation.SetPaymentID(i)
	return vc
}

// SetNillablePaymentID sets the "payment_id" field if the given value is not nil.
func (vc *VoucherCreate) SetNillablePaymentID(i *int64) *VoucherCreate {
	if i != nil {
		vc.SetPaymentID(*i)
	}
	return vc
}

// SetAmount sets the "amount" field.
func (vc *VoucherCreate) SetAmount(i int64) *VoucherCreate {
	vc.mutation.SetAmount(i)
	return vc
}

// SetType sets the "type" field.
func (vc *VoucherCreate) SetType(i int32) *VoucherCreate {
	vc.mutation.SetType(i)
	return vc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (vc *VoucherCreate) SetNillableType(i *int32) *VoucherCreate {
	if i != nil {
		vc.SetType(*i)
	}
	return vc
}

// SetStatus sets the "status" field.
func (vc *VoucherCreate) SetStatus(i int32) *VoucherCreate {
	vc.mutation.SetStatus(i)
	return vc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (vc *VoucherCreate) SetNillableStatus(i *int32) *VoucherCreate {
	if i != nil {
		vc.SetStatus(*i)
	}
	return vc
}

// SetPayeeProvider sets the "payee_provider" field.
func (vc *VoucherCreate) SetPayeeProvider(i int32) *VoucherCreate {
	vc.mutation.SetPayeeProvider(i)
	return vc
}

// SetNillablePayeeProvider sets the "payee_provider" field if the given value is not nil.
func (vc *VoucherCreate) SetNillablePayeeProvider(i *int32) *VoucherCreate {
	if i != nil {
		vc.SetPayeeProvider(*i)
	}
	return vc
}

// SetPayeeAccount sets the "payee_account" field.
func (vc *VoucherCreate) SetPayeeAccount(s string) *VoucherCreate {
	vc.mutation.SetPayeeAccount(s)
	return vc
}

// SetNillablePayeeAccount sets the "payee_account" field if the given value is not nil.
func (vc *VoucherCreate) SetNillablePayeeAccount(s *string) *VoucherCreate {
	if s != nil {
		vc.SetPayeeAccount(*s)
	}
	return vc
}

// SetPayeeName sets the "payee_name" field.
func (vc *VoucherCreate) SetPayeeName(s string) *VoucherCreate {
	vc.mutation.SetPayeeName(s)
	return vc
}

// SetNillablePayeeName sets the "payee_name" field if the given value is not nil.
func (vc *VoucherCreate) SetNillablePayeeName(s *string) *VoucherCreate {
	if s != nil {
		vc.SetPayeeName(*s)
	}
	return vc
}

// SetPayerProvider sets the "payer_provider" field.
func (vc *VoucherCreate) SetPayerProvider(i int32) *VoucherCreate {
	vc.mutation.SetPayerProvider(i)
	return vc
}

// SetNillablePayerProvider sets the "payer_provider" field if the given value is not nil.
func (vc *VoucherCreate) SetNillablePayerProvider(i *int32) *VoucherCreate {
	if i != nil {
		vc.SetPayerProvider(*i)
	}
	return vc
}

// SetPayerAccount sets the "payer_account" field.
func (vc *VoucherCreate) SetPayerAccount(s string) *VoucherCreate {
	vc.mutation.SetPayerAccount(s)
	return vc
}

// SetNillablePayerAccount sets the "payer_account" field if the given value is not nil.
func (vc *VoucherCreate) SetNillablePayerAccount(s *string) *VoucherCreate {
	if s != nil {
		vc.SetPayerAccount(*s)
	}
	return vc
}

// SetPayerName sets the "payer_name" field.
func (vc *VoucherCreate) SetPayerName(s string) *VoucherCreate {
	vc.mutation.SetPayerName(s)
	return vc
}

// SetNillablePayerName sets the "payer_name" field if the given value is not nil.
func (vc *VoucherCreate) SetNillablePayerName(s *string) *VoucherCreate {
	if s != nil {
		vc.SetPayerName(*s)
	}
	return vc
}

// SetTxID sets the "tx_id" field.
func (vc *VoucherCreate) SetTxID(s string) *VoucherCreate {
	vc.mutation.SetTxID(s)
	return vc
}

// SetNillableTxID sets the "tx_id" field if the given value is not nil.
func (vc *VoucherCreate) SetNillableTxID(s *string) *VoucherCreate {
	if s != nil {
		vc.SetTxID(*s)
	}
	return vc
}

// SetImageURL sets the "image_url" field.
func (vc *VoucherCreate) SetImageURL(s string) *VoucherCreate {
	vc.mutation.SetImageURL(s)
	return vc
}

// SetNillableImageURL sets the "image_url" field if the given value is not nil.
func (vc *VoucherCreate) SetNillableImageURL(s *string) *VoucherCreate {
	if s != nil {
		vc.SetImageURL(*s)
	}
	return vc
}

// SetCreatorNote sets the "creator_note" field.
func (vc *VoucherCreate) SetCreatorNote(s string) *VoucherCreate {
	vc.mutation.SetCreatorNote(s)
	return vc
}

// SetNillableCreatorNote sets the "creator_note" field if the given value is not nil.
func (vc *VoucherCreate) SetNillableCreatorNote(s *string) *VoucherCreate {
	if s != nil {
		vc.SetCreatorNote(*s)
	}
	return vc
}

// SetHandledBy sets the "handled_by" field.
func (vc *VoucherCreate) SetHandledBy(s string) *VoucherCreate {
	vc.mutation.SetHandledBy(s)
	return vc
}

// SetNillableHandledBy sets the "handled_by" field if the given value is not nil.
func (vc *VoucherCreate) SetNillableHandledBy(s *string) *VoucherCreate {
	if s != nil {
		vc.SetHandledBy(*s)
	}
	return vc
}

// SetHandlerNote sets the "handler_note" field.
func (vc *VoucherCreate) SetHandlerNote(s string) *VoucherCreate {
	vc.mutation.SetHandlerNote(s)
	return vc
}

// SetNillableHandlerNote sets the "handler_note" field if the given value is not nil.
func (vc *VoucherCreate) SetNillableHandlerNote(s *string) *VoucherCreate {
	if s != nil {
		vc.SetHandlerNote(*s)
	}
	return vc
}

// SetCreatedAt sets the "created_at" field.
func (vc *VoucherCreate) SetCreatedAt(t time.Time) *VoucherCreate {
	vc.mutation.SetCreatedAt(t)
	return vc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (vc *VoucherCreate) SetNillableCreatedAt(t *time.Time) *VoucherCreate {
	if t != nil {
		vc.SetCreatedAt(*t)
	}
	return vc
}

// SetUpdatedAt sets the "updated_at" field.
func (vc *VoucherCreate) SetUpdatedAt(t time.Time) *VoucherCreate {
	vc.mutation.SetUpdatedAt(t)
	return vc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (vc *VoucherCreate) SetNillableUpdatedAt(t *time.Time) *VoucherCreate {
	if t != nil {
		vc.SetUpdatedAt(*t)
	}
	return vc
}

// SetCreatedBy sets the "created_by" field.
func (vc *VoucherCreate) SetCreatedBy(s string) *VoucherCreate {
	vc.mutation.SetCreatedBy(s)
	return vc
}

// SetUpdatedBy sets the "updated_by" field.
func (vc *VoucherCreate) SetUpdatedBy(s string) *VoucherCreate {
	vc.mutation.SetUpdatedBy(s)
	return vc
}

// SetID sets the "id" field.
func (vc *VoucherCreate) SetID(i int64) *VoucherCreate {
	vc.mutation.SetID(i)
	return vc
}

// Mutation returns the VoucherMutation object of the builder.
func (vc *VoucherCreate) Mutation() *VoucherMutation {
	return vc.mutation
}

// Save creates the Voucher in the database.
func (vc *VoucherCreate) Save(ctx context.Context) (*Voucher, error) {
	var (
		err  error
		node *Voucher
	)
	vc.defaults()
	if len(vc.hooks) == 0 {
		if err = vc.check(); err != nil {
			return nil, err
		}
		node, err = vc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*VoucherMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = vc.check(); err != nil {
				return nil, err
			}
			vc.mutation = mutation
			node, err = vc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(vc.hooks) - 1; i >= 0; i-- {
			mut = vc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, vc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (vc *VoucherCreate) SaveX(ctx context.Context) *Voucher {
	v, err := vc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (vc *VoucherCreate) defaults() {
	if _, ok := vc.mutation.MerchantID(); !ok {
		v := voucher.DefaultMerchantID
		vc.mutation.SetMerchantID(v)
	}
	if _, ok := vc.mutation.PaymentID(); !ok {
		v := voucher.DefaultPaymentID
		vc.mutation.SetPaymentID(v)
	}
	if _, ok := vc.mutation.GetType(); !ok {
		v := voucher.DefaultType
		vc.mutation.SetType(v)
	}
	if _, ok := vc.mutation.Status(); !ok {
		v := voucher.DefaultStatus
		vc.mutation.SetStatus(v)
	}
	if _, ok := vc.mutation.PayeeProvider(); !ok {
		v := voucher.DefaultPayeeProvider
		vc.mutation.SetPayeeProvider(v)
	}
	if _, ok := vc.mutation.PayerProvider(); !ok {
		v := voucher.DefaultPayerProvider
		vc.mutation.SetPayerProvider(v)
	}
	if _, ok := vc.mutation.CreatedAt(); !ok {
		v := voucher.DefaultCreatedAt()
		vc.mutation.SetCreatedAt(v)
	}
	if _, ok := vc.mutation.UpdatedAt(); !ok {
		v := voucher.DefaultUpdatedAt()
		vc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vc *VoucherCreate) check() error {
	if _, ok := vc.mutation.MerchantID(); !ok {
		return &ValidationError{Name: "merchant_id", err: errors.New("ent: missing required field \"merchant_id\"")}
	}
	if v, ok := vc.mutation.MerchantID(); ok {
		if err := voucher.MerchantIDValidator(v); err != nil {
			return &ValidationError{Name: "merchant_id", err: fmt.Errorf("ent: validator failed for field \"merchant_id\": %w", err)}
		}
	}
	if v, ok := vc.mutation.PaymentID(); ok {
		if err := voucher.PaymentIDValidator(v); err != nil {
			return &ValidationError{Name: "payment_id", err: fmt.Errorf("ent: validator failed for field \"payment_id\": %w", err)}
		}
	}
	if _, ok := vc.mutation.Amount(); !ok {
		return &ValidationError{Name: "amount", err: errors.New("ent: missing required field \"amount\"")}
	}
	if _, ok := vc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New("ent: missing required field \"type\"")}
	}
	if v, ok := vc.mutation.GetType(); ok {
		if err := voucher.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf("ent: validator failed for field \"type\": %w", err)}
		}
	}
	if v, ok := vc.mutation.Status(); ok {
		if err := voucher.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf("ent: validator failed for field \"status\": %w", err)}
		}
	}
	if v, ok := vc.mutation.PayeeProvider(); ok {
		if err := voucher.PayeeProviderValidator(v); err != nil {
			return &ValidationError{Name: "payee_provider", err: fmt.Errorf("ent: validator failed for field \"payee_provider\": %w", err)}
		}
	}
	if v, ok := vc.mutation.PayerProvider(); ok {
		if err := voucher.PayerProviderValidator(v); err != nil {
			return &ValidationError{Name: "payer_provider", err: fmt.Errorf("ent: validator failed for field \"payer_provider\": %w", err)}
		}
	}
	if _, ok := vc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New("ent: missing required field \"created_at\"")}
	}
	if _, ok := vc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New("ent: missing required field \"updated_at\"")}
	}
	if _, ok := vc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New("ent: missing required field \"created_by\"")}
	}
	if v, ok := vc.mutation.CreatedBy(); ok {
		if err := voucher.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf("ent: validator failed for field \"created_by\": %w", err)}
		}
	}
	if _, ok := vc.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New("ent: missing required field \"updated_by\"")}
	}
	if v, ok := vc.mutation.UpdatedBy(); ok {
		if err := voucher.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf("ent: validator failed for field \"updated_by\": %w", err)}
		}
	}
	return nil
}

func (vc *VoucherCreate) sqlSave(ctx context.Context) (*Voucher, error) {
	_node, _spec := vc.createSpec()
	if err := sqlgraph.CreateNode(ctx, vc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	if _node.ID == 0 {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	return _node, nil
}

func (vc *VoucherCreate) createSpec() (*Voucher, *sqlgraph.CreateSpec) {
	var (
		_node = &Voucher{config: vc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: voucher.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: voucher.FieldID,
			},
		}
	)
	if id, ok := vc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := vc.mutation.MerchantID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: voucher.FieldMerchantID,
		})
		_node.MerchantID = value
	}
	if value, ok := vc.mutation.PaymentID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: voucher.FieldPaymentID,
		})
		_node.PaymentID = value
	}
	if value, ok := vc.mutation.Amount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: voucher.FieldAmount,
		})
		_node.Amount = value
	}
	if value, ok := vc.mutation.GetType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: voucher.FieldType,
		})
		_node.Type = value
	}
	if value, ok := vc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: voucher.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := vc.mutation.PayeeProvider(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: voucher.FieldPayeeProvider,
		})
		_node.PayeeProvider = value
	}
	if value, ok := vc.mutation.PayeeAccount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: voucher.FieldPayeeAccount,
		})
		_node.PayeeAccount = value
	}
	if value, ok := vc.mutation.PayeeName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: voucher.FieldPayeeName,
		})
		_node.PayeeName = value
	}
	if value, ok := vc.mutation.PayerProvider(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: voucher.FieldPayerProvider,
		})
		_node.PayerProvider = value
	}
	if value, ok := vc.mutation.PayerAccount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: voucher.FieldPayerAccount,
		})
		_node.PayerAccount = value
	}
	if value, ok := vc.mutation.PayerName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: voucher.FieldPayerName,
		})
		_node.PayerName = value
	}
	if value, ok := vc.mutation.TxID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: voucher.FieldTxID,
		})
		_node.TxID = value
	}
	if value, ok := vc.mutation.ImageURL(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: voucher.FieldImageURL,
		})
		_node.ImageURL = value
	}
	if value, ok := vc.mutation.CreatorNote(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: voucher.FieldCreatorNote,
		})
		_node.CreatorNote = value
	}
	if value, ok := vc.mutation.HandledBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: voucher.FieldHandledBy,
		})
		_node.HandledBy = value
	}
	if value, ok := vc.mutation.HandlerNote(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: voucher.FieldHandlerNote,
		})
		_node.HandlerNote = value
	}
	if value, ok := vc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: voucher.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := vc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: voucher.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := vc.mutation.CreatedBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: voucher.FieldCreatedBy,
		})
		_node.CreatedBy = value
	}
	if value, ok := vc.mutation.UpdatedBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: voucher.FieldUpdatedBy,
		})
		_node.UpdatedBy = value
	}
	return _node, _spec
}

// VoucherCreateBulk is the builder for creating many Voucher entities in bulk.
type VoucherCreateBulk struct {
	config
	builders []*VoucherCreate
}

// Save creates the Voucher entities in the database.
func (vcb *VoucherCreateBulk) Save(ctx context.Context) ([]*Voucher, error) {
	specs := make([]*sqlgraph.CreateSpec, len(vcb.builders))
	nodes := make([]*Voucher, len(vcb.builders))
	mutators := make([]Mutator, len(vcb.builders))
	for i := range vcb.builders {
		func(i int, root context.Context) {
			builder := vcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*VoucherMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, vcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, vcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				if nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, vcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (vcb *VoucherCreateBulk) SaveX(ctx context.Context) []*Voucher {
	v, err := vcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
