// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"gitlab.com/mcuc/monorepo/backend/natasha/pkg/ent/merchant"
	"gitlab.com/mcuc/monorepo/backend/natasha/pkg/ent/predicate"
)

// MerchantUpdate is the builder for updating Merchant entities.
type MerchantUpdate struct {
	config
	hooks    []Hook
	mutation *MerchantMutation
}

// Where adds a new predicate for the MerchantUpdate builder.
func (mu *MerchantUpdate) Where(ps ...predicate.Merchant) *MerchantUpdate {
	mu.mutation.predicates = append(mu.mutation.predicates, ps...)
	return mu
}

// SetName sets the "name" field.
func (mu *MerchantUpdate) SetName(s string) *MerchantUpdate {
	mu.mutation.SetName(s)
	return mu
}

// SetEmailContact sets the "email_contact" field.
func (mu *MerchantUpdate) SetEmailContact(s string) *MerchantUpdate {
	mu.mutation.SetEmailContact(s)
	return mu
}

// SetLogoPath sets the "logo_path" field.
func (mu *MerchantUpdate) SetLogoPath(s string) *MerchantUpdate {
	mu.mutation.SetLogoPath(s)
	return mu
}

// SetWebhookURL sets the "webhook_url" field.
func (mu *MerchantUpdate) SetWebhookURL(s string) *MerchantUpdate {
	mu.mutation.SetWebhookURL(s)
	return mu
}

// SetSlackWebhookURL sets the "slack_webhook_url" field.
func (mu *MerchantUpdate) SetSlackWebhookURL(s string) *MerchantUpdate {
	mu.mutation.SetSlackWebhookURL(s)
	return mu
}

// SetSafetyLimit sets the "safety_limit" field.
func (mu *MerchantUpdate) SetSafetyLimit(u uint64) *MerchantUpdate {
	mu.mutation.ResetSafetyLimit()
	mu.mutation.SetSafetyLimit(u)
	return mu
}

// SetNillableSafetyLimit sets the "safety_limit" field if the given value is not nil.
func (mu *MerchantUpdate) SetNillableSafetyLimit(u *uint64) *MerchantUpdate {
	if u != nil {
		mu.SetSafetyLimit(*u)
	}
	return mu
}

// AddSafetyLimit adds u to the "safety_limit" field.
func (mu *MerchantUpdate) AddSafetyLimit(u uint64) *MerchantUpdate {
	mu.mutation.AddSafetyLimit(u)
	return mu
}

// SetCreatedBy sets the "created_by" field.
func (mu *MerchantUpdate) SetCreatedBy(s string) *MerchantUpdate {
	mu.mutation.SetCreatedBy(s)
	return mu
}

// SetUpdatedBy sets the "updated_by" field.
func (mu *MerchantUpdate) SetUpdatedBy(s string) *MerchantUpdate {
	mu.mutation.SetUpdatedBy(s)
	return mu
}

// SetCreatedAt sets the "created_at" field.
func (mu *MerchantUpdate) SetCreatedAt(t time.Time) *MerchantUpdate {
	mu.mutation.SetCreatedAt(t)
	return mu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mu *MerchantUpdate) SetNillableCreatedAt(t *time.Time) *MerchantUpdate {
	if t != nil {
		mu.SetCreatedAt(*t)
	}
	return mu
}

// SetUpdatedAt sets the "updated_at" field.
func (mu *MerchantUpdate) SetUpdatedAt(t time.Time) *MerchantUpdate {
	mu.mutation.SetUpdatedAt(t)
	return mu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (mu *MerchantUpdate) SetNillableUpdatedAt(t *time.Time) *MerchantUpdate {
	if t != nil {
		mu.SetUpdatedAt(*t)
	}
	return mu
}

// Mutation returns the MerchantMutation object of the builder.
func (mu *MerchantUpdate) Mutation() *MerchantMutation {
	return mu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MerchantUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(mu.hooks) == 0 {
		if err = mu.check(); err != nil {
			return 0, err
		}
		affected, err = mu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MerchantMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = mu.check(); err != nil {
				return 0, err
			}
			mu.mutation = mutation
			affected, err = mu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(mu.hooks) - 1; i >= 0; i-- {
			mut = mu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MerchantUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MerchantUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MerchantUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mu *MerchantUpdate) check() error {
	if v, ok := mu.mutation.EmailContact(); ok {
		if err := merchant.EmailContactValidator(v); err != nil {
			return &ValidationError{Name: "email_contact", err: fmt.Errorf("ent: validator failed for field \"email_contact\": %w", err)}
		}
	}
	if v, ok := mu.mutation.WebhookURL(); ok {
		if err := merchant.WebhookURLValidator(v); err != nil {
			return &ValidationError{Name: "webhook_url", err: fmt.Errorf("ent: validator failed for field \"webhook_url\": %w", err)}
		}
	}
	if v, ok := mu.mutation.CreatedBy(); ok {
		if err := merchant.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf("ent: validator failed for field \"created_by\": %w", err)}
		}
	}
	if v, ok := mu.mutation.UpdatedBy(); ok {
		if err := merchant.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf("ent: validator failed for field \"updated_by\": %w", err)}
		}
	}
	return nil
}

func (mu *MerchantUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   merchant.Table,
			Columns: merchant.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: merchant.FieldID,
			},
		},
	}
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: merchant.FieldName,
		})
	}
	if value, ok := mu.mutation.EmailContact(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: merchant.FieldEmailContact,
		})
	}
	if value, ok := mu.mutation.LogoPath(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: merchant.FieldLogoPath,
		})
	}
	if value, ok := mu.mutation.WebhookURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: merchant.FieldWebhookURL,
		})
	}
	if value, ok := mu.mutation.SlackWebhookURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: merchant.FieldSlackWebhookURL,
		})
	}
	if value, ok := mu.mutation.SafetyLimit(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: merchant.FieldSafetyLimit,
		})
	}
	if value, ok := mu.mutation.AddedSafetyLimit(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: merchant.FieldSafetyLimit,
		})
	}
	if value, ok := mu.mutation.CreatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: merchant.FieldCreatedBy,
		})
	}
	if value, ok := mu.mutation.UpdatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: merchant.FieldUpdatedBy,
		})
	}
	if value, ok := mu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: merchant.FieldCreatedAt,
		})
	}
	if value, ok := mu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: merchant.FieldUpdatedAt,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{merchant.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// MerchantUpdateOne is the builder for updating a single Merchant entity.
type MerchantUpdateOne struct {
	config
	hooks    []Hook
	mutation *MerchantMutation
}

// SetName sets the "name" field.
func (muo *MerchantUpdateOne) SetName(s string) *MerchantUpdateOne {
	muo.mutation.SetName(s)
	return muo
}

// SetEmailContact sets the "email_contact" field.
func (muo *MerchantUpdateOne) SetEmailContact(s string) *MerchantUpdateOne {
	muo.mutation.SetEmailContact(s)
	return muo
}

// SetLogoPath sets the "logo_path" field.
func (muo *MerchantUpdateOne) SetLogoPath(s string) *MerchantUpdateOne {
	muo.mutation.SetLogoPath(s)
	return muo
}

// SetWebhookURL sets the "webhook_url" field.
func (muo *MerchantUpdateOne) SetWebhookURL(s string) *MerchantUpdateOne {
	muo.mutation.SetWebhookURL(s)
	return muo
}

// SetSlackWebhookURL sets the "slack_webhook_url" field.
func (muo *MerchantUpdateOne) SetSlackWebhookURL(s string) *MerchantUpdateOne {
	muo.mutation.SetSlackWebhookURL(s)
	return muo
}

// SetSafetyLimit sets the "safety_limit" field.
func (muo *MerchantUpdateOne) SetSafetyLimit(u uint64) *MerchantUpdateOne {
	muo.mutation.ResetSafetyLimit()
	muo.mutation.SetSafetyLimit(u)
	return muo
}

// SetNillableSafetyLimit sets the "safety_limit" field if the given value is not nil.
func (muo *MerchantUpdateOne) SetNillableSafetyLimit(u *uint64) *MerchantUpdateOne {
	if u != nil {
		muo.SetSafetyLimit(*u)
	}
	return muo
}

// AddSafetyLimit adds u to the "safety_limit" field.
func (muo *MerchantUpdateOne) AddSafetyLimit(u uint64) *MerchantUpdateOne {
	muo.mutation.AddSafetyLimit(u)
	return muo
}

// SetCreatedBy sets the "created_by" field.
func (muo *MerchantUpdateOne) SetCreatedBy(s string) *MerchantUpdateOne {
	muo.mutation.SetCreatedBy(s)
	return muo
}

// SetUpdatedBy sets the "updated_by" field.
func (muo *MerchantUpdateOne) SetUpdatedBy(s string) *MerchantUpdateOne {
	muo.mutation.SetUpdatedBy(s)
	return muo
}

// SetCreatedAt sets the "created_at" field.
func (muo *MerchantUpdateOne) SetCreatedAt(t time.Time) *MerchantUpdateOne {
	muo.mutation.SetCreatedAt(t)
	return muo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (muo *MerchantUpdateOne) SetNillableCreatedAt(t *time.Time) *MerchantUpdateOne {
	if t != nil {
		muo.SetCreatedAt(*t)
	}
	return muo
}

// SetUpdatedAt sets the "updated_at" field.
func (muo *MerchantUpdateOne) SetUpdatedAt(t time.Time) *MerchantUpdateOne {
	muo.mutation.SetUpdatedAt(t)
	return muo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (muo *MerchantUpdateOne) SetNillableUpdatedAt(t *time.Time) *MerchantUpdateOne {
	if t != nil {
		muo.SetUpdatedAt(*t)
	}
	return muo
}

// Mutation returns the MerchantMutation object of the builder.
func (muo *MerchantUpdateOne) Mutation() *MerchantMutation {
	return muo.mutation
}

// Save executes the query and returns the updated Merchant entity.
func (muo *MerchantUpdateOne) Save(ctx context.Context) (*Merchant, error) {
	var (
		err  error
		node *Merchant
	)
	if len(muo.hooks) == 0 {
		if err = muo.check(); err != nil {
			return nil, err
		}
		node, err = muo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MerchantMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = muo.check(); err != nil {
				return nil, err
			}
			muo.mutation = mutation
			node, err = muo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(muo.hooks) - 1; i >= 0; i-- {
			mut = muo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, muo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MerchantUpdateOne) SaveX(ctx context.Context) *Merchant {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MerchantUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MerchantUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (muo *MerchantUpdateOne) check() error {
	if v, ok := muo.mutation.EmailContact(); ok {
		if err := merchant.EmailContactValidator(v); err != nil {
			return &ValidationError{Name: "email_contact", err: fmt.Errorf("ent: validator failed for field \"email_contact\": %w", err)}
		}
	}
	if v, ok := muo.mutation.WebhookURL(); ok {
		if err := merchant.WebhookURLValidator(v); err != nil {
			return &ValidationError{Name: "webhook_url", err: fmt.Errorf("ent: validator failed for field \"webhook_url\": %w", err)}
		}
	}
	if v, ok := muo.mutation.CreatedBy(); ok {
		if err := merchant.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf("ent: validator failed for field \"created_by\": %w", err)}
		}
	}
	if v, ok := muo.mutation.UpdatedBy(); ok {
		if err := merchant.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf("ent: validator failed for field \"updated_by\": %w", err)}
		}
	}
	return nil
}

func (muo *MerchantUpdateOne) sqlSave(ctx context.Context) (_node *Merchant, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   merchant.Table,
			Columns: merchant.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: merchant.FieldID,
			},
		},
	}
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Merchant.ID for update")}
	}
	_spec.Node.ID.Value = id
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: merchant.FieldName,
		})
	}
	if value, ok := muo.mutation.EmailContact(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: merchant.FieldEmailContact,
		})
	}
	if value, ok := muo.mutation.LogoPath(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: merchant.FieldLogoPath,
		})
	}
	if value, ok := muo.mutation.WebhookURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: merchant.FieldWebhookURL,
		})
	}
	if value, ok := muo.mutation.SlackWebhookURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: merchant.FieldSlackWebhookURL,
		})
	}
	if value, ok := muo.mutation.SafetyLimit(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: merchant.FieldSafetyLimit,
		})
	}
	if value, ok := muo.mutation.AddedSafetyLimit(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: merchant.FieldSafetyLimit,
		})
	}
	if value, ok := muo.mutation.CreatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: merchant.FieldCreatedBy,
		})
	}
	if value, ok := muo.mutation.UpdatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: merchant.FieldUpdatedBy,
		})
	}
	if value, ok := muo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: merchant.FieldCreatedAt,
		})
	}
	if value, ok := muo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: merchant.FieldUpdatedAt,
		})
	}
	_node = &Merchant{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{merchant.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
