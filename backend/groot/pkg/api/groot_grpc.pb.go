// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package groot

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// GrootClient is the client API for Groot service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GrootClient interface {
	GetCard(ctx context.Context, in *GetCardRequest, opts ...grpc.CallOption) (*Card, error)
	ChargeCard(ctx context.Context, in *ChargeCardRequest, opts ...grpc.CallOption) (*ChargeCardReply, error)
	GetTxIDByCard(ctx context.Context, in *GetTxIDByCardRequest, opts ...grpc.CallOption) (*GetTxIDByCardReply, error)
}

type grootClient struct {
	cc grpc.ClientConnInterface
}

func NewGrootClient(cc grpc.ClientConnInterface) GrootClient {
	return &grootClient{cc}
}

func (c *grootClient) GetCard(ctx context.Context, in *GetCardRequest, opts ...grpc.CallOption) (*Card, error) {
	out := new(Card)
	err := c.cc.Invoke(ctx, "/mcuc.groot.Groot/GetCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grootClient) ChargeCard(ctx context.Context, in *ChargeCardRequest, opts ...grpc.CallOption) (*ChargeCardReply, error) {
	out := new(ChargeCardReply)
	err := c.cc.Invoke(ctx, "/mcuc.groot.Groot/ChargeCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grootClient) GetTxIDByCard(ctx context.Context, in *GetTxIDByCardRequest, opts ...grpc.CallOption) (*GetTxIDByCardReply, error) {
	out := new(GetTxIDByCardReply)
	err := c.cc.Invoke(ctx, "/mcuc.groot.Groot/GetTxIDByCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GrootServer is the server API for Groot service.
// All implementations must embed UnimplementedGrootServer
// for forward compatibility
type GrootServer interface {
	GetCard(context.Context, *GetCardRequest) (*Card, error)
	ChargeCard(context.Context, *ChargeCardRequest) (*ChargeCardReply, error)
	GetTxIDByCard(context.Context, *GetTxIDByCardRequest) (*GetTxIDByCardReply, error)
	mustEmbedUnimplementedGrootServer()
}

// UnimplementedGrootServer must be embedded to have forward compatible implementations.
type UnimplementedGrootServer struct {
}

func (*UnimplementedGrootServer) GetCard(context.Context, *GetCardRequest) (*Card, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCard not implemented")
}
func (*UnimplementedGrootServer) ChargeCard(context.Context, *ChargeCardRequest) (*ChargeCardReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChargeCard not implemented")
}
func (*UnimplementedGrootServer) GetTxIDByCard(context.Context, *GetTxIDByCardRequest) (*GetTxIDByCardReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTxIDByCard not implemented")
}
func (*UnimplementedGrootServer) mustEmbedUnimplementedGrootServer() {}

func RegisterGrootServer(s *grpc.Server, srv GrootServer) {
	s.RegisterService(&_Groot_serviceDesc, srv)
}

func _Groot_GetCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrootServer).GetCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mcuc.groot.Groot/GetCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrootServer).GetCard(ctx, req.(*GetCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Groot_ChargeCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChargeCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrootServer).ChargeCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mcuc.groot.Groot/ChargeCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrootServer).ChargeCard(ctx, req.(*ChargeCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Groot_GetTxIDByCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTxIDByCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrootServer).GetTxIDByCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mcuc.groot.Groot/GetTxIDByCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrootServer).GetTxIDByCard(ctx, req.(*GetTxIDByCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Groot_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mcuc.groot.Groot",
	HandlerType: (*GrootServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCard",
			Handler:    _Groot_GetCard_Handler,
		},
		{
			MethodName: "ChargeCard",
			Handler:    _Groot_ChargeCard_Handler,
		},
		{
			MethodName: "GetTxIDByCard",
			Handler:    _Groot_GetTxIDByCard_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "groot/api/groot.proto",
}
