// Code generated by mockery v2.4.0. DO NOT EDIT.

package mocks

import (
	context "context"

	groot "gitlab.com/mcuc/monorepo/backend/groot/pkg/api"
	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// GrootClient is an autogenerated mock type for the GrootClient type
type GrootClient struct {
	mock.Mock
}

// ChargeCard provides a mock function with given fields: ctx, in, opts
func (_m *GrootClient) ChargeCard(ctx context.Context, in *groot.ChargeCardRequest, opts ...grpc.CallOption) (*groot.ChargeCardReply, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *groot.ChargeCardReply
	if rf, ok := ret.Get(0).(func(context.Context, *groot.ChargeCardRequest, ...grpc.CallOption) *groot.ChargeCardReply); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*groot.ChargeCardReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *groot.ChargeCardRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCard provides a mock function with given fields: ctx, in, opts
func (_m *GrootClient) GetCard(ctx context.Context, in *groot.GetCardRequest, opts ...grpc.CallOption) (*groot.Card, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *groot.Card
	if rf, ok := ret.Get(0).(func(context.Context, *groot.GetCardRequest, ...grpc.CallOption) *groot.Card); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*groot.Card)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *groot.GetCardRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTxIDByCard provides a mock function with given fields: ctx, in, opts
func (_m *GrootClient) GetTxIDByCard(ctx context.Context, in *groot.GetTxIDByCardRequest, opts ...grpc.CallOption) (*groot.GetTxIDByCardReply, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *groot.GetTxIDByCardReply
	if rf, ok := ret.Get(0).(func(context.Context, *groot.GetTxIDByCardRequest, ...grpc.CallOption) *groot.GetTxIDByCardReply); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*groot.GetTxIDByCardReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *groot.GetTxIDByCardRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
