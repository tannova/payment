// Code generated by mockery v2.4.0. DO NOT EDIT.

package mocks

import (
	context "context"

	groot "gitlab.com/mcuc/monorepo/backend/groot/pkg/api"
	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// TaskMasterClient is an autogenerated mock type for the TaskMasterClient type
type TaskMasterClient struct {
	mock.Mock
}

// ListTopUpProvider provides a mock function with given fields: ctx, in, opts
func (_m *TaskMasterClient) ListTopUpProvider(ctx context.Context, in *groot.ListTopUpProviderRequest, opts ...grpc.CallOption) (*groot.ListTopUpProviderReply, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *groot.ListTopUpProviderReply
	if rf, ok := ret.Get(0).(func(context.Context, *groot.ListTopUpProviderRequest, ...grpc.CallOption) *groot.ListTopUpProviderReply); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*groot.ListTopUpProviderReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *groot.ListTopUpProviderRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListWithdrawProvider provides a mock function with given fields: ctx, in, opts
func (_m *TaskMasterClient) ListWithdrawProvider(ctx context.Context, in *groot.ListWithdrawProviderRequest, opts ...grpc.CallOption) (*groot.ListWithdrawProviderReply, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *groot.ListWithdrawProviderReply
	if rf, ok := ret.Get(0).(func(context.Context, *groot.ListWithdrawProviderRequest, ...grpc.CallOption) *groot.ListWithdrawProviderReply); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*groot.ListWithdrawProviderReply)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *groot.ListWithdrawProviderRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
