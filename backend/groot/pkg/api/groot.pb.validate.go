// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: groot/api/groot.proto

package groot

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _groot_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on GetCardRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GetCardRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for TelcoName

	// no validation rules for Amount

	return nil
}

// GetCardRequestValidationError is the validation error returned by
// GetCardRequest.Validate if the designated constraints aren't met.
type GetCardRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCardRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCardRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCardRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCardRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCardRequestValidationError) ErrorName() string { return "GetCardRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetCardRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCardRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCardRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCardRequestValidationError{}

// Validate checks the field values on ChargeCardRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ChargeCardRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetCard()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChargeCardRequestValidationError{
				field:  "Card",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for PaymentId

	return nil
}

// ChargeCardRequestValidationError is the validation error returned by
// ChargeCardRequest.Validate if the designated constraints aren't met.
type ChargeCardRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChargeCardRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChargeCardRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChargeCardRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChargeCardRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChargeCardRequestValidationError) ErrorName() string {
	return "ChargeCardRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ChargeCardRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChargeCardRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChargeCardRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChargeCardRequestValidationError{}

// Validate checks the field values on GetTxIDByCardRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetTxIDByCardRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetCard()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTxIDByCardRequestValidationError{
				field:  "Card",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetTxIDByCardRequestValidationError is the validation error returned by
// GetTxIDByCardRequest.Validate if the designated constraints aren't met.
type GetTxIDByCardRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTxIDByCardRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTxIDByCardRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTxIDByCardRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTxIDByCardRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTxIDByCardRequestValidationError) ErrorName() string {
	return "GetTxIDByCardRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTxIDByCardRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTxIDByCardRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTxIDByCardRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTxIDByCardRequestValidationError{}

// Validate checks the field values on GetTxIDByCardReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetTxIDByCardReply) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for TxId

	return nil
}

// GetTxIDByCardReplyValidationError is the validation error returned by
// GetTxIDByCardReply.Validate if the designated constraints aren't met.
type GetTxIDByCardReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTxIDByCardReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTxIDByCardReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTxIDByCardReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTxIDByCardReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTxIDByCardReplyValidationError) ErrorName() string {
	return "GetTxIDByCardReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetTxIDByCardReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTxIDByCardReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTxIDByCardReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTxIDByCardReplyValidationError{}

// Validate checks the field values on ChargeCardReply with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ChargeCardReply) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ChargeCardReplyValidationError is the validation error returned by
// ChargeCardReply.Validate if the designated constraints aren't met.
type ChargeCardReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChargeCardReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChargeCardReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChargeCardReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChargeCardReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChargeCardReplyValidationError) ErrorName() string { return "ChargeCardReplyValidationError" }

// Error satisfies the builtin error interface
func (e ChargeCardReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChargeCardReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChargeCardReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChargeCardReplyValidationError{}

// Validate checks the field values on Card with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *Card) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Serial

	// no validation rules for TelcoName

	// no validation rules for Amount

	// no validation rules for Price

	return nil
}

// CardValidationError is the validation error returned by Card.Validate if the
// designated constraints aren't met.
type CardValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CardValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CardValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CardValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CardValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CardValidationError) ErrorName() string { return "CardValidationError" }

// Error satisfies the builtin error interface
func (e CardValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCard.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CardValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CardValidationError{}

// Validate checks the field values on Provider with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Provider) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Key

	// no validation rules for ProviderType

	// no validation rules for Priority

	// no validation rules for Enabled

	return nil
}

// ProviderValidationError is the validation error returned by
// Provider.Validate if the designated constraints aren't met.
type ProviderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProviderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProviderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProviderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProviderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProviderValidationError) ErrorName() string { return "ProviderValidationError" }

// Error satisfies the builtin error interface
func (e ProviderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProvider.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProviderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProviderValidationError{}
