// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"gitlab.com/mcuc/monorepo/backend/groot/pkg/ent/predicate"
	"gitlab.com/mcuc/monorepo/backend/groot/pkg/ent/topupprovider"
)

// TopUpProviderUpdate is the builder for updating TopUpProvider entities.
type TopUpProviderUpdate struct {
	config
	hooks    []Hook
	mutation *TopUpProviderMutation
}

// Where appends a list predicates to the TopUpProviderUpdate builder.
func (tupu *TopUpProviderUpdate) Where(ps ...predicate.TopUpProvider) *TopUpProviderUpdate {
	tupu.mutation.Where(ps...)
	return tupu
}

// SetName sets the "name" field.
func (tupu *TopUpProviderUpdate) SetName(i int64) *TopUpProviderUpdate {
	tupu.mutation.ResetName()
	tupu.mutation.SetName(i)
	return tupu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tupu *TopUpProviderUpdate) SetNillableName(i *int64) *TopUpProviderUpdate {
	if i != nil {
		tupu.SetName(*i)
	}
	return tupu
}

// AddName adds i to the "name" field.
func (tupu *TopUpProviderUpdate) AddName(i int64) *TopUpProviderUpdate {
	tupu.mutation.AddName(i)
	return tupu
}

// SetPriority sets the "priority" field.
func (tupu *TopUpProviderUpdate) SetPriority(i int64) *TopUpProviderUpdate {
	tupu.mutation.ResetPriority()
	tupu.mutation.SetPriority(i)
	return tupu
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (tupu *TopUpProviderUpdate) SetNillablePriority(i *int64) *TopUpProviderUpdate {
	if i != nil {
		tupu.SetPriority(*i)
	}
	return tupu
}

// AddPriority adds i to the "priority" field.
func (tupu *TopUpProviderUpdate) AddPriority(i int64) *TopUpProviderUpdate {
	tupu.mutation.AddPriority(i)
	return tupu
}

// SetKey sets the "key" field.
func (tupu *TopUpProviderUpdate) SetKey(s string) *TopUpProviderUpdate {
	tupu.mutation.SetKey(s)
	return tupu
}

// SetEnabled sets the "enabled" field.
func (tupu *TopUpProviderUpdate) SetEnabled(b bool) *TopUpProviderUpdate {
	tupu.mutation.SetEnabled(b)
	return tupu
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (tupu *TopUpProviderUpdate) SetNillableEnabled(b *bool) *TopUpProviderUpdate {
	if b != nil {
		tupu.SetEnabled(*b)
	}
	return tupu
}

// SetType sets the "type" field.
func (tupu *TopUpProviderUpdate) SetType(i int32) *TopUpProviderUpdate {
	tupu.mutation.ResetType()
	tupu.mutation.SetType(i)
	return tupu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (tupu *TopUpProviderUpdate) SetNillableType(i *int32) *TopUpProviderUpdate {
	if i != nil {
		tupu.SetType(*i)
	}
	return tupu
}

// AddType adds i to the "type" field.
func (tupu *TopUpProviderUpdate) AddType(i int32) *TopUpProviderUpdate {
	tupu.mutation.AddType(i)
	return tupu
}

// SetCreatedAt sets the "created_at" field.
func (tupu *TopUpProviderUpdate) SetCreatedAt(t time.Time) *TopUpProviderUpdate {
	tupu.mutation.SetCreatedAt(t)
	return tupu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tupu *TopUpProviderUpdate) SetNillableCreatedAt(t *time.Time) *TopUpProviderUpdate {
	if t != nil {
		tupu.SetCreatedAt(*t)
	}
	return tupu
}

// SetUpdatedAt sets the "updated_at" field.
func (tupu *TopUpProviderUpdate) SetUpdatedAt(t time.Time) *TopUpProviderUpdate {
	tupu.mutation.SetUpdatedAt(t)
	return tupu
}

// SetCreatedBy sets the "created_by" field.
func (tupu *TopUpProviderUpdate) SetCreatedBy(s string) *TopUpProviderUpdate {
	tupu.mutation.SetCreatedBy(s)
	return tupu
}

// SetUpdatedBy sets the "updated_by" field.
func (tupu *TopUpProviderUpdate) SetUpdatedBy(s string) *TopUpProviderUpdate {
	tupu.mutation.SetUpdatedBy(s)
	return tupu
}

// Mutation returns the TopUpProviderMutation object of the builder.
func (tupu *TopUpProviderUpdate) Mutation() *TopUpProviderMutation {
	return tupu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tupu *TopUpProviderUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	tupu.defaults()
	if len(tupu.hooks) == 0 {
		if err = tupu.check(); err != nil {
			return 0, err
		}
		affected, err = tupu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TopUpProviderMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tupu.check(); err != nil {
				return 0, err
			}
			tupu.mutation = mutation
			affected, err = tupu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tupu.hooks) - 1; i >= 0; i-- {
			if tupu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tupu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tupu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tupu *TopUpProviderUpdate) SaveX(ctx context.Context) int {
	affected, err := tupu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tupu *TopUpProviderUpdate) Exec(ctx context.Context) error {
	_, err := tupu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tupu *TopUpProviderUpdate) ExecX(ctx context.Context) {
	if err := tupu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tupu *TopUpProviderUpdate) defaults() {
	if _, ok := tupu.mutation.UpdatedAt(); !ok {
		v := topupprovider.UpdateDefaultUpdatedAt()
		tupu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tupu *TopUpProviderUpdate) check() error {
	if v, ok := tupu.mutation.Name(); ok {
		if err := topupprovider.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if v, ok := tupu.mutation.Priority(); ok {
		if err := topupprovider.PriorityValidator(v); err != nil {
			return &ValidationError{Name: "priority", err: fmt.Errorf("ent: validator failed for field \"priority\": %w", err)}
		}
	}
	if v, ok := tupu.mutation.Key(); ok {
		if err := topupprovider.KeyValidator(v); err != nil {
			return &ValidationError{Name: "key", err: fmt.Errorf("ent: validator failed for field \"key\": %w", err)}
		}
	}
	if v, ok := tupu.mutation.GetType(); ok {
		if err := topupprovider.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf("ent: validator failed for field \"type\": %w", err)}
		}
	}
	if v, ok := tupu.mutation.CreatedBy(); ok {
		if err := topupprovider.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf("ent: validator failed for field \"created_by\": %w", err)}
		}
	}
	if v, ok := tupu.mutation.UpdatedBy(); ok {
		if err := topupprovider.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf("ent: validator failed for field \"updated_by\": %w", err)}
		}
	}
	return nil
}

func (tupu *TopUpProviderUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   topupprovider.Table,
			Columns: topupprovider.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: topupprovider.FieldID,
			},
		},
	}
	if ps := tupu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tupu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: topupprovider.FieldName,
		})
	}
	if value, ok := tupu.mutation.AddedName(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: topupprovider.FieldName,
		})
	}
	if value, ok := tupu.mutation.Priority(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: topupprovider.FieldPriority,
		})
	}
	if value, ok := tupu.mutation.AddedPriority(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: topupprovider.FieldPriority,
		})
	}
	if value, ok := tupu.mutation.Key(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: topupprovider.FieldKey,
		})
	}
	if value, ok := tupu.mutation.Enabled(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: topupprovider.FieldEnabled,
		})
	}
	if value, ok := tupu.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: topupprovider.FieldType,
		})
	}
	if value, ok := tupu.mutation.AddedType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: topupprovider.FieldType,
		})
	}
	if value, ok := tupu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: topupprovider.FieldCreatedAt,
		})
	}
	if value, ok := tupu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: topupprovider.FieldUpdatedAt,
		})
	}
	if value, ok := tupu.mutation.CreatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: topupprovider.FieldCreatedBy,
		})
	}
	if value, ok := tupu.mutation.UpdatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: topupprovider.FieldUpdatedBy,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tupu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{topupprovider.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// TopUpProviderUpdateOne is the builder for updating a single TopUpProvider entity.
type TopUpProviderUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TopUpProviderMutation
}

// SetName sets the "name" field.
func (tupuo *TopUpProviderUpdateOne) SetName(i int64) *TopUpProviderUpdateOne {
	tupuo.mutation.ResetName()
	tupuo.mutation.SetName(i)
	return tupuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tupuo *TopUpProviderUpdateOne) SetNillableName(i *int64) *TopUpProviderUpdateOne {
	if i != nil {
		tupuo.SetName(*i)
	}
	return tupuo
}

// AddName adds i to the "name" field.
func (tupuo *TopUpProviderUpdateOne) AddName(i int64) *TopUpProviderUpdateOne {
	tupuo.mutation.AddName(i)
	return tupuo
}

// SetPriority sets the "priority" field.
func (tupuo *TopUpProviderUpdateOne) SetPriority(i int64) *TopUpProviderUpdateOne {
	tupuo.mutation.ResetPriority()
	tupuo.mutation.SetPriority(i)
	return tupuo
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (tupuo *TopUpProviderUpdateOne) SetNillablePriority(i *int64) *TopUpProviderUpdateOne {
	if i != nil {
		tupuo.SetPriority(*i)
	}
	return tupuo
}

// AddPriority adds i to the "priority" field.
func (tupuo *TopUpProviderUpdateOne) AddPriority(i int64) *TopUpProviderUpdateOne {
	tupuo.mutation.AddPriority(i)
	return tupuo
}

// SetKey sets the "key" field.
func (tupuo *TopUpProviderUpdateOne) SetKey(s string) *TopUpProviderUpdateOne {
	tupuo.mutation.SetKey(s)
	return tupuo
}

// SetEnabled sets the "enabled" field.
func (tupuo *TopUpProviderUpdateOne) SetEnabled(b bool) *TopUpProviderUpdateOne {
	tupuo.mutation.SetEnabled(b)
	return tupuo
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (tupuo *TopUpProviderUpdateOne) SetNillableEnabled(b *bool) *TopUpProviderUpdateOne {
	if b != nil {
		tupuo.SetEnabled(*b)
	}
	return tupuo
}

// SetType sets the "type" field.
func (tupuo *TopUpProviderUpdateOne) SetType(i int32) *TopUpProviderUpdateOne {
	tupuo.mutation.ResetType()
	tupuo.mutation.SetType(i)
	return tupuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (tupuo *TopUpProviderUpdateOne) SetNillableType(i *int32) *TopUpProviderUpdateOne {
	if i != nil {
		tupuo.SetType(*i)
	}
	return tupuo
}

// AddType adds i to the "type" field.
func (tupuo *TopUpProviderUpdateOne) AddType(i int32) *TopUpProviderUpdateOne {
	tupuo.mutation.AddType(i)
	return tupuo
}

// SetCreatedAt sets the "created_at" field.
func (tupuo *TopUpProviderUpdateOne) SetCreatedAt(t time.Time) *TopUpProviderUpdateOne {
	tupuo.mutation.SetCreatedAt(t)
	return tupuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tupuo *TopUpProviderUpdateOne) SetNillableCreatedAt(t *time.Time) *TopUpProviderUpdateOne {
	if t != nil {
		tupuo.SetCreatedAt(*t)
	}
	return tupuo
}

// SetUpdatedAt sets the "updated_at" field.
func (tupuo *TopUpProviderUpdateOne) SetUpdatedAt(t time.Time) *TopUpProviderUpdateOne {
	tupuo.mutation.SetUpdatedAt(t)
	return tupuo
}

// SetCreatedBy sets the "created_by" field.
func (tupuo *TopUpProviderUpdateOne) SetCreatedBy(s string) *TopUpProviderUpdateOne {
	tupuo.mutation.SetCreatedBy(s)
	return tupuo
}

// SetUpdatedBy sets the "updated_by" field.
func (tupuo *TopUpProviderUpdateOne) SetUpdatedBy(s string) *TopUpProviderUpdateOne {
	tupuo.mutation.SetUpdatedBy(s)
	return tupuo
}

// Mutation returns the TopUpProviderMutation object of the builder.
func (tupuo *TopUpProviderUpdateOne) Mutation() *TopUpProviderMutation {
	return tupuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tupuo *TopUpProviderUpdateOne) Select(field string, fields ...string) *TopUpProviderUpdateOne {
	tupuo.fields = append([]string{field}, fields...)
	return tupuo
}

// Save executes the query and returns the updated TopUpProvider entity.
func (tupuo *TopUpProviderUpdateOne) Save(ctx context.Context) (*TopUpProvider, error) {
	var (
		err  error
		node *TopUpProvider
	)
	tupuo.defaults()
	if len(tupuo.hooks) == 0 {
		if err = tupuo.check(); err != nil {
			return nil, err
		}
		node, err = tupuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TopUpProviderMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tupuo.check(); err != nil {
				return nil, err
			}
			tupuo.mutation = mutation
			node, err = tupuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tupuo.hooks) - 1; i >= 0; i-- {
			if tupuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tupuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tupuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (tupuo *TopUpProviderUpdateOne) SaveX(ctx context.Context) *TopUpProvider {
	node, err := tupuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tupuo *TopUpProviderUpdateOne) Exec(ctx context.Context) error {
	_, err := tupuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tupuo *TopUpProviderUpdateOne) ExecX(ctx context.Context) {
	if err := tupuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tupuo *TopUpProviderUpdateOne) defaults() {
	if _, ok := tupuo.mutation.UpdatedAt(); !ok {
		v := topupprovider.UpdateDefaultUpdatedAt()
		tupuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tupuo *TopUpProviderUpdateOne) check() error {
	if v, ok := tupuo.mutation.Name(); ok {
		if err := topupprovider.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if v, ok := tupuo.mutation.Priority(); ok {
		if err := topupprovider.PriorityValidator(v); err != nil {
			return &ValidationError{Name: "priority", err: fmt.Errorf("ent: validator failed for field \"priority\": %w", err)}
		}
	}
	if v, ok := tupuo.mutation.Key(); ok {
		if err := topupprovider.KeyValidator(v); err != nil {
			return &ValidationError{Name: "key", err: fmt.Errorf("ent: validator failed for field \"key\": %w", err)}
		}
	}
	if v, ok := tupuo.mutation.GetType(); ok {
		if err := topupprovider.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf("ent: validator failed for field \"type\": %w", err)}
		}
	}
	if v, ok := tupuo.mutation.CreatedBy(); ok {
		if err := topupprovider.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf("ent: validator failed for field \"created_by\": %w", err)}
		}
	}
	if v, ok := tupuo.mutation.UpdatedBy(); ok {
		if err := topupprovider.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf("ent: validator failed for field \"updated_by\": %w", err)}
		}
	}
	return nil
}

func (tupuo *TopUpProviderUpdateOne) sqlSave(ctx context.Context) (_node *TopUpProvider, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   topupprovider.Table,
			Columns: topupprovider.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: topupprovider.FieldID,
			},
		},
	}
	id, ok := tupuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing TopUpProvider.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := tupuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, topupprovider.FieldID)
		for _, f := range fields {
			if !topupprovider.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != topupprovider.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tupuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tupuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: topupprovider.FieldName,
		})
	}
	if value, ok := tupuo.mutation.AddedName(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: topupprovider.FieldName,
		})
	}
	if value, ok := tupuo.mutation.Priority(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: topupprovider.FieldPriority,
		})
	}
	if value, ok := tupuo.mutation.AddedPriority(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: topupprovider.FieldPriority,
		})
	}
	if value, ok := tupuo.mutation.Key(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: topupprovider.FieldKey,
		})
	}
	if value, ok := tupuo.mutation.Enabled(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: topupprovider.FieldEnabled,
		})
	}
	if value, ok := tupuo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: topupprovider.FieldType,
		})
	}
	if value, ok := tupuo.mutation.AddedType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: topupprovider.FieldType,
		})
	}
	if value, ok := tupuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: topupprovider.FieldCreatedAt,
		})
	}
	if value, ok := tupuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: topupprovider.FieldUpdatedAt,
		})
	}
	if value, ok := tupuo.mutation.CreatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: topupprovider.FieldCreatedBy,
		})
	}
	if value, ok := tupuo.mutation.UpdatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: topupprovider.FieldUpdatedBy,
		})
	}
	_node = &TopUpProvider{config: tupuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tupuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{topupprovider.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
