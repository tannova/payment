// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"gitlab.com/mcuc/monorepo/backend/groot/pkg/ent/topupprovider"
)

// TopUpProviderCreate is the builder for creating a TopUpProvider entity.
type TopUpProviderCreate struct {
	config
	mutation *TopUpProviderMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetName sets the "name" field.
func (tupc *TopUpProviderCreate) SetName(i int64) *TopUpProviderCreate {
	tupc.mutation.SetName(i)
	return tupc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tupc *TopUpProviderCreate) SetNillableName(i *int64) *TopUpProviderCreate {
	if i != nil {
		tupc.SetName(*i)
	}
	return tupc
}

// SetPriority sets the "priority" field.
func (tupc *TopUpProviderCreate) SetPriority(i int64) *TopUpProviderCreate {
	tupc.mutation.SetPriority(i)
	return tupc
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (tupc *TopUpProviderCreate) SetNillablePriority(i *int64) *TopUpProviderCreate {
	if i != nil {
		tupc.SetPriority(*i)
	}
	return tupc
}

// SetKey sets the "key" field.
func (tupc *TopUpProviderCreate) SetKey(s string) *TopUpProviderCreate {
	tupc.mutation.SetKey(s)
	return tupc
}

// SetEnabled sets the "enabled" field.
func (tupc *TopUpProviderCreate) SetEnabled(b bool) *TopUpProviderCreate {
	tupc.mutation.SetEnabled(b)
	return tupc
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (tupc *TopUpProviderCreate) SetNillableEnabled(b *bool) *TopUpProviderCreate {
	if b != nil {
		tupc.SetEnabled(*b)
	}
	return tupc
}

// SetType sets the "type" field.
func (tupc *TopUpProviderCreate) SetType(i int32) *TopUpProviderCreate {
	tupc.mutation.SetType(i)
	return tupc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (tupc *TopUpProviderCreate) SetNillableType(i *int32) *TopUpProviderCreate {
	if i != nil {
		tupc.SetType(*i)
	}
	return tupc
}

// SetCreatedAt sets the "created_at" field.
func (tupc *TopUpProviderCreate) SetCreatedAt(t time.Time) *TopUpProviderCreate {
	tupc.mutation.SetCreatedAt(t)
	return tupc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tupc *TopUpProviderCreate) SetNillableCreatedAt(t *time.Time) *TopUpProviderCreate {
	if t != nil {
		tupc.SetCreatedAt(*t)
	}
	return tupc
}

// SetUpdatedAt sets the "updated_at" field.
func (tupc *TopUpProviderCreate) SetUpdatedAt(t time.Time) *TopUpProviderCreate {
	tupc.mutation.SetUpdatedAt(t)
	return tupc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tupc *TopUpProviderCreate) SetNillableUpdatedAt(t *time.Time) *TopUpProviderCreate {
	if t != nil {
		tupc.SetUpdatedAt(*t)
	}
	return tupc
}

// SetCreatedBy sets the "created_by" field.
func (tupc *TopUpProviderCreate) SetCreatedBy(s string) *TopUpProviderCreate {
	tupc.mutation.SetCreatedBy(s)
	return tupc
}

// SetUpdatedBy sets the "updated_by" field.
func (tupc *TopUpProviderCreate) SetUpdatedBy(s string) *TopUpProviderCreate {
	tupc.mutation.SetUpdatedBy(s)
	return tupc
}

// SetID sets the "id" field.
func (tupc *TopUpProviderCreate) SetID(i int64) *TopUpProviderCreate {
	tupc.mutation.SetID(i)
	return tupc
}

// Mutation returns the TopUpProviderMutation object of the builder.
func (tupc *TopUpProviderCreate) Mutation() *TopUpProviderMutation {
	return tupc.mutation
}

// Save creates the TopUpProvider in the database.
func (tupc *TopUpProviderCreate) Save(ctx context.Context) (*TopUpProvider, error) {
	var (
		err  error
		node *TopUpProvider
	)
	tupc.defaults()
	if len(tupc.hooks) == 0 {
		if err = tupc.check(); err != nil {
			return nil, err
		}
		node, err = tupc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TopUpProviderMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tupc.check(); err != nil {
				return nil, err
			}
			tupc.mutation = mutation
			if node, err = tupc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(tupc.hooks) - 1; i >= 0; i-- {
			if tupc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tupc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tupc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (tupc *TopUpProviderCreate) SaveX(ctx context.Context) *TopUpProvider {
	v, err := tupc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tupc *TopUpProviderCreate) Exec(ctx context.Context) error {
	_, err := tupc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tupc *TopUpProviderCreate) ExecX(ctx context.Context) {
	if err := tupc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tupc *TopUpProviderCreate) defaults() {
	if _, ok := tupc.mutation.Name(); !ok {
		v := topupprovider.DefaultName
		tupc.mutation.SetName(v)
	}
	if _, ok := tupc.mutation.Priority(); !ok {
		v := topupprovider.DefaultPriority
		tupc.mutation.SetPriority(v)
	}
	if _, ok := tupc.mutation.Enabled(); !ok {
		v := topupprovider.DefaultEnabled
		tupc.mutation.SetEnabled(v)
	}
	if _, ok := tupc.mutation.GetType(); !ok {
		v := topupprovider.DefaultType
		tupc.mutation.SetType(v)
	}
	if _, ok := tupc.mutation.CreatedAt(); !ok {
		v := topupprovider.DefaultCreatedAt()
		tupc.mutation.SetCreatedAt(v)
	}
	if _, ok := tupc.mutation.UpdatedAt(); !ok {
		v := topupprovider.DefaultUpdatedAt()
		tupc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tupc *TopUpProviderCreate) check() error {
	if _, ok := tupc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "name"`)}
	}
	if v, ok := tupc.mutation.Name(); ok {
		if err := topupprovider.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "name": %w`, err)}
		}
	}
	if _, ok := tupc.mutation.Priority(); !ok {
		return &ValidationError{Name: "priority", err: errors.New(`ent: missing required field "priority"`)}
	}
	if v, ok := tupc.mutation.Priority(); ok {
		if err := topupprovider.PriorityValidator(v); err != nil {
			return &ValidationError{Name: "priority", err: fmt.Errorf(`ent: validator failed for field "priority": %w`, err)}
		}
	}
	if _, ok := tupc.mutation.Key(); !ok {
		return &ValidationError{Name: "key", err: errors.New(`ent: missing required field "key"`)}
	}
	if v, ok := tupc.mutation.Key(); ok {
		if err := topupprovider.KeyValidator(v); err != nil {
			return &ValidationError{Name: "key", err: fmt.Errorf(`ent: validator failed for field "key": %w`, err)}
		}
	}
	if _, ok := tupc.mutation.Enabled(); !ok {
		return &ValidationError{Name: "enabled", err: errors.New(`ent: missing required field "enabled"`)}
	}
	if _, ok := tupc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "type"`)}
	}
	if v, ok := tupc.mutation.GetType(); ok {
		if err := topupprovider.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "type": %w`, err)}
		}
	}
	if _, ok := tupc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "created_at"`)}
	}
	if _, ok := tupc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "updated_at"`)}
	}
	if _, ok := tupc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent: missing required field "created_by"`)}
	}
	if v, ok := tupc.mutation.CreatedBy(); ok {
		if err := topupprovider.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "created_by": %w`, err)}
		}
	}
	if _, ok := tupc.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`ent: missing required field "updated_by"`)}
	}
	if v, ok := tupc.mutation.UpdatedBy(); ok {
		if err := topupprovider.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "updated_by": %w`, err)}
		}
	}
	return nil
}

func (tupc *TopUpProviderCreate) sqlSave(ctx context.Context) (*TopUpProvider, error) {
	_node, _spec := tupc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tupc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	return _node, nil
}

func (tupc *TopUpProviderCreate) createSpec() (*TopUpProvider, *sqlgraph.CreateSpec) {
	var (
		_node = &TopUpProvider{config: tupc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: topupprovider.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: topupprovider.FieldID,
			},
		}
	)
	_spec.OnConflict = tupc.conflict
	if id, ok := tupc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tupc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: topupprovider.FieldName,
		})
		_node.Name = value
	}
	if value, ok := tupc.mutation.Priority(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: topupprovider.FieldPriority,
		})
		_node.Priority = value
	}
	if value, ok := tupc.mutation.Key(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: topupprovider.FieldKey,
		})
		_node.Key = value
	}
	if value, ok := tupc.mutation.Enabled(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: topupprovider.FieldEnabled,
		})
		_node.Enabled = value
	}
	if value, ok := tupc.mutation.GetType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: topupprovider.FieldType,
		})
		_node.Type = value
	}
	if value, ok := tupc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: topupprovider.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := tupc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: topupprovider.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := tupc.mutation.CreatedBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: topupprovider.FieldCreatedBy,
		})
		_node.CreatedBy = value
	}
	if value, ok := tupc.mutation.UpdatedBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: topupprovider.FieldUpdatedBy,
		})
		_node.UpdatedBy = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TopUpProvider.Create().
//		SetName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TopUpProviderUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
//
func (tupc *TopUpProviderCreate) OnConflict(opts ...sql.ConflictOption) *TopUpProviderUpsertOne {
	tupc.conflict = opts
	return &TopUpProviderUpsertOne{
		create: tupc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TopUpProvider.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (tupc *TopUpProviderCreate) OnConflictColumns(columns ...string) *TopUpProviderUpsertOne {
	tupc.conflict = append(tupc.conflict, sql.ConflictColumns(columns...))
	return &TopUpProviderUpsertOne{
		create: tupc,
	}
}

type (
	// TopUpProviderUpsertOne is the builder for "upsert"-ing
	//  one TopUpProvider node.
	TopUpProviderUpsertOne struct {
		create *TopUpProviderCreate
	}

	// TopUpProviderUpsert is the "OnConflict" setter.
	TopUpProviderUpsert struct {
		*sql.UpdateSet
	}
)

// SetName sets the "name" field.
func (u *TopUpProviderUpsert) SetName(v int64) *TopUpProviderUpsert {
	u.Set(topupprovider.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TopUpProviderUpsert) UpdateName() *TopUpProviderUpsert {
	u.SetExcluded(topupprovider.FieldName)
	return u
}

// SetPriority sets the "priority" field.
func (u *TopUpProviderUpsert) SetPriority(v int64) *TopUpProviderUpsert {
	u.Set(topupprovider.FieldPriority, v)
	return u
}

// UpdatePriority sets the "priority" field to the value that was provided on create.
func (u *TopUpProviderUpsert) UpdatePriority() *TopUpProviderUpsert {
	u.SetExcluded(topupprovider.FieldPriority)
	return u
}

// SetKey sets the "key" field.
func (u *TopUpProviderUpsert) SetKey(v string) *TopUpProviderUpsert {
	u.Set(topupprovider.FieldKey, v)
	return u
}

// UpdateKey sets the "key" field to the value that was provided on create.
func (u *TopUpProviderUpsert) UpdateKey() *TopUpProviderUpsert {
	u.SetExcluded(topupprovider.FieldKey)
	return u
}

// SetEnabled sets the "enabled" field.
func (u *TopUpProviderUpsert) SetEnabled(v bool) *TopUpProviderUpsert {
	u.Set(topupprovider.FieldEnabled, v)
	return u
}

// UpdateEnabled sets the "enabled" field to the value that was provided on create.
func (u *TopUpProviderUpsert) UpdateEnabled() *TopUpProviderUpsert {
	u.SetExcluded(topupprovider.FieldEnabled)
	return u
}

// SetType sets the "type" field.
func (u *TopUpProviderUpsert) SetType(v int32) *TopUpProviderUpsert {
	u.Set(topupprovider.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *TopUpProviderUpsert) UpdateType() *TopUpProviderUpsert {
	u.SetExcluded(topupprovider.FieldType)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *TopUpProviderUpsert) SetCreatedAt(v time.Time) *TopUpProviderUpsert {
	u.Set(topupprovider.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *TopUpProviderUpsert) UpdateCreatedAt() *TopUpProviderUpsert {
	u.SetExcluded(topupprovider.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TopUpProviderUpsert) SetUpdatedAt(v time.Time) *TopUpProviderUpsert {
	u.Set(topupprovider.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TopUpProviderUpsert) UpdateUpdatedAt() *TopUpProviderUpsert {
	u.SetExcluded(topupprovider.FieldUpdatedAt)
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *TopUpProviderUpsert) SetCreatedBy(v string) *TopUpProviderUpsert {
	u.Set(topupprovider.FieldCreatedBy, v)
	return u
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *TopUpProviderUpsert) UpdateCreatedBy() *TopUpProviderUpsert {
	u.SetExcluded(topupprovider.FieldCreatedBy)
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *TopUpProviderUpsert) SetUpdatedBy(v string) *TopUpProviderUpsert {
	u.Set(topupprovider.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *TopUpProviderUpsert) UpdateUpdatedBy() *TopUpProviderUpsert {
	u.SetExcluded(topupprovider.FieldUpdatedBy)
	return u
}

// UpdateNewValues updates the fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.TopUpProvider.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(topupprovider.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *TopUpProviderUpsertOne) UpdateNewValues() *TopUpProviderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(topupprovider.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.TopUpProvider.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *TopUpProviderUpsertOne) Ignore() *TopUpProviderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TopUpProviderUpsertOne) DoNothing() *TopUpProviderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TopUpProviderCreate.OnConflict
// documentation for more info.
func (u *TopUpProviderUpsertOne) Update(set func(*TopUpProviderUpsert)) *TopUpProviderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TopUpProviderUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *TopUpProviderUpsertOne) SetName(v int64) *TopUpProviderUpsertOne {
	return u.Update(func(s *TopUpProviderUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TopUpProviderUpsertOne) UpdateName() *TopUpProviderUpsertOne {
	return u.Update(func(s *TopUpProviderUpsert) {
		s.UpdateName()
	})
}

// SetPriority sets the "priority" field.
func (u *TopUpProviderUpsertOne) SetPriority(v int64) *TopUpProviderUpsertOne {
	return u.Update(func(s *TopUpProviderUpsert) {
		s.SetPriority(v)
	})
}

// UpdatePriority sets the "priority" field to the value that was provided on create.
func (u *TopUpProviderUpsertOne) UpdatePriority() *TopUpProviderUpsertOne {
	return u.Update(func(s *TopUpProviderUpsert) {
		s.UpdatePriority()
	})
}

// SetKey sets the "key" field.
func (u *TopUpProviderUpsertOne) SetKey(v string) *TopUpProviderUpsertOne {
	return u.Update(func(s *TopUpProviderUpsert) {
		s.SetKey(v)
	})
}

// UpdateKey sets the "key" field to the value that was provided on create.
func (u *TopUpProviderUpsertOne) UpdateKey() *TopUpProviderUpsertOne {
	return u.Update(func(s *TopUpProviderUpsert) {
		s.UpdateKey()
	})
}

// SetEnabled sets the "enabled" field.
func (u *TopUpProviderUpsertOne) SetEnabled(v bool) *TopUpProviderUpsertOne {
	return u.Update(func(s *TopUpProviderUpsert) {
		s.SetEnabled(v)
	})
}

// UpdateEnabled sets the "enabled" field to the value that was provided on create.
func (u *TopUpProviderUpsertOne) UpdateEnabled() *TopUpProviderUpsertOne {
	return u.Update(func(s *TopUpProviderUpsert) {
		s.UpdateEnabled()
	})
}

// SetType sets the "type" field.
func (u *TopUpProviderUpsertOne) SetType(v int32) *TopUpProviderUpsertOne {
	return u.Update(func(s *TopUpProviderUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *TopUpProviderUpsertOne) UpdateType() *TopUpProviderUpsertOne {
	return u.Update(func(s *TopUpProviderUpsert) {
		s.UpdateType()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *TopUpProviderUpsertOne) SetCreatedAt(v time.Time) *TopUpProviderUpsertOne {
	return u.Update(func(s *TopUpProviderUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *TopUpProviderUpsertOne) UpdateCreatedAt() *TopUpProviderUpsertOne {
	return u.Update(func(s *TopUpProviderUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TopUpProviderUpsertOne) SetUpdatedAt(v time.Time) *TopUpProviderUpsertOne {
	return u.Update(func(s *TopUpProviderUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TopUpProviderUpsertOne) UpdateUpdatedAt() *TopUpProviderUpsertOne {
	return u.Update(func(s *TopUpProviderUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetCreatedBy sets the "created_by" field.
func (u *TopUpProviderUpsertOne) SetCreatedBy(v string) *TopUpProviderUpsertOne {
	return u.Update(func(s *TopUpProviderUpsert) {
		s.SetCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *TopUpProviderUpsertOne) UpdateCreatedBy() *TopUpProviderUpsertOne {
	return u.Update(func(s *TopUpProviderUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *TopUpProviderUpsertOne) SetUpdatedBy(v string) *TopUpProviderUpsertOne {
	return u.Update(func(s *TopUpProviderUpsert) {
		s.SetUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *TopUpProviderUpsertOne) UpdateUpdatedBy() *TopUpProviderUpsertOne {
	return u.Update(func(s *TopUpProviderUpsert) {
		s.UpdateUpdatedBy()
	})
}

// Exec executes the query.
func (u *TopUpProviderUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TopUpProviderCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TopUpProviderUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TopUpProviderUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TopUpProviderUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TopUpProviderCreateBulk is the builder for creating many TopUpProvider entities in bulk.
type TopUpProviderCreateBulk struct {
	config
	builders []*TopUpProviderCreate
	conflict []sql.ConflictOption
}

// Save creates the TopUpProvider entities in the database.
func (tupcb *TopUpProviderCreateBulk) Save(ctx context.Context) ([]*TopUpProvider, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tupcb.builders))
	nodes := make([]*TopUpProvider, len(tupcb.builders))
	mutators := make([]Mutator, len(tupcb.builders))
	for i := range tupcb.builders {
		func(i int, root context.Context) {
			builder := tupcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TopUpProviderMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tupcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tupcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tupcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tupcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tupcb *TopUpProviderCreateBulk) SaveX(ctx context.Context) []*TopUpProvider {
	v, err := tupcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tupcb *TopUpProviderCreateBulk) Exec(ctx context.Context) error {
	_, err := tupcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tupcb *TopUpProviderCreateBulk) ExecX(ctx context.Context) {
	if err := tupcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TopUpProvider.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TopUpProviderUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
//
func (tupcb *TopUpProviderCreateBulk) OnConflict(opts ...sql.ConflictOption) *TopUpProviderUpsertBulk {
	tupcb.conflict = opts
	return &TopUpProviderUpsertBulk{
		create: tupcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TopUpProvider.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (tupcb *TopUpProviderCreateBulk) OnConflictColumns(columns ...string) *TopUpProviderUpsertBulk {
	tupcb.conflict = append(tupcb.conflict, sql.ConflictColumns(columns...))
	return &TopUpProviderUpsertBulk{
		create: tupcb,
	}
}

// TopUpProviderUpsertBulk is the builder for "upsert"-ing
// a bulk of TopUpProvider nodes.
type TopUpProviderUpsertBulk struct {
	create *TopUpProviderCreateBulk
}

// UpdateNewValues updates the fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.TopUpProvider.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(topupprovider.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *TopUpProviderUpsertBulk) UpdateNewValues() *TopUpProviderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(topupprovider.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TopUpProvider.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *TopUpProviderUpsertBulk) Ignore() *TopUpProviderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TopUpProviderUpsertBulk) DoNothing() *TopUpProviderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TopUpProviderCreateBulk.OnConflict
// documentation for more info.
func (u *TopUpProviderUpsertBulk) Update(set func(*TopUpProviderUpsert)) *TopUpProviderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TopUpProviderUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *TopUpProviderUpsertBulk) SetName(v int64) *TopUpProviderUpsertBulk {
	return u.Update(func(s *TopUpProviderUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TopUpProviderUpsertBulk) UpdateName() *TopUpProviderUpsertBulk {
	return u.Update(func(s *TopUpProviderUpsert) {
		s.UpdateName()
	})
}

// SetPriority sets the "priority" field.
func (u *TopUpProviderUpsertBulk) SetPriority(v int64) *TopUpProviderUpsertBulk {
	return u.Update(func(s *TopUpProviderUpsert) {
		s.SetPriority(v)
	})
}

// UpdatePriority sets the "priority" field to the value that was provided on create.
func (u *TopUpProviderUpsertBulk) UpdatePriority() *TopUpProviderUpsertBulk {
	return u.Update(func(s *TopUpProviderUpsert) {
		s.UpdatePriority()
	})
}

// SetKey sets the "key" field.
func (u *TopUpProviderUpsertBulk) SetKey(v string) *TopUpProviderUpsertBulk {
	return u.Update(func(s *TopUpProviderUpsert) {
		s.SetKey(v)
	})
}

// UpdateKey sets the "key" field to the value that was provided on create.
func (u *TopUpProviderUpsertBulk) UpdateKey() *TopUpProviderUpsertBulk {
	return u.Update(func(s *TopUpProviderUpsert) {
		s.UpdateKey()
	})
}

// SetEnabled sets the "enabled" field.
func (u *TopUpProviderUpsertBulk) SetEnabled(v bool) *TopUpProviderUpsertBulk {
	return u.Update(func(s *TopUpProviderUpsert) {
		s.SetEnabled(v)
	})
}

// UpdateEnabled sets the "enabled" field to the value that was provided on create.
func (u *TopUpProviderUpsertBulk) UpdateEnabled() *TopUpProviderUpsertBulk {
	return u.Update(func(s *TopUpProviderUpsert) {
		s.UpdateEnabled()
	})
}

// SetType sets the "type" field.
func (u *TopUpProviderUpsertBulk) SetType(v int32) *TopUpProviderUpsertBulk {
	return u.Update(func(s *TopUpProviderUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *TopUpProviderUpsertBulk) UpdateType() *TopUpProviderUpsertBulk {
	return u.Update(func(s *TopUpProviderUpsert) {
		s.UpdateType()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *TopUpProviderUpsertBulk) SetCreatedAt(v time.Time) *TopUpProviderUpsertBulk {
	return u.Update(func(s *TopUpProviderUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *TopUpProviderUpsertBulk) UpdateCreatedAt() *TopUpProviderUpsertBulk {
	return u.Update(func(s *TopUpProviderUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TopUpProviderUpsertBulk) SetUpdatedAt(v time.Time) *TopUpProviderUpsertBulk {
	return u.Update(func(s *TopUpProviderUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TopUpProviderUpsertBulk) UpdateUpdatedAt() *TopUpProviderUpsertBulk {
	return u.Update(func(s *TopUpProviderUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetCreatedBy sets the "created_by" field.
func (u *TopUpProviderUpsertBulk) SetCreatedBy(v string) *TopUpProviderUpsertBulk {
	return u.Update(func(s *TopUpProviderUpsert) {
		s.SetCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *TopUpProviderUpsertBulk) UpdateCreatedBy() *TopUpProviderUpsertBulk {
	return u.Update(func(s *TopUpProviderUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *TopUpProviderUpsertBulk) SetUpdatedBy(v string) *TopUpProviderUpsertBulk {
	return u.Update(func(s *TopUpProviderUpsert) {
		s.SetUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *TopUpProviderUpsertBulk) UpdateUpdatedBy() *TopUpProviderUpsertBulk {
	return u.Update(func(s *TopUpProviderUpsert) {
		s.UpdateUpdatedBy()
	})
}

// Exec executes the query.
func (u *TopUpProviderUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the TopUpProviderCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TopUpProviderCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TopUpProviderUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
