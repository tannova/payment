// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"gitlab.com/mcuc/monorepo/backend/groot/pkg/ent/telco"
)

// Telco is the model entity for the Telco schema.
type Telco struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// TelcoName holds the value of the "telco_name" field.
	TelcoName int64 `json:"telco_name,omitempty"`
	// Code holds the value of the "code" field.
	Code string `json:"code,omitempty"`
	// Serial holds the value of the "serial" field.
	Serial string `json:"serial,omitempty"`
	// Amount holds the value of the "amount" field.
	Amount uint64 `json:"amount,omitempty"`
	// Used holds the value of the "used" field.
	Used bool `json:"used,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Telco) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case telco.FieldUsed:
			values[i] = new(sql.NullBool)
		case telco.FieldID, telco.FieldTelcoName, telco.FieldAmount:
			values[i] = new(sql.NullInt64)
		case telco.FieldCode, telco.FieldSerial, telco.FieldCreatedBy, telco.FieldUpdatedBy:
			values[i] = new(sql.NullString)
		case telco.FieldCreatedAt, telco.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Telco", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Telco fields.
func (t *Telco) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case telco.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			t.ID = int64(value.Int64)
		case telco.FieldTelcoName:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field telco_name", values[i])
			} else if value.Valid {
				t.TelcoName = value.Int64
			}
		case telco.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				t.Code = value.String
			}
		case telco.FieldSerial:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field serial", values[i])
			} else if value.Valid {
				t.Serial = value.String
			}
		case telco.FieldAmount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value.Valid {
				t.Amount = uint64(value.Int64)
			}
		case telco.FieldUsed:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field used", values[i])
			} else if value.Valid {
				t.Used = value.Bool
			}
		case telco.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				t.CreatedAt = value.Time
			}
		case telco.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				t.UpdatedAt = value.Time
			}
		case telco.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				t.CreatedBy = value.String
			}
		case telco.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				t.UpdatedBy = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Telco.
// Note that you need to call Telco.Unwrap() before calling this method if this Telco
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Telco) Update() *TelcoUpdateOne {
	return (&TelcoClient{config: t.config}).UpdateOne(t)
}

// Unwrap unwraps the Telco entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Telco) Unwrap() *Telco {
	tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Telco is not a transactional entity")
	}
	t.config.driver = tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Telco) String() string {
	var builder strings.Builder
	builder.WriteString("Telco(")
	builder.WriteString(fmt.Sprintf("id=%v", t.ID))
	builder.WriteString(", telco_name=")
	builder.WriteString(fmt.Sprintf("%v", t.TelcoName))
	builder.WriteString(", code=")
	builder.WriteString(t.Code)
	builder.WriteString(", serial=")
	builder.WriteString(t.Serial)
	builder.WriteString(", amount=")
	builder.WriteString(fmt.Sprintf("%v", t.Amount))
	builder.WriteString(", used=")
	builder.WriteString(fmt.Sprintf("%v", t.Used))
	builder.WriteString(", created_at=")
	builder.WriteString(t.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(t.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", created_by=")
	builder.WriteString(t.CreatedBy)
	builder.WriteString(", updated_by=")
	builder.WriteString(t.UpdatedBy)
	builder.WriteByte(')')
	return builder.String()
}

// Telcos is a parsable slice of Telco.
type Telcos []*Telco

func (t Telcos) config(cfg config) {
	for _i := range t {
		t[_i].config = cfg
	}
}
